(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["flatworld"] = factory();
	else
		root["flatworld"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _core = __webpack_require__(2);
	
	var core = _interopRequireWildcard(_core);
	
	var _extensions = __webpack_require__(206);
	
	var _extensions2 = _interopRequireDefault(_extensions);
	
	var _UIs = __webpack_require__(225);
	
	var UIModule = _interopRequireWildcard(_UIs);
	
	var _Preload = __webpack_require__(251);
	
	var preloading = _interopRequireWildcard(_Preload);
	
	var _hexaFactory = __webpack_require__(252);
	
	var hexaFactory = _interopRequireWildcard(_hexaFactory);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var UIs = UIModule.UIs;
	
	var toBeExported = core;
	toBeExported.extensions = _extensions2.default;
	toBeExported.UIs = UIs;
	toBeExported.preloading = preloading;
	toBeExported.factories = hexaFactory;
	
	module.exports = toBeExported;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.UIStates = exports.UI = exports.Sound = exports.objects = exports.ObjectManager = exports.mapStates = exports.mapLayers = exports.mapEvents = exports.MapDataManipulator = exports.log = exports.Flatworld = exports.eventListeners = exports.constants = exports.utils = undefined;
	
	var _utils = __webpack_require__(3);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _constants = __webpack_require__(190);
	
	var _constants2 = _interopRequireDefault(_constants);
	
	var _eventlisteners = __webpack_require__(191);
	
	var _eventlisteners2 = _interopRequireDefault(_eventlisteners);
	
	var _Flatworld = __webpack_require__(192);
	
	var _Flatworld2 = _interopRequireDefault(_Flatworld);
	
	var _log = __webpack_require__(193);
	
	var _log2 = _interopRequireDefault(_log);
	
	var _MapDataManipulator = __webpack_require__(195);
	
	var _MapDataManipulator2 = _interopRequireDefault(_MapDataManipulator);
	
	var _mapEvents = __webpack_require__(196);
	
	var _mapEvents2 = _interopRequireDefault(_mapEvents);
	
	var _MapLayers = __webpack_require__(197);
	
	var _MapLayers2 = _interopRequireDefault(_MapLayers);
	
	var _mapStates = __webpack_require__(198);
	
	var _mapStates2 = _interopRequireDefault(_mapStates);
	
	var _ObjectManager = __webpack_require__(200);
	
	var _ObjectManager2 = _interopRequireDefault(_ObjectManager);
	
	var _Objects = __webpack_require__(201);
	
	var _Objects2 = _interopRequireDefault(_Objects);
	
	var _Sound = __webpack_require__(202);
	
	var _Sound2 = _interopRequireDefault(_Sound);
	
	var _UI = __webpack_require__(204);
	
	var _UI2 = _interopRequireDefault(_UI);
	
	var _UIStates = __webpack_require__(205);
	
	var _UIStates2 = _interopRequireDefault(_UIStates);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.utils = _utils2.default;
	exports.constants = _constants2.default;
	exports.eventListeners = _eventlisteners2.default;
	exports.Flatworld = _Flatworld2.default;
	exports.log = _log2.default;
	exports.MapDataManipulator = _MapDataManipulator2.default;
	exports.mapEvents = _mapEvents2.default;
	exports.mapLayers = _MapLayers2.default;
	exports.mapStates = _mapStates2.default;
	exports.ObjectManager = _ObjectManager2.default;
	exports.objects = _Objects2.default;
	exports.Sound = _Sound2.default;
	exports.UI = _UI2.default;
	exports.UIStates = _UIStates2.default;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _dataManipulation = __webpack_require__(4);
	
	var _dataManipulation2 = _interopRequireDefault(_dataManipulation);
	
	var _effects = __webpack_require__(5);
	
	var _effects2 = _interopRequireDefault(_effects);
	
	var _environment = __webpack_require__(6);
	
	var _environment2 = _interopRequireDefault(_environment);
	
	var _general = __webpack_require__(7);
	
	var _general2 = _interopRequireDefault(_general);
	
	var _mouse = __webpack_require__(8);
	
	var _mouse2 = _interopRequireDefault(_mouse);
	
	var _polyfills = __webpack_require__(187);
	
	var _polyfills2 = _interopRequireDefault(_polyfills);
	
	var _resize = __webpack_require__(188);
	
	var _resize2 = _interopRequireDefault(_resize);
	
	var _shapes = __webpack_require__(189);
	
	var _shapes2 = _interopRequireDefault(_shapes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	  dataManipulation: _dataManipulation2.default,
	  effects: _effects2.default,
	  environment: _environment2.default,
	  general: _general2.default,
	  mouse: _mouse2.default,
	  polyfills: _polyfills2.default,
	  resize: _resize2.default,
	  shapes: _shapes2.default
	};
	module.exports = exports['default'];

/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/*---------------------
	-------- PUBLIC -------
	----------------------*/
	/**
	 * These are utils for manipulating the data, that our classes and functions use.
	 *
	 * @class utils.dataManipulation
	 * @return {Object}      mapObjectsToArray, flattenArrayBy1Level
	 */
	
	/**
	 * Changes the data from e.g. getting objects from the map based on coordinate. The data is like this normally:
	 * {
	 *   units: [{
	 *     {... the objects datas ...}
	 *   }]
	 * }
	 * We change it to this:
	 * [
	 *   [{
	 *     {... the objects datas ...}
	 *   }]
	 * ]
	 *
	 * @method mapObjectsToArray
	 * @param  {Object} objects       Object that holds objects
	 * @return {Array}                Returns the transformed array
	 */
	function mapObjectsToArray(objects) {
	  return Object.keys(objects).map(function (objGroup) {
	    return objects[objGroup];
	  });
	}
	/**
	 * @method flattenArrayBy1Level
	 * @param  {Array} objects
	 */
	function flattenArrayBy1Level(objects) {
	  var merged = [];
	
	  return merged.concat.apply(merged, objects);
	}
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = {
	  mapObjectsToArray: mapObjectsToArray,
	  flattenArrayBy1Level: flattenArrayBy1Level
	};
	module.exports = exports["default"];

/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/*---------------------
	-------- PUBLIC -------
	----------------------*/
	/**
	 * This module will hold the most common graphical effects used in the map. It is still very stub as the development
	 * hasn't proceeded to this stage yet.
	 *
	 * @class utils.effects
	 * @return {Object}      init, _startDragListener
	 */
	
	/**
	 * @method dropShadow
	 * @param  {Object} options
	 */
	function dropShadow() /*options = { color: '#000000', distance: 5, alpha: 0.5, amg√∂e: 45, blur: 5 }*/{}
	/*
	var shadow  = new PIXI.filters.DropShadowFilter();
	  shadow.color  = options.color;
	shadow.distance = options.distance;
	shadow.alpha  = options.alpha;
	shadow.angle  = options.angle;
	shadow.blur   = options.blur;
	  this.filters = [shadow];
	*/
	
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = {
	    dropShadow: dropShadow
	};
	module.exports = exports["default"];

/***/ },
/* 6 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * @class utils.environment
	 * @return {Object}      getPixelRatio
	 */
	
	/**
	 * @method getPixelRatio
	 * @requires Canvas element in the DOM. This needs to be found
	 * @param  {HTMLElement} canvasElement       HTML canvas element
	 * @return {Number}
	 */
	function getPixelRatio(canvasElement) {
	  var DPR = window.devicePixelRatio || 1;
	  var ctx = canvasElement && canvasElement.getContext('2d') || document.createElement('canvas').getContext('2d');
	  var bsr = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;
	
	  return DPR / bsr;
	}
	
	/**
	 * Detects wether webGL is supported or not
	 *
	 * @author alteredq / http://alteredqualia.com/
	 * @author author mr.doob / http://mrdoob.com/
	 * From three.js: https://github.com/mrdoob/three.js/blob/master/examples/js/Detector.js
	 */
	function isWebglSupported() {
	  try {
	    var canvas = document.createElement('canvas');
	
	    return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
	  } catch (e) {
	    return false;
	  }
	}
	
	/**
	 * Detect if device supports touch events
	 *
	 * @method isMobile
	 * @return {Boolean}
	 */
	function isTouchDevice() {
	  if ('ontouchstart' in document.documentElement) {
	    return true;
	  } else {
	    return false;
	  }
	}
	
	/**
	 * Detect mobile environment
	 *
	 * @method isMobile
	 * @return {Boolean}
	 */
	function isMobile() {
	  var screenSize = screen.width <= 640 || window.matchMedia && window.matchMedia('only screen and (max-width: 640px)').matches;
	  var features = 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
	
	  return features && screenSize;
	}
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = {
	  getPixelRatio: getPixelRatio,
	  isWebglSupported: isWebglSupported,
	  isTouchDevice: isTouchDevice,
	  isMobile: isMobile
	};
	module.exports = exports['default'];

/***/ },
/* 7 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	/**
	 * @class utils.general
	 * @return {Object}      pixelEpsilonEquality
	 */
	var PIXEL_EPSILON = 0.01;
	
	/**
	 * @method epsilonEquality
	 * @param  {Number} x
	 * @param  {Number} y
	 */
	function epsilonEquality(x, y) {
	  return Math.abs(x) - Math.abs(y) < PIXEL_EPSILON;
	}
	
	/**
	 * Helper for creating required parameters
	 *
	 * @param {String} className Name of the function / class used
	 * @param {String} paramName Name of the parameter that is required
	 */
	function requireParameter(className, paramName) {
	  throw new Error("Function '" + className + "' requires parameter " + paramName);
	}
	
	/**
	 * Flattern 2 levels deep, 2-dimensional arrays. Credits: http://stackoverflow.com/a/15030117/1523545
	 *
	 * @method flatten2Levels
	 * @param  {Array} arr        Array to flatten
	 * @return {Array}            Flattened array
	 */
	function flatten2Levels(arr) {
	  var _ref;
	
	  return (_ref = []).concat.apply(_ref, _toConsumableArray(arr)).filter(function (n) {
	    return n != undefined;
	  }); // eslint-disable-line eqeqeq
	}
	/**
	 * This function takes an array and slices it to proper chunks.
	 *
	 * @method chunkArray
	 * @param {Array} array             The array to be chunked
	 * @param {Integer} chunksize       size of the chunks
	 * from: http://stackoverflow.com/a/34847417/1523545
	 */
	function chunkArray(array, chunkSize) {
	  var result = [];
	
	  for (var i = 0; i < array.length; i += chunkSize) {
	    result.push(array.slice(i, chunkSize + i));
	  }
	
	  return result;
	}
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = {
	  pixelEpsilonEquality: epsilonEquality,
	  requireParameter: requireParameter,
	  flatten2Levels: flatten2Levels,
	  chunkArray: chunkArray
	};
	module.exports = exports["default"];

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _pixi = __webpack_require__(9);
	
	var PIXI = _interopRequireWildcard(_pixi);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	/**
	 * @class utils.mouse
	 * @return {Object}      isRightClick, eventData.getPointerCoords, eventData.getHAMMERPointerCoords, eventMouseCoords
	 */
	
	/**
	 * Detects if the mouse click has been the right mouse button
	 *
	 * @method isRightClick
	 * @param {Event} e   The event where the click occured
	 */
	function isRightClick(e) {
	  return e.which === 3;
	}
	/**
	 * Disabled the right click (or something else in mobile) context menu from appearing
	 */
	function disableContextMenu(canvas) {
	  canvas.addEventListener('contextmenu', function (e) {
	    e.preventDefault();
	  });
	}
	/**
	 * @method getPointerCoords
	 * @param  {Event} e    Event object
	 * @return {Object}
	 */
	function getPointerCoords(e) {
	  return new PIXI.Point(e.offsetX, e.offsetY);
	}
	/**
	 * @method getHAMMERPointerCoords
	 * @param  {Event} e    Event object
	 * @return {Object}
	 */
	function getHAMMERPointerCoords(e) {
	  // We need to remove the element position on the page from the center coordinates.
	  var position = e.target.getBoundingClientRect();
	
	  return new PIXI.Point(e.center.x - position.left, e.center.y - position.top);
	}
	
	function getGlobalCoordinates(e, isSupportedTouch) {
	  return isSupportedTouch ? getHAMMERPointerCoords(e) : getPointerCoords(e);
	}
	/**
	 * Transform coordinates that are in the window to become relative with the given element
	 *
	 * @param  {[type]} coordinates [description]
	 * @param  {[type]} element     [description]
	 * @return {[type]}             [description]
	 */
	function coordinatesFromGlobalToRelative(coordinates, element) {
	  var elementPosition = getElementPositionInWindow(element);
	
	  return {
	    x: coordinates.x - elementPosition.x,
	    y: coordinates.y - elementPosition.y
	  };
	}
	/**
	 * Gets given elements position relative to window
	 *
	 * @param  {[type]} el [description]
	 * @return {[type]}    [description]
	 */
	function getElementPositionInWindow(el) {
	  var xPos = 0;
	  var yPos = 0;
	
	  while (el) {
	    if (el.tagName.toLowerCase() === 'body') {
	      // deal with browser quirks with body/window/document and page scroll
	      var xScroll = el.scrollLeft || document.documentElement.scrollLeft;
	      var yScroll = el.scrollTop || document.documentElement.scrollTop;
	
	      xPos += el.offsetLeft - xScroll + el.clientLeft;
	      yPos += el.offsetTop - yScroll + el.clientTop;
	    } else {
	      // for all other non-BODY elements
	      xPos += el.offsetLeft - el.scrollLeft + el.clientLeft;
	      yPos += el.offsetTop - el.scrollTop + el.clientTop;
	    }
	
	    el = el.offsetParent;
	  }
	  return {
	    x: xPos,
	    y: yPos
	  };
	}
	
	/**
	 * @method eventMouseCoords
	 * @param  {Event} e    Event object
	 * @return {Object}
	 */
	function eventMouseCoords(e) {
	  var pos = {
	    x: 0,
	    y: 0
	  };
	
	  if (!e) {
	    e = window.event;
	  }
	  if (e.pageX || e.pageY) {
	    pos.x = e.pageX;
	    pos.y = e.pageY;
	  } else if (e.clientX || e.clientY) {
	    pos.x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
	    pos.y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
	  }
	  // posx and posy contain the mouse position relative to the document
	  // Do something with this information
	  return pos;
	}
	
	/**
	 * Deactivate the selection of text, by dragging
	 *
	 * @method toggleMouseTextSelection
	 */
	function toggleMouseTextSelection() {
	  var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.getElementsByTagName('body')[0];
	
	  element.style.webkitTouchCallout = 'none';
	  element.style.webkitUserSelect = 'none';
	  element.style.khtmlUserSelect = 'none';
	  element.style.mozUserSelect = 'none';
	  element.style.msUserSelect = 'none';
	  element.style.userSelect = 'none';
	}
	
	exports.default = {
	  isRightClick: isRightClick,
	  disableContextMenu: disableContextMenu,
	  eventData: {
	    getPointerCoords: getPointerCoords,
	    getHAMMERPointerCoords: getHAMMERPointerCoords,
	    getGlobalCoordinates: getGlobalCoordinates
	  },
	  coordinatesFromGlobalToRelative: coordinatesFromGlobalToRelative,
	  eventMouseCoords: eventMouseCoords,
	  toggleMouseTextSelection: toggleMouseTextSelection
	};
	module.exports = exports['default'];

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	exports.__esModule = true;
	exports.loader = exports.prepare = exports.particles = exports.mesh = exports.loaders = exports.interaction = exports.filters = exports.extras = exports.extract = exports.accessibility = undefined;
	
	var _deprecation = __webpack_require__(10);
	
	Object.keys(_deprecation).forEach(function (key) {
	    if (key === "default" || key === "__esModule") return;
	    Object.defineProperty(exports, key, {
	        enumerable: true,
	        get: function get() {
	            return _deprecation[key];
	        }
	    });
	});
	
	var _core = __webpack_require__(11);
	
	Object.keys(_core).forEach(function (key) {
	    if (key === "default" || key === "__esModule") return;
	    Object.defineProperty(exports, key, {
	        enumerable: true,
	        get: function get() {
	            return _core[key];
	        }
	    });
	});
	
	__webpack_require__(158);
	
	var _accessibility = __webpack_require__(163);
	
	var accessibility = _interopRequireWildcard(_accessibility);
	
	var _extract = __webpack_require__(166);
	
	var extract = _interopRequireWildcard(_extract);
	
	var _extras = __webpack_require__(131);
	
	var extras = _interopRequireWildcard(_extras);
	
	var _filters = __webpack_require__(140);
	
	var filters = _interopRequireWildcard(_filters);
	
	var _interaction = __webpack_require__(169);
	
	var interaction = _interopRequireWildcard(_interaction);
	
	var _loaders = __webpack_require__(174);
	
	var loaders = _interopRequireWildcard(_loaders);
	
	var _mesh = __webpack_require__(119);
	
	var mesh = _interopRequireWildcard(_mesh);
	
	var _particles = __webpack_require__(126);
	
	var particles = _interopRequireWildcard(_particles);
	
	var _prepare = __webpack_require__(152);
	
	var prepare = _interopRequireWildcard(_prepare);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	// import polyfills
	exports.accessibility = accessibility;
	exports.extract = extract;
	exports.extras = extras;
	exports.filters = filters;
	exports.interaction = interaction;
	exports.loaders = loaders;
	exports.mesh = mesh;
	exports.particles = particles;
	exports.prepare = prepare;
	
	/**
	 * A premade instance of the loader that can be used to load resources.
	 *
	 * @name loader
	 * @memberof PIXI
	 * @property {PIXI.loaders.Loader}
	 */
	
	
	// export libs
	
	
	// export core
	
	var loader = loaders && loaders.Loader ? new loaders.Loader() : null; // check is there in case user excludes loader lib
	
	exports.loader = loader;
	
	// Always export pixi globally.
	
	global.PIXI = exports; // eslint-disable-line
	//# sourceMappingURL=index.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _mesh = __webpack_require__(119);
	
	var mesh = _interopRequireWildcard(_mesh);
	
	var _particles = __webpack_require__(126);
	
	var particles = _interopRequireWildcard(_particles);
	
	var _extras = __webpack_require__(131);
	
	var extras = _interopRequireWildcard(_extras);
	
	var _filters = __webpack_require__(140);
	
	var filters = _interopRequireWildcard(_filters);
	
	var _prepare = __webpack_require__(152);
	
	var prepare = _interopRequireWildcard(_prepare);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	// provide method to give a stack track for warnings
	// useful for tracking-down where deprecated methods/properties/classes
	// are being used within the code
	function warn(msg) {
	    // @if DEBUG
	    /* eslint-disable no-console */
	    var stack = new Error().stack;
	
	    // Handle IE < 10 and Safari < 6
	    if (typeof stack === 'undefined') {
	        console.warn('Deprecation Warning: ', msg);
	    } else {
	        // chop off the stack trace which includes pixi.js internal calls
	        stack = stack.split('\n').splice(3).join('\n');
	
	        if (console.groupCollapsed) {
	            console.groupCollapsed('%cDeprecation Warning: %c%s', 'color:#614108;background:#fffbe6', 'font-weight:normal;color:#614108;background:#fffbe6', msg);
	            console.warn(stack);
	            console.groupEnd();
	        } else {
	            console.warn('Deprecation Warning: ', msg);
	            console.warn(stack);
	        }
	    }
	    /* eslint-enable no-console */
	    // @endif
	}
	
	/**
	 * @class
	 * @private
	 * @name SpriteBatch
	 * @memberof PIXI
	 * @see PIXI.ParticleContainer
	 * @throws {ReferenceError} SpriteBatch does not exist any more, please use the new ParticleContainer instead.
	 * @deprecated since version 3.0.0
	 */
	core.SpriteBatch = function () {
	    throw new ReferenceError('SpriteBatch does not exist any more, please use the new ParticleContainer instead.');
	};
	
	/**
	 * @class
	 * @private
	 * @name AssetLoader
	 * @memberof PIXI
	 * @see PIXI.loaders.Loader
	 * @throws {ReferenceError} The loader system was overhauled in pixi v3, please see the new PIXI.loaders.Loader class.
	 * @deprecated since version 3.0.0
	 */
	core.AssetLoader = function () {
	    throw new ReferenceError('The loader system was overhauled in pixi v3, please see the new PIXI.loaders.Loader class.');
	};
	
	Object.defineProperties(core, {
	
	    /**
	     * @class
	     * @private
	     * @name Stage
	     * @memberof PIXI
	     * @see PIXI.Container
	     * @deprecated since version 3.0.0
	     */
	    Stage: {
	        enumerable: true,
	        get: function get() {
	            warn('You do not need to use a PIXI Stage any more, you can simply render any container.');
	
	            return core.Container;
	        }
	    },
	
	    /**
	     * @class
	     * @private
	     * @name DisplayObjectContainer
	     * @memberof PIXI
	     * @see PIXI.Container
	     * @deprecated since version 3.0.0
	     */
	    DisplayObjectContainer: {
	        enumerable: true,
	        get: function get() {
	            warn('DisplayObjectContainer has been shortened to Container, please use Container from now on.');
	
	            return core.Container;
	        }
	    },
	
	    /**
	     * @class
	     * @private
	     * @name Strip
	     * @memberof PIXI
	     * @see PIXI.mesh.Mesh
	     * @deprecated since version 3.0.0
	     */
	    Strip: {
	        enumerable: true,
	        get: function get() {
	            warn('The Strip class has been renamed to Mesh and moved to mesh.Mesh, please use mesh.Mesh from now on.');
	
	            return mesh.Mesh;
	        }
	    },
	
	    /**
	     * @class
	     * @private
	     * @name Rope
	     * @memberof PIXI
	     * @see PIXI.mesh.Rope
	     * @deprecated since version 3.0.0
	     */
	    Rope: {
	        enumerable: true,
	        get: function get() {
	            warn('The Rope class has been moved to mesh.Rope, please use mesh.Rope from now on.');
	
	            return mesh.Rope;
	        }
	    },
	
	    /**
	     * @class
	     * @private
	     * @name ParticleContainer
	     * @memberof PIXI
	     * @see PIXI.particles.ParticleContainer
	     * @deprecated since version 4.0.0
	     */
	    ParticleContainer: {
	        enumerable: true,
	        get: function get() {
	            warn('The ParticleContainer class has been moved to particles.ParticleContainer, ' + 'please use particles.ParticleContainer from now on.');
	
	            return particles.ParticleContainer;
	        }
	    },
	
	    /**
	     * @class
	     * @private
	     * @name MovieClip
	     * @memberof PIXI
	     * @see PIXI.extras.MovieClip
	     * @deprecated since version 3.0.0
	     */
	    MovieClip: {
	        enumerable: true,
	        get: function get() {
	            warn('The MovieClip class has been moved to extras.AnimatedSprite, please use extras.AnimatedSprite.');
	
	            return extras.AnimatedSprite;
	        }
	    },
	
	    /**
	     * @class
	     * @private
	     * @name TilingSprite
	     * @memberof PIXI
	     * @see PIXI.extras.TilingSprite
	     * @deprecated since version 3.0.0
	     */
	    TilingSprite: {
	        enumerable: true,
	        get: function get() {
	            warn('The TilingSprite class has been moved to extras.TilingSprite, ' + 'please use extras.TilingSprite from now on.');
	
	            return extras.TilingSprite;
	        }
	    },
	
	    /**
	     * @class
	     * @private
	     * @name BitmapText
	     * @memberof PIXI
	     * @see PIXI.extras.BitmapText
	     * @deprecated since version 3.0.0
	     */
	    BitmapText: {
	        enumerable: true,
	        get: function get() {
	            warn('The BitmapText class has been moved to extras.BitmapText, ' + 'please use extras.BitmapText from now on.');
	
	            return extras.BitmapText;
	        }
	    },
	
	    /**
	     * @class
	     * @private
	     * @name blendModes
	     * @memberof PIXI
	     * @see PIXI.BLEND_MODES
	     * @deprecated since version 3.0.0
	     */
	    blendModes: {
	        enumerable: true,
	        get: function get() {
	            warn('The blendModes has been moved to BLEND_MODES, please use BLEND_MODES from now on.');
	
	            return core.BLEND_MODES;
	        }
	    },
	
	    /**
	     * @class
	     * @private
	     * @name scaleModes
	     * @memberof PIXI
	     * @see PIXI.SCALE_MODES
	     * @deprecated since version 3.0.0
	     */
	    scaleModes: {
	        enumerable: true,
	        get: function get() {
	            warn('The scaleModes has been moved to SCALE_MODES, please use SCALE_MODES from now on.');
	
	            return core.SCALE_MODES;
	        }
	    },
	
	    /**
	     * @class
	     * @private
	     * @name BaseTextureCache
	     * @memberof PIXI
	     * @see PIXI.utils.BaseTextureCache
	     * @deprecated since version 3.0.0
	     */
	    BaseTextureCache: {
	        enumerable: true,
	        get: function get() {
	            warn('The BaseTextureCache class has been moved to utils.BaseTextureCache, ' + 'please use utils.BaseTextureCache from now on.');
	
	            return core.utils.BaseTextureCache;
	        }
	    },
	
	    /**
	     * @class
	     * @private
	     * @name TextureCache
	     * @memberof PIXI
	     * @see PIXI.utils.TextureCache
	     * @deprecated since version 3.0.0
	     */
	    TextureCache: {
	        enumerable: true,
	        get: function get() {
	            warn('The TextureCache class has been moved to utils.TextureCache, ' + 'please use utils.TextureCache from now on.');
	
	            return core.utils.TextureCache;
	        }
	    },
	
	    /**
	     * @namespace
	     * @private
	     * @name math
	     * @memberof PIXI
	     * @see PIXI
	     * @deprecated since version 3.0.6
	     */
	    math: {
	        enumerable: true,
	        get: function get() {
	            warn('The math namespace is deprecated, please access members already accessible on PIXI.');
	
	            return core;
	        }
	    },
	
	    /**
	     * @class
	     * @private
	     * @name PIXI.AbstractFilter
	     * @see PIXI.Filter
	     * @deprecated since version 3.0.6
	     */
	    AbstractFilter: {
	        enumerable: true,
	        get: function get() {
	            warn('AstractFilter has been renamed to Filter, please use PIXI.Filter');
	
	            return core.Filter;
	        }
	    },
	
	    /**
	     * @class
	     * @private
	     * @name PIXI.TransformManual
	     * @see PIXI.TransformBase
	     * @deprecated since version 4.0.0
	     */
	    TransformManual: {
	        enumerable: true,
	        get: function get() {
	            warn('TransformManual has been renamed to TransformBase, please update your pixi-spine');
	
	            return core.TransformBase;
	        }
	    },
	
	    /**
	     * @static
	     * @constant
	     * @name PIXI.TARGET_FPMS
	     * @see PIXI.settings.TARGET_FPMS
	     * @deprecated since version 4.2.0
	     */
	    TARGET_FPMS: {
	        enumerable: true,
	        get: function get() {
	            warn('PIXI.TARGET_FPMS has been deprecated, please use PIXI.settings.TARGET_FPMS');
	
	            return core.settings.TARGET_FPMS;
	        },
	        set: function set(value) {
	            warn('PIXI.TARGET_FPMS has been deprecated, please use PIXI.settings.TARGET_FPMS');
	
	            core.settings.TARGET_FPMS = value;
	        }
	    },
	
	    /**
	     * @static
	     * @constant
	     * @name PIXI.FILTER_RESOLUTION
	     * @see PIXI.settings.FILTER_RESOLUTION
	     * @deprecated since version 4.2.0
	     */
	    FILTER_RESOLUTION: {
	        enumerable: true,
	        get: function get() {
	            warn('PIXI.FILTER_RESOLUTION has been deprecated, please use PIXI.settings.FILTER_RESOLUTION');
	
	            return core.settings.FILTER_RESOLUTION;
	        },
	        set: function set(value) {
	            warn('PIXI.FILTER_RESOLUTION has been deprecated, please use PIXI.settings.FILTER_RESOLUTION');
	
	            core.settings.FILTER_RESOLUTION = value;
	        }
	    },
	
	    /**
	     * @static
	     * @constant
	     * @name PIXI.RESOLUTION
	     * @see PIXI.settings.RESOLUTION
	     * @deprecated since version 4.2.0
	     */
	    RESOLUTION: {
	        enumerable: true,
	        get: function get() {
	            warn('PIXI.RESOLUTION has been deprecated, please use PIXI.settings.RESOLUTION');
	
	            return core.settings.RESOLUTION;
	        },
	        set: function set(value) {
	            warn('PIXI.RESOLUTION has been deprecated, please use PIXI.settings.RESOLUTION');
	
	            core.settings.RESOLUTION = value;
	        }
	    },
	
	    /**
	     * @static
	     * @constant
	     * @name PIXI.MIPMAP_TEXTURES
	     * @see PIXI.settings.MIPMAP_TEXTURES
	     * @deprecated since version 4.2.0
	     */
	    MIPMAP_TEXTURES: {
	        enumerable: true,
	        get: function get() {
	            warn('PIXI.MIPMAP_TEXTURES has been deprecated, please use PIXI.settings.MIPMAP_TEXTURES');
	
	            return core.settings.MIPMAP_TEXTURES;
	        },
	        set: function set(value) {
	            warn('PIXI.MIPMAP_TEXTURES has been deprecated, please use PIXI.settings.MIPMAP_TEXTURES');
	
	            core.settings.MIPMAP_TEXTURES = value;
	        }
	    },
	
	    /**
	     * @static
	     * @constant
	     * @name PIXI.SPRITE_BATCH_SIZE
	     * @see PIXI.settings.SPRITE_BATCH_SIZE
	     * @deprecated since version 4.2.0
	     */
	    SPRITE_BATCH_SIZE: {
	        enumerable: true,
	        get: function get() {
	            warn('PIXI.SPRITE_BATCH_SIZE has been deprecated, please use PIXI.settings.SPRITE_BATCH_SIZE');
	
	            return core.settings.SPRITE_BATCH_SIZE;
	        },
	        set: function set(value) {
	            warn('PIXI.SPRITE_BATCH_SIZE has been deprecated, please use PIXI.settings.SPRITE_BATCH_SIZE');
	
	            core.settings.SPRITE_BATCH_SIZE = value;
	        }
	    },
	
	    /**
	     * @static
	     * @constant
	     * @name PIXI.SPRITE_MAX_TEXTURES
	     * @see PIXI.settings.SPRITE_MAX_TEXTURES
	     * @deprecated since version 4.2.0
	     */
	    SPRITE_MAX_TEXTURES: {
	        enumerable: true,
	        get: function get() {
	            warn('PIXI.SPRITE_MAX_TEXTURES has been deprecated, please use PIXI.settings.SPRITE_MAX_TEXTURES');
	
	            return core.settings.SPRITE_MAX_TEXTURES;
	        },
	        set: function set(value) {
	            warn('PIXI.SPRITE_MAX_TEXTURES has been deprecated, please use PIXI.settings.SPRITE_MAX_TEXTURES');
	
	            core.settings.SPRITE_MAX_TEXTURES = value;
	        }
	    },
	
	    /**
	     * @static
	     * @constant
	     * @name PIXI.RETINA_PREFIX
	     * @see PIXI.settings.RETINA_PREFIX
	     * @deprecated since version 4.2.0
	     */
	    RETINA_PREFIX: {
	        enumerable: true,
	        get: function get() {
	            warn('PIXI.RETINA_PREFIX has been deprecated, please use PIXI.settings.RETINA_PREFIX');
	
	            return core.settings.RETINA_PREFIX;
	        },
	        set: function set(value) {
	            warn('PIXI.RETINA_PREFIX has been deprecated, please use PIXI.settings.RETINA_PREFIX');
	
	            core.settings.RETINA_PREFIX = value;
	        }
	    },
	
	    /**
	     * @static
	     * @constant
	     * @name PIXI.DEFAULT_RENDER_OPTIONS
	     * @see PIXI.settings.RENDER_OPTIONS
	     * @deprecated since version 4.2.0
	     */
	    DEFAULT_RENDER_OPTIONS: {
	        enumerable: true,
	        get: function get() {
	            warn('PIXI.DEFAULT_RENDER_OPTIONS has been deprecated, please use PIXI.settings.DEFAULT_RENDER_OPTIONS');
	
	            return core.settings.RENDER_OPTIONS;
	        }
	    }
	});
	
	// Move the default properties to settings
	var defaults = [{ parent: 'TRANSFORM_MODE', target: 'TRANSFORM_MODE' }, { parent: 'GC_MODES', target: 'GC_MODE' }, { parent: 'WRAP_MODES', target: 'WRAP_MODE' }, { parent: 'SCALE_MODES', target: 'SCALE_MODE' }, { parent: 'PRECISION', target: 'PRECISION' }];
	
	var _loop = function _loop(i) {
	    var deprecation = defaults[i];
	
	    Object.defineProperty(core[deprecation.parent], 'DEFAULT', {
	        enumerable: true,
	        get: function get() {
	            warn('PIXI.' + deprecation.parent + '.DEFAULT has been deprecated, please use PIXI.settings.' + deprecation.target);
	
	            return core.settings[deprecation.target];
	        },
	        set: function set(value) {
	            warn('PIXI.' + deprecation.parent + '.DEFAULT has been deprecated, please use PIXI.settings.' + deprecation.target);
	
	            core.settings[deprecation.target] = value;
	        }
	    });
	};
	
	for (var i = 0; i < defaults.length; i++) {
	    _loop(i);
	}
	
	Object.defineProperties(extras, {
	
	    /**
	     * @class
	     * @name MovieClip
	     * @memberof PIXI.extras
	     * @see PIXI.extras.AnimatedSprite
	     * @deprecated since version 4.2.0
	     */
	    MovieClip: {
	        enumerable: true,
	        get: function get() {
	            warn('The MovieClip class has been renamed to AnimatedSprite, please use AnimatedSprite from now on.');
	
	            return extras.AnimatedSprite;
	        }
	    }
	});
	
	core.DisplayObject.prototype.generateTexture = function generateTexture(renderer, scaleMode, resolution) {
	    warn('generateTexture has moved to the renderer, please use renderer.generateTexture(displayObject)');
	
	    return renderer.generateTexture(this, scaleMode, resolution);
	};
	
	core.Graphics.prototype.generateTexture = function generateTexture(scaleMode, resolution) {
	    warn('graphics generate texture has moved to the renderer. ' + 'Or to render a graphics to a texture using canvas please use generateCanvasTexture');
	
	    return this.generateCanvasTexture(scaleMode, resolution);
	};
	
	core.RenderTexture.prototype.render = function render(displayObject, matrix, clear, updateTransform) {
	    this.legacyRenderer.render(displayObject, this, clear, matrix, !updateTransform);
	    warn('RenderTexture.render is now deprecated, please use renderer.render(displayObject, renderTexture)');
	};
	
	core.RenderTexture.prototype.getImage = function getImage(target) {
	    warn('RenderTexture.getImage is now deprecated, please use renderer.extract.image(target)');
	
	    return this.legacyRenderer.extract.image(target);
	};
	
	core.RenderTexture.prototype.getBase64 = function getBase64(target) {
	    warn('RenderTexture.getBase64 is now deprecated, please use renderer.extract.base64(target)');
	
	    return this.legacyRenderer.extract.base64(target);
	};
	
	core.RenderTexture.prototype.getCanvas = function getCanvas(target) {
	    warn('RenderTexture.getCanvas is now deprecated, please use renderer.extract.canvas(target)');
	
	    return this.legacyRenderer.extract.canvas(target);
	};
	
	core.RenderTexture.prototype.getPixels = function getPixels(target) {
	    warn('RenderTexture.getPixels is now deprecated, please use renderer.extract.pixels(target)');
	
	    return this.legacyRenderer.pixels(target);
	};
	
	/**
	 * @method
	 * @private
	 * @name PIXI.Sprite#setTexture
	 * @see PIXI.Sprite#texture
	 * @deprecated since version 3.0.0
	 * @param {PIXI.Texture} texture - The texture to set to.
	 */
	core.Sprite.prototype.setTexture = function setTexture(texture) {
	    this.texture = texture;
	    warn('setTexture is now deprecated, please use the texture property, e.g : sprite.texture = texture;');
	};
	
	/**
	 * @method
	 * @name PIXI.extras.BitmapText#setText
	 * @see PIXI.extras.BitmapText#text
	 * @deprecated since version 3.0.0
	 * @param {string} text - The text to set to.
	 */
	extras.BitmapText.prototype.setText = function setText(text) {
	    this.text = text;
	    warn('setText is now deprecated, please use the text property, e.g : myBitmapText.text = \'my text\';');
	};
	
	/**
	 * @method
	 * @name PIXI.Text#setText
	 * @see PIXI.Text#text
	 * @deprecated since version 3.0.0
	 * @param {string} text - The text to set to.
	 */
	core.Text.prototype.setText = function setText(text) {
	    this.text = text;
	    warn('setText is now deprecated, please use the text property, e.g : myText.text = \'my text\';');
	};
	
	/**
	 * @method
	 * @name PIXI.Text#setStyle
	 * @see PIXI.Text#style
	 * @deprecated since version 3.0.0
	 * @param {*} style - The style to set to.
	 */
	core.Text.prototype.setStyle = function setStyle(style) {
	    this.style = style;
	    warn('setStyle is now deprecated, please use the style property, e.g : myText.style = style;');
	};
	
	/**
	 * @method
	 * @name PIXI.Text#determineFontProperties
	 * @see PIXI.Text#calculateFontProperties
	 * @deprecated since version 4.2.0
	 * @private
	 * @param {string} fontStyle - String representing the style of the font
	 * @return {Object} Font properties object
	 */
	core.Text.prototype.determineFontProperties = function determineFontProperties(fontStyle) {
	    warn('determineFontProperties is now deprecated, please use the static calculateFontProperties method, ' + 'e.g : Text.calculateFontProperties(fontStyle);');
	
	    return Text.calculateFontProperties(fontStyle);
	};
	
	Object.defineProperties(core.TextStyle.prototype, {
	    /**
	     * Set all properties of a font as a single string
	     *
	     * @name PIXI.TextStyle#font
	     * @deprecated since version 4.0.0
	     */
	    font: {
	        get: function get() {
	            warn('text style property \'font\' is now deprecated, please use the ' + '\'fontFamily\', \'fontSize\', \'fontStyle\', \'fontVariant\' and \'fontWeight\' properties from now on');
	
	            var fontSizeString = typeof this._fontSize === 'number' ? this._fontSize + 'px' : this._fontSize;
	
	            return this._fontStyle + ' ' + this._fontVariant + ' ' + this._fontWeight + ' ' + fontSizeString + ' ' + this._fontFamily;
	        },
	        set: function set(font) {
	            warn('text style property \'font\' is now deprecated, please use the ' + '\'fontFamily\',\'fontSize\',fontStyle\',\'fontVariant\' and \'fontWeight\' properties from now on');
	
	            // can work out fontStyle from search of whole string
	            if (font.indexOf('italic') > 1) {
	                this._fontStyle = 'italic';
	            } else if (font.indexOf('oblique') > -1) {
	                this._fontStyle = 'oblique';
	            } else {
	                this._fontStyle = 'normal';
	            }
	
	            // can work out fontVariant from search of whole string
	            if (font.indexOf('small-caps') > -1) {
	                this._fontVariant = 'small-caps';
	            } else {
	                this._fontVariant = 'normal';
	            }
	
	            // fontWeight and fontFamily are tricker to find, but it's easier to find the fontSize due to it's units
	            var splits = font.split(' ');
	            var fontSizeIndex = -1;
	
	            this._fontSize = 26;
	            for (var _i = 0; _i < splits.length; ++_i) {
	                if (splits[_i].match(/(px|pt|em|%)/)) {
	                    fontSizeIndex = _i;
	                    this._fontSize = splits[_i];
	                    break;
	                }
	            }
	
	            // we can now search for fontWeight as we know it must occur before the fontSize
	            this._fontWeight = 'normal';
	            for (var _i2 = 0; _i2 < fontSizeIndex; ++_i2) {
	                if (splits[_i2].match(/(bold|bolder|lighter|100|200|300|400|500|600|700|800|900)/)) {
	                    this._fontWeight = splits[_i2];
	                    break;
	                }
	            }
	
	            // and finally join everything together after the fontSize in case the font family has multiple words
	            if (fontSizeIndex > -1 && fontSizeIndex < splits.length - 1) {
	                this._fontFamily = '';
	                for (var _i3 = fontSizeIndex + 1; _i3 < splits.length; ++_i3) {
	                    this._fontFamily += splits[_i3] + ' ';
	                }
	
	                this._fontFamily = this._fontFamily.slice(0, -1);
	            } else {
	                this._fontFamily = 'Arial';
	            }
	
	            this.styleID++;
	        }
	    }
	});
	
	/**
	 * @method
	 * @name PIXI.Texture#setFrame
	 * @see PIXI.Texture#setFrame
	 * @deprecated since version 3.0.0
	 * @param {PIXI.Rectangle} frame - The frame to set.
	 */
	core.Texture.prototype.setFrame = function setFrame(frame) {
	    this.frame = frame;
	    warn('setFrame is now deprecated, please use the frame property, e.g: myTexture.frame = frame;');
	};
	
	Object.defineProperties(filters, {
	
	    /**
	     * @class
	     * @private
	     * @name PIXI.filters.AbstractFilter
	     * @see PIXI.AbstractFilter
	     * @deprecated since version 3.0.6
	     */
	    AbstractFilter: {
	        get: function get() {
	            warn('AstractFilter has been renamed to Filter, please use PIXI.Filter');
	
	            return core.AbstractFilter;
	        }
	    },
	
	    /**
	     * @class
	     * @private
	     * @name PIXI.filters.SpriteMaskFilter
	     * @see PIXI.SpriteMaskFilter
	     * @deprecated since version 3.0.6
	     */
	    SpriteMaskFilter: {
	        get: function get() {
	            warn('filters.SpriteMaskFilter is an undocumented alias, please use SpriteMaskFilter from now on.');
	
	            return core.SpriteMaskFilter;
	        }
	    }
	});
	
	/**
	 * @method
	 * @name PIXI.utils.uuid
	 * @see PIXI.utils.uid
	 * @deprecated since version 3.0.6
	 * @return {number} The uid
	 */
	core.utils.uuid = function () {
	    warn('utils.uuid() is deprecated, please use utils.uid() from now on.');
	
	    return core.utils.uid();
	};
	
	/**
	 * @method
	 * @name PIXI.utils.canUseNewCanvasBlendModes
	 * @see PIXI.CanvasTinter
	 * @deprecated
	 * @return {boolean} Can use blend modes.
	 */
	core.utils.canUseNewCanvasBlendModes = function () {
	    warn('utils.canUseNewCanvasBlendModes() is deprecated, please use CanvasTinter.canUseMultiply from now on');
	
	    return core.CanvasTinter.canUseMultiply;
	};
	
	var saidHello = true;
	
	/**
	 * @name PIXI.utils._saidHello
	 * @type {boolean}
	 * @see PIXI.utils.skipHello
	 * @deprecated since 4.1.0
	 */
	Object.defineProperty(core.utils, '_saidHello', {
	    set: function set(bool) {
	        if (bool) {
	            warn('PIXI.utils._saidHello is deprecated, please use PIXI.utils.skipHello()');
	            this.skipHello();
	        }
	        saidHello = bool;
	    },
	    get: function get() {
	        return saidHello;
	    }
	});
	
	/**
	 * The number of graphics or textures to upload to the GPU.
	 *
	 * @name PIXI.prepare.canvas.UPLOADS_PER_FRAME
	 * @static
	 * @type {number}
	 * @see PIXI.prepare.BasePrepare.limiter
	 * @deprecated since 4.2.0
	 */
	Object.defineProperty(prepare.canvas, 'UPLOADS_PER_FRAME', {
	    set: function set() {
	        warn('PIXI.CanvasPrepare.UPLOADS_PER_FRAME has been removed. Please set ' + 'renderer.plugins.prepare.limiter.maxItemsPerFrame on your renderer');
	        // because we don't have a reference to the renderer, we can't actually set
	        // the uploads per frame, so we'll have to stick with the warning.
	    },
	    get: function get() {
	        warn('PIXI.CanvasPrepare.UPLOADS_PER_FRAME has been removed. Please use ' + 'renderer.plugins.prepare.limiter');
	
	        return NaN;
	    }
	});
	
	/**
	 * The number of graphics or textures to upload to the GPU.
	 *
	 * @name PIXI.prepare.webgl.UPLOADS_PER_FRAME
	 * @static
	 * @type {number}
	 * @see PIXI.prepare.BasePrepare.limiter
	 * @deprecated since 4.2.0
	 */
	Object.defineProperty(prepare.webgl, 'UPLOADS_PER_FRAME', {
	    set: function set() {
	        warn('PIXI.WebGLPrepare.UPLOADS_PER_FRAME has been removed. Please set ' + 'renderer.plugins.prepare.limiter.maxItemsPerFrame on your renderer');
	        // because we don't have a reference to the renderer, we can't actually set
	        // the uploads per frame, so we'll have to stick with the warning.
	    },
	    get: function get() {
	        warn('PIXI.WebGLPrepare.UPLOADS_PER_FRAME has been removed. Please use ' + 'renderer.plugins.prepare.limiter');
	
	        return NaN;
	    }
	});
	//# sourceMappingURL=deprecation.js.map

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Filter = exports.SpriteMaskFilter = exports.Quad = exports.RenderTarget = exports.ObjectRenderer = exports.WebGLManager = exports.Shader = exports.CanvasRenderTarget = exports.TextureUvs = exports.VideoBaseTexture = exports.BaseRenderTexture = exports.RenderTexture = exports.BaseTexture = exports.Texture = exports.CanvasGraphicsRenderer = exports.GraphicsRenderer = exports.GraphicsData = exports.Graphics = exports.TextStyle = exports.Text = exports.SpriteRenderer = exports.CanvasTinter = exports.CanvasSpriteRenderer = exports.Sprite = exports.TransformBase = exports.TransformStatic = exports.Transform = exports.Container = exports.DisplayObject = exports.glCore = exports.WebGLRenderer = exports.CanvasRenderer = exports.ticker = exports.utils = exports.settings = undefined;
	
	var _const = __webpack_require__(12);
	
	Object.keys(_const).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _const[key];
	    }
	  });
	});
	
	var _math = __webpack_require__(14);
	
	Object.keys(_math).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _math[key];
	    }
	  });
	});
	
	var _pixiGlCore = __webpack_require__(24);
	
	Object.defineProperty(exports, 'glCore', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_pixiGlCore).default;
	  }
	});
	
	var _DisplayObject = __webpack_require__(41);
	
	Object.defineProperty(exports, 'DisplayObject', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_DisplayObject).default;
	  }
	});
	
	var _Container = __webpack_require__(50);
	
	Object.defineProperty(exports, 'Container', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Container).default;
	  }
	});
	
	var _Transform = __webpack_require__(48);
	
	Object.defineProperty(exports, 'Transform', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Transform).default;
	  }
	});
	
	var _TransformStatic = __webpack_require__(46);
	
	Object.defineProperty(exports, 'TransformStatic', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_TransformStatic).default;
	  }
	});
	
	var _TransformBase = __webpack_require__(47);
	
	Object.defineProperty(exports, 'TransformBase', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_TransformBase).default;
	  }
	});
	
	var _Sprite = __webpack_require__(53);
	
	Object.defineProperty(exports, 'Sprite', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Sprite).default;
	  }
	});
	
	var _CanvasSpriteRenderer = __webpack_require__(68);
	
	Object.defineProperty(exports, 'CanvasSpriteRenderer', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_CanvasSpriteRenderer).default;
	  }
	});
	
	var _CanvasTinter = __webpack_require__(77);
	
	Object.defineProperty(exports, 'CanvasTinter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_CanvasTinter).default;
	  }
	});
	
	var _SpriteRenderer = __webpack_require__(78);
	
	Object.defineProperty(exports, 'SpriteRenderer', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_SpriteRenderer).default;
	  }
	});
	
	var _Text = __webpack_require__(104);
	
	Object.defineProperty(exports, 'Text', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Text).default;
	  }
	});
	
	var _TextStyle = __webpack_require__(105);
	
	Object.defineProperty(exports, 'TextStyle', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_TextStyle).default;
	  }
	});
	
	var _Graphics = __webpack_require__(106);
	
	Object.defineProperty(exports, 'Graphics', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Graphics).default;
	  }
	});
	
	var _GraphicsData = __webpack_require__(107);
	
	Object.defineProperty(exports, 'GraphicsData', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_GraphicsData).default;
	  }
	});
	
	var _GraphicsRenderer = __webpack_require__(109);
	
	Object.defineProperty(exports, 'GraphicsRenderer', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_GraphicsRenderer).default;
	  }
	});
	
	var _CanvasGraphicsRenderer = __webpack_require__(118);
	
	Object.defineProperty(exports, 'CanvasGraphicsRenderer', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_CanvasGraphicsRenderer).default;
	  }
	});
	
	var _Texture = __webpack_require__(54);
	
	Object.defineProperty(exports, 'Texture', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Texture).default;
	  }
	});
	
	var _BaseTexture = __webpack_require__(55);
	
	Object.defineProperty(exports, 'BaseTexture', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_BaseTexture).default;
	  }
	});
	
	var _RenderTexture = __webpack_require__(71);
	
	Object.defineProperty(exports, 'RenderTexture', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_RenderTexture).default;
	  }
	});
	
	var _BaseRenderTexture = __webpack_require__(72);
	
	Object.defineProperty(exports, 'BaseRenderTexture', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_BaseRenderTexture).default;
	  }
	});
	
	var _VideoBaseTexture = __webpack_require__(64);
	
	Object.defineProperty(exports, 'VideoBaseTexture', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_VideoBaseTexture).default;
	  }
	});
	
	var _TextureUvs = __webpack_require__(67);
	
	Object.defineProperty(exports, 'TextureUvs', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_TextureUvs).default;
	  }
	});
	
	var _CanvasRenderTarget = __webpack_require__(74);
	
	Object.defineProperty(exports, 'CanvasRenderTarget', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_CanvasRenderTarget).default;
	  }
	});
	
	var _Shader = __webpack_require__(93);
	
	Object.defineProperty(exports, 'Shader', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Shader).default;
	  }
	});
	
	var _WebGLManager = __webpack_require__(80);
	
	Object.defineProperty(exports, 'WebGLManager', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_WebGLManager).default;
	  }
	});
	
	var _ObjectRenderer = __webpack_require__(79);
	
	Object.defineProperty(exports, 'ObjectRenderer', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_ObjectRenderer).default;
	  }
	});
	
	var _RenderTarget = __webpack_require__(90);
	
	Object.defineProperty(exports, 'RenderTarget', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_RenderTarget).default;
	  }
	});
	
	var _Quad = __webpack_require__(91);
	
	Object.defineProperty(exports, 'Quad', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Quad).default;
	  }
	});
	
	var _SpriteMaskFilter = __webpack_require__(83);
	
	Object.defineProperty(exports, 'SpriteMaskFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_SpriteMaskFilter).default;
	  }
	});
	
	var _Filter = __webpack_require__(84);
	
	Object.defineProperty(exports, 'Filter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Filter).default;
	  }
	});
	exports.autoDetectRenderer = autoDetectRenderer;
	
	var _utils = __webpack_require__(51);
	
	var utils = _interopRequireWildcard(_utils);
	
	var _ticker = __webpack_require__(65);
	
	var ticker = _interopRequireWildcard(_ticker);
	
	var _settings = __webpack_require__(43);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	var _CanvasRenderer = __webpack_require__(69);
	
	var _CanvasRenderer2 = _interopRequireDefault(_CanvasRenderer);
	
	var _WebGLRenderer = __webpack_require__(81);
	
	var _WebGLRenderer2 = _interopRequireDefault(_WebGLRenderer);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.settings = _settings2.default;
	exports.utils = utils;
	exports.ticker = ticker;
	exports.CanvasRenderer = _CanvasRenderer2.default;
	exports.WebGLRenderer = _WebGLRenderer2.default; /**
	                                                  * @namespace PIXI
	                                                  */
	
	/**
	 * This helper function will automatically detect which renderer you should be using.
	 * WebGL is the preferred renderer as it is a lot faster. If webGL is not supported by
	 * the browser then this function will return a canvas renderer
	 *
	 * @memberof PIXI
	 * @function autoDetectRenderer
	 * @param {number} [width=800] - the width of the renderers view
	 * @param {number} [height=600] - the height of the renderers view
	 * @param {object} [options] - The optional renderer parameters
	 * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional
	 * @param {boolean} [options.transparent=false] - If the render view is transparent, default false
	 * @param {boolean} [options.antialias=false] - sets antialias (only applicable in chrome at the moment)
	 * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation, enable this if you
	 *      need to call toDataUrl on the webgl context
	 * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer, retina would be 2
	 * @param {boolean} [noWebGL=false] - prevents selection of WebGL renderer, even if such is present
	 * @return {PIXI.WebGLRenderer|PIXI.CanvasRenderer} Returns WebGL renderer if available, otherwise CanvasRenderer
	 */
	function autoDetectRenderer() {
	  var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 800;
	  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 600;
	  var options = arguments[2];
	  var noWebGL = arguments[3];
	
	  if (!noWebGL && utils.isWebGLSupported()) {
	    return new _WebGLRenderer2.default(width, height, options);
	  }
	
	  return new _CanvasRenderer2.default(width, height, options);
	}
	//# sourceMappingURL=index.js.map

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.CAN_UPLOAD_SAME_BUFFER = exports.TEXT_GRADIENT = exports.TRANSFORM_MODE = exports.PRECISION = exports.SHAPES = exports.SVG_SIZE = exports.DATA_URI = exports.URL_FILE_EXTENSION = exports.GC_MODES = exports.WRAP_MODES = exports.SCALE_MODES = exports.DRAW_MODES = exports.BLEND_MODES = exports.RENDERER_TYPE = exports.DEG_TO_RAD = exports.RAD_TO_DEG = exports.PI_2 = exports.VERSION = undefined;
	
	var _canUploadSameBuffer = __webpack_require__(13);
	
	var _canUploadSameBuffer2 = _interopRequireDefault(_canUploadSameBuffer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * String of the current PIXI version.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {string}
	 */
	var VERSION = exports.VERSION = '4.2.1';
	
	/**
	 * Two Pi.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {number}
	 */
	var PI_2 = exports.PI_2 = Math.PI * 2;
	
	/**
	 * Conversion factor for converting radians to degrees.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {number}
	 */
	var RAD_TO_DEG = exports.RAD_TO_DEG = 180 / Math.PI;
	
	/**
	 * Conversion factor for converting degrees to radians.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {number}
	 */
	var DEG_TO_RAD = exports.DEG_TO_RAD = Math.PI / 180;
	
	/**
	 * Constant to identify the Renderer Type.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {object}
	 * @property {number} UNKNOWN - Unknown render type.
	 * @property {number} WEBGL - WebGL render type.
	 * @property {number} CANVAS - Canvas render type.
	 */
	var RENDERER_TYPE = exports.RENDERER_TYPE = {
	  UNKNOWN: 0,
	  WEBGL: 1,
	  CANVAS: 2
	};
	
	/**
	 * Various blend modes supported by PIXI.
	 *
	 * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.
	 * Anything else will silently act like NORMAL.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {object}
	 * @property {number} NORMAL
	 * @property {number} ADD
	 * @property {number} MULTIPLY
	 * @property {number} SCREEN
	 * @property {number} OVERLAY
	 * @property {number} DARKEN
	 * @property {number} LIGHTEN
	 * @property {number} COLOR_DODGE
	 * @property {number} COLOR_BURN
	 * @property {number} HARD_LIGHT
	 * @property {number} SOFT_LIGHT
	 * @property {number} DIFFERENCE
	 * @property {number} EXCLUSION
	 * @property {number} HUE
	 * @property {number} SATURATION
	 * @property {number} COLOR
	 * @property {number} LUMINOSITY
	 */
	var BLEND_MODES = exports.BLEND_MODES = {
	  NORMAL: 0,
	  ADD: 1,
	  MULTIPLY: 2,
	  SCREEN: 3,
	  OVERLAY: 4,
	  DARKEN: 5,
	  LIGHTEN: 6,
	  COLOR_DODGE: 7,
	  COLOR_BURN: 8,
	  HARD_LIGHT: 9,
	  SOFT_LIGHT: 10,
	  DIFFERENCE: 11,
	  EXCLUSION: 12,
	  HUE: 13,
	  SATURATION: 14,
	  COLOR: 15,
	  LUMINOSITY: 16
	};
	
	/**
	 * Various webgl draw modes. These can be used to specify which GL drawMode to use
	 * under certain situations and renderers.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {object}
	 * @property {number} POINTS
	 * @property {number} LINES
	 * @property {number} LINE_LOOP
	 * @property {number} LINE_STRIP
	 * @property {number} TRIANGLES
	 * @property {number} TRIANGLE_STRIP
	 * @property {number} TRIANGLE_FAN
	 */
	var DRAW_MODES = exports.DRAW_MODES = {
	  POINTS: 0,
	  LINES: 1,
	  LINE_LOOP: 2,
	  LINE_STRIP: 3,
	  TRIANGLES: 4,
	  TRIANGLE_STRIP: 5,
	  TRIANGLE_FAN: 6
	};
	
	/**
	 * The scale modes that are supported by pixi.
	 *
	 * The PIXI.settings.SCALE_MODE scale mode affects the default scaling mode of future operations.
	 * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {object}
	 * @property {number} LINEAR Smooth scaling
	 * @property {number} NEAREST Pixelating scaling
	 */
	var SCALE_MODES = exports.SCALE_MODES = {
	  LINEAR: 0,
	  NEAREST: 1
	};
	
	/**
	 * The wrap modes that are supported by pixi.
	 *
	 * The PIXI.settings.WRAP_MODE wrap mode affects the default wraping mode of future operations.
	 * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.
	 * If the texture is non power of two then clamp will be used regardless as webGL can
	 * only use REPEAT if the texture is po2.
	 *
	 * This property only affects WebGL.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {object}
	 * @property {number} CLAMP - The textures uvs are clamped
	 * @property {number} REPEAT - The texture uvs tile and repeat
	 * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring
	 */
	var WRAP_MODES = exports.WRAP_MODES = {
	  CLAMP: 0,
	  REPEAT: 1,
	  MIRRORED_REPEAT: 2
	};
	
	/**
	 * The gc modes that are supported by pixi.
	 *
	 * The PIXI.settings.GC_MODE Garbage Collection mode for pixi textures is AUTO
	 * If set to GC_MODE, the renderer will occasianally check textures usage. If they are not
	 * used for a specified period of time they will be removed from the GPU. They will of course
	 * be uploaded again when they are required. This is a silent behind the scenes process that
	 * should ensure that the GPU does not  get filled up.
	 *
	 * Handy for mobile devices!
	 * This property only affects WebGL.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {object}
	 * @property {number} AUTO - Garbage collection will happen periodically automatically
	 * @property {number} MANUAL - Garbage collection will need to be called manually
	 */
	var GC_MODES = exports.GC_MODES = {
	  AUTO: 0,
	  MANUAL: 1
	};
	
	/**
	 * Regexp for image type by extension.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {RegExp|string}
	 * @example `image.png`
	 */
	var URL_FILE_EXTENSION = exports.URL_FILE_EXTENSION = /\.(\w{3,4})(?:$|\?|#)/i;
	
	/**
	 * Regexp for data URI.
	 * Based on: https://github.com/ragingwind/data-uri-regex
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {RegExp|string}
	 * @example `data:image/png;base64`
	 */
	var DATA_URI = exports.DATA_URI = /^\s*data:(?:([\w-]+)\/([\w+.-]+))?(?:;(charset=[\w-]+|base64))?,(.*)/i;
	
	/**
	 * Regexp for SVG size.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {RegExp|string}
	 * @example `<svg width="100" height="100"></svg>`
	 */
	var SVG_SIZE = exports.SVG_SIZE = /<svg[^>]*(?:\s(width|height)=('|")(\d*(?:\.\d+)?)(?:px)?('|"))[^>]*(?:\s(width|height)=('|")(\d*(?:\.\d+)?)(?:px)?('|"))[^>]*>/i; // eslint-disable-line max-len
	
	/**
	 * Constants that identify shapes, mainly to prevent `instanceof` calls.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {object}
	 * @property {number} POLY
	 * @property {number} RECT
	 * @property {number} CIRC
	 * @property {number} ELIP
	 * @property {number} RREC
	 */
	var SHAPES = exports.SHAPES = {
	  POLY: 0,
	  RECT: 1,
	  CIRC: 2,
	  ELIP: 3,
	  RREC: 4
	};
	
	/**
	 * Constants that specify float precision in shaders.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {object}
	 * @property {string} LOW='lowp'
	 * @property {string} MEDIUM='mediump'
	 * @property {string} HIGH='highp'
	 */
	var PRECISION = exports.PRECISION = {
	  LOW: 'lowp',
	  MEDIUM: 'mediump',
	  HIGH: 'highp'
	};
	
	/**
	 * Constants that specify the transform type.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {object}
	 * @property {number} STATIC
	 * @property {number} DYNAMIC
	 */
	var TRANSFORM_MODE = exports.TRANSFORM_MODE = {
	  STATIC: 0,
	  DYNAMIC: 1
	};
	
	/**
	 * Constants that define the type of gradient on text.
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {object}
	 * @property {number} LINEAR_VERTICAL
	 * @property {number} LINEAR_HORIZONTAL
	 */
	var TEXT_GRADIENT = exports.TEXT_GRADIENT = {
	  LINEAR_VERTICAL: 0,
	  LINEAR_HORIZONTAL: 1
	};
	
	// TODO: maybe change to SPRITE.BATCH_SIZE: 2000
	// TODO: maybe add PARTICLE.BATCH_SIZE: 15000
	
	/**
	 * Can we upload the same buffer in a single frame?
	 *
	 * @static
	 * @constant
	 * @memberof PIXI
	 * @type {boolean}
	 */
	var CAN_UPLOAD_SAME_BUFFER = exports.CAN_UPLOAD_SAME_BUFFER = (0, _canUploadSameBuffer2.default)();
	//# sourceMappingURL=const.js.map

/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = canUploadSameBuffer;
	function canUploadSameBuffer() {
		// Uploading the same buffer multiple times in a single frame can cause perf issues.
		// Apparent on IOS so only check for that at the moment
		// this check may become more complex if this issue pops up elsewhere.
		var ios = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
	
		return !ios;
	}
	//# sourceMappingURL=canUploadSameBuffer.js.map

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _Point = __webpack_require__(15);
	
	Object.defineProperty(exports, 'Point', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Point).default;
	  }
	});
	
	var _ObservablePoint = __webpack_require__(16);
	
	Object.defineProperty(exports, 'ObservablePoint', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_ObservablePoint).default;
	  }
	});
	
	var _Matrix = __webpack_require__(17);
	
	Object.defineProperty(exports, 'Matrix', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Matrix).default;
	  }
	});
	
	var _GroupD = __webpack_require__(18);
	
	Object.defineProperty(exports, 'GroupD8', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_GroupD).default;
	  }
	});
	
	var _Circle = __webpack_require__(19);
	
	Object.defineProperty(exports, 'Circle', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Circle).default;
	  }
	});
	
	var _Ellipse = __webpack_require__(21);
	
	Object.defineProperty(exports, 'Ellipse', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Ellipse).default;
	  }
	});
	
	var _Polygon = __webpack_require__(22);
	
	Object.defineProperty(exports, 'Polygon', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Polygon).default;
	  }
	});
	
	var _Rectangle = __webpack_require__(20);
	
	Object.defineProperty(exports, 'Rectangle', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Rectangle).default;
	  }
	});
	
	var _RoundedRectangle = __webpack_require__(23);
	
	Object.defineProperty(exports, 'RoundedRectangle', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_RoundedRectangle).default;
	  }
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	//# sourceMappingURL=index.js.map

/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * The Point object represents a location in a two-dimensional coordinate system, where x represents
	 * the horizontal axis and y represents the vertical axis.
	 *
	 * @class
	 * @memberof PIXI
	 */
	var Point = function () {
	  /**
	   * @param {number} [x=0] - position of the point on the x axis
	   * @param {number} [y=0] - position of the point on the y axis
	   */
	  function Point() {
	    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	    _classCallCheck(this, Point);
	
	    /**
	     * @member {number}
	     * @default 0
	     */
	    this.x = x;
	
	    /**
	     * @member {number}
	     * @default 0
	     */
	    this.y = y;
	  }
	
	  /**
	   * Creates a clone of this point
	   *
	   * @return {PIXI.Point} a copy of the point
	   */
	
	
	  Point.prototype.clone = function clone() {
	    return new Point(this.x, this.y);
	  };
	
	  /**
	   * Copies x and y from the given point
	   *
	   * @param {PIXI.Point} p - The point to copy.
	   */
	
	
	  Point.prototype.copy = function copy(p) {
	    this.set(p.x, p.y);
	  };
	
	  /**
	   * Returns true if the given point is equal to this point
	   *
	   * @param {PIXI.Point} p - The point to check
	   * @returns {boolean} Whether the given point equal to this point
	   */
	
	
	  Point.prototype.equals = function equals(p) {
	    return p.x === this.x && p.y === this.y;
	  };
	
	  /**
	   * Sets the point to a new x and y position.
	   * If y is omitted, both x and y will be set to x.
	   *
	   * @param {number} [x=0] - position of the point on the x axis
	   * @param {number} [y=0] - position of the point on the y axis
	   */
	
	
	  Point.prototype.set = function set(x, y) {
	    this.x = x || 0;
	    this.y = y || (y !== 0 ? this.x : 0);
	  };
	
	  return Point;
	}();
	
	exports.default = Point;
	//# sourceMappingURL=Point.js.map

/***/ },
/* 16 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * The Point object represents a location in a two-dimensional coordinate system, where x represents
	 * the horizontal axis and y represents the vertical axis.
	 * An observable point is a point that triggers a callback when the point's position is changed.
	 *
	 * @class
	 * @memberof PIXI
	 */
	var ObservablePoint = function () {
	    /**
	     * @param {Function} cb - callback when changed
	     * @param {object} scope - owner of callback
	     * @param {number} [x=0] - position of the point on the x axis
	     * @param {number} [y=0] - position of the point on the y axis
	     */
	    function ObservablePoint(cb, scope) {
	        var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	        var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
	
	        _classCallCheck(this, ObservablePoint);
	
	        this._x = x;
	        this._y = y;
	
	        this.cb = cb;
	        this.scope = scope;
	    }
	
	    /**
	     * Sets the point to a new x and y position.
	     * If y is omitted, both x and y will be set to x.
	     *
	     * @param {number} [x=0] - position of the point on the x axis
	     * @param {number} [y=0] - position of the point on the y axis
	     */
	
	
	    ObservablePoint.prototype.set = function set(x, y) {
	        var _x = x || 0;
	        var _y = y || (y !== 0 ? _x : 0);
	
	        if (this._x !== _x || this._y !== _y) {
	            this._x = _x;
	            this._y = _y;
	            this.cb.call(this.scope);
	        }
	    };
	
	    /**
	     * Copies the data from another point
	     *
	     * @param {PIXI.Point|PIXI.ObservablePoint} point - point to copy from
	     */
	
	
	    ObservablePoint.prototype.copy = function copy(point) {
	        if (this._x !== point.x || this._y !== point.y) {
	            this._x = point.x;
	            this._y = point.y;
	            this.cb.call(this.scope);
	        }
	    };
	
	    /**
	     * The position of the displayObject on the x axis relative to the local coordinates of the parent.
	     *
	     * @member {number}
	     * @memberof PIXI.ObservablePoint#
	     */
	
	
	    _createClass(ObservablePoint, [{
	        key: "x",
	        get: function get() {
	            return this._x;
	        }
	
	        /**
	         * Sets the X component.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            if (this._x !== value) {
	                this._x = value;
	                this.cb.call(this.scope);
	            }
	        }
	
	        /**
	         * The position of the displayObject on the x axis relative to the local coordinates of the parent.
	         *
	         * @member {number}
	         * @memberof PIXI.ObservablePoint#
	         */
	
	    }, {
	        key: "y",
	        get: function get() {
	            return this._y;
	        }
	
	        /**
	         * Sets the Y component.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            if (this._y !== value) {
	                this._y = value;
	                this.cb.call(this.scope);
	            }
	        }
	    }]);
	
	    return ObservablePoint;
	}();
	
	exports.default = ObservablePoint;
	//# sourceMappingURL=ObservablePoint.js.map

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Point = __webpack_require__(15);
	
	var _Point2 = _interopRequireDefault(_Point);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * The pixi Matrix class as an object, which makes it a lot faster,
	 * here is a representation of it :
	 * | a | b | tx|
	 * | c | d | ty|
	 * | 0 | 0 | 1 |
	 *
	 * @class
	 * @memberof PIXI
	 */
	var Matrix = function () {
	    /**
	     *
	     */
	    function Matrix() {
	        _classCallCheck(this, Matrix);
	
	        /**
	         * @member {number}
	         * @default 1
	         */
	        this.a = 1;
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.b = 0;
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.c = 0;
	
	        /**
	         * @member {number}
	         * @default 1
	         */
	        this.d = 1;
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.tx = 0;
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.ty = 0;
	
	        this.array = null;
	    }
	
	    /**
	     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:
	     *
	     * a = array[0]
	     * b = array[1]
	     * c = array[3]
	     * d = array[4]
	     * tx = array[2]
	     * ty = array[5]
	     *
	     * @param {number[]} array - The array that the matrix will be populated from.
	     */
	
	
	    Matrix.prototype.fromArray = function fromArray(array) {
	        this.a = array[0];
	        this.b = array[1];
	        this.c = array[3];
	        this.d = array[4];
	        this.tx = array[2];
	        this.ty = array[5];
	    };
	
	    /**
	     * sets the matrix properties
	     *
	     * @param {number} a - Matrix component
	     * @param {number} b - Matrix component
	     * @param {number} c - Matrix component
	     * @param {number} d - Matrix component
	     * @param {number} tx - Matrix component
	     * @param {number} ty - Matrix component
	     *
	     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
	     */
	
	
	    Matrix.prototype.set = function set(a, b, c, d, tx, ty) {
	        this.a = a;
	        this.b = b;
	        this.c = c;
	        this.d = d;
	        this.tx = tx;
	        this.ty = ty;
	
	        return this;
	    };
	
	    /**
	     * Creates an array from the current Matrix object.
	     *
	     * @param {boolean} transpose - Whether we need to transpose the matrix or not
	     * @param {Float32Array} [out=new Float32Array(9)] - If provided the array will be assigned to out
	     * @return {number[]} the newly created array which contains the matrix
	     */
	
	
	    Matrix.prototype.toArray = function toArray(transpose, out) {
	        if (!this.array) {
	            this.array = new Float32Array(9);
	        }
	
	        var array = out || this.array;
	
	        if (transpose) {
	            array[0] = this.a;
	            array[1] = this.b;
	            array[2] = 0;
	            array[3] = this.c;
	            array[4] = this.d;
	            array[5] = 0;
	            array[6] = this.tx;
	            array[7] = this.ty;
	            array[8] = 1;
	        } else {
	            array[0] = this.a;
	            array[1] = this.c;
	            array[2] = this.tx;
	            array[3] = this.b;
	            array[4] = this.d;
	            array[5] = this.ty;
	            array[6] = 0;
	            array[7] = 0;
	            array[8] = 1;
	        }
	
	        return array;
	    };
	
	    /**
	     * Get a new position with the current transformation applied.
	     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)
	     *
	     * @param {PIXI.Point} pos - The origin
	     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)
	     * @return {PIXI.Point} The new point, transformed through this matrix
	     */
	
	
	    Matrix.prototype.apply = function apply(pos, newPos) {
	        newPos = newPos || new _Point2.default();
	
	        var x = pos.x;
	        var y = pos.y;
	
	        newPos.x = this.a * x + this.c * y + this.tx;
	        newPos.y = this.b * x + this.d * y + this.ty;
	
	        return newPos;
	    };
	
	    /**
	     * Get a new position with the inverse of the current transformation applied.
	     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)
	     *
	     * @param {PIXI.Point} pos - The origin
	     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)
	     * @return {PIXI.Point} The new point, inverse-transformed through this matrix
	     */
	
	
	    Matrix.prototype.applyInverse = function applyInverse(pos, newPos) {
	        newPos = newPos || new _Point2.default();
	
	        var id = 1 / (this.a * this.d + this.c * -this.b);
	
	        var x = pos.x;
	        var y = pos.y;
	
	        newPos.x = this.d * id * x + -this.c * id * y + (this.ty * this.c - this.tx * this.d) * id;
	        newPos.y = this.a * id * y + -this.b * id * x + (-this.ty * this.a + this.tx * this.b) * id;
	
	        return newPos;
	    };
	
	    /**
	     * Translates the matrix on the x and y.
	     *
	     * @param {number} x How much to translate x by
	     * @param {number} y How much to translate y by
	     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
	     */
	
	
	    Matrix.prototype.translate = function translate(x, y) {
	        this.tx += x;
	        this.ty += y;
	
	        return this;
	    };
	
	    /**
	     * Applies a scale transformation to the matrix.
	     *
	     * @param {number} x The amount to scale horizontally
	     * @param {number} y The amount to scale vertically
	     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
	     */
	
	
	    Matrix.prototype.scale = function scale(x, y) {
	        this.a *= x;
	        this.d *= y;
	        this.c *= x;
	        this.b *= y;
	        this.tx *= x;
	        this.ty *= y;
	
	        return this;
	    };
	
	    /**
	     * Applies a rotation transformation to the matrix.
	     *
	     * @param {number} angle - The angle in radians.
	     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
	     */
	
	
	    Matrix.prototype.rotate = function rotate(angle) {
	        var cos = Math.cos(angle);
	        var sin = Math.sin(angle);
	
	        var a1 = this.a;
	        var c1 = this.c;
	        var tx1 = this.tx;
	
	        this.a = a1 * cos - this.b * sin;
	        this.b = a1 * sin + this.b * cos;
	        this.c = c1 * cos - this.d * sin;
	        this.d = c1 * sin + this.d * cos;
	        this.tx = tx1 * cos - this.ty * sin;
	        this.ty = tx1 * sin + this.ty * cos;
	
	        return this;
	    };
	
	    /**
	     * Appends the given Matrix to this Matrix.
	     *
	     * @param {PIXI.Matrix} matrix - The matrix to append.
	     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
	     */
	
	
	    Matrix.prototype.append = function append(matrix) {
	        var a1 = this.a;
	        var b1 = this.b;
	        var c1 = this.c;
	        var d1 = this.d;
	
	        this.a = matrix.a * a1 + matrix.b * c1;
	        this.b = matrix.a * b1 + matrix.b * d1;
	        this.c = matrix.c * a1 + matrix.d * c1;
	        this.d = matrix.c * b1 + matrix.d * d1;
	
	        this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;
	        this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;
	
	        return this;
	    };
	
	    /**
	     * Sets the matrix based on all the available properties
	     *
	     * @param {number} x - Position on the x axis
	     * @param {number} y - Position on the y axis
	     * @param {number} pivotX - Pivot on the x axis
	     * @param {number} pivotY - Pivot on the y axis
	     * @param {number} scaleX - Scale on the x axis
	     * @param {number} scaleY - Scale on the y axis
	     * @param {number} rotation - Rotation in radians
	     * @param {number} skewX - Skew on the x axis
	     * @param {number} skewY - Skew on the y axis
	     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
	     */
	
	
	    Matrix.prototype.setTransform = function setTransform(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {
	        var sr = Math.sin(rotation);
	        var cr = Math.cos(rotation);
	        var cy = Math.cos(skewY);
	        var sy = Math.sin(skewY);
	        var nsx = -Math.sin(skewX);
	        var cx = Math.cos(skewX);
	
	        var a = cr * scaleX;
	        var b = sr * scaleX;
	        var c = -sr * scaleY;
	        var d = cr * scaleY;
	
	        this.a = cy * a + sy * c;
	        this.b = cy * b + sy * d;
	        this.c = nsx * a + cx * c;
	        this.d = nsx * b + cx * d;
	
	        this.tx = x + (pivotX * a + pivotY * c);
	        this.ty = y + (pivotX * b + pivotY * d);
	
	        return this;
	    };
	
	    /**
	     * Prepends the given Matrix to this Matrix.
	     *
	     * @param {PIXI.Matrix} matrix - The matrix to prepend
	     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
	     */
	
	
	    Matrix.prototype.prepend = function prepend(matrix) {
	        var tx1 = this.tx;
	
	        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {
	            var a1 = this.a;
	            var c1 = this.c;
	
	            this.a = a1 * matrix.a + this.b * matrix.c;
	            this.b = a1 * matrix.b + this.b * matrix.d;
	            this.c = c1 * matrix.a + this.d * matrix.c;
	            this.d = c1 * matrix.b + this.d * matrix.d;
	        }
	
	        this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;
	        this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;
	
	        return this;
	    };
	
	    /**
	     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.
	     *
	     * @param {PIXI.Transform|PIXI.TransformStatic} transform - The transform to apply the properties to.
	     * @return {PIXI.Transform|PIXI.TransformStatic} The transform with the newly applied properties
	     */
	
	
	    Matrix.prototype.decompose = function decompose(transform) {
	        // sort out rotation / skew..
	        var a = this.a;
	        var b = this.b;
	        var c = this.c;
	        var d = this.d;
	
	        var skewX = Math.atan2(-c, d);
	        var skewY = Math.atan2(b, a);
	
	        var delta = Math.abs(1 - skewX / skewY);
	
	        if (delta < 0.00001) {
	            transform.rotation = skewY;
	
	            if (a < 0 && d >= 0) {
	                transform.rotation += transform.rotation <= 0 ? Math.PI : -Math.PI;
	            }
	
	            transform.skew.x = transform.skew.y = 0;
	        } else {
	            transform.skew.x = skewX;
	            transform.skew.y = skewY;
	        }
	
	        // next set scale
	        transform.scale.x = Math.sqrt(a * a + b * b);
	        transform.scale.y = Math.sqrt(c * c + d * d);
	
	        // next set position
	        transform.position.x = this.tx;
	        transform.position.y = this.ty;
	
	        return transform;
	    };
	
	    /**
	     * Inverts this matrix
	     *
	     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
	     */
	
	
	    Matrix.prototype.invert = function invert() {
	        var a1 = this.a;
	        var b1 = this.b;
	        var c1 = this.c;
	        var d1 = this.d;
	        var tx1 = this.tx;
	        var n = a1 * d1 - b1 * c1;
	
	        this.a = d1 / n;
	        this.b = -b1 / n;
	        this.c = -c1 / n;
	        this.d = a1 / n;
	        this.tx = (c1 * this.ty - d1 * tx1) / n;
	        this.ty = -(a1 * this.ty - b1 * tx1) / n;
	
	        return this;
	    };
	
	    /**
	     * Resets this Matix to an identity (default) matrix.
	     *
	     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
	     */
	
	
	    Matrix.prototype.identity = function identity() {
	        this.a = 1;
	        this.b = 0;
	        this.c = 0;
	        this.d = 1;
	        this.tx = 0;
	        this.ty = 0;
	
	        return this;
	    };
	
	    /**
	     * Creates a new Matrix object with the same values as this one.
	     *
	     * @return {PIXI.Matrix} A copy of this matrix. Good for chaining method calls.
	     */
	
	
	    Matrix.prototype.clone = function clone() {
	        var matrix = new Matrix();
	
	        matrix.a = this.a;
	        matrix.b = this.b;
	        matrix.c = this.c;
	        matrix.d = this.d;
	        matrix.tx = this.tx;
	        matrix.ty = this.ty;
	
	        return matrix;
	    };
	
	    /**
	     * Changes the values of the given matrix to be the same as the ones in this matrix
	     *
	     * @param {PIXI.Matrix} matrix - The matrix to copy from.
	     * @return {PIXI.Matrix} The matrix given in parameter with its values updated.
	     */
	
	
	    Matrix.prototype.copy = function copy(matrix) {
	        matrix.a = this.a;
	        matrix.b = this.b;
	        matrix.c = this.c;
	        matrix.d = this.d;
	        matrix.tx = this.tx;
	        matrix.ty = this.ty;
	
	        return matrix;
	    };
	
	    /**
	     * A default (identity) matrix
	     *
	     * @static
	     * @const
	     */
	
	
	    _createClass(Matrix, null, [{
	        key: 'IDENTITY',
	        get: function get() {
	            return new Matrix();
	        }
	
	        /**
	         * A temp matrix
	         *
	         * @static
	         * @const
	         */
	
	    }, {
	        key: 'TEMP_MATRIX',
	        get: function get() {
	            return new Matrix();
	        }
	    }]);
	
	    return Matrix;
	}();
	
	exports.default = Matrix;
	//# sourceMappingURL=Matrix.js.map

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _Matrix = __webpack_require__(17);
	
	var _Matrix2 = _interopRequireDefault(_Matrix);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1]; // Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group of order 16
	
	var uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];
	var vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];
	var vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];
	var tempMatrices = [];
	
	var mul = [];
	
	function signum(x) {
	    if (x < 0) {
	        return -1;
	    }
	    if (x > 0) {
	        return 1;
	    }
	
	    return 0;
	}
	
	function init() {
	    for (var i = 0; i < 16; i++) {
	        var row = [];
	
	        mul.push(row);
	
	        for (var j = 0; j < 16; j++) {
	            var _ux = signum(ux[i] * ux[j] + vx[i] * uy[j]);
	            var _uy = signum(uy[i] * ux[j] + vy[i] * uy[j]);
	            var _vx = signum(ux[i] * vx[j] + vx[i] * vy[j]);
	            var _vy = signum(uy[i] * vx[j] + vy[i] * vy[j]);
	
	            for (var k = 0; k < 16; k++) {
	                if (ux[k] === _ux && uy[k] === _uy && vx[k] === _vx && vy[k] === _vy) {
	                    row.push(k);
	                    break;
	                }
	            }
	        }
	    }
	
	    for (var _i = 0; _i < 16; _i++) {
	        var mat = new _Matrix2.default();
	
	        mat.set(ux[_i], uy[_i], vx[_i], vy[_i], 0, 0);
	        tempMatrices.push(mat);
	    }
	}
	
	init();
	
	/**
	 * Implements Dihedral Group D_8, see [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html},
	 * D8 is the same but with diagonals. Used for texture rotations.
	 *
	 * Vector xX(i), xY(i) is U-axis of sprite with rotation i
	 * Vector yY(i), yY(i) is V-axis of sprite with rotation i
	 * Rotations: 0 grad (0), 90 grad (2), 180 grad (4), 270 grad (6)
	 * Mirrors: vertical (8), main diagonal (10), horizontal (12), reverse diagonal (14)
	 * This is the small part of gameofbombs.com portal system. It works.
	 *
	 * @author Ivan @ivanpopelyshev
	 *
	 * @namespace PIXI.GroupD8
	 */
	var GroupD8 = {
	    E: 0,
	    SE: 1,
	    S: 2,
	    SW: 3,
	    W: 4,
	    NW: 5,
	    N: 6,
	    NE: 7,
	    MIRROR_VERTICAL: 8,
	    MIRROR_HORIZONTAL: 12,
	    uX: function uX(ind) {
	        return ux[ind];
	    },
	    uY: function uY(ind) {
	        return uy[ind];
	    },
	    vX: function vX(ind) {
	        return vx[ind];
	    },
	    vY: function vY(ind) {
	        return vy[ind];
	    },
	    inv: function inv(rotation) {
	        if (rotation & 8) {
	            return rotation & 15;
	        }
	
	        return -rotation & 7;
	    },
	    add: function add(rotationSecond, rotationFirst) {
	        return mul[rotationSecond][rotationFirst];
	    },
	    sub: function sub(rotationSecond, rotationFirst) {
	        return mul[rotationSecond][GroupD8.inv(rotationFirst)];
	    },
	
	    /**
	     * Adds 180 degrees to rotation. Commutative operation.
	     *
	     * @method
	     * @param {number} rotation - The number to rotate.
	     * @returns {number} rotated number
	     */
	    rotate180: function rotate180(rotation) {
	        return rotation ^ 4;
	    },
	
	    /**
	     * I dont know why sometimes width and heights needs to be swapped. We'll fix it later.
	     *
	     * @param {number} rotation - The number to check.
	     * @returns {boolean} Whether or not the width/height should be swapped.
	     */
	    isSwapWidthHeight: function isSwapWidthHeight(rotation) {
	        return (rotation & 3) === 2;
	    },
	
	    /**
	     * @param {number} dx - TODO
	     * @param {number} dy - TODO
	     *
	     * @return {number} TODO
	     */
	    byDirection: function byDirection(dx, dy) {
	        if (Math.abs(dx) * 2 <= Math.abs(dy)) {
	            if (dy >= 0) {
	                return GroupD8.S;
	            }
	
	            return GroupD8.N;
	        } else if (Math.abs(dy) * 2 <= Math.abs(dx)) {
	            if (dx > 0) {
	                return GroupD8.E;
	            }
	
	            return GroupD8.W;
	        } else if (dy > 0) {
	            if (dx > 0) {
	                return GroupD8.SE;
	            }
	
	            return GroupD8.SW;
	        } else if (dx > 0) {
	            return GroupD8.NE;
	        }
	
	        return GroupD8.NW;
	    },
	
	    /**
	     * Helps sprite to compensate texture packer rotation.
	     *
	     * @param {PIXI.Matrix} matrix - sprite world matrix
	     * @param {number} rotation - The rotation factor to use.
	     * @param {number} tx - sprite anchoring
	     * @param {number} ty - sprite anchoring
	     */
	    matrixAppendRotationInv: function matrixAppendRotationInv(matrix, rotation) {
	        var tx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	        var ty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
	
	        // Packer used "rotation", we use "inv(rotation)"
	        var mat = tempMatrices[GroupD8.inv(rotation)];
	
	        mat.tx = tx;
	        mat.ty = ty;
	        matrix.append(mat);
	    }
	};
	
	exports.default = GroupD8;
	//# sourceMappingURL=GroupD8.js.map

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _Rectangle = __webpack_require__(20);
	
	var _Rectangle2 = _interopRequireDefault(_Rectangle);
	
	var _const = __webpack_require__(12);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * The Circle object can be used to specify a hit area for displayObjects
	 *
	 * @class
	 * @memberof PIXI
	 */
	var Circle = function () {
	  /**
	   * @param {number} [x=0] - The X coordinate of the center of this circle
	   * @param {number} [y=0] - The Y coordinate of the center of this circle
	   * @param {number} [radius=0] - The radius of the circle
	   */
	  function Circle() {
	    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	    var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	
	    _classCallCheck(this, Circle);
	
	    /**
	     * @member {number}
	     * @default 0
	     */
	    this.x = x;
	
	    /**
	     * @member {number}
	     * @default 0
	     */
	    this.y = y;
	
	    /**
	     * @member {number}
	     * @default 0
	     */
	    this.radius = radius;
	
	    /**
	     * The type of the object, mainly used to avoid `instanceof` checks
	     *
	     * @member {number}
	     * @readOnly
	     * @default PIXI.SHAPES.CIRC
	     * @see PIXI.SHAPES
	     */
	    this.type = _const.SHAPES.CIRC;
	  }
	
	  /**
	   * Creates a clone of this Circle instance
	   *
	   * @return {PIXI.Circle} a copy of the Circle
	   */
	
	
	  Circle.prototype.clone = function clone() {
	    return new Circle(this.x, this.y, this.radius);
	  };
	
	  /**
	   * Checks whether the x and y coordinates given are contained within this circle
	   *
	   * @param {number} x - The X coordinate of the point to test
	   * @param {number} y - The Y coordinate of the point to test
	   * @return {boolean} Whether the x/y coordinates are within this Circle
	   */
	
	
	  Circle.prototype.contains = function contains(x, y) {
	    if (this.radius <= 0) {
	      return false;
	    }
	
	    var r2 = this.radius * this.radius;
	    var dx = this.x - x;
	    var dy = this.y - y;
	
	    dx *= dx;
	    dy *= dy;
	
	    return dx + dy <= r2;
	  };
	
	  /**
	  * Returns the framing rectangle of the circle as a Rectangle object
	  *
	  * @return {PIXI.Rectangle} the framing rectangle
	  */
	
	
	  Circle.prototype.getBounds = function getBounds() {
	    return new _Rectangle2.default(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);
	  };
	
	  return Circle;
	}();
	
	exports.default = Circle;
	//# sourceMappingURL=Circle.js.map

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _const = __webpack_require__(12);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Rectangle object is an area defined by its position, as indicated by its top-left corner
	 * point (x, y) and by its width and its height.
	 *
	 * @class
	 * @memberof PIXI
	 */
	var Rectangle = function () {
	    /**
	     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rectangle
	     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rectangle
	     * @param {number} [width=0] - The overall width of this rectangle
	     * @param {number} [height=0] - The overall height of this rectangle
	     */
	    function Rectangle() {
	        var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	        var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	        var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	        var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
	
	        _classCallCheck(this, Rectangle);
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.x = x;
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.y = y;
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.width = width;
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.height = height;
	
	        /**
	         * The type of the object, mainly used to avoid `instanceof` checks
	         *
	         * @member {number}
	         * @readOnly
	         * @default PIXI.SHAPES.RECT
	         * @see PIXI.SHAPES
	         */
	        this.type = _const.SHAPES.RECT;
	    }
	
	    /**
	     * returns the left edge of the rectangle
	     *
	     * @member {number}
	     * @memberof PIXI.Rectangle#
	     */
	
	
	    /**
	     * Creates a clone of this Rectangle
	     *
	     * @return {PIXI.Rectangle} a copy of the rectangle
	     */
	    Rectangle.prototype.clone = function clone() {
	        return new Rectangle(this.x, this.y, this.width, this.height);
	    };
	
	    /**
	     * Copies another rectangle to this one.
	     *
	     * @param {PIXI.Rectangle} rectangle - The rectangle to copy.
	     * @return {PIXI.Rectangle} Returns itself.
	     */
	
	
	    Rectangle.prototype.copy = function copy(rectangle) {
	        this.x = rectangle.x;
	        this.y = rectangle.y;
	        this.width = rectangle.width;
	        this.height = rectangle.height;
	
	        return this;
	    };
	
	    /**
	     * Checks whether the x and y coordinates given are contained within this Rectangle
	     *
	     * @param {number} x - The X coordinate of the point to test
	     * @param {number} y - The Y coordinate of the point to test
	     * @return {boolean} Whether the x/y coordinates are within this Rectangle
	     */
	
	
	    Rectangle.prototype.contains = function contains(x, y) {
	        if (this.width <= 0 || this.height <= 0) {
	            return false;
	        }
	
	        if (x >= this.x && x < this.x + this.width) {
	            if (y >= this.y && y < this.y + this.height) {
	                return true;
	            }
	        }
	
	        return false;
	    };
	
	    /**
	     * Pads the rectangle making it grow in all directions.
	     *
	     * @param {number} paddingX - The horizontal padding amount.
	     * @param {number} paddingY - The vertical padding amount.
	     */
	
	
	    Rectangle.prototype.pad = function pad(paddingX, paddingY) {
	        paddingX = paddingX || 0;
	        paddingY = paddingY || (paddingY !== 0 ? paddingX : 0);
	
	        this.x -= paddingX;
	        this.y -= paddingY;
	
	        this.width += paddingX * 2;
	        this.height += paddingY * 2;
	    };
	
	    /**
	     * Fits this rectangle around the passed one.
	     *
	     * @param {PIXI.Rectangle} rectangle - The rectangle to fit.
	     */
	
	
	    Rectangle.prototype.fit = function fit(rectangle) {
	        if (this.x < rectangle.x) {
	            this.width += this.x;
	            if (this.width < 0) {
	                this.width = 0;
	            }
	
	            this.x = rectangle.x;
	        }
	
	        if (this.y < rectangle.y) {
	            this.height += this.y;
	            if (this.height < 0) {
	                this.height = 0;
	            }
	            this.y = rectangle.y;
	        }
	
	        if (this.x + this.width > rectangle.x + rectangle.width) {
	            this.width = rectangle.width - this.x;
	            if (this.width < 0) {
	                this.width = 0;
	            }
	        }
	
	        if (this.y + this.height > rectangle.y + rectangle.height) {
	            this.height = rectangle.height - this.y;
	            if (this.height < 0) {
	                this.height = 0;
	            }
	        }
	    };
	
	    /**
	     * Enlarges this rectangle to include the passed rectangle.
	     *
	     * @param {PIXI.Rectangle} rect - The rectangle to include.
	     */
	
	
	    Rectangle.prototype.enlarge = function enlarge(rect) {
	        if (rect === Rectangle.EMPTY) {
	            return;
	        }
	
	        var x1 = Math.min(this.x, rect.x);
	        var x2 = Math.max(this.x + this.width, rect.x + rect.width);
	        var y1 = Math.min(this.y, rect.y);
	        var y2 = Math.max(this.y + this.height, rect.y + rect.height);
	
	        this.x = x1;
	        this.width = x2 - x1;
	        this.y = y1;
	        this.height = y2 - y1;
	    };
	
	    _createClass(Rectangle, [{
	        key: 'left',
	        get: function get() {
	            return this.x;
	        }
	
	        /**
	         * returns the right edge of the rectangle
	         *
	         * @member {number}
	         * @memberof PIXI.Rectangle
	         */
	
	    }, {
	        key: 'right',
	        get: function get() {
	            return this.x + this.width;
	        }
	
	        /**
	         * returns the top edge of the rectangle
	         *
	         * @member {number}
	         * @memberof PIXI.Rectangle
	         */
	
	    }, {
	        key: 'top',
	        get: function get() {
	            return this.y;
	        }
	
	        /**
	         * returns the bottom edge of the rectangle
	         *
	         * @member {number}
	         * @memberof PIXI.Rectangle
	         */
	
	    }, {
	        key: 'bottom',
	        get: function get() {
	            return this.y + this.height;
	        }
	
	        /**
	         * A constant empty rectangle.
	         *
	         * @static
	         * @constant
	         */
	
	    }], [{
	        key: 'EMPTY',
	        get: function get() {
	            return new Rectangle(0, 0, 0, 0);
	        }
	    }]);
	
	    return Rectangle;
	}();
	
	exports.default = Rectangle;
	//# sourceMappingURL=Rectangle.js.map

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _Rectangle = __webpack_require__(20);
	
	var _Rectangle2 = _interopRequireDefault(_Rectangle);
	
	var _const = __webpack_require__(12);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * The Ellipse object can be used to specify a hit area for displayObjects
	 *
	 * @class
	 * @memberof PIXI
	 */
	var Ellipse = function () {
	  /**
	   * @param {number} [x=0] - The X coordinate of the center of this circle
	   * @param {number} [y=0] - The Y coordinate of the center of this circle
	   * @param {number} [width=0] - The half width of this ellipse
	   * @param {number} [height=0] - The half height of this ellipse
	   */
	  function Ellipse() {
	    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
	
	    _classCallCheck(this, Ellipse);
	
	    /**
	     * @member {number}
	     * @default 0
	     */
	    this.x = x;
	
	    /**
	     * @member {number}
	     * @default 0
	     */
	    this.y = y;
	
	    /**
	     * @member {number}
	     * @default 0
	     */
	    this.width = width;
	
	    /**
	     * @member {number}
	     * @default 0
	     */
	    this.height = height;
	
	    /**
	     * The type of the object, mainly used to avoid `instanceof` checks
	     *
	     * @member {number}
	     * @readOnly
	     * @default PIXI.SHAPES.ELIP
	     * @see PIXI.SHAPES
	     */
	    this.type = _const.SHAPES.ELIP;
	  }
	
	  /**
	   * Creates a clone of this Ellipse instance
	   *
	   * @return {PIXI.Ellipse} a copy of the ellipse
	   */
	
	
	  Ellipse.prototype.clone = function clone() {
	    return new Ellipse(this.x, this.y, this.width, this.height);
	  };
	
	  /**
	   * Checks whether the x and y coordinates given are contained within this ellipse
	   *
	   * @param {number} x - The X coordinate of the point to test
	   * @param {number} y - The Y coordinate of the point to test
	   * @return {boolean} Whether the x/y coords are within this ellipse
	   */
	
	
	  Ellipse.prototype.contains = function contains(x, y) {
	    if (this.width <= 0 || this.height <= 0) {
	      return false;
	    }
	
	    // normalize the coords to an ellipse with center 0,0
	    var normx = (x - this.x) / this.width;
	    var normy = (y - this.y) / this.height;
	
	    normx *= normx;
	    normy *= normy;
	
	    return normx + normy <= 1;
	  };
	
	  /**
	   * Returns the framing rectangle of the ellipse as a Rectangle object
	   *
	   * @return {PIXI.Rectangle} the framing rectangle
	   */
	
	
	  Ellipse.prototype.getBounds = function getBounds() {
	    return new _Rectangle2.default(this.x - this.width, this.y - this.height, this.width, this.height);
	  };
	
	  return Ellipse;
	}();
	
	exports.default = Ellipse;
	//# sourceMappingURL=Ellipse.js.map

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _Point = __webpack_require__(15);
	
	var _Point2 = _interopRequireDefault(_Point);
	
	var _const = __webpack_require__(12);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class
	 * @memberof PIXI
	 */
	var Polygon = function () {
	    /**
	     * @param {PIXI.Point[]|number[]} points - This can be an array of Points
	     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or
	     *  the arguments passed can be all the points of the polygon e.g.
	     *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat
	     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.
	     */
	    function Polygon() {
	        for (var _len = arguments.length, points = Array(_len), _key = 0; _key < _len; _key++) {
	            points[_key] = arguments[_key];
	        }
	
	        _classCallCheck(this, Polygon);
	
	        if (Array.isArray(points[0])) {
	            points = points[0];
	        }
	
	        // if this is an array of points, convert it to a flat array of numbers
	        if (points[0] instanceof _Point2.default) {
	            var p = [];
	
	            for (var i = 0, il = points.length; i < il; i++) {
	                p.push(points[i].x, points[i].y);
	            }
	
	            points = p;
	        }
	
	        this.closed = true;
	
	        /**
	         * An array of the points of this polygon
	         *
	         * @member {number[]}
	         */
	        this.points = points;
	
	        /**
	         * The type of the object, mainly used to avoid `instanceof` checks
	         *
	         * @member {number}
	         * @readOnly
	         * @default PIXI.SHAPES.POLY
	         * @see PIXI.SHAPES
	         */
	        this.type = _const.SHAPES.POLY;
	    }
	
	    /**
	     * Creates a clone of this polygon
	     *
	     * @return {PIXI.Polygon} a copy of the polygon
	     */
	
	
	    Polygon.prototype.clone = function clone() {
	        return new Polygon(this.points.slice());
	    };
	
	    /**
	     * Closes the polygon, adding points if necessary.
	     *
	     */
	
	
	    Polygon.prototype.close = function close() {
	        var points = this.points;
	
	        // close the poly if the value is true!
	        if (points[0] !== points[points.length - 2] || points[1] !== points[points.length - 1]) {
	            points.push(points[0], points[1]);
	        }
	    };
	
	    /**
	     * Checks whether the x and y coordinates passed to this function are contained within this polygon
	     *
	     * @param {number} x - The X coordinate of the point to test
	     * @param {number} y - The Y coordinate of the point to test
	     * @return {boolean} Whether the x/y coordinates are within this polygon
	     */
	
	
	    Polygon.prototype.contains = function contains(x, y) {
	        var inside = false;
	
	        // use some raycasting to test hits
	        // https://github.com/substack/point-in-polygon/blob/master/index.js
	        var length = this.points.length / 2;
	
	        for (var i = 0, j = length - 1; i < length; j = i++) {
	            var xi = this.points[i * 2];
	            var yi = this.points[i * 2 + 1];
	            var xj = this.points[j * 2];
	            var yj = this.points[j * 2 + 1];
	            var intersect = yi > y !== yj > y && x < (xj - xi) * ((y - yi) / (yj - yi)) + xi;
	
	            if (intersect) {
	                inside = !inside;
	            }
	        }
	
	        return inside;
	    };
	
	    return Polygon;
	}();
	
	exports.default = Polygon;
	//# sourceMappingURL=Polygon.js.map

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _const = __webpack_require__(12);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its
	 * top-left corner point (x, y) and by its width and its height and its radius.
	 *
	 * @class
	 * @memberof PIXI
	 */
	var RoundedRectangle = function () {
	    /**
	     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rounded rectangle
	     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rounded rectangle
	     * @param {number} [width=0] - The overall width of this rounded rectangle
	     * @param {number} [height=0] - The overall height of this rounded rectangle
	     * @param {number} [radius=20] - Controls the radius of the rounded corners
	     */
	    function RoundedRectangle() {
	        var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	        var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	        var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	        var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
	        var radius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;
	
	        _classCallCheck(this, RoundedRectangle);
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.x = x;
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.y = y;
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.width = width;
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.height = height;
	
	        /**
	         * @member {number}
	         * @default 20
	         */
	        this.radius = radius;
	
	        /**
	         * The type of the object, mainly used to avoid `instanceof` checks
	         *
	         * @member {number}
	         * @readonly
	         * @default PIXI.SHAPES.RREC
	         * @see PIXI.SHAPES
	         */
	        this.type = _const.SHAPES.RREC;
	    }
	
	    /**
	     * Creates a clone of this Rounded Rectangle
	     *
	     * @return {PIXI.RoundedRectangle} a copy of the rounded rectangle
	     */
	
	
	    RoundedRectangle.prototype.clone = function clone() {
	        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);
	    };
	
	    /**
	     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle
	     *
	     * @param {number} x - The X coordinate of the point to test
	     * @param {number} y - The Y coordinate of the point to test
	     * @return {boolean} Whether the x/y coordinates are within this Rounded Rectangle
	     */
	
	
	    RoundedRectangle.prototype.contains = function contains(x, y) {
	        if (this.width <= 0 || this.height <= 0) {
	            return false;
	        }
	        if (x >= this.x && x <= this.x + this.width) {
	            if (y >= this.y && y <= this.y + this.height) {
	                if (y >= this.y + this.radius && y <= this.y + this.height - this.radius || x >= this.x + this.radius && x <= this.x + this.width - this.radius) {
	                    return true;
	                }
	                var dx = x - (this.x + this.radius);
	                var dy = y - (this.y + this.radius);
	                var radius2 = this.radius * this.radius;
	
	                if (dx * dx + dy * dy <= radius2) {
	                    return true;
	                }
	                dx = x - (this.x + this.width - this.radius);
	                if (dx * dx + dy * dy <= radius2) {
	                    return true;
	                }
	                dy = y - (this.y + this.height - this.radius);
	                if (dx * dx + dy * dy <= radius2) {
	                    return true;
	                }
	                dx = x - (this.x + this.radius);
	                if (dx * dx + dy * dy <= radius2) {
	                    return true;
	                }
	            }
	        }
	
	        return false;
	    };
	
	    return RoundedRectangle;
	}();
	
	exports.default = RoundedRectangle;
	//# sourceMappingURL=RoundedRectangle.js.map

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var gl = {
	    createContext:          __webpack_require__(25),
	    setVertexAttribArrays:  __webpack_require__(26),
	    GLBuffer:               __webpack_require__(27),
	    GLFramebuffer:          __webpack_require__(28),
	    GLShader:               __webpack_require__(30),
	    GLTexture:              __webpack_require__(29),
	    VertexArrayObject:      __webpack_require__(39),
	    shader:                 __webpack_require__(40)
	};
	
	// Export for Node-compatible environments
	if (typeof module !== 'undefined' && module.exports)
	{
	    // Export the module
	    module.exports = gl;
	}
	
	// Add to the browser window pixi.gl
	if (typeof window !== 'undefined')
	{
	    // add the window object
	    window.PIXI = window.PIXI || {};
	    window.PIXI.glCore = gl;
	}


/***/ },
/* 25 */
/***/ function(module, exports) {

	
	/**
	 * Helper class to create a webGL Context
	 *
	 * @class
	 * @memberof PIXI.glCore
	 * @param canvas {HTMLCanvasElement} the canvas element that we will get the context from
	 * @param options {Object} An options object that gets passed in to the canvas element containing the context attributes,
	 *                         see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext for the options available
	 * @return {WebGLRenderingContext} the WebGL context
	 */
	var createContext = function(canvas, options)
	{
	    var gl = canvas.getContext('webgl', options) || 
	         canvas.getContext('experimental-webgl', options);
	
	    if (!gl)
	    {
	        // fail, not able to get a context
	        throw new Error('This browser does not support webGL. Try using the canvas renderer');
	    }
	
	    return gl;
	};
	
	module.exports = createContext;


/***/ },
/* 26 */
/***/ function(module, exports) {

	// var GL_MAP = {};
	
	/**
	 * @param gl {WebGLRenderingContext} The current WebGL context
	 * @param attribs {*}
	 * @param state {*}
	 */
	var setVertexAttribArrays = function (gl, attribs, state)
	{
	    var i;
	    if(state)
	    {
	        var tempAttribState = state.tempAttribState,
	            attribState = state.attribState;
	
	        for (i = 0; i < tempAttribState.length; i++)
	        {
	            tempAttribState[i] = false;
	        }
	
	        // set the new attribs
	        for (i = 0; i < attribs.length; i++)
	        {
	            tempAttribState[attribs[i].attribute.location] = true;
	        }
	
	        for (i = 0; i < attribState.length; i++)
	        {
	            if (attribState[i] !== tempAttribState[i])
	            {
	                attribState[i] = tempAttribState[i];
	
	                if (state.attribState[i])
	                {
	                    gl.enableVertexAttribArray(i);
	                }
	                else
	                {
	                    gl.disableVertexAttribArray(i);
	                }
	            }
	        }
	
	    }
	    else
	    {
	        for (i = 0; i < attribs.length; i++)
	        {
	            var attrib = attribs[i];
	            gl.enableVertexAttribArray(attrib.attribute.location);
	        }
	    }
	};
	
	module.exports = setVertexAttribArrays;


/***/ },
/* 27 */
/***/ function(module, exports) {

	var EMPTY_ARRAY_BUFFER = new ArrayBuffer(0);
	
	/**
	 * Helper class to create a webGL buffer
	 *
	 * @class
	 * @memberof PIXI.glCore
	 * @param gl {WebGLRenderingContext} The current WebGL rendering context
	 * @param type {gl.ARRAY_BUFFER | gl.ELEMENT_ARRAY_BUFFER} @mat
	 * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data
	 * @param drawType {gl.STATIC_DRAW|gl.DYNAMIC_DRAW|gl.STREAM_DRAW}
	 */
	var Buffer = function(gl, type, data, drawType)
	{
	
		/**
	     * The current WebGL rendering context
	     *
	     * @member {WebGLRenderingContext}
	     */
		this.gl = gl;
	
		/**
	     * The WebGL buffer, created upon instantiation
	     *
	     * @member {WebGLBuffer}
	     */
		this.buffer = gl.createBuffer();
	
		/**
	     * The type of the buffer
	     *
	     * @member {gl.ARRAY_BUFFER|gl.ELEMENT_ARRAY_BUFFER}
	     */
		this.type = type || gl.ARRAY_BUFFER;
	
		/**
	     * The draw type of the buffer
	     *
	     * @member {gl.STATIC_DRAW|gl.DYNAMIC_DRAW|gl.STREAM_DRAW}
	     */
		this.drawType = drawType || gl.STATIC_DRAW;
	
		/**
	     * The data in the buffer, as a typed array
	     *
	     * @member {ArrayBuffer| SharedArrayBuffer|ArrayBufferView}
	     */
		this.data = EMPTY_ARRAY_BUFFER;
	
		if(data)
		{
			this.upload(data);
		}
	
		this._updateID = 0;
	};
	
	/**
	 * Uploads the buffer to the GPU
	 * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data to upload
	 * @param offset {Number} if only a subset of the data should be uploaded, this is the amount of data to subtract
	 * @param dontBind {Boolean} whether to bind the buffer before uploading it
	 */
	Buffer.prototype.upload = function(data, offset, dontBind)
	{
		// todo - needed?
		if(!dontBind) this.bind();
	
		var gl = this.gl;
	
		data = data || this.data;
		offset = offset || 0;
	
		if(this.data.byteLength >= data.byteLength)
		{
			gl.bufferSubData(this.type, offset, data);
		}
		else
		{
			gl.bufferData(this.type, data, this.drawType);
		}
	
		this.data = data;
	};
	/**
	 * Binds the buffer
	 *
	 */
	Buffer.prototype.bind = function()
	{
		var gl = this.gl;
		gl.bindBuffer(this.type, this.buffer);
	};
	
	Buffer.createVertexBuffer = function(gl, data, drawType)
	{
		return new Buffer(gl, gl.ARRAY_BUFFER, data, drawType);
	};
	
	Buffer.createIndexBuffer = function(gl, data, drawType)
	{
		return new Buffer(gl, gl.ELEMENT_ARRAY_BUFFER, data, drawType);
	};
	
	Buffer.create = function(gl, type, data, drawType)
	{
		return new Buffer(gl, type, data, drawType);
	};
	
	/**
	 * Destroys the buffer
	 *
	 */
	Buffer.prototype.destroy = function(){
		this.gl.deleteBuffer(this.buffer);
	};
	
	module.exports = Buffer;


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	
	var Texture = __webpack_require__(29);
	
	/**
	 * Helper class to create a webGL Framebuffer
	 *
	 * @class
	 * @memberof PIXI.glCore
	 * @param gl {WebGLRenderingContext} The current WebGL rendering context
	 * @param width {Number} the width of the drawing area of the frame buffer
	 * @param height {Number} the height of the drawing area of the frame buffer
	 */
	var Framebuffer = function(gl, width, height)
	{
	    /**
	     * The current WebGL rendering context
	     *
	     * @member {WebGLRenderingContext}
	     */
	    this.gl = gl;
	
	    /**
	     * The frame buffer
	     *
	     * @member {WebGLFramebuffer}
	     */
	    this.framebuffer = gl.createFramebuffer();
	
	    /**
	     * The stencil buffer
	     *
	     * @member {WebGLRenderbuffer}
	     */
	    this.stencil = null;
	
	    /**
	     * The stencil buffer
	     *
	     * @member {PIXI.glCore.GLTexture}
	     */
	    this.texture = null;
	
	    /**
	     * The width of the drawing area of the buffer
	     *
	     * @member {Number}
	     */
	    this.width = width || 100;
	    /**
	     * The height of the drawing area of the buffer
	     *
	     * @member {Number}
	     */
	    this.height = height || 100;
	};
	
	/**
	 * Adds a texture to the frame buffer
	 * @param texture {PIXI.glCore.GLTexture}
	 */
	Framebuffer.prototype.enableTexture = function(texture)
	{
	    var gl = this.gl;
	
	    this.texture = texture || new Texture(gl);
	
	    this.texture.bind();
	
	    //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA,  this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
	
	    this.bind();
	
	    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);
	};
	
	/**
	 * Initialises the stencil buffer
	 */
	Framebuffer.prototype.enableStencil = function()
	{
	    if(this.stencil)return;
	
	    var gl = this.gl;
	
	    this.stencil = gl.createRenderbuffer();
	
	    gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencil);
	
	    // TODO.. this is depth AND stencil?
	    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.stencil);
	    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL,  this.width  , this.height );
	
	
	};
	
	/**
	 * Erases the drawing area and fills it with a colour
	 * @param  r {Number} the red value of the clearing colour
	 * @param  g {Number} the green value of the clearing colour
	 * @param  b {Number} the blue value of the clearing colour
	 * @param  a {Number} the alpha value of the clearing colour
	 */
	Framebuffer.prototype.clear = function( r, g, b, a )
	{
	    this.bind();
	
	    var gl = this.gl;
	
	    gl.clearColor(r, g, b, a);
	    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
	};
	
	/**
	 * Binds the frame buffer to the WebGL context
	 */
	Framebuffer.prototype.bind = function()
	{
	    var gl = this.gl;
	    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer );
	};
	
	/**
	 * Unbinds the frame buffer to the WebGL context
	 */
	Framebuffer.prototype.unbind = function()
	{
	    var gl = this.gl;
	    gl.bindFramebuffer(gl.FRAMEBUFFER, null );
	};
	/**
	 * Resizes the drawing area of the buffer to the given width and height
	 * @param  width  {Number} the new width
	 * @param  height {Number} the new height
	 */
	Framebuffer.prototype.resize = function(width, height)
	{
	    var gl = this.gl;
	
	    this.width = width;
	    this.height = height;
	
	    if ( this.texture )
	    {
	        this.texture.uploadData(null, width, height);
	    }
	
	    if ( this.stencil )
	    {
	        // update the stencil buffer width and height
	        gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencil);
	        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);
	    }
	};
	
	/**
	 * Destroys this buffer
	 */
	Framebuffer.prototype.destroy = function()
	{
	    var gl = this.gl;
	
	    //TODO
	    if(this.texture)
	    {
	        this.texture.destroy();
	    }
	
	    gl.deleteFramebuffer(this.framebuffer);
	
	    this.gl = null;
	
	    this.stencil = null;
	    this.texture = null;
	};
	
	/**
	 * Creates a frame buffer with a texture containing the given data
	 * @static
	 * @param gl {WebGLRenderingContext} The current WebGL rendering context
	 * @param width {Number} the width of the drawing area of the frame buffer
	 * @param height {Number} the height of the drawing area of the frame buffer
	 * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data
	 */
	Framebuffer.createRGBA = function(gl, width, height, data)
	{
	    var texture = Texture.fromData(gl, null, width, height);
	    texture.enableNearestScaling();
	    texture.enableWrapClamp();
	
	    //now create the framebuffer object and attach the texture to it.
	    var fbo = new Framebuffer(gl, width, height);
	    fbo.enableTexture(texture);
	
	    //fbo.enableStencil(); // get this back on soon!
	
	    fbo.unbind();
	
	    return fbo;
	};
	
	/**
	 * Creates a frame buffer with a texture containing the given data
	 * @static
	 * @param gl {WebGLRenderingContext} The current WebGL rendering context
	 * @param width {Number} the width of the drawing area of the frame buffer
	 * @param height {Number} the height of the drawing area of the frame buffer
	 * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data
	 */
	Framebuffer.createFloat32 = function(gl, width, height, data)
	{
	    // create a new texture..
	    var texture = new Texture.fromData(gl, data, width, height);
	    texture.enableNearestScaling();
	    texture.enableWrapClamp();
	
	    //now create the framebuffer object and attach the texture to it.
	    var fbo = new Framebuffer(gl, width, height);
	    fbo.enableTexture(texture);
	
	    fbo.unbind();
	
	    return fbo;
	};
	
	module.exports = Framebuffer;


/***/ },
/* 29 */
/***/ function(module, exports) {

	
	/**
	 * Helper class to create a WebGL Texture
	 *
	 * @class
	 * @memberof PIXI.glCore
	 * @param gl {WebGLRenderingContext} The current WebGL context
	 * @param width {number} the width of the texture
	 * @param height {number} the height of the texture
	 * @param format {number} the pixel format of the texture. defaults to gl.RGBA
	 * @param type {number} the gl type of the texture. defaults to gl.UNSIGNED_BYTE
	 */
	var Texture = function(gl, width, height, format, type)
	{
		/**
		 * The current WebGL rendering context
		 *
		 * @member {WebGLRenderingContext}
		 */
		this.gl = gl;
	
	
		/**
		 * The WebGL texture
		 *
		 * @member {WebGLTexture}
		 */
		this.texture = gl.createTexture();
	
		/**
		 * If mipmapping was used for this texture, enable and disable with enableMipmap()
		 *
		 * @member {Boolean}
		 */
		// some settings..
		this.mipmap = false;
	
	
		/**
		 * Set to true to enable pre-multiplied alpha
		 *
		 * @member {Boolean}
		 */
		this.premultiplyAlpha = false;
	
		/**
		 * The width of texture
		 *
		 * @member {Number}
		 */
		this.width = width || -1;
		/**
		 * The height of texture
		 *
		 * @member {Number}
		 */
		this.height = height || -1;
	
		/**
		 * The pixel format of the texture. defaults to gl.RGBA
		 *
		 * @member {Number}
		 */
		this.format = format || gl.RGBA;
	
		/**
		 * The gl type of the texture. defaults to gl.UNSIGNED_BYTE
		 *
		 * @member {Number}
		 */
		this.type = type || gl.UNSIGNED_BYTE;
	
	
	};
	
	/**
	 * Uploads this texture to the GPU
	 * @param source {HTMLImageElement|ImageData|HTMLVideoElement} the source image of the texture
	 */
	Texture.prototype.upload = function(source)
	{
		this.bind();
	
		var gl = this.gl;
	
	
		gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);
	
		var newWidth = source.videoWidth || source.width;
		var newHeight = source.videoHeight || source.height;
	
		if(newHeight !== this.height || newWidth !== this.width)
		{
			gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, source);
		}
		else
		{
	    	gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.format, this.type, source);
		}
	
		// if the source is a video, we need to use the videoWidth / videoHeight properties as width / height will be incorrect.
		this.width = newWidth;
		this.height = newHeight;
	
	};
	
	var FLOATING_POINT_AVAILABLE = false;
	
	/**
	 * Use a data source and uploads this texture to the GPU
	 * @param data {TypedArray} the data to upload to the texture
	 * @param width {number} the new width of the texture
	 * @param height {number} the new height of the texture
	 */
	Texture.prototype.uploadData = function(data, width, height)
	{
		this.bind();
	
		var gl = this.gl;
	
	
		if(data instanceof Float32Array)
		{
			if(!FLOATING_POINT_AVAILABLE)
			{
				var ext = gl.getExtension("OES_texture_float");
	
				if(ext)
				{
					FLOATING_POINT_AVAILABLE = true;
				}
				else
				{
					throw new Error('floating point textures not available');
				}
			}
	
			this.type = gl.FLOAT;
		}
		else
		{
			// TODO support for other types
			this.type = this.type || gl.UNSIGNED_BYTE;
		}
	
		// what type of data?
		gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);
	
	
		if(width !== this.width || height !== this.height)
		{
			gl.texImage2D(gl.TEXTURE_2D, 0, this.format,  width, height, 0, this.format, this.type, data || null);
		}
		else
		{
			gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, this.format, this.type, data || null);
		}
	
		this.width = width;
		this.height = height;
	
	
	//	texSubImage2D
	};
	
	/**
	 * Binds the texture
	 * @param  location
	 */
	Texture.prototype.bind = function(location)
	{
		var gl = this.gl;
	
		if(location !== undefined)
		{
			gl.activeTexture(gl.TEXTURE0 + location);
		}
	
		gl.bindTexture(gl.TEXTURE_2D, this.texture);
	};
	
	/**
	 * Unbinds the texture
	 */
	Texture.prototype.unbind = function()
	{
		var gl = this.gl;
		gl.bindTexture(gl.TEXTURE_2D, null);
	};
	
	/**
	 * @param linear {Boolean} if we want to use linear filtering or nearest neighbour interpolation
	 */
	Texture.prototype.minFilter = function( linear )
	{
		var gl = this.gl;
	
		this.bind();
	
		if(this.mipmap)
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linear ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);
		}
		else
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linear ? gl.LINEAR : gl.NEAREST);
		}
	};
	
	/**
	 * @param linear {Boolean} if we want to use linear filtering or nearest neighbour interpolation
	 */
	Texture.prototype.magFilter = function( linear )
	{
		var gl = this.gl;
	
		this.bind();
	
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, linear ? gl.LINEAR : gl.NEAREST);
	};
	
	/**
	 * Enables mipmapping
	 */
	Texture.prototype.enableMipmap = function()
	{
		var gl = this.gl;
	
		this.bind();
	
		this.mipmap = true;
	
		gl.generateMipmap(gl.TEXTURE_2D);
	};
	
	/**
	 * Enables linear filtering
	 */
	Texture.prototype.enableLinearScaling = function()
	{
		this.minFilter(true);
		this.magFilter(true);
	};
	
	/**
	 * Enables nearest neighbour interpolation
	 */
	Texture.prototype.enableNearestScaling = function()
	{
		this.minFilter(false);
		this.magFilter(false);
	};
	
	/**
	 * Enables clamping on the texture so WebGL will not repeat it
	 */
	Texture.prototype.enableWrapClamp = function()
	{
		var gl = this.gl;
	
		this.bind();
	
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	};
	
	/**
	 * Enable tiling on the texture
	 */
	Texture.prototype.enableWrapRepeat = function()
	{
		var gl = this.gl;
	
		this.bind();
	
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
	};
	
	Texture.prototype.enableWrapMirrorRepeat = function()
	{
		var gl = this.gl;
	
		this.bind();
	
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.MIRRORED_REPEAT);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);
	};
	
	
	/**
	 * Destroys this texture
	 */
	Texture.prototype.destroy = function()
	{
		var gl = this.gl;
		//TODO
		gl.deleteTexture(this.texture);
	};
	
	/**
	 * @static
	 * @param gl {WebGLRenderingContext} The current WebGL context
	 * @param source {HTMLImageElement|ImageData} the source image of the texture
	 * @param premultiplyAlpha {Boolean} If we want to use pre-multiplied alpha
	 */
	Texture.fromSource = function(gl, source, premultiplyAlpha)
	{
		var texture = new Texture(gl);
		texture.premultiplyAlpha = premultiplyAlpha || false;
		texture.upload(source);
	
		return texture;
	};
	
	/**
	 * @static
	 * @param gl {WebGLRenderingContext} The current WebGL context
	 * @param data {TypedArray} the data to upload to the texture
	 * @param width {number} the new width of the texture
	 * @param height {number} the new height of the texture
	 */
	Texture.fromData = function(gl, data, width, height)
	{
		//console.log(data, width, height);
		var texture = new Texture(gl);
		texture.uploadData(data, width, height);
	
		return texture;
	};
	
	
	module.exports = Texture;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	
	var compileProgram = __webpack_require__(31),
		extractAttributes = __webpack_require__(32),
		extractUniforms = __webpack_require__(35),
		setPrecision = __webpack_require__(37),
		generateUniformAccessObject = __webpack_require__(38);
	
	/**
	 * Helper class to create a webGL Shader
	 *
	 * @class
	 * @memberof PIXI.glCore
	 * @param gl {WebGLRenderingContext}
	 * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.
	 * @param fragmentSrc {string|string[]} The fragment shader source as an array of strings.
	 * @param precision {precision]} The float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.
	 * @param attributeLocations {object} A key value pair showing which location eact attribute should sit eg {position:0, uvs:1}
	 */
	var Shader = function(gl, vertexSrc, fragmentSrc, precision, attributeLocations)
	{
		/**
		 * The current WebGL rendering context
		 *
		 * @member {WebGLRenderingContext}
		 */
		this.gl = gl;
	
		if(precision)
		{
			vertexSrc = setPrecision(vertexSrc, precision);
			fragmentSrc = setPrecision(fragmentSrc, precision);
		}
	
		/**
		 * The shader program
		 *
		 * @member {WebGLProgram}
		 */
		// First compile the program..
		this.program = compileProgram(gl, vertexSrc, fragmentSrc, attributeLocations);
	
		/**
		 * The attributes of the shader as an object containing the following properties
		 * {
		 * 	type,
		 * 	size,
		 * 	location,
		 * 	pointer
		 * }
		 * @member {Object}
		 */
		// next extract the attributes
		this.attributes = extractAttributes(gl, this.program);
	
	    this.uniformData = extractUniforms(gl, this.program);
	
		/**
		 * The uniforms of the shader as an object containing the following properties
		 * {
		 * 	gl,
		 * 	data
		 * }
		 * @member {Object}
		 */
		this.uniforms = generateUniformAccessObject( gl, this.uniformData );
	
	};
	/**
	 * Uses this shader
	 */
	Shader.prototype.bind = function()
	{
		this.gl.useProgram(this.program);
	};
	
	/**
	 * Destroys this shader
	 * TODO
	 */
	Shader.prototype.destroy = function()
	{
		this.attributes = null;
		this.uniformData = null;
		this.uniforms = null;
	
		var gl = this.gl;
		gl.deleteProgram(this.program);
	};
	
	
	module.exports = Shader;


/***/ },
/* 31 */
/***/ function(module, exports) {

	
	/**
	 * @class
	 * @memberof PIXI.glCore.shader
	 * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}
	 * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.
	 * @param fragmentSrc {string|string[]} The fragment shader source as an array of strings.
	 * @param attributeLocations {Object} An attribute location map that lets you manually set the attribute locations
	 * @return {WebGLProgram} the shader program
	 */
	var compileProgram = function(gl, vertexSrc, fragmentSrc, attributeLocations)
	{
	    var glVertShader = compileShader(gl, gl.VERTEX_SHADER, vertexSrc);
	    var glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentSrc);
	
	    var program = gl.createProgram();
	
	    gl.attachShader(program, glVertShader);
	    gl.attachShader(program, glFragShader);
	
	    // optionally, set the attributes manually for the program rather than letting WebGL decide..
	    if(attributeLocations)
	    {
	        for(var i in attributeLocations)
	        {
	            gl.bindAttribLocation(program, attributeLocations[i], i);
	        }
	    }
	
	
	    gl.linkProgram(program);
	
	    // if linking fails, then log and cleanup
	    if (!gl.getProgramParameter(program, gl.LINK_STATUS))
	    {
	        console.error('Pixi.js Error: Could not initialize shader.');
	        console.error('gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS));
	        console.error('gl.getError()', gl.getError());
	
	        // if there is a program info log, log it
	        if (gl.getProgramInfoLog(program) !== '')
	        {
	            console.warn('Pixi.js Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));
	        }
	
	        gl.deleteProgram(program);
	        program = null;
	    }
	
	    // clean up some shaders
	    gl.deleteShader(glVertShader);
	    gl.deleteShader(glFragShader);
	
	    return program;
	};
	
	/**
	 * @private
	 * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}
	 * @param type {Number} the type, can be either VERTEX_SHADER or FRAGMENT_SHADER
	 * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.
	 * @return {WebGLShader} the shader
	 */
	var compileShader = function (gl, type, src)
	{
	    var shader = gl.createShader(type);
	
	    gl.shaderSource(shader, src);
	    gl.compileShader(shader);
	
	    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))
	    {
	        console.log(gl.getShaderInfoLog(shader));
	        return null;
	    }
	
	    return shader;
	};
	
	module.exports = compileProgram;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	
	var mapType = __webpack_require__(33);
	var mapSize = __webpack_require__(34);
	
	/**
	 * Extracts the attributes
	 * @class
	 * @memberof PIXI.glCore.shader
	 * @param gl {WebGLRenderingContext} The current WebGL rendering context
	 * @param program {WebGLProgram} The shader program to get the attributes from
	 * @return attributes {Object}
	 */
	var extractAttributes = function(gl, program)
	{
	    var attributes = {};
	
	    var totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
	
	    for (var i = 0; i < totalAttributes; i++)
	    {
	        var attribData = gl.getActiveAttrib(program, i);
	        var type = mapType(gl, attribData.type);
	
	        attributes[attribData.name] = {
	            type:type,
	            size:mapSize(type),
	            location:gl.getAttribLocation(program, attribData.name),
	            //TODO - make an attribute object
	            pointer: pointer
	        };
	    }
	
	    return attributes;
	};
	
	var pointer = function(type, normalized, stride, start){
	    // console.log(this.location)
	    gl.vertexAttribPointer(this.location,this.size, type || gl.FLOAT, normalized || false, stride || 0, start || 0);
	};
	
	module.exports = extractAttributes;


/***/ },
/* 33 */
/***/ function(module, exports) {

	
	
	var mapSize = function(gl, type) 
	{
	    if(!GL_TABLE) 
	    {
	        var typeNames = Object.keys(GL_TO_GLSL_TYPES);
	
	        GL_TABLE = {};
	
	        for(var i = 0; i < typeNames.length; ++i) 
	        {
	            var tn = typeNames[i];
	            GL_TABLE[ gl[tn] ] = GL_TO_GLSL_TYPES[tn];
	        }
	    }
	
	  return GL_TABLE[type];
	};
	
	var GL_TABLE = null;
	
	var GL_TO_GLSL_TYPES = {
	  'FLOAT':       'float',
	  'FLOAT_VEC2':  'vec2',
	  'FLOAT_VEC3':  'vec3',
	  'FLOAT_VEC4':  'vec4',
	
	  'INT':         'int',
	  'INT_VEC2':    'ivec2',
	  'INT_VEC3':    'ivec3',
	  'INT_VEC4':    'ivec4',
	  
	  'BOOL':        'bool',
	  'BOOL_VEC2':   'bvec2',
	  'BOOL_VEC3':   'bvec3',
	  'BOOL_VEC4':   'bvec4',
	  
	  'FLOAT_MAT2':  'mat2',
	  'FLOAT_MAT3':  'mat3',
	  'FLOAT_MAT4':  'mat4',
	  
	  'SAMPLER_2D':  'sampler2D'  
	};
	
	module.exports = mapSize;


/***/ },
/* 34 */
/***/ function(module, exports) {

	/**
	 * @class
	 * @memberof PIXI.glCore.shader
	 * @param type {String}
	 * @return {Number}
	 */
	var mapSize = function(type) 
	{ 
	    return GLSL_TO_SIZE[type];
	};
	
	
	var GLSL_TO_SIZE = {
	    'float':    1,
	    'vec2':     2,
	    'vec3':     3,
	    'vec4':     4,
	
	    'int':      1,
	    'ivec2':    2,
	    'ivec3':    3,
	    'ivec4':    4,
	
	    'bool':     1,
	    'bvec2':    2,
	    'bvec3':    3,
	    'bvec4':    4,
	
	    'mat2':     4,
	    'mat3':     9,
	    'mat4':     16,
	
	    'sampler2D':  1
	};
	
	module.exports = mapSize;


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var mapType = __webpack_require__(33);
	var defaultValue = __webpack_require__(36);
	
	/**
	 * Extracts the uniforms
	 * @class
	 * @memberof PIXI.glCore.shader
	 * @param gl {WebGLRenderingContext} The current WebGL rendering context
	 * @param program {WebGLProgram} The shader program to get the uniforms from
	 * @return uniforms {Object}
	 */
	var extractUniforms = function(gl, program)
	{
		var uniforms = {};
	
	    var totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
	
	    for (var i = 0; i < totalUniforms; i++)
	    {
	    	var uniformData = gl.getActiveUniform(program, i);
	    	var name = uniformData.name.replace(/\[.*?\]/, "");
	        var type = mapType(gl, uniformData.type );
	
	    	uniforms[name] = {
	    		type:type,
	    		size:uniformData.size,
	    		location:gl.getUniformLocation(program, name),
	    		value:defaultValue(type, uniformData.size)
	    	};
	    }
	
		return uniforms;
	};
	
	module.exports = extractUniforms;


/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * @class
	 * @memberof PIXI.glCore.shader
	 * @param type {String} Type of value
	 * @param size {Number}
	 */
	var defaultValue = function(type, size) 
	{
	    switch (type)
	    {
	        case 'float':
	            return 0;
	
	        case 'vec2': 
	            return new Float32Array(2 * size);
	
	        case 'vec3':
	            return new Float32Array(3 * size);
	
	        case 'vec4':     
	            return new Float32Array(4 * size);
	            
	        case 'int':
	        case 'sampler2D':
	            return 0;
	
	        case 'ivec2':   
	            return new Int32Array(2 * size);
	
	        case 'ivec3':
	            return new Int32Array(3 * size);
	
	        case 'ivec4': 
	            return new Int32Array(4 * size);
	
	        case 'bool':     
	            return false;
	
	        case 'bvec2':
	
	            return booleanArray( 2 * size);
	
	        case 'bvec3':
	            return booleanArray(3 * size);
	
	        case 'bvec4':
	            return booleanArray(4 * size);
	
	        case 'mat2':
	            return new Float32Array([1, 0,
	                                     0, 1]);
	
	        case 'mat3': 
	            return new Float32Array([1, 0, 0,
	                                     0, 1, 0,
	                                     0, 0, 1]);
	
	        case 'mat4':
	            return new Float32Array([1, 0, 0, 0,
	                                     0, 1, 0, 0,
	                                     0, 0, 1, 0,
	                                     0, 0, 0, 1]);
	    }
	};
	
	var booleanArray = function(size)
	{
	    var array = new Array(size);
	
	    for (var i = 0; i < array.length; i++) 
	    {
	        array[i] = false;
	    }
	
	    return array;
	};
	
	module.exports = defaultValue;


/***/ },
/* 37 */
/***/ function(module, exports) {

	/**
	 * Sets the float precision on the shader. If the precision is already present this function will do nothing
	 * @param {string} src       the shader source
	 * @param {string} precision The float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.
	 *
	 * @return {string} modified shader source
	 */
	var setPrecision = function(src, precision)
	{
	    if(src.substring(0, 9) !== 'precision')
	    {
	        return 'precision ' + precision + ' float;\n' + src;
	    }
	
	    return src;
	};
	
	module.exports = setPrecision;


/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Extracts the attributes
	 * @class
	 * @memberof PIXI.glCore.shader
	 * @param gl {WebGLRenderingContext} The current WebGL rendering context
	 * @param uniforms {Array} @mat ?
	 * @return attributes {Object}
	 */
	var generateUniformAccessObject = function(gl, uniformData)
	{
	    // this is the object we will be sending back.
	    // an object hierachy will be created for structs
	    var uniforms = {data:{}};
	
	    uniforms.gl = gl;
	
	    var uniformKeys= Object.keys(uniformData);
	
	    for (var i = 0; i < uniformKeys.length; i++)
	    {
	        var fullName = uniformKeys[i];
	
	        var nameTokens = fullName.split('.');
	        var name = nameTokens[nameTokens.length - 1];
	
	
	        var uniformGroup = getUniformGroup(nameTokens, uniforms);
	
	        var uniform =  uniformData[fullName];
	        uniformGroup.data[name] = uniform;
	
	        uniformGroup.gl = gl;
	
	        Object.defineProperty(uniformGroup, name, {
	            get: generateGetter(name),
	            set: generateSetter(name, uniform)
	        });
	    }
	
	    return uniforms;
	};
	
	var generateGetter = function(name)
	{
		var template = getterTemplate.replace('%%', name);
		return new Function(template); // jshint ignore:line
	};
	
	var generateSetter = function(name, uniform)
	{
	    var template = setterTemplate.replace(/%%/g, name);
	    var setTemplate;
	
	    if(uniform.size === 1)
	    {
	        setTemplate = GLSL_TO_SINGLE_SETTERS[uniform.type];
	    }
	    else
	    {
	        setTemplate = GLSL_TO_ARRAY_SETTERS[uniform.type];
	    }
	
	    if(setTemplate)
	    {
	        template += "\nthis.gl." + setTemplate + ";";
	    }
	
	  	return new Function('value', template); // jshint ignore:line
	};
	
	var getUniformGroup = function(nameTokens, uniform)
	{
	    var cur = uniform;
	
	    for (var i = 0; i < nameTokens.length - 1; i++)
	    {
	        var o = cur[nameTokens[i]] || {data:{}};
	        cur[nameTokens[i]] = o;
	        cur = o;
	    }
	
	    return cur;
	};
	
	var getterTemplate = [
	    'return this.data.%%.value;',
	].join('\n');
	
	var setterTemplate = [
	    'this.data.%%.value = value;',
	    'var location = this.data.%%.location;'
	].join('\n');
	
	
	var GLSL_TO_SINGLE_SETTERS = {
	
	    'float':    'uniform1f(location, value)',
	
	    'vec2':     'uniform2f(location, value[0], value[1])',
	    'vec3':     'uniform3f(location, value[0], value[1], value[2])',
	    'vec4':     'uniform4f(location, value[0], value[1], value[2], value[3])',
	
	    'int':      'uniform1i(location, value)',
	    'ivec2':    'uniform2i(location, value[0], value[1])',
	    'ivec3':    'uniform3i(location, value[0], value[1], value[2])',
	    'ivec4':    'uniform4i(location, value[0], value[1], value[2], value[3])',
	
	    'bool':     'uniform1i(location, value)',
	    'bvec2':    'uniform2i(location, value[0], value[1])',
	    'bvec3':    'uniform3i(location, value[0], value[1], value[2])',
	    'bvec4':    'uniform4i(location, value[0], value[1], value[2], value[3])',
	
	    'mat2':     'uniformMatrix2fv(location, false, value)',
	    'mat3':     'uniformMatrix3fv(location, false, value)',
	    'mat4':     'uniformMatrix4fv(location, false, value)',
	
	    'sampler2D':'uniform1i(location, value)'
	};
	
	var GLSL_TO_ARRAY_SETTERS = {
	
	    'float':    'uniform1fv(location, value)',
	
	    'vec2':     'uniform2fv(location, value)',
	    'vec3':     'uniform3fv(location, value)',
	    'vec4':     'uniform4fv(location, value)',
	
	    'int':      'uniform1iv(location, value)',
	    'ivec2':    'uniform2iv(location, value)',
	    'ivec3':    'uniform3iv(location, value)',
	    'ivec4':    'uniform4iv(location, value)',
	
	    'bool':     'uniform1iv(location, value)',
	    'bvec2':    'uniform2iv(location, value)',
	    'bvec3':    'uniform3iv(location, value)',
	    'bvec4':    'uniform4iv(location, value)',
	
	    'sampler2D':'uniform1iv(location, value)'
	};
	
	module.exports = generateUniformAccessObject;


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	
	// state object//
	var setVertexAttribArrays = __webpack_require__( 26 );
	
	/**
	 * Helper class to work with WebGL VertexArrayObjects (vaos)
	 * Only works if WebGL extensions are enabled (they usually are)
	 *
	 * @class
	 * @memberof PIXI.glCore
	 * @param gl {WebGLRenderingContext} The current WebGL rendering context
	 */
	function VertexArrayObject(gl, state)
	{
	    this.nativeVaoExtension = null;
	
	    if(!VertexArrayObject.FORCE_NATIVE)
	    {
	        this.nativeVaoExtension = gl.getExtension('OES_vertex_array_object') ||
	                                  gl.getExtension('MOZ_OES_vertex_array_object') ||
	                                  gl.getExtension('WEBKIT_OES_vertex_array_object');
	    }
	
	    this.nativeState = state;
	
	    if(this.nativeVaoExtension)
	    {
	        this.nativeVao = this.nativeVaoExtension.createVertexArrayOES();
	
	        var maxAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
	
	        // VAO - overwrite the state..
	        this.nativeState = {
	            tempAttribState: new Array(maxAttribs),
	            attribState: new Array(maxAttribs)
	        };
	    }
	
	    /**
	     * The current WebGL rendering context
	     *
	     * @member {WebGLRenderingContext}
	     */
	    this.gl = gl;
	
	    /**
	     * An array of attributes
	     *
	     * @member {Array}
	     */
	    this.attributes = [];
	
	    /**
	     * @member {PIXI.glCore.GLBuffer}
	     */
	    this.indexBuffer = null;
	
	    /**
	     * A boolean flag
	     *
	     * @member {Boolean}
	     */
	    this.dirty = false;
	}
	
	VertexArrayObject.prototype.constructor = VertexArrayObject;
	module.exports = VertexArrayObject;
	
	/**
	* Some devices behave a bit funny when using the newer extensions (im looking at you ipad 2!)
	* If you find on older devices that things have gone a bit weird then set this to true.
	*/
	/**
	 * Lets the VAO know if you should use the WebGL extension or the native methods.
	 * Some devices behave a bit funny when using the newer extensions (im looking at you ipad 2!)
	 * If you find on older devices that things have gone a bit weird then set this to true.
	 * @static
	 * @property {Boolean} FORCE_NATIVE
	 */
	VertexArrayObject.FORCE_NATIVE = false;
	
	/**
	 * Binds the buffer
	 */
	VertexArrayObject.prototype.bind = function()
	{
	    if(this.nativeVao)
	    {
	        this.nativeVaoExtension.bindVertexArrayOES(this.nativeVao);
	
	        if(this.dirty)
	        {
	            this.dirty = false;
	            this.activate();
	        }
	    }
	    else
	    {
	
	        this.activate();
	    }
	
	    return this;
	};
	
	/**
	 * Unbinds the buffer
	 */
	VertexArrayObject.prototype.unbind = function()
	{
	    if(this.nativeVao)
	    {
	        this.nativeVaoExtension.bindVertexArrayOES(null);
	    }
	
	    return this;
	};
	
	/**
	 * Uses this vao
	 */
	VertexArrayObject.prototype.activate = function()
	{
	
	    var gl = this.gl;
	    var lastBuffer = null;
	
	    for (var i = 0; i < this.attributes.length; i++)
	    {
	        var attrib = this.attributes[i];
	
	        if(lastBuffer !== attrib.buffer)
	        {
	            attrib.buffer.bind();
	            lastBuffer = attrib.buffer;
	        }
	
	        gl.vertexAttribPointer(attrib.attribute.location,
	                               attrib.attribute.size,
	                               attrib.type || gl.FLOAT,
	                               attrib.normalized || false,
	                               attrib.stride || 0,
	                               attrib.start || 0);
	    }
	
	    setVertexAttribArrays(gl, this.attributes, this.nativeState);
	
	    if(this.indexBuffer)
	    {
	        this.indexBuffer.bind();
	    }
	
	    return this;
	};
	
	/**
	 *
	 * @param buffer     {PIXI.gl.GLBuffer}
	 * @param attribute  {*}
	 * @param type       {String}
	 * @param normalized {Boolean}
	 * @param stride     {Number}
	 * @param start      {Number}
	 */
	VertexArrayObject.prototype.addAttribute = function(buffer, attribute, type, normalized, stride, start)
	{
	    this.attributes.push({
	        buffer:     buffer,
	        attribute:  attribute,
	
	        location:   attribute.location,
	        type:       type || this.gl.FLOAT,
	        normalized: normalized || false,
	        stride:     stride || 0,
	        start:      start || 0
	    });
	
	    this.dirty = true;
	
	    return this;
	};
	
	/**
	 *
	 * @param buffer   {PIXI.gl.GLBuffer}
	 */
	VertexArrayObject.prototype.addIndex = function(buffer/*, options*/)
	{
	    this.indexBuffer = buffer;
	
	    this.dirty = true;
	
	    return this;
	};
	
	/**
	 * Unbinds this vao and disables it
	 */
	VertexArrayObject.prototype.clear = function()
	{
	    // var gl = this.gl;
	
	    // TODO - should this function unbind after clear?
	    // for now, no but lets see what happens in the real world!
	    if(this.nativeVao)
	    {
	        this.nativeVaoExtension.bindVertexArrayOES(this.nativeVao);
	    }
	
	    this.attributes.length = 0;
	    this.indexBuffer = null;
	
	    return this;
	};
	
	/**
	 * @param type  {Number}
	 * @param size  {Number}
	 * @param start {Number}
	 */
	VertexArrayObject.prototype.draw = function(type, size, start)
	{
	    var gl = this.gl;
	
	    if(this.indexBuffer)
	    {
	        gl.drawElements(type, size || this.indexBuffer.data.length, gl.UNSIGNED_SHORT, (start || 0) * 2 );
	    }
	    else
	    {
	        // TODO need a better way to calculate size..
	        gl.drawArrays(type, start, size || this.getSize());
	    }
	
	    return this;
	};
	
	/**
	 * Destroy this vao
	 */
	VertexArrayObject.prototype.destroy = function()
	{
	    // lose references
	    this.gl = null;
	    this.indexBuffer = null;
	    this.attributes = null;
	    this.nativeState = null;
	
	    if(this.nativeVao)
	    {
	        this.nativeVaoExtension.deleteVertexArrayOES(this.nativeVao);
	    }
	
	    this.nativeVaoExtension = null;
	    this.nativeVao = null;
	};
	
	VertexArrayObject.prototype.getSize = function()
	{
	    var attrib = this.attributes[0];
	    return attrib.buffer.data.length / (( attrib.stride/4 ) || attrib.attribute.size);
	};


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	    compileProgram: __webpack_require__(31),
	    defaultValue: __webpack_require__(36),
	    extractAttributes: __webpack_require__(32),
	    extractUniforms: __webpack_require__(35),
	    generateUniformAccessObject: __webpack_require__(38),
	    setPrecision: __webpack_require__(37),
	    mapSize: __webpack_require__(34),
	    mapType: __webpack_require__(33)
	};

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _eventemitter = __webpack_require__(42);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _const = __webpack_require__(12);
	
	var _settings = __webpack_require__(43);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	var _TransformStatic = __webpack_require__(46);
	
	var _TransformStatic2 = _interopRequireDefault(_TransformStatic);
	
	var _Transform = __webpack_require__(48);
	
	var _Transform2 = _interopRequireDefault(_Transform);
	
	var _Bounds = __webpack_require__(49);
	
	var _Bounds2 = _interopRequireDefault(_Bounds);
	
	var _math = __webpack_require__(14);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	// _tempDisplayObjectParent = new DisplayObject();
	
	/**
	 * The base class for all objects that are rendered on the screen.
	 * This is an abstract class and should not be used on its own rather it should be extended.
	 *
	 * @class
	 * @extends EventEmitter
	 * @mixes PIXI.interaction.interactiveTarget
	 * @memberof PIXI
	 */
	var DisplayObject = function (_EventEmitter) {
	    _inherits(DisplayObject, _EventEmitter);
	
	    /**
	     *
	     */
	    function DisplayObject() {
	        _classCallCheck(this, DisplayObject);
	
	        var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));
	
	        var TransformClass = _settings2.default.TRANSFORM_MODE === _const.TRANSFORM_MODE.STATIC ? _TransformStatic2.default : _Transform2.default;
	
	        _this.tempDisplayObjectParent = null;
	
	        // TODO: need to create Transform from factory
	        /**
	         * World transform and local transform of this object.
	         * This will become read-only later, please do not assign anything there unless you know what are you doing
	         *
	         * @member {PIXI.TransformBase}
	         */
	        _this.transform = new TransformClass();
	
	        /**
	         * The opacity of the object.
	         *
	         * @member {number}
	         */
	        _this.alpha = 1;
	
	        /**
	         * The visibility of the object. If false the object will not be drawn, and
	         * the updateTransform function will not be called.
	         *
	         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually
	         *
	         * @member {boolean}
	         */
	        _this.visible = true;
	
	        /**
	         * Can this object be rendered, if false the object will not be drawn but the updateTransform
	         * methods will still be called.
	         *
	         * Only affects recursive calls from parent. You can ask for bounds manually
	         *
	         * @member {boolean}
	         */
	        _this.renderable = true;
	
	        /**
	         * The display object container that contains this display object.
	         *
	         * @member {PIXI.Container}
	         * @readonly
	         */
	        _this.parent = null;
	
	        /**
	         * The multiplied alpha of the displayObject
	         *
	         * @member {number}
	         * @readonly
	         */
	        _this.worldAlpha = 1;
	
	        /**
	         * The area the filter is applied to. This is used as more of an optimisation
	         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle
	         *
	         * Also works as an interaction mask
	         *
	         * @member {PIXI.Rectangle}
	         */
	        _this.filterArea = null;
	
	        _this._filters = null;
	        _this._enabledFilters = null;
	
	        /**
	         * The bounds object, this is used to calculate and store the bounds of the displayObject
	         *
	         * @member {PIXI.Rectangle}
	         * @private
	         */
	        _this._bounds = new _Bounds2.default();
	        _this._boundsID = 0;
	        _this._lastBoundsID = -1;
	        _this._boundsRect = null;
	        _this._localBoundsRect = null;
	
	        /**
	         * The original, cached mask of the object
	         *
	         * @member {PIXI.Rectangle}
	         * @private
	         */
	        _this._mask = null;
	        return _this;
	    }
	
	    /**
	     * @private
	     * @member {PIXI.DisplayObject}
	     */
	
	
	    /**
	     * Updates the object transform for rendering
	     *
	     * TODO - Optimization pass!
	     */
	    DisplayObject.prototype.updateTransform = function updateTransform() {
	        this.transform.updateTransform(this.parent.transform);
	        // multiply the alphas..
	        this.worldAlpha = this.alpha * this.parent.worldAlpha;
	
	        this._bounds.updateID++;
	    };
	
	    /**
	     * recursively updates transform of all objects from the root to this one
	     * internal function for toLocal()
	     */
	
	
	    DisplayObject.prototype._recursivePostUpdateTransform = function _recursivePostUpdateTransform() {
	        if (this.parent) {
	            this.parent._recursivePostUpdateTransform();
	            this.transform.updateTransform(this.parent.transform);
	        } else {
	            this.transform.updateTransform(this._tempDisplayObjectParent.transform);
	        }
	    };
	
	    /**
	     * Retrieves the bounds of the displayObject as a rectangle object.
	     *
	     * @param {boolean} skipUpdate - setting to true will stop the transforms of the scene graph from
	     *  being updated. This means the calculation returned MAY be out of date BUT will give you a
	     *  nice performance boost
	     * @param {PIXI.Rectangle} rect - Optional rectangle to store the result of the bounds calculation
	     * @return {PIXI.Rectangle} the rectangular bounding area
	     */
	
	
	    DisplayObject.prototype.getBounds = function getBounds(skipUpdate, rect) {
	        if (!skipUpdate) {
	            if (!this.parent) {
	                this.parent = this._tempDisplayObjectParent;
	                this.updateTransform();
	                this.parent = null;
	            } else {
	                this._recursivePostUpdateTransform();
	                this.updateTransform();
	            }
	        }
	
	        if (this._boundsID !== this._lastBoundsID) {
	            this.calculateBounds();
	        }
	
	        if (!rect) {
	            if (!this._boundsRect) {
	                this._boundsRect = new _math.Rectangle();
	            }
	
	            rect = this._boundsRect;
	        }
	
	        return this._bounds.getRectangle(rect);
	    };
	
	    /**
	     * Retrieves the local bounds of the displayObject as a rectangle object
	     *
	     * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation
	     * @return {PIXI.Rectangle} the rectangular bounding area
	     */
	
	
	    DisplayObject.prototype.getLocalBounds = function getLocalBounds(rect) {
	        var transformRef = this.transform;
	        var parentRef = this.parent;
	
	        this.parent = null;
	        this.transform = this._tempDisplayObjectParent.transform;
	
	        if (!rect) {
	            if (!this._localBoundsRect) {
	                this._localBoundsRect = new _math.Rectangle();
	            }
	
	            rect = this._localBoundsRect;
	        }
	
	        var bounds = this.getBounds(false, rect);
	
	        this.parent = parentRef;
	        this.transform = transformRef;
	
	        return bounds;
	    };
	
	    /**
	     * Calculates the global position of the display object
	     *
	     * @param {PIXI.Point} position - The world origin to calculate from
	     * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
	     *  (otherwise will create a new Point)
	     * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
	     * @return {PIXI.Point} A point object representing the position of this object
	     */
	
	
	    DisplayObject.prototype.toGlobal = function toGlobal(position, point) {
	        var skipUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	        if (!skipUpdate) {
	            this._recursivePostUpdateTransform();
	
	            // this parent check is for just in case the item is a root object.
	            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly
	            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)
	            if (!this.parent) {
	                this.parent = this._tempDisplayObjectParent;
	                this.displayObjectUpdateTransform();
	                this.parent = null;
	            } else {
	                this.displayObjectUpdateTransform();
	            }
	        }
	
	        // don't need to update the lot
	        return this.worldTransform.apply(position, point);
	    };
	
	    /**
	     * Calculates the local position of the display object relative to another point
	     *
	     * @param {PIXI.Point} position - The world origin to calculate from
	     * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from
	     * @param {PIXI.Point} [point] - A Point object in which to store the value, optional
	     *  (otherwise will create a new Point)
	     * @param {boolean} [skipUpdate=false] - Should we skip the update transform
	     * @return {PIXI.Point} A point object representing the position of this object
	     */
	
	
	    DisplayObject.prototype.toLocal = function toLocal(position, from, point, skipUpdate) {
	        if (from) {
	            position = from.toGlobal(position, point, skipUpdate);
	        }
	
	        if (!skipUpdate) {
	            this._recursivePostUpdateTransform();
	
	            // this parent check is for just in case the item is a root object.
	            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly
	            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)
	            if (!this.parent) {
	                this.parent = this._tempDisplayObjectParent;
	                this.displayObjectUpdateTransform();
	                this.parent = null;
	            } else {
	                this.displayObjectUpdateTransform();
	            }
	        }
	
	        // simply apply the matrix..
	        return this.worldTransform.applyInverse(position, point);
	    };
	
	    /**
	     * Renders the object using the WebGL renderer
	     *
	     * @param {PIXI.WebGLRenderer} renderer - The renderer
	     */
	
	
	    DisplayObject.prototype.renderWebGL = function renderWebGL(renderer) // eslint-disable-line no-unused-vars
	    {}
	    // OVERWRITE;
	
	
	    /**
	     * Renders the object using the Canvas renderer
	     *
	     * @param {PIXI.CanvasRenderer} renderer - The renderer
	     */
	    ;
	
	    DisplayObject.prototype.renderCanvas = function renderCanvas(renderer) // eslint-disable-line no-unused-vars
	    {}
	    // OVERWRITE;
	
	
	    /**
	     * Set the parent Container of this DisplayObject
	     *
	     * @param {PIXI.Container} container - The Container to add this DisplayObject to
	     * @return {PIXI.Container} The Container that this DisplayObject was added to
	     */
	    ;
	
	    DisplayObject.prototype.setParent = function setParent(container) {
	        if (!container || !container.addChild) {
	            throw new Error('setParent: Argument must be a Container');
	        }
	
	        container.addChild(this);
	
	        return container;
	    };
	
	    /**
	     * Convenience function to set the position, scale, skew and pivot at once.
	     *
	     * @param {number} [x=0] - The X position
	     * @param {number} [y=0] - The Y position
	     * @param {number} [scaleX=1] - The X scale value
	     * @param {number} [scaleY=1] - The Y scale value
	     * @param {number} [rotation=0] - The rotation
	     * @param {number} [skewX=0] - The X skew value
	     * @param {number} [skewY=0] - The Y skew value
	     * @param {number} [pivotX=0] - The X pivot value
	     * @param {number} [pivotY=0] - The Y pivot value
	     * @return {PIXI.DisplayObject} The DisplayObject instance
	     */
	
	
	    DisplayObject.prototype.setTransform = function setTransform() {
	        var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	        var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	        var scaleX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
	        var scaleY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
	        var rotation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
	        var skewX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
	        var skewY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
	        var pivotX = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
	        var pivotY = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
	
	        this.position.x = x;
	        this.position.y = y;
	        this.scale.x = !scaleX ? 1 : scaleX;
	        this.scale.y = !scaleY ? 1 : scaleY;
	        this.rotation = rotation;
	        this.skew.x = skewX;
	        this.skew.y = skewY;
	        this.pivot.x = pivotX;
	        this.pivot.y = pivotY;
	
	        return this;
	    };
	
	    /**
	     * Base destroy method for generic display objects. This will automatically
	     * remove the display object from its parent Container as well as remove
	     * all current event listeners and internal references. Do not use a DisplayObject
	     * after calling `destroy`.
	     *
	     */
	
	
	    DisplayObject.prototype.destroy = function destroy() {
	        this.removeAllListeners();
	        if (this.parent) {
	            this.parent.removeChild(this);
	        }
	        this.transform = null;
	
	        this.parent = null;
	
	        this._bounds = null;
	        this._currentBounds = null;
	        this._mask = null;
	
	        this.filterArea = null;
	
	        this.interactive = false;
	        this.interactiveChildren = false;
	    };
	
	    /**
	     * The position of the displayObject on the x axis relative to the local coordinates of the parent.
	     * An alias to position.x
	     *
	     * @member {number}
	     * @memberof PIXI.DisplayObject#
	     */
	
	
	    _createClass(DisplayObject, [{
	        key: '_tempDisplayObjectParent',
	        get: function get() {
	            if (this.tempDisplayObjectParent === null) {
	                this.tempDisplayObjectParent = new DisplayObject();
	            }
	
	            return this.tempDisplayObjectParent;
	        }
	    }, {
	        key: 'x',
	        get: function get() {
	            return this.position.x;
	        }
	
	        /**
	         * Sets the X position of the object.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this.transform.position.x = value;
	        }
	
	        /**
	         * The position of the displayObject on the y axis relative to the local coordinates of the parent.
	         * An alias to position.y
	         *
	         * @member {number}
	         * @memberof PIXI.DisplayObject#
	         */
	
	    }, {
	        key: 'y',
	        get: function get() {
	            return this.position.y;
	        }
	
	        /**
	         * Sets the Y position of the object.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this.transform.position.y = value;
	        }
	
	        /**
	         * Current transform of the object based on world (parent) factors
	         *
	         * @member {PIXI.Matrix}
	         * @memberof PIXI.DisplayObject#
	         * @readonly
	         */
	
	    }, {
	        key: 'worldTransform',
	        get: function get() {
	            return this.transform.worldTransform;
	        }
	
	        /**
	         * Current transform of the object based on local factors: position, scale, other stuff
	         *
	         * @member {PIXI.Matrix}
	         * @memberof PIXI.DisplayObject#
	         * @readonly
	         */
	
	    }, {
	        key: 'localTransform',
	        get: function get() {
	            return this.transform.localTransform;
	        }
	
	        /**
	         * The coordinate of the object relative to the local coordinates of the parent.
	         * Assignment by value since pixi-v4.
	         *
	         * @member {PIXI.Point|PIXI.ObservablePoint}
	         * @memberof PIXI.DisplayObject#
	         */
	
	    }, {
	        key: 'position',
	        get: function get() {
	            return this.transform.position;
	        }
	
	        /**
	         * Copies the point to the position of the object.
	         *
	         * @param {PIXI.Point} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this.transform.position.copy(value);
	        }
	
	        /**
	         * The scale factor of the object.
	         * Assignment by value since pixi-v4.
	         *
	         * @member {PIXI.Point|PIXI.ObservablePoint}
	         * @memberof PIXI.DisplayObject#
	         */
	
	    }, {
	        key: 'scale',
	        get: function get() {
	            return this.transform.scale;
	        }
	
	        /**
	         * Copies the point to the scale of the object.
	         *
	         * @param {PIXI.Point} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this.transform.scale.copy(value);
	        }
	
	        /**
	         * The pivot point of the displayObject that it rotates around
	         * Assignment by value since pixi-v4.
	         *
	         * @member {PIXI.Point|PIXI.ObservablePoint}
	         * @memberof PIXI.DisplayObject#
	         */
	
	    }, {
	        key: 'pivot',
	        get: function get() {
	            return this.transform.pivot;
	        }
	
	        /**
	         * Copies the point to the pivot of the object.
	         *
	         * @param {PIXI.Point} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this.transform.pivot.copy(value);
	        }
	
	        /**
	         * The skew factor for the object in radians.
	         * Assignment by value since pixi-v4.
	         *
	         * @member {PIXI.ObservablePoint}
	         * @memberof PIXI.DisplayObject#
	         */
	
	    }, {
	        key: 'skew',
	        get: function get() {
	            return this.transform.skew;
	        }
	
	        /**
	         * Copies the point to the skew of the object.
	         *
	         * @param {PIXI.Point} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this.transform.skew.copy(value);
	        }
	
	        /**
	         * The rotation of the object in radians.
	         *
	         * @member {number}
	         * @memberof PIXI.DisplayObject#
	         */
	
	    }, {
	        key: 'rotation',
	        get: function get() {
	            return this.transform.rotation;
	        }
	
	        /**
	         * Sets the rotation of the object.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this.transform.rotation = value;
	        }
	
	        /**
	         * Indicates if the object is globally visible.
	         *
	         * @member {boolean}
	         * @memberof PIXI.DisplayObject#
	         * @readonly
	         */
	
	    }, {
	        key: 'worldVisible',
	        get: function get() {
	            var item = this;
	
	            do {
	                if (!item.visible) {
	                    return false;
	                }
	
	                item = item.parent;
	            } while (item);
	
	            return true;
	        }
	
	        /**
	         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
	         * object to the shape of the mask applied to it. In PIXI a regular mask must be a
	         * PIXI.Graphics or a PIXI.Sprite object. This allows for much faster masking in canvas as it
	         * utilises shape clipping. To remove a mask, set this property to null.
	         *
	         * @todo For the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
	         *
	         * @member {PIXI.Graphics|PIXI.Sprite}
	         * @memberof PIXI.DisplayObject#
	         */
	
	    }, {
	        key: 'mask',
	        get: function get() {
	            return this._mask;
	        }
	
	        /**
	         * Sets the mask.
	         *
	         * @param {PIXI.Graphics|PIXI.Sprite} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            if (this._mask) {
	                this._mask.renderable = true;
	            }
	
	            this._mask = value;
	
	            if (this._mask) {
	                this._mask.renderable = false;
	            }
	        }
	
	        /**
	         * Sets the filters for the displayObject.
	         * * IMPORTANT: This is a webGL only feature and will be ignored by the canvas renderer.
	         * To remove filters simply set this property to 'null'
	         *
	         * @member {PIXI.Filter[]}
	         * @memberof PIXI.DisplayObject#
	         */
	
	    }, {
	        key: 'filters',
	        get: function get() {
	            return this._filters && this._filters.slice();
	        }
	
	        /**
	         * Shallow copies the array to the filters of the object.
	         *
	         * @param {PIXI.Filter[]} value - The filters to set.
	         */
	        ,
	        set: function set(value) {
	            this._filters = value && value.slice();
	        }
	    }]);
	
	    return DisplayObject;
	}(_eventemitter2.default);
	
	// performance increase to avoid using call.. (10x faster)
	
	
	exports.default = DisplayObject;
	DisplayObject.prototype.displayObjectUpdateTransform = DisplayObject.prototype.updateTransform;
	//# sourceMappingURL=DisplayObject.js.map

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var has = Object.prototype.hasOwnProperty
	  , prefix = '~';
	
	/**
	 * Constructor to create a storage for our `EE` objects.
	 * An `Events` instance is a plain object whose properties are event names.
	 *
	 * @constructor
	 * @api private
	 */
	function Events() {}
	
	//
	// We try to not inherit from `Object.prototype`. In some engines creating an
	// instance in this way is faster than calling `Object.create(null)` directly.
	// If `Object.create(null)` is not supported we prefix the event names with a
	// character to make sure that the built-in object properties are not
	// overridden or used as an attack vector.
	//
	if (Object.create) {
	  Events.prototype = Object.create(null);
	
	  //
	  // This hack is needed because the `__proto__` property is still inherited in
	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
	  //
	  if (!new Events().__proto__) prefix = false;
	}
	
	/**
	 * Representation of a single event listener.
	 *
	 * @param {Function} fn The listener function.
	 * @param {Mixed} context The context to invoke the listener with.
	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
	 * @constructor
	 * @api private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}
	
	/**
	 * Minimal `EventEmitter` interface that is molded against the Node.js
	 * `EventEmitter` interface.
	 *
	 * @constructor
	 * @api public
	 */
	function EventEmitter() {
	  this._events = new Events();
	  this._eventsCount = 0;
	}
	
	/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @api public
	 */
	EventEmitter.prototype.eventNames = function eventNames() {
	  var names = []
	    , events
	    , name;
	
	  if (this._eventsCount === 0) return names;
	
	  for (name in (events = this._events)) {
	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	  }
	
	  if (Object.getOwnPropertySymbols) {
	    return names.concat(Object.getOwnPropertySymbols(events));
	  }
	
	  return names;
	};
	
	/**
	 * Return the listeners registered for a given event.
	 *
	 * @param {String|Symbol} event The event name.
	 * @param {Boolean} exists Only check if there are listeners.
	 * @returns {Array|Boolean}
	 * @api public
	 */
	EventEmitter.prototype.listeners = function listeners(event, exists) {
	  var evt = prefix ? prefix + event : event
	    , available = this._events[evt];
	
	  if (exists) return !!available;
	  if (!available) return [];
	  if (available.fn) return [available.fn];
	
	  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
	    ee[i] = available[i].fn;
	  }
	
	  return ee;
	};
	
	/**
	 * Calls each of the listeners registered for a given event.
	 *
	 * @param {String|Symbol} event The event name.
	 * @returns {Boolean} `true` if the event had listeners, else `false`.
	 * @api public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;
	
	  if (!this._events[evt]) return false;
	
	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;
	
	  if (listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);
	
	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }
	
	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }
	
	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;
	
	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);
	
	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }
	
	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }
	
	  return true;
	};
	
	/**
	 * Add a listener for a given event.
	 *
	 * @param {String|Symbol} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {Mixed} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @api public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  var listener = new EE(fn, context || this)
	    , evt = prefix ? prefix + event : event;
	
	  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
	  else if (!this._events[evt].fn) this._events[evt].push(listener);
	  else this._events[evt] = [this._events[evt], listener];
	
	  return this;
	};
	
	/**
	 * Add a one-time listener for a given event.
	 *
	 * @param {String|Symbol} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {Mixed} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @api public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  var listener = new EE(fn, context || this, true)
	    , evt = prefix ? prefix + event : event;
	
	  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
	  else if (!this._events[evt].fn) this._events[evt].push(listener);
	  else this._events[evt] = [this._events[evt], listener];
	
	  return this;
	};
	
	/**
	 * Remove the listeners of a given event.
	 *
	 * @param {String|Symbol} event The event name.
	 * @param {Function} fn Only remove the listeners that match this function.
	 * @param {Mixed} context Only remove the listeners that have this context.
	 * @param {Boolean} once Only remove one-time listeners.
	 * @returns {EventEmitter} `this`.
	 * @api public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;
	
	  if (!this._events[evt]) return this;
	  if (!fn) {
	    if (--this._eventsCount === 0) this._events = new Events();
	    else delete this._events[evt];
	    return this;
	  }
	
	  var listeners = this._events[evt];
	
	  if (listeners.fn) {
	    if (
	         listeners.fn === fn
	      && (!once || listeners.once)
	      && (!context || listeners.context === context)
	    ) {
	      if (--this._eventsCount === 0) this._events = new Events();
	      else delete this._events[evt];
	    }
	  } else {
	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
	      if (
	           listeners[i].fn !== fn
	        || (once && !listeners[i].once)
	        || (context && listeners[i].context !== context)
	      ) {
	        events.push(listeners[i]);
	      }
	    }
	
	    //
	    // Reset the array, or remove it completely if we have no more listeners.
	    //
	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
	    else if (--this._eventsCount === 0) this._events = new Events();
	    else delete this._events[evt];
	  }
	
	  return this;
	};
	
	/**
	 * Remove all listeners, or those of the specified event.
	 *
	 * @param {String|Symbol} [event] The event name.
	 * @returns {EventEmitter} `this`.
	 * @api public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  var evt;
	
	  if (event) {
	    evt = prefix ? prefix + event : event;
	    if (this._events[evt]) {
	      if (--this._eventsCount === 0) this._events = new Events();
	      else delete this._events[evt];
	    }
	  } else {
	    this._events = new Events();
	    this._eventsCount = 0;
	  }
	
	  return this;
	};
	
	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;
	
	//
	// This function doesn't apply anymore.
	//
	EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
	  return this;
	};
	
	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;
	
	//
	// Allow `EventEmitter` to be imported as module namespace.
	//
	EventEmitter.EventEmitter = EventEmitter;
	
	//
	// Expose the module.
	//
	if (true) {
	  module.exports = EventEmitter;
	}


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _maxRecommendedTextures = __webpack_require__(44);
	
	var _maxRecommendedTextures2 = _interopRequireDefault(_maxRecommendedTextures);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * @namespace PIXI.settings
	 */
	exports.default = {
	
	  /**
	   * Target frames per millisecond.
	   *
	   * @static
	   * @memberof PIXI.settings
	   * @type {number}
	   * @default 0.06
	   */
	  TARGET_FPMS: 0.06,
	
	  /**
	   * If set to true WebGL will attempt make textures mimpaped by default.
	   * Mipmapping will only succeed if the base texture uploaded has power of two dimensions.
	   *
	   * @static
	   * @memberof PIXI.settings
	   * @type {boolean}
	   * @default true
	   */
	  MIPMAP_TEXTURES: true,
	
	  /**
	   * Default resolution / device pixel ratio of the renderer.
	   *
	   * @static
	   * @memberof PIXI.settings
	   * @type {number}
	   * @default 1
	   */
	  RESOLUTION: 1,
	
	  /**
	   * Default filter resolution.
	   *
	   * @static
	   * @memberof PIXI.settings
	   * @type {number}
	   * @default 1
	   */
	  FILTER_RESOLUTION: 1,
	
	  /**
	   * The maximum textures that this device supports.
	   *
	   * @static
	   * @memberof PIXI.settings
	   * @type {number}
	   * @default 32
	   */
	  SPRITE_MAX_TEXTURES: (0, _maxRecommendedTextures2.default)(32),
	
	  /**
	   * The default sprite batch size.
	   *
	   * The default aims to balance desktop and mobile devices.
	   *
	   * @static
	   * @memberof PIXI.settings
	   * @type {number}
	   * @default 4096
	   */
	  SPRITE_BATCH_SIZE: 4096,
	
	  /**
	   * The prefix that denotes a URL is for a retina asset.
	   *
	   * @static
	   * @memberof PIXI.settings
	   * @type {RegExp|string}
	   * @example `@2x`
	   * @default /@(.+)x/
	   */
	  RETINA_PREFIX: /@(.+)x/,
	
	  /**
	   * The default render options if none are supplied to {@link PIXI.WebGLRenderer}
	   * or {@link PIXI.CanvasRenderer}.
	   *
	   * @static
	   * @constant
	   * @memberof PIXI.settings
	   * @type {object}
	   * @property {HTMLCanvasElement} view=null
	   * @property {number} resolution=1
	   * @property {boolean} antialias=false
	   * @property {boolean} forceFXAA=false
	   * @property {boolean} autoResize=false
	   * @property {boolean} transparent=false
	   * @property {number} backgroundColor=0x000000
	   * @property {boolean} clearBeforeRender=true
	   * @property {boolean} preserveDrawingBuffer=false
	   * @property {boolean} roundPixels=false
	   */
	  RENDER_OPTIONS: {
	    view: null,
	    antialias: false,
	    forceFXAA: false,
	    autoResize: false,
	    transparent: false,
	    backgroundColor: 0x000000,
	    clearBeforeRender: true,
	    preserveDrawingBuffer: false,
	    roundPixels: false
	  },
	
	  /**
	   * Default transform type.
	   *
	   * @static
	   * @memberof PIXI.settings
	   * @type {number}
	   * @default PIXI.TRANSFORM_MODE.STATIC
	   */
	  TRANSFORM_MODE: 0,
	
	  /**
	   * Default Garbage Collection mode.
	   *
	   * @static
	   * @memberof PIXI.settings
	   * @type {number}
	   * @default PIXI.GC_MODES.AUTO
	   */
	  GC_MODE: 0,
	
	  /**
	   * Default wrap modes that are supported by pixi.
	   *
	   * @static
	   * @memberof PIXI.settings
	   * @type {number}
	   * @default PIXI.WRAP_MODES.CLAMP
	   */
	  WRAP_MODE: 0,
	
	  /**
	   * The scale modes that are supported by pixi.
	   *
	   * @static
	   * @memberof PIXI.settings
	   * @type {number}
	   * @default PIXI.SCALE_MODES.LINEAR
	   */
	  SCALE_MODE: 0,
	
	  /**
	   * Default specify float precision in shaders.
	   *
	   * @static
	   * @memberof PIXI.settings
	   * @type {string}
	   * @default PIXI.PRECISION.MEDIUM
	   */
	  PRECISION: 'mediump'
	
	};
	//# sourceMappingURL=settings.js.map

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = maxRecommendedTextures;
	
	var _ismobilejs = __webpack_require__(45);
	
	var _ismobilejs2 = _interopRequireDefault(_ismobilejs);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function maxRecommendedTextures(max) {
	    if (_ismobilejs2.default.tablet || _ismobilejs2.default.phone) {
	        // check if the res is iphone 6 or higher..
	        return 4;
	    }
	
	    // desktop should be ok
	    return max;
	}
	//# sourceMappingURL=maxRecommendedTextures.js.map

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * isMobile.js v0.4.1
	 *
	 * A simple library to detect Apple phones and tablets,
	 * Android phones and tablets, other mobile devices (like blackberry, mini-opera and windows phone),
	 * and any kind of seven inch device, via user agent sniffing.
	 *
	 * @author: Kai Mallea (kmallea@gmail.com)
	 *
	 * @license: http://creativecommons.org/publicdomain/zero/1.0/
	 */
	(function (global) {
	
	    var apple_phone         = /iPhone/i,
	        apple_ipod          = /iPod/i,
	        apple_tablet        = /iPad/i,
	        android_phone       = /(?=.*\bAndroid\b)(?=.*\bMobile\b)/i, // Match 'Android' AND 'Mobile'
	        android_tablet      = /Android/i,
	        amazon_phone        = /(?=.*\bAndroid\b)(?=.*\bSD4930UR\b)/i,
	        amazon_tablet       = /(?=.*\bAndroid\b)(?=.*\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\b)/i,
	        windows_phone       = /Windows Phone/i,
	        windows_tablet      = /(?=.*\bWindows\b)(?=.*\bARM\b)/i, // Match 'Windows' AND 'ARM'
	        other_blackberry    = /BlackBerry/i,
	        other_blackberry_10 = /BB10/i,
	        other_opera         = /Opera Mini/i,
	        other_chrome        = /(CriOS|Chrome)(?=.*\bMobile\b)/i,
	        other_firefox       = /(?=.*\bFirefox\b)(?=.*\bMobile\b)/i, // Match 'Firefox' AND 'Mobile'
	        seven_inch = new RegExp(
	            '(?:' +         // Non-capturing group
	
	            'Nexus 7' +     // Nexus 7
	
	            '|' +           // OR
	
	            'BNTV250' +     // B&N Nook Tablet 7 inch
	
	            '|' +           // OR
	
	            'Kindle Fire' + // Kindle Fire
	
	            '|' +           // OR
	
	            'Silk' +        // Kindle Fire, Silk Accelerated
	
	            '|' +           // OR
	
	            'GT-P1000' +    // Galaxy Tab 7 inch
	
	            ')',            // End non-capturing group
	
	            'i');           // Case-insensitive matching
	
	    var match = function(regex, userAgent) {
	        return regex.test(userAgent);
	    };
	
	    var IsMobileClass = function(userAgent) {
	        var ua = userAgent || navigator.userAgent;
	
	        // Facebook mobile app's integrated browser adds a bunch of strings that
	        // match everything. Strip it out if it exists.
	        var tmp = ua.split('[FBAN');
	        if (typeof tmp[1] !== 'undefined') {
	            ua = tmp[0];
	        }
	
	        // Twitter mobile app's integrated browser on iPad adds a "Twitter for
	        // iPhone" string. Same probable happens on other tablet platforms.
	        // This will confuse detection so strip it out if it exists.
	        tmp = ua.split('Twitter');
	        if (typeof tmp[1] !== 'undefined') {
	            ua = tmp[0];
	        }
	
	        this.apple = {
	            phone:  match(apple_phone, ua),
	            ipod:   match(apple_ipod, ua),
	            tablet: !match(apple_phone, ua) && match(apple_tablet, ua),
	            device: match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)
	        };
	        this.amazon = {
	            phone:  match(amazon_phone, ua),
	            tablet: !match(amazon_phone, ua) && match(amazon_tablet, ua),
	            device: match(amazon_phone, ua) || match(amazon_tablet, ua)
	        };
	        this.android = {
	            phone:  match(amazon_phone, ua) || match(android_phone, ua),
	            tablet: !match(amazon_phone, ua) && !match(android_phone, ua) && (match(amazon_tablet, ua) || match(android_tablet, ua)),
	            device: match(amazon_phone, ua) || match(amazon_tablet, ua) || match(android_phone, ua) || match(android_tablet, ua)
	        };
	        this.windows = {
	            phone:  match(windows_phone, ua),
	            tablet: match(windows_tablet, ua),
	            device: match(windows_phone, ua) || match(windows_tablet, ua)
	        };
	        this.other = {
	            blackberry:   match(other_blackberry, ua),
	            blackberry10: match(other_blackberry_10, ua),
	            opera:        match(other_opera, ua),
	            firefox:      match(other_firefox, ua),
	            chrome:       match(other_chrome, ua),
	            device:       match(other_blackberry, ua) || match(other_blackberry_10, ua) || match(other_opera, ua) || match(other_firefox, ua) || match(other_chrome, ua)
	        };
	        this.seven_inch = match(seven_inch, ua);
	        this.any = this.apple.device || this.android.device || this.windows.device || this.other.device || this.seven_inch;
	
	        // excludes 'other' devices and ipods, targeting touchscreen phones
	        this.phone = this.apple.phone || this.android.phone || this.windows.phone;
	
	        // excludes 7 inch devices, classifying as phone or tablet is left to the user
	        this.tablet = this.apple.tablet || this.android.tablet || this.windows.tablet;
	
	        if (typeof window === 'undefined') {
	            return this;
	        }
	    };
	
	    var instantiate = function() {
	        var IM = new IsMobileClass();
	        IM.Class = IsMobileClass;
	        return IM;
	    };
	
	    if (typeof module !== 'undefined' && module.exports && typeof window === 'undefined') {
	        //node
	        module.exports = IsMobileClass;
	    } else if (typeof module !== 'undefined' && module.exports && typeof window !== 'undefined') {
	        //browserify
	        module.exports = instantiate();
	    } else if (true) {
	        //AMD
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (global.isMobile = instantiate()), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else {
	        global.isMobile = instantiate();
	    }
	
	})(this);


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _math = __webpack_require__(14);
	
	var _TransformBase2 = __webpack_require__(47);
	
	var _TransformBase3 = _interopRequireDefault(_TransformBase2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Transform that takes care about its versions
	 *
	 * @class
	 * @extends PIXI.TransformBase
	 * @memberof PIXI
	 */
	var TransformStatic = function (_TransformBase) {
	  _inherits(TransformStatic, _TransformBase);
	
	  /**
	   *
	   */
	  function TransformStatic() {
	    _classCallCheck(this, TransformStatic);
	
	    /**
	    * The coordinate of the object relative to the local coordinates of the parent.
	    *
	    * @member {PIXI.ObservablePoint}
	    */
	    var _this = _possibleConstructorReturn(this, _TransformBase.call(this));
	
	    _this.position = new _math.ObservablePoint(_this.onChange, _this, 0, 0);
	
	    /**
	     * The scale factor of the object.
	     *
	     * @member {PIXI.ObservablePoint}
	     */
	    _this.scale = new _math.ObservablePoint(_this.onChange, _this, 1, 1);
	
	    /**
	     * The pivot point of the displayObject that it rotates around
	     *
	     * @member {PIXI.ObservablePoint}
	     */
	    _this.pivot = new _math.ObservablePoint(_this.onChange, _this, 0, 0);
	
	    /**
	     * The skew amount, on the x and y axis.
	     *
	     * @member {PIXI.ObservablePoint}
	     */
	    _this.skew = new _math.ObservablePoint(_this.updateSkew, _this, 0, 0);
	
	    _this._rotation = 0;
	
	    _this._sr = Math.sin(0);
	    _this._cr = Math.cos(0);
	    _this._cy = Math.cos(0); // skewY);
	    _this._sy = Math.sin(0); // skewY);
	    _this._nsx = Math.sin(0); // skewX);
	    _this._cx = Math.cos(0); // skewX);
	
	    _this._localID = 0;
	    _this._currentLocalID = 0;
	    return _this;
	  }
	
	  /**
	   * Called when a value changes.
	   *
	   * @private
	   */
	
	
	  TransformStatic.prototype.onChange = function onChange() {
	    this._localID++;
	  };
	
	  /**
	   * Called when skew changes
	   *
	   * @private
	   */
	
	
	  TransformStatic.prototype.updateSkew = function updateSkew() {
	    this._cy = Math.cos(this.skew._y);
	    this._sy = Math.sin(this.skew._y);
	    this._nsx = Math.sin(this.skew._x);
	    this._cx = Math.cos(this.skew._x);
	
	    this._localID++;
	  };
	
	  /**
	   * Updates only local matrix
	   */
	
	
	  TransformStatic.prototype.updateLocalTransform = function updateLocalTransform() {
	    var lt = this.localTransform;
	
	    if (this._localID !== this._currentLocalID) {
	      // get the matrix values of the displayobject based on its transform properties..
	      var a = this._cr * this.scale._x;
	      var b = this._sr * this.scale._x;
	      var c = -this._sr * this.scale._y;
	      var d = this._cr * this.scale._y;
	
	      lt.a = this._cy * a + this._sy * c;
	      lt.b = this._cy * b + this._sy * d;
	      lt.c = this._nsx * a + this._cx * c;
	      lt.d = this._nsx * b + this._cx * d;
	
	      lt.tx = this.position._x - (this.pivot._x * lt.a + this.pivot._y * lt.c);
	      lt.ty = this.position._y - (this.pivot._x * lt.b + this.pivot._y * lt.d);
	      this._currentLocalID = this._localID;
	
	      // force an update..
	      this._parentID = -1;
	    }
	  };
	
	  /**
	   * Updates the values of the object and applies the parent's transform.
	   *
	   * @param {PIXI.Transform} parentTransform - The transform of the parent of this object
	   */
	
	
	  TransformStatic.prototype.updateTransform = function updateTransform(parentTransform) {
	    var pt = parentTransform.worldTransform;
	    var wt = this.worldTransform;
	    var lt = this.localTransform;
	
	    if (this._localID !== this._currentLocalID) {
	      // get the matrix values of the displayobject based on its transform properties..
	      var a = this._cr * this.scale._x;
	      var b = this._sr * this.scale._x;
	      var c = -this._sr * this.scale._y;
	      var d = this._cr * this.scale._y;
	
	      lt.a = this._cy * a + this._sy * c;
	      lt.b = this._cy * b + this._sy * d;
	      lt.c = this._nsx * a + this._cx * c;
	      lt.d = this._nsx * b + this._cx * d;
	
	      lt.tx = this.position._x - (this.pivot._x * lt.a + this.pivot._y * lt.c);
	      lt.ty = this.position._y - (this.pivot._x * lt.b + this.pivot._y * lt.d);
	      this._currentLocalID = this._localID;
	
	      // force an update..
	      this._parentID = -1;
	    }
	
	    if (this._parentID !== parentTransform._worldID) {
	      // concat the parent matrix with the objects transform.
	      wt.a = lt.a * pt.a + lt.b * pt.c;
	      wt.b = lt.a * pt.b + lt.b * pt.d;
	      wt.c = lt.c * pt.a + lt.d * pt.c;
	      wt.d = lt.c * pt.b + lt.d * pt.d;
	      wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;
	      wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;
	
	      this._parentID = parentTransform._worldID;
	
	      // update the id of the transform..
	      this._worldID++;
	    }
	  };
	
	  /**
	   * Decomposes a matrix and sets the transforms properties based on it.
	   *
	   * @param {PIXI.Matrix} matrix - The matrix to decompose
	   */
	
	
	  TransformStatic.prototype.setFromMatrix = function setFromMatrix(matrix) {
	    matrix.decompose(this);
	    this._localID++;
	  };
	
	  /**
	   * The rotation of the object in radians.
	   *
	   * @member {number}
	   * @memberof PIXI.TransformStatic#
	   */
	
	
	  _createClass(TransformStatic, [{
	    key: 'rotation',
	    get: function get() {
	      return this._rotation;
	    }
	
	    /**
	     * Sets the rotation of the transform.
	     *
	     * @param {number} value - The value to set to.
	     */
	    ,
	    set: function set(value) {
	      this._rotation = value;
	      this._sr = Math.sin(value);
	      this._cr = Math.cos(value);
	      this._localID++;
	    }
	  }]);
	
	  return TransformStatic;
	}(_TransformBase3.default);
	
	exports.default = TransformStatic;
	//# sourceMappingURL=TransformStatic.js.map

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _math = __webpack_require__(14);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Generic class to deal with traditional 2D matrix transforms
	 *
	 * @class
	 * @memberof PIXI
	 */
	var TransformBase = function () {
	  /**
	   *
	   */
	  function TransformBase() {
	    _classCallCheck(this, TransformBase);
	
	    /**
	     * The global matrix transform. It can be swapped temporarily by some functions like getLocalBounds()
	     *
	     * @member {PIXI.Matrix}
	     */
	    this.worldTransform = new _math.Matrix();
	
	    /**
	     * The local matrix transform
	     *
	     * @member {PIXI.Matrix}
	     */
	    this.localTransform = new _math.Matrix();
	
	    this._worldID = 0;
	    this._parentID = 0;
	  }
	
	  /**
	   * TransformBase does not have decomposition, so this function wont do anything
	   */
	
	
	  TransformBase.prototype.updateLocalTransform = function updateLocalTransform() {}
	  // empty
	
	
	  /**
	   * Updates the values of the object and applies the parent's transform.
	   *
	   * @param {PIXI.TransformBase} parentTransform - The transform of the parent of this object
	   */
	  ;
	
	  TransformBase.prototype.updateTransform = function updateTransform(parentTransform) {
	    var pt = parentTransform.worldTransform;
	    var wt = this.worldTransform;
	    var lt = this.localTransform;
	
	    // concat the parent matrix with the objects transform.
	    wt.a = lt.a * pt.a + lt.b * pt.c;
	    wt.b = lt.a * pt.b + lt.b * pt.d;
	    wt.c = lt.c * pt.a + lt.d * pt.c;
	    wt.d = lt.c * pt.b + lt.d * pt.d;
	    wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;
	    wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;
	
	    this._worldID++;
	  };
	
	  return TransformBase;
	}();
	
	/**
	 * Updates the values of the object and applies the parent's transform.
	 * @param  parentTransform {PIXI.Transform} The transform of the parent of this object
	 *
	 */
	
	
	exports.default = TransformBase;
	TransformBase.prototype.updateWorldTransform = TransformBase.prototype.updateTransform;
	
	TransformBase.IDENTITY = new TransformBase();
	//# sourceMappingURL=TransformBase.js.map

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _math = __webpack_require__(14);
	
	var _TransformBase2 = __webpack_require__(47);
	
	var _TransformBase3 = _interopRequireDefault(_TransformBase2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Generic class to deal with traditional 2D matrix transforms
	 * local transformation is calculated from position,scale,skew and rotation
	 *
	 * @class
	 * @extends PIXI.TransformBase
	 * @memberof PIXI
	 */
	var Transform = function (_TransformBase) {
	  _inherits(Transform, _TransformBase);
	
	  /**
	   *
	   */
	  function Transform() {
	    _classCallCheck(this, Transform);
	
	    /**
	    * The coordinate of the object relative to the local coordinates of the parent.
	    *
	    * @member {PIXI.Point}
	    */
	    var _this = _possibleConstructorReturn(this, _TransformBase.call(this));
	
	    _this.position = new _math.Point(0, 0);
	
	    /**
	     * The scale factor of the object.
	     *
	     * @member {PIXI.Point}
	     */
	    _this.scale = new _math.Point(1, 1);
	
	    /**
	     * The skew amount, on the x and y axis.
	     *
	     * @member {PIXI.ObservablePoint}
	     */
	    _this.skew = new _math.ObservablePoint(_this.updateSkew, _this, 0, 0);
	
	    /**
	     * The pivot point of the displayObject that it rotates around
	     *
	     * @member {PIXI.Point}
	     */
	    _this.pivot = new _math.Point(0, 0);
	
	    /**
	     * The rotation value of the object, in radians
	     *
	     * @member {Number}
	     * @private
	     */
	    _this._rotation = 0;
	
	    _this._sr = Math.sin(0);
	    _this._cr = Math.cos(0);
	    _this._cy = Math.cos(0); // skewY);
	    _this._sy = Math.sin(0); // skewY);
	    _this._nsx = Math.sin(0); // skewX);
	    _this._cx = Math.cos(0); // skewX);
	    return _this;
	  }
	
	  /**
	   * Updates the skew values when the skew changes.
	   *
	   * @private
	   */
	
	
	  Transform.prototype.updateSkew = function updateSkew() {
	    this._cy = Math.cos(this.skew.y);
	    this._sy = Math.sin(this.skew.y);
	    this._nsx = Math.sin(this.skew.x);
	    this._cx = Math.cos(this.skew.x);
	  };
	
	  /**
	   * Updates only local matrix
	   */
	
	
	  Transform.prototype.updateLocalTransform = function updateLocalTransform() {
	    var lt = this.localTransform;
	    var a = this._cr * this.scale.x;
	    var b = this._sr * this.scale.x;
	    var c = -this._sr * this.scale.y;
	    var d = this._cr * this.scale.y;
	
	    lt.a = this._cy * a + this._sy * c;
	    lt.b = this._cy * b + this._sy * d;
	    lt.c = this._nsx * a + this._cx * c;
	    lt.d = this._nsx * b + this._cx * d;
	  };
	
	  /**
	   * Updates the values of the object and applies the parent's transform.
	   *
	   * @param {PIXI.Transform} parentTransform - The transform of the parent of this object
	   */
	
	
	  Transform.prototype.updateTransform = function updateTransform(parentTransform) {
	    var pt = parentTransform.worldTransform;
	    var wt = this.worldTransform;
	    var lt = this.localTransform;
	
	    var a = this._cr * this.scale.x;
	    var b = this._sr * this.scale.x;
	    var c = -this._sr * this.scale.y;
	    var d = this._cr * this.scale.y;
	
	    lt.a = this._cy * a + this._sy * c;
	    lt.b = this._cy * b + this._sy * d;
	    lt.c = this._nsx * a + this._cx * c;
	    lt.d = this._nsx * b + this._cx * d;
	
	    lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);
	    lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);
	
	    // concat the parent matrix with the objects transform.
	    wt.a = lt.a * pt.a + lt.b * pt.c;
	    wt.b = lt.a * pt.b + lt.b * pt.d;
	    wt.c = lt.c * pt.a + lt.d * pt.c;
	    wt.d = lt.c * pt.b + lt.d * pt.d;
	    wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;
	    wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;
	
	    this._worldID++;
	  };
	
	  /**
	   * Decomposes a matrix and sets the transforms properties based on it.
	   *
	   * @param {PIXI.Matrix} matrix - The matrix to decompose
	   */
	
	
	  Transform.prototype.setFromMatrix = function setFromMatrix(matrix) {
	    matrix.decompose(this);
	  };
	
	  /**
	   * The rotation of the object in radians.
	   *
	   * @member {number}
	   * @memberof PIXI.Transform#
	   */
	
	
	  _createClass(Transform, [{
	    key: 'rotation',
	    get: function get() {
	      return this._rotation;
	    }
	
	    /**
	     * Set the rotation of the transform.
	     *
	     * @param {number} value - The value to set to.
	     */
	    ,
	    set: function set(value) {
	      this._rotation = value;
	      this._sr = Math.sin(value);
	      this._cr = Math.cos(value);
	    }
	  }]);
	
	  return Transform;
	}(_TransformBase3.default);
	
	exports.default = Transform;
	//# sourceMappingURL=Transform.js.map

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _math = __webpack_require__(14);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * 'Builder' pattern for bounds rectangles
	 * Axis-Aligned Bounding Box
	 * It is not a shape! Its mutable thing, no 'EMPTY' or that kind of problems
	 *
	 * @class
	 * @memberof PIXI
	 */
	var Bounds = function () {
	    /**
	     *
	     */
	    function Bounds() {
	        _classCallCheck(this, Bounds);
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.minX = Infinity;
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.minY = Infinity;
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.maxX = -Infinity;
	
	        /**
	         * @member {number}
	         * @default 0
	         */
	        this.maxY = -Infinity;
	
	        this.rect = null;
	    }
	
	    /**
	     * Checks if bounds are empty.
	     *
	     * @return {boolean} True if empty.
	     */
	
	
	    Bounds.prototype.isEmpty = function isEmpty() {
	        return this.minX > this.maxX || this.minY > this.maxY;
	    };
	
	    /**
	     * Clears the bounds and resets.
	     *
	     */
	
	
	    Bounds.prototype.clear = function clear() {
	        this.updateID++;
	
	        this.minX = Infinity;
	        this.minY = Infinity;
	        this.maxX = -Infinity;
	        this.maxY = -Infinity;
	    };
	
	    /**
	     * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle
	     * It is not guaranteed that it will return tempRect
	     *
	     * @param {PIXI.Rectangle} rect - temporary object will be used if AABB is not empty
	     * @returns {PIXI.Rectangle} A rectangle of the bounds
	     */
	
	
	    Bounds.prototype.getRectangle = function getRectangle(rect) {
	        if (this.minX > this.maxX || this.minY > this.maxY) {
	            return _math.Rectangle.EMPTY;
	        }
	
	        rect = rect || new _math.Rectangle(0, 0, 1, 1);
	
	        rect.x = this.minX;
	        rect.y = this.minY;
	        rect.width = this.maxX - this.minX;
	        rect.height = this.maxY - this.minY;
	
	        return rect;
	    };
	
	    /**
	     * This function should be inlined when its possible.
	     *
	     * @param {PIXI.Point} point - The point to add.
	     */
	
	
	    Bounds.prototype.addPoint = function addPoint(point) {
	        this.minX = Math.min(this.minX, point.x);
	        this.maxX = Math.max(this.maxX, point.x);
	        this.minY = Math.min(this.minY, point.y);
	        this.maxY = Math.max(this.maxY, point.y);
	    };
	
	    /**
	     * Adds a quad, not transformed
	     *
	     * @param {Float32Array} vertices - The verts to add.
	     */
	
	
	    Bounds.prototype.addQuad = function addQuad(vertices) {
	        var minX = this.minX;
	        var minY = this.minY;
	        var maxX = this.maxX;
	        var maxY = this.maxY;
	
	        var x = vertices[0];
	        var y = vertices[1];
	
	        minX = x < minX ? x : minX;
	        minY = y < minY ? y : minY;
	        maxX = x > maxX ? x : maxX;
	        maxY = y > maxY ? y : maxY;
	
	        x = vertices[2];
	        y = vertices[3];
	        minX = x < minX ? x : minX;
	        minY = y < minY ? y : minY;
	        maxX = x > maxX ? x : maxX;
	        maxY = y > maxY ? y : maxY;
	
	        x = vertices[4];
	        y = vertices[5];
	        minX = x < minX ? x : minX;
	        minY = y < minY ? y : minY;
	        maxX = x > maxX ? x : maxX;
	        maxY = y > maxY ? y : maxY;
	
	        x = vertices[6];
	        y = vertices[7];
	        minX = x < minX ? x : minX;
	        minY = y < minY ? y : minY;
	        maxX = x > maxX ? x : maxX;
	        maxY = y > maxY ? y : maxY;
	
	        this.minX = minX;
	        this.minY = minY;
	        this.maxX = maxX;
	        this.maxY = maxY;
	    };
	
	    /**
	     * Adds sprite frame, transformed.
	     *
	     * @param {PIXI.TransformBase} transform - TODO
	     * @param {number} x0 - TODO
	     * @param {number} y0 - TODO
	     * @param {number} x1 - TODO
	     * @param {number} y1 - TODO
	     */
	
	
	    Bounds.prototype.addFrame = function addFrame(transform, x0, y0, x1, y1) {
	        var matrix = transform.worldTransform;
	        var a = matrix.a;
	        var b = matrix.b;
	        var c = matrix.c;
	        var d = matrix.d;
	        var tx = matrix.tx;
	        var ty = matrix.ty;
	
	        var minX = this.minX;
	        var minY = this.minY;
	        var maxX = this.maxX;
	        var maxY = this.maxY;
	
	        var x = a * x0 + c * y0 + tx;
	        var y = b * x0 + d * y0 + ty;
	
	        minX = x < minX ? x : minX;
	        minY = y < minY ? y : minY;
	        maxX = x > maxX ? x : maxX;
	        maxY = y > maxY ? y : maxY;
	
	        x = a * x1 + c * y0 + tx;
	        y = b * x1 + d * y0 + ty;
	        minX = x < minX ? x : minX;
	        minY = y < minY ? y : minY;
	        maxX = x > maxX ? x : maxX;
	        maxY = y > maxY ? y : maxY;
	
	        x = a * x0 + c * y1 + tx;
	        y = b * x0 + d * y1 + ty;
	        minX = x < minX ? x : minX;
	        minY = y < minY ? y : minY;
	        maxX = x > maxX ? x : maxX;
	        maxY = y > maxY ? y : maxY;
	
	        x = a * x1 + c * y1 + tx;
	        y = b * x1 + d * y1 + ty;
	        minX = x < minX ? x : minX;
	        minY = y < minY ? y : minY;
	        maxX = x > maxX ? x : maxX;
	        maxY = y > maxY ? y : maxY;
	
	        this.minX = minX;
	        this.minY = minY;
	        this.maxX = maxX;
	        this.maxY = maxY;
	    };
	
	    /**
	     * Add an array of vertices
	     *
	     * @param {PIXI.TransformBase} transform - TODO
	     * @param {Float32Array} vertices - TODO
	     * @param {number} beginOffset - TODO
	     * @param {number} endOffset - TODO
	     */
	
	
	    Bounds.prototype.addVertices = function addVertices(transform, vertices, beginOffset, endOffset) {
	        var matrix = transform.worldTransform;
	        var a = matrix.a;
	        var b = matrix.b;
	        var c = matrix.c;
	        var d = matrix.d;
	        var tx = matrix.tx;
	        var ty = matrix.ty;
	
	        var minX = this.minX;
	        var minY = this.minY;
	        var maxX = this.maxX;
	        var maxY = this.maxY;
	
	        for (var i = beginOffset; i < endOffset; i += 2) {
	            var rawX = vertices[i];
	            var rawY = vertices[i + 1];
	            var x = a * rawX + c * rawY + tx;
	            var y = d * rawY + b * rawX + ty;
	
	            minX = x < minX ? x : minX;
	            minY = y < minY ? y : minY;
	            maxX = x > maxX ? x : maxX;
	            maxY = y > maxY ? y : maxY;
	        }
	
	        this.minX = minX;
	        this.minY = minY;
	        this.maxX = maxX;
	        this.maxY = maxY;
	    };
	
	    /**
	     * Adds other Bounds
	     *
	     * @param {PIXI.Bounds} bounds - TODO
	     */
	
	
	    Bounds.prototype.addBounds = function addBounds(bounds) {
	        var minX = this.minX;
	        var minY = this.minY;
	        var maxX = this.maxX;
	        var maxY = this.maxY;
	
	        this.minX = bounds.minX < minX ? bounds.minX : minX;
	        this.minY = bounds.minY < minY ? bounds.minY : minY;
	        this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;
	        this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;
	    };
	
	    /**
	     * Adds other Bounds, masked with Bounds
	     *
	     * @param {PIXI.Bounds} bounds - TODO
	     * @param {PIXI.Bounds} mask - TODO
	     */
	
	
	    Bounds.prototype.addBoundsMask = function addBoundsMask(bounds, mask) {
	        var _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;
	        var _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;
	        var _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;
	        var _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;
	
	        if (_minX <= _maxX && _minY <= _maxY) {
	            var minX = this.minX;
	            var minY = this.minY;
	            var maxX = this.maxX;
	            var maxY = this.maxY;
	
	            this.minX = _minX < minX ? _minX : minX;
	            this.minY = _minY < minY ? _minY : minY;
	            this.maxX = _maxX > maxX ? _maxX : maxX;
	            this.maxY = _maxY > maxY ? _maxY : maxY;
	        }
	    };
	
	    /**
	     * Adds other Bounds, masked with Rectangle
	     *
	     * @param {PIXI.Bounds} bounds - TODO
	     * @param {PIXI.Rectangle} area - TODO
	     */
	
	
	    Bounds.prototype.addBoundsArea = function addBoundsArea(bounds, area) {
	        var _minX = bounds.minX > area.x ? bounds.minX : area.x;
	        var _minY = bounds.minY > area.y ? bounds.minY : area.y;
	        var _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : area.x + area.width;
	        var _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : area.y + area.height;
	
	        if (_minX <= _maxX && _minY <= _maxY) {
	            var minX = this.minX;
	            var minY = this.minY;
	            var maxX = this.maxX;
	            var maxY = this.maxY;
	
	            this.minX = _minX < minX ? _minX : minX;
	            this.minY = _minY < minY ? _minY : minY;
	            this.maxX = _maxX > maxX ? _maxX : maxX;
	            this.maxY = _maxY > maxY ? _maxY : maxY;
	        }
	    };
	
	    return Bounds;
	}();
	
	exports.default = Bounds;
	//# sourceMappingURL=Bounds.js.map

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _utils = __webpack_require__(51);
	
	var _DisplayObject2 = __webpack_require__(41);
	
	var _DisplayObject3 = _interopRequireDefault(_DisplayObject2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * A Container represents a collection of display objects.
	 * It is the base class of all display objects that act as a container for other objects.
	 *
	 *```js
	 * let container = new PIXI.Container();
	 * container.addChild(sprite);
	 * ```
	 *
	 * @class
	 * @extends PIXI.DisplayObject
	 * @memberof PIXI
	 */
	var Container = function (_DisplayObject) {
	    _inherits(Container, _DisplayObject);
	
	    /**
	     *
	     */
	    function Container() {
	        _classCallCheck(this, Container);
	
	        /**
	         * The array of children of this container.
	         *
	         * @member {PIXI.DisplayObject[]}
	         * @readonly
	         */
	        var _this = _possibleConstructorReturn(this, _DisplayObject.call(this));
	
	        _this.children = [];
	        return _this;
	    }
	
	    /**
	     * Overridable method that can be used by Container subclasses whenever the children array is modified
	     *
	     * @private
	     */
	
	
	    Container.prototype.onChildrenChange = function onChildrenChange() {}
	    /* empty */
	
	
	    /**
	     * Adds one or more children to the container.
	     *
	     * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
	     *
	     * @param {...PIXI.DisplayObject} child - The DisplayObject(s) to add to the container
	     * @return {PIXI.DisplayObject} The first child that was added.
	     */
	    ;
	
	    Container.prototype.addChild = function addChild(child) {
	        var argumentsLength = arguments.length;
	
	        // if there is only one argument we can bypass looping through the them
	        if (argumentsLength > 1) {
	            // loop through the arguments property and add all children
	            // use it the right way (.length and [i]) so that this function can still be optimised by JS runtimes
	            for (var i = 0; i < argumentsLength; i++) {
	                this.addChild(arguments[i]);
	            }
	        } else {
	            // if the child has a parent then lets remove it as Pixi objects can only exist in one place
	            if (child.parent) {
	                child.parent.removeChild(child);
	            }
	
	            child.parent = this;
	
	            // ensure a transform will be recalculated..
	            this.transform._parentID = -1;
	            this._boundsID++;
	
	            this.children.push(child);
	
	            // TODO - lets either do all callbacks or all events.. not both!
	            this.onChildrenChange(this.children.length - 1);
	            child.emit('added', this);
	        }
	
	        return child;
	    };
	
	    /**
	     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
	     *
	     * @param {PIXI.DisplayObject} child - The child to add
	     * @param {number} index - The index to place the child in
	     * @return {PIXI.DisplayObject} The child that was added.
	     */
	
	
	    Container.prototype.addChildAt = function addChildAt(child, index) {
	        if (index < 0 || index > this.children.length) {
	            throw new Error(child + 'addChildAt: The index ' + index + ' supplied is out of bounds ' + this.children.length);
	        }
	
	        if (child.parent) {
	            child.parent.removeChild(child);
	        }
	
	        child.parent = this;
	
	        this.children.splice(index, 0, child);
	
	        // TODO - lets either do all callbacks or all events.. not both!
	        this.onChildrenChange(index);
	        child.emit('added', this);
	
	        return child;
	    };
	
	    /**
	     * Swaps the position of 2 Display Objects within this container.
	     *
	     * @param {PIXI.DisplayObject} child - First display object to swap
	     * @param {PIXI.DisplayObject} child2 - Second display object to swap
	     */
	
	
	    Container.prototype.swapChildren = function swapChildren(child, child2) {
	        if (child === child2) {
	            return;
	        }
	
	        var index1 = this.getChildIndex(child);
	        var index2 = this.getChildIndex(child2);
	
	        this.children[index1] = child2;
	        this.children[index2] = child;
	        this.onChildrenChange(index1 < index2 ? index1 : index2);
	    };
	
	    /**
	     * Returns the index position of a child DisplayObject instance
	     *
	     * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
	     * @return {number} The index position of the child display object to identify
	     */
	
	
	    Container.prototype.getChildIndex = function getChildIndex(child) {
	        var index = this.children.indexOf(child);
	
	        if (index === -1) {
	            throw new Error('The supplied DisplayObject must be a child of the caller');
	        }
	
	        return index;
	    };
	
	    /**
	     * Changes the position of an existing child in the display object container
	     *
	     * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
	     * @param {number} index - The resulting index number for the child display object
	     */
	
	
	    Container.prototype.setChildIndex = function setChildIndex(child, index) {
	        if (index < 0 || index >= this.children.length) {
	            throw new Error('The supplied index is out of bounds');
	        }
	
	        var currentIndex = this.getChildIndex(child);
	
	        (0, _utils.removeItems)(this.children, currentIndex, 1); // remove from old position
	        this.children.splice(index, 0, child); // add at new position
	        this.onChildrenChange(index);
	    };
	
	    /**
	     * Returns the child at the specified index
	     *
	     * @param {number} index - The index to get the child at
	     * @return {PIXI.DisplayObject} The child at the given index, if any.
	     */
	
	
	    Container.prototype.getChildAt = function getChildAt(index) {
	        if (index < 0 || index >= this.children.length) {
	            throw new Error('getChildAt: Index (' + index + ') does not exist.');
	        }
	
	        return this.children[index];
	    };
	
	    /**
	     * Removes one or more children from the container.
	     *
	     * @param {...PIXI.DisplayObject} child - The DisplayObject(s) to remove
	     * @return {PIXI.DisplayObject} The first child that was removed.
	     */
	
	
	    Container.prototype.removeChild = function removeChild(child) {
	        var argumentsLength = arguments.length;
	
	        // if there is only one argument we can bypass looping through the them
	        if (argumentsLength > 1) {
	            // loop through the arguments property and add all children
	            // use it the right way (.length and [i]) so that this function can still be optimised by JS runtimes
	            for (var i = 0; i < argumentsLength; i++) {
	                this.removeChild(arguments[i]);
	            }
	        } else {
	            var index = this.children.indexOf(child);
	
	            if (index === -1) return null;
	
	            child.parent = null;
	            (0, _utils.removeItems)(this.children, index, 1);
	
	            // ensure a transform will be recalculated..
	            this.transform._parentID = -1;
	            this._boundsID++;
	
	            // TODO - lets either do all callbacks or all events.. not both!
	            this.onChildrenChange(index);
	            child.emit('removed', this);
	        }
	
	        return child;
	    };
	
	    /**
	     * Removes a child from the specified index position.
	     *
	     * @param {number} index - The index to get the child from
	     * @return {PIXI.DisplayObject} The child that was removed.
	     */
	
	
	    Container.prototype.removeChildAt = function removeChildAt(index) {
	        var child = this.getChildAt(index);
	
	        child.parent = null;
	        (0, _utils.removeItems)(this.children, index, 1);
	
	        // TODO - lets either do all callbacks or all events.. not both!
	        this.onChildrenChange(index);
	        child.emit('removed', this);
	
	        return child;
	    };
	
	    /**
	     * Removes all children from this container that are within the begin and end indexes.
	     *
	     * @param {number} [beginIndex=0] - The beginning position.
	     * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
	     * @returns {DisplayObject[]} List of removed children
	     */
	
	
	    Container.prototype.removeChildren = function removeChildren() {
	        var beginIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	        var endIndex = arguments[1];
	
	        var begin = beginIndex;
	        var end = typeof endIndex === 'number' ? endIndex : this.children.length;
	        var range = end - begin;
	        var removed = void 0;
	
	        if (range > 0 && range <= end) {
	            removed = this.children.splice(begin, range);
	
	            for (var i = 0; i < removed.length; ++i) {
	                removed[i].parent = null;
	            }
	
	            this.onChildrenChange(beginIndex);
	
	            for (var _i = 0; _i < removed.length; ++_i) {
	                removed[_i].emit('removed', this);
	            }
	
	            return removed;
	        } else if (range === 0 && this.children.length === 0) {
	            return [];
	        }
	
	        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');
	    };
	
	    /**
	     * Updates the transform on all children of this container for rendering
	     *
	     * @private
	     */
	
	
	    Container.prototype.updateTransform = function updateTransform() {
	        this._boundsID++;
	
	        this.transform.updateTransform(this.parent.transform);
	
	        // TODO: check render flags, how to process stuff here
	        this.worldAlpha = this.alpha * this.parent.worldAlpha;
	
	        for (var i = 0, j = this.children.length; i < j; ++i) {
	            var child = this.children[i];
	
	            if (child.visible) {
	                child.updateTransform();
	            }
	        }
	    };
	
	    /**
	     * Recalculates the bounds of the container.
	     *
	     */
	
	
	    Container.prototype.calculateBounds = function calculateBounds() {
	        this._bounds.clear();
	
	        this._calculateBounds();
	
	        for (var i = 0; i < this.children.length; i++) {
	            var child = this.children[i];
	
	            if (!child.visible || !child.renderable) {
	                continue;
	            }
	
	            child.calculateBounds();
	
	            // TODO: filter+mask, need to mask both somehow
	            if (child._mask) {
	                child._mask.calculateBounds();
	                this._bounds.addBoundsMask(child._bounds, child._mask._bounds);
	            } else if (child.filterArea) {
	                this._bounds.addBoundsArea(child._bounds, child.filterArea);
	            } else {
	                this._bounds.addBounds(child._bounds);
	            }
	        }
	
	        this._lastBoundsID = this._boundsID;
	    };
	
	    /**
	     * Recalculates the bounds of the object. Override this to
	     * calculate the bounds of the specific object (not including children).
	     *
	     */
	
	
	    Container.prototype._calculateBounds = function _calculateBounds() {}
	    // FILL IN//
	
	
	    /**
	     * Renders the object using the WebGL renderer
	     *
	     * @param {PIXI.WebGLRenderer} renderer - The renderer
	     */
	    ;
	
	    Container.prototype.renderWebGL = function renderWebGL(renderer) {
	        // if the object is not visible or the alpha is 0 then no need to render this element
	        if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {
	            return;
	        }
	
	        // do a quick check to see if this element has a mask or a filter.
	        if (this._mask || this._filters) {
	            this.renderAdvancedWebGL(renderer);
	        } else {
	            this._renderWebGL(renderer);
	
	            // simple render children!
	            for (var i = 0, j = this.children.length; i < j; ++i) {
	                this.children[i].renderWebGL(renderer);
	            }
	        }
	    };
	
	    /**
	     * Render the object using the WebGL renderer and advanced features.
	     *
	     * @private
	     * @param {PIXI.WebGLRenderer} renderer - The renderer
	     */
	
	
	    Container.prototype.renderAdvancedWebGL = function renderAdvancedWebGL(renderer) {
	        renderer.flush();
	
	        var filters = this._filters;
	        var mask = this._mask;
	
	        // push filter first as we need to ensure the stencil buffer is correct for any masking
	        if (filters) {
	            if (!this._enabledFilters) {
	                this._enabledFilters = [];
	            }
	
	            this._enabledFilters.length = 0;
	
	            for (var i = 0; i < filters.length; i++) {
	                if (filters[i].enabled) {
	                    this._enabledFilters.push(filters[i]);
	                }
	            }
	
	            if (this._enabledFilters.length) {
	                renderer.filterManager.pushFilter(this, this._enabledFilters);
	            }
	        }
	
	        if (mask) {
	            renderer.maskManager.pushMask(this, this._mask);
	        }
	
	        // add this object to the batch, only rendered if it has a texture.
	        this._renderWebGL(renderer);
	
	        // now loop through the children and make sure they get rendered
	        for (var _i2 = 0, j = this.children.length; _i2 < j; _i2++) {
	            this.children[_i2].renderWebGL(renderer);
	        }
	
	        renderer.flush();
	
	        if (mask) {
	            renderer.maskManager.popMask(this, this._mask);
	        }
	
	        if (filters && this._enabledFilters && this._enabledFilters.length) {
	            renderer.filterManager.popFilter();
	        }
	    };
	
	    /**
	     * To be overridden by the subclasses.
	     *
	     * @private
	     * @param {PIXI.WebGLRenderer} renderer - The renderer
	     */
	
	
	    Container.prototype._renderWebGL = function _renderWebGL(renderer) // eslint-disable-line no-unused-vars
	    {}
	    // this is where content itself gets rendered...
	
	
	    /**
	     * To be overridden by the subclass
	     *
	     * @private
	     * @param {PIXI.CanvasRenderer} renderer - The renderer
	     */
	    ;
	
	    Container.prototype._renderCanvas = function _renderCanvas(renderer) // eslint-disable-line no-unused-vars
	    {}
	    // this is where content itself gets rendered...
	
	
	    /**
	     * Renders the object using the Canvas renderer
	     *
	     * @param {PIXI.CanvasRenderer} renderer - The renderer
	     */
	    ;
	
	    Container.prototype.renderCanvas = function renderCanvas(renderer) {
	        // if not visible or the alpha is 0 then no need to render this
	        if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {
	            return;
	        }
	
	        if (this._mask) {
	            renderer.maskManager.pushMask(this._mask);
	        }
	
	        this._renderCanvas(renderer);
	        for (var i = 0, j = this.children.length; i < j; ++i) {
	            this.children[i].renderCanvas(renderer);
	        }
	
	        if (this._mask) {
	            renderer.maskManager.popMask(renderer);
	        }
	    };
	
	    /**
	     * Removes all internal references and listeners as well as removes children from the display list.
	     * Do not use a Container after calling `destroy`.
	     *
	     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options
	     *  have been set to that value
	     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy
	     *  method called as well. 'options' will be passed on to those calls.
	     */
	
	
	    Container.prototype.destroy = function destroy(options) {
	        _DisplayObject.prototype.destroy.call(this);
	
	        var destroyChildren = typeof options === 'boolean' ? options : options && options.children;
	
	        var oldChildren = this.removeChildren(0, this.children.length);
	
	        if (destroyChildren) {
	            for (var i = 0; i < oldChildren.length; ++i) {
	                oldChildren[i].destroy(options);
	            }
	        }
	    };
	
	    /**
	     * The width of the Container, setting this will actually modify the scale to achieve the value set
	     *
	     * @member {number}
	     * @memberof PIXI.Container#
	     */
	
	
	    _createClass(Container, [{
	        key: 'width',
	        get: function get() {
	            return this.scale.x * this.getLocalBounds().width;
	        }
	
	        /**
	         * Sets the width of the container by modifying the scale.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            var width = this.getLocalBounds().width;
	
	            if (width !== 0) {
	                this.scale.x = value / width;
	            } else {
	                this.scale.x = 1;
	            }
	
	            this._width = value;
	        }
	
	        /**
	         * The height of the Container, setting this will actually modify the scale to achieve the value set
	         *
	         * @member {number}
	         * @memberof PIXI.Container#
	         */
	
	    }, {
	        key: 'height',
	        get: function get() {
	            return this.scale.y * this.getLocalBounds().height;
	        }
	
	        /**
	         * Sets the height of the container by modifying the scale.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            var height = this.getLocalBounds().height;
	
	            if (height !== 0) {
	                this.scale.y = value / height;
	            } else {
	                this.scale.y = 1;
	            }
	
	            this._height = value;
	        }
	    }]);
	
	    return Container;
	}(_DisplayObject3.default);
	
	// performance increase to avoid using call.. (10x faster)
	
	
	exports.default = Container;
	Container.prototype.containerUpdateTransform = Container.prototype.updateTransform;
	//# sourceMappingURL=Container.js.map

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.BaseTextureCache = exports.TextureCache = exports.pluginTarget = exports.EventEmitter = exports.isMobile = undefined;
	exports.uid = uid;
	exports.hex2rgb = hex2rgb;
	exports.hex2string = hex2string;
	exports.rgb2hex = rgb2hex;
	exports.getResolutionOfUrl = getResolutionOfUrl;
	exports.decomposeDataUri = decomposeDataUri;
	exports.getUrlFileExtension = getUrlFileExtension;
	exports.getSvgSize = getSvgSize;
	exports.skipHello = skipHello;
	exports.sayHello = sayHello;
	exports.isWebGLSupported = isWebGLSupported;
	exports.sign = sign;
	exports.removeItems = removeItems;
	
	var _const = __webpack_require__(12);
	
	var _settings = __webpack_require__(43);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	var _eventemitter = __webpack_require__(42);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _pluginTarget = __webpack_require__(52);
	
	var _pluginTarget2 = _interopRequireDefault(_pluginTarget);
	
	var _ismobilejs = __webpack_require__(45);
	
	var isMobile = _interopRequireWildcard(_ismobilejs);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var nextUid = 0;
	var saidHello = false;
	
	/**
	 * @namespace PIXI.utils
	 */
	exports.isMobile = isMobile;
	exports.EventEmitter = _eventemitter2.default;
	exports.pluginTarget = _pluginTarget2.default;
	
	/**
	 * Gets the next unique identifier
	 *
	 * @memberof PIXI.utils
	 * @function uid
	 * @return {number} The next unique identifier to use.
	 */
	
	function uid() {
	    return ++nextUid;
	}
	
	/**
	 * Converts a hex color number to an [R, G, B] array
	 *
	 * @memberof PIXI.utils
	 * @function hex2rgb
	 * @param {number} hex - The number to convert
	 * @param  {number[]} [out=[]] If supplied, this array will be used rather than returning a new one
	 * @return {number[]} An array representing the [R, G, B] of the color.
	 */
	function hex2rgb(hex, out) {
	    out = out || [];
	
	    out[0] = (hex >> 16 & 0xFF) / 255;
	    out[1] = (hex >> 8 & 0xFF) / 255;
	    out[2] = (hex & 0xFF) / 255;
	
	    return out;
	}
	
	/**
	 * Converts a hex color number to a string.
	 *
	 * @memberof PIXI.utils
	 * @function hex2string
	 * @param {number} hex - Number in hex
	 * @return {string} The string color.
	 */
	function hex2string(hex) {
	    hex = hex.toString(16);
	    hex = '000000'.substr(0, 6 - hex.length) + hex;
	
	    return '#' + hex;
	}
	
	/**
	 * Converts a color as an [R, G, B] array to a hex number
	 *
	 * @memberof PIXI.utils
	 * @function rgb2hex
	 * @param {number[]} rgb - rgb array
	 * @return {number} The color number
	 */
	function rgb2hex(rgb) {
	    return (rgb[0] * 255 << 16) + (rgb[1] * 255 << 8) + rgb[2] * 255;
	}
	
	/**
	 * get the resolution / device pixel ratio of an asset by looking for the prefix
	 * used by spritesheets and image urls
	 *
	 * @memberof PIXI.utils
	 * @function getResolutionOfUrl
	 * @param {string} url - the image path
	 * @return {number} resolution / device pixel ratio of an asset
	 */
	function getResolutionOfUrl(url) {
	    var resolution = _settings2.default.RETINA_PREFIX.exec(url);
	
	    if (resolution) {
	        return parseFloat(resolution[1]);
	    }
	
	    return 1;
	}
	
	/**
	 * Typedef for decomposeDataUri return object.
	 *
	 * @typedef {object} DecomposedDataUri
	 * @property {mediaType} Media type, eg. `image`
	 * @property {subType} Sub type, eg. `png`
	 * @property {encoding} Data encoding, eg. `base64`
	 * @property {data} The actual data
	 */
	
	/**
	 * Split a data URI into components. Returns undefined if
	 * parameter `dataUri` is not a valid data URI.
	 *
	 * @memberof PIXI.utils
	 * @function decomposeDataUri
	 * @param {string} dataUri - the data URI to check
	 * @return {DecomposedDataUri|undefined} The decomposed data uri or undefined
	 */
	function decomposeDataUri(dataUri) {
	    var dataUriMatch = _const.DATA_URI.exec(dataUri);
	
	    if (dataUriMatch) {
	        return {
	            mediaType: dataUriMatch[1] ? dataUriMatch[1].toLowerCase() : undefined,
	            subType: dataUriMatch[2] ? dataUriMatch[2].toLowerCase() : undefined,
	            encoding: dataUriMatch[3] ? dataUriMatch[3].toLowerCase() : undefined,
	            data: dataUriMatch[4]
	        };
	    }
	
	    return undefined;
	}
	
	/**
	 * Get type of the image by regexp for extension. Returns undefined for unknown extensions.
	 *
	 * @memberof PIXI.utils
	 * @function getUrlFileExtension
	 * @param {string} url - the image path
	 * @return {string|undefined} image extension
	 */
	function getUrlFileExtension(url) {
	    var extension = _const.URL_FILE_EXTENSION.exec(url);
	
	    if (extension) {
	        return extension[1].toLowerCase();
	    }
	
	    return undefined;
	}
	
	/**
	 * Typedef for Size object.
	 *
	 * @typedef {object} Size
	 * @property {width} Width component
	 * @property {height} Height component
	 */
	
	/**
	 * Get size from an svg string using regexp.
	 *
	 * @memberof PIXI.utils
	 * @function getSvgSize
	 * @param {string} svgString - a serialized svg element
	 * @return {Size|undefined} image extension
	 */
	function getSvgSize(svgString) {
	    var sizeMatch = _const.SVG_SIZE.exec(svgString);
	    var size = {};
	
	    if (sizeMatch) {
	        size[sizeMatch[1]] = Math.round(parseFloat(sizeMatch[3]));
	        size[sizeMatch[5]] = Math.round(parseFloat(sizeMatch[7]));
	    }
	
	    return size;
	}
	
	/**
	 * Skips the hello message of renderers that are created after this is run.
	 *
	 * @function skipHello
	 * @memberof PIXI.utils
	 */
	function skipHello() {
	    saidHello = true;
	}
	
	/**
	 * Logs out the version and renderer information for this running instance of PIXI.
	 * If you don't want to see this message you can run `PIXI.utils.skipHello()` before
	 * creating your renderer. Keep in mind that doing that will forever makes you a jerk face.
	 *
	 * @static
	 * @function sayHello
	 * @memberof PIXI.utils
	 * @param {string} type - The string renderer type to log.
	 */
	function sayHello(type) {
	    if (saidHello) {
	        return;
	    }
	
	    if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {
	        var args = ['\n %c %c %c Pixi.js ' + _const.VERSION + ' - \u2730 ' + type + ' \u2730  %c  %c  http://www.pixijs.com/  %c %c \u2665%c\u2665%c\u2665 \n\n', 'background: #ff66a5; padding:5px 0;', 'background: #ff66a5; padding:5px 0;', 'color: #ff66a5; background: #030307; padding:5px 0;', 'background: #ff66a5; padding:5px 0;', 'background: #ffc3dc; padding:5px 0;', 'background: #ff66a5; padding:5px 0;', 'color: #ff2424; background: #fff; padding:5px 0;', 'color: #ff2424; background: #fff; padding:5px 0;', 'color: #ff2424; background: #fff; padding:5px 0;'];
	
	        window.console.log.apply(console, args);
	    } else if (window.console) {
	        window.console.log('Pixi.js ' + _const.VERSION + ' - ' + type + ' - http://www.pixijs.com/');
	    }
	
	    saidHello = true;
	}
	
	/**
	 * Helper for checking for webgl support
	 *
	 * @memberof PIXI.utils
	 * @function isWebGLSupported
	 * @return {boolean} is webgl supported
	 */
	function isWebGLSupported() {
	    var contextOptions = { stencil: true, failIfMajorPerformanceCaveat: true };
	
	    try {
	        if (!window.WebGLRenderingContext) {
	            return false;
	        }
	
	        var canvas = document.createElement('canvas');
	        var gl = canvas.getContext('webgl', contextOptions) || canvas.getContext('experimental-webgl', contextOptions);
	
	        var success = !!(gl && gl.getContextAttributes().stencil);
	
	        if (gl) {
	            var loseContext = gl.getExtension('WEBGL_lose_context');
	
	            if (loseContext) {
	                loseContext.loseContext();
	            }
	        }
	
	        gl = null;
	
	        return success;
	    } catch (e) {
	        return false;
	    }
	}
	
	/**
	 * Returns sign of number
	 *
	 * @memberof PIXI.utils
	 * @function sign
	 * @param {number} n - the number to check the sign of
	 * @returns {number} 0 if `n` is 0, -1 if `n` is negative, 1 if `n` is positive
	 */
	function sign(n) {
	    if (n === 0) return 0;
	
	    return n < 0 ? -1 : 1;
	}
	
	/**
	 * Remove a range of items from an array
	 *
	 * @memberof PIXI.utils
	 * @function removeItems
	 * @param {Array<*>} arr The target array
	 * @param {number} startIdx The index to begin removing from (inclusive)
	 * @param {number} removeCount How many items to remove
	 */
	function removeItems(arr, startIdx, removeCount) {
	    var length = arr.length;
	
	    if (startIdx >= length || removeCount === 0) {
	        return;
	    }
	
	    removeCount = startIdx + removeCount > length ? length - startIdx : removeCount;
	
	    var len = length - removeCount;
	
	    for (var i = startIdx; i < len; ++i) {
	        arr[i] = arr[i + removeCount];
	    }
	
	    arr.length = len;
	}
	
	/**
	 * @todo Describe property usage
	 *
	 * @memberof PIXI.utils
	 * @private
	 */
	var TextureCache = exports.TextureCache = {};
	
	/**
	 * @todo Describe property usage
	 *
	 * @memberof PIXI.utils
	 * @private
	 */
	var BaseTextureCache = exports.BaseTextureCache = {};
	//# sourceMappingURL=index.js.map

/***/ },
/* 52 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	/**
	 * Mixins functionality to make an object have "plugins".
	 *
	 * @example
	 *      function MyObject() {}
	 *
	 *      pluginTarget.mixin(MyObject);
	 *
	 * @mixin
	 * @memberof PIXI.utils
	 * @param {object} obj - The object to mix into.
	 */
	function pluginTarget(obj) {
	    obj.__plugins = {};
	
	    /**
	     * Adds a plugin to an object
	     *
	     * @param {string} pluginName - The events that should be listed.
	     * @param {Function} ctor - The constructor function for the plugin.
	     */
	    obj.registerPlugin = function registerPlugin(pluginName, ctor) {
	        obj.__plugins[pluginName] = ctor;
	    };
	
	    /**
	     * Instantiates all the plugins of this object
	     *
	     */
	    obj.prototype.initPlugins = function initPlugins() {
	        this.plugins = this.plugins || {};
	
	        for (var o in obj.__plugins) {
	            this.plugins[o] = new obj.__plugins[o](this);
	        }
	    };
	
	    /**
	     * Removes all the plugins of this object
	     *
	     */
	    obj.prototype.destroyPlugins = function destroyPlugins() {
	        for (var o in this.plugins) {
	            this.plugins[o].destroy();
	            this.plugins[o] = null;
	        }
	
	        this.plugins = null;
	    };
	}
	
	exports.default = {
	    /**
	     * Mixes in the properties of the pluginTarget into another object
	     *
	     * @param {object} obj - The obj to mix into
	     */
	    mixin: function mixin(obj) {
	        pluginTarget(obj);
	    }
	};
	//# sourceMappingURL=pluginTarget.js.map

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _math = __webpack_require__(14);
	
	var _utils = __webpack_require__(51);
	
	var _const = __webpack_require__(12);
	
	var _Texture = __webpack_require__(54);
	
	var _Texture2 = _interopRequireDefault(_Texture);
	
	var _Container2 = __webpack_require__(50);
	
	var _Container3 = _interopRequireDefault(_Container2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var tempPoint = new _math.Point();
	
	/**
	 * The Sprite object is the base for all textured objects that are rendered to the screen
	 *
	 * A sprite can be created directly from an image like this:
	 *
	 * ```js
	 * let sprite = new PIXI.Sprite.fromImage('assets/image.png');
	 * ```
	 *
	 * @class
	 * @extends PIXI.Container
	 * @memberof PIXI
	 */
	
	var Sprite = function (_Container) {
	    _inherits(Sprite, _Container);
	
	    /**
	     * @param {PIXI.Texture} texture - The texture for this sprite
	     */
	    function Sprite(texture) {
	        _classCallCheck(this, Sprite);
	
	        /**
	         * The anchor sets the origin point of the texture.
	         * The default is 0,0 this means the texture's origin is the top left
	         * Setting the anchor to 0.5,0.5 means the texture's origin is centered
	         * Setting the anchor to 1,1 would mean the texture's origin point will be the bottom right corner
	         *
	         * @member {PIXI.ObservablePoint}
	         * @private
	         */
	        var _this = _possibleConstructorReturn(this, _Container.call(this));
	
	        _this._anchor = new _math.ObservablePoint(_this._onAnchorUpdate, _this);
	
	        /**
	         * The texture that the sprite is using
	         *
	         * @private
	         * @member {PIXI.Texture}
	         */
	        _this._texture = null;
	
	        /**
	         * The width of the sprite (this is initially set by the texture)
	         *
	         * @private
	         * @member {number}
	         */
	        _this._width = 0;
	
	        /**
	         * The height of the sprite (this is initially set by the texture)
	         *
	         * @private
	         * @member {number}
	         */
	        _this._height = 0;
	
	        /**
	         * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.
	         *
	         * @private
	         * @member {number}
	         * @default 0xFFFFFF
	         */
	        _this._tint = null;
	        _this._tintRGB = null;
	        _this.tint = 0xFFFFFF;
	
	        /**
	         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
	         *
	         * @member {number}
	         * @default PIXI.BLEND_MODES.NORMAL
	         * @see PIXI.BLEND_MODES
	         */
	        _this.blendMode = _const.BLEND_MODES.NORMAL;
	
	        /**
	         * The shader that will be used to render the sprite. Set to null to remove a current shader.
	         *
	         * @member {PIXI.Filter|PIXI.Shader}
	         */
	        _this.shader = null;
	
	        /**
	         * An internal cached value of the tint.
	         *
	         * @private
	         * @member {number}
	         * @default 0xFFFFFF
	         */
	        _this.cachedTint = 0xFFFFFF;
	
	        // call texture setter
	        _this.texture = texture || _Texture2.default.EMPTY;
	
	        /**
	         * this is used to store the vertex data of the sprite (basically a quad)
	         *
	         * @private
	         * @member {Float32Array}
	         */
	        _this.vertexData = new Float32Array(8);
	
	        /**
	         * This is used to calculate the bounds of the object IF it is a trimmed sprite
	         *
	         * @private
	         * @member {Float32Array}
	         */
	        _this.vertexTrimmedData = null;
	
	        _this._transformID = -1;
	        _this._textureID = -1;
	        return _this;
	    }
	
	    /**
	     * When the texture is updated, this event will fire to update the scale and frame
	     *
	     * @private
	     */
	
	
	    Sprite.prototype._onTextureUpdate = function _onTextureUpdate() {
	        this._textureID = -1;
	
	        // so if _width is 0 then width was not set..
	        if (this._width) {
	            this.scale.x = (0, _utils.sign)(this.scale.x) * this._width / this.texture.orig.width;
	        }
	
	        if (this._height) {
	            this.scale.y = (0, _utils.sign)(this.scale.y) * this._height / this.texture.orig.height;
	        }
	    };
	
	    /**
	     * Called when the anchor position updates.
	     *
	     * @private
	     */
	
	
	    Sprite.prototype._onAnchorUpdate = function _onAnchorUpdate() {
	        this._transformID = -1;
	    };
	
	    /**
	     * calculates worldTransform * vertices, store it in vertexData
	     */
	
	
	    Sprite.prototype.calculateVertices = function calculateVertices() {
	        if (this._transformID === this.transform._worldID && this._textureID === this._texture._updateID) {
	            return;
	        }
	
	        this._transformID = this.transform._worldID;
	        this._textureID = this._texture._updateID;
	
	        // set the vertex data
	
	        var texture = this._texture;
	        var wt = this.transform.worldTransform;
	        var a = wt.a;
	        var b = wt.b;
	        var c = wt.c;
	        var d = wt.d;
	        var tx = wt.tx;
	        var ty = wt.ty;
	        var vertexData = this.vertexData;
	        var trim = texture.trim;
	        var orig = texture.orig;
	        var anchor = this._anchor;
	
	        var w0 = 0;
	        var w1 = 0;
	        var h0 = 0;
	        var h1 = 0;
	
	        if (trim) {
	            // if the sprite is trimmed and is not a tilingsprite then we need to add the extra
	            // space before transforming the sprite coords.
	            w1 = trim.x - anchor._x * orig.width;
	            w0 = w1 + trim.width;
	
	            h1 = trim.y - anchor._y * orig.height;
	            h0 = h1 + trim.height;
	        } else {
	            w0 = orig.width * (1 - anchor._x);
	            w1 = orig.width * -anchor._x;
	
	            h0 = orig.height * (1 - anchor._y);
	            h1 = orig.height * -anchor._y;
	        }
	
	        // xy
	        vertexData[0] = a * w1 + c * h1 + tx;
	        vertexData[1] = d * h1 + b * w1 + ty;
	
	        // xy
	        vertexData[2] = a * w0 + c * h1 + tx;
	        vertexData[3] = d * h1 + b * w0 + ty;
	
	        // xy
	        vertexData[4] = a * w0 + c * h0 + tx;
	        vertexData[5] = d * h0 + b * w0 + ty;
	
	        // xy
	        vertexData[6] = a * w1 + c * h0 + tx;
	        vertexData[7] = d * h0 + b * w1 + ty;
	    };
	
	    /**
	     * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData
	     * This is used to ensure that the true width and height of a trimmed texture is respected
	     */
	
	
	    Sprite.prototype.calculateTrimmedVertices = function calculateTrimmedVertices() {
	        if (!this.vertexTrimmedData) {
	            this.vertexTrimmedData = new Float32Array(8);
	        }
	
	        // lets do some special trim code!
	        var texture = this._texture;
	        var vertexData = this.vertexTrimmedData;
	        var orig = texture.orig;
	        var anchor = this._anchor;
	
	        // lets calculate the new untrimmed bounds..
	        var wt = this.transform.worldTransform;
	        var a = wt.a;
	        var b = wt.b;
	        var c = wt.c;
	        var d = wt.d;
	        var tx = wt.tx;
	        var ty = wt.ty;
	
	        var w0 = orig.width * (1 - anchor._x);
	        var w1 = orig.width * -anchor._x;
	
	        var h0 = orig.height * (1 - anchor._y);
	        var h1 = orig.height * -anchor._y;
	
	        // xy
	        vertexData[0] = a * w1 + c * h1 + tx;
	        vertexData[1] = d * h1 + b * w1 + ty;
	
	        // xy
	        vertexData[2] = a * w0 + c * h1 + tx;
	        vertexData[3] = d * h1 + b * w0 + ty;
	
	        // xy
	        vertexData[4] = a * w0 + c * h0 + tx;
	        vertexData[5] = d * h0 + b * w0 + ty;
	
	        // xy
	        vertexData[6] = a * w1 + c * h0 + tx;
	        vertexData[7] = d * h0 + b * w1 + ty;
	    };
	
	    /**
	    *
	    * Renders the object using the WebGL renderer
	    *
	    * @private
	    * @param {PIXI.WebGLRenderer} renderer - The webgl renderer to use.
	    */
	
	
	    Sprite.prototype._renderWebGL = function _renderWebGL(renderer) {
	        this.calculateVertices();
	
	        renderer.setObjectRenderer(renderer.plugins.sprite);
	        renderer.plugins.sprite.render(this);
	    };
	
	    /**
	    * Renders the object using the Canvas renderer
	    *
	    * @private
	    * @param {PIXI.CanvasRenderer} renderer - The renderer
	    */
	
	
	    Sprite.prototype._renderCanvas = function _renderCanvas(renderer) {
	        renderer.plugins.sprite.render(this);
	    };
	
	    /**
	     * Updates the bounds of the sprite.
	     *
	     * @private
	     */
	
	
	    Sprite.prototype._calculateBounds = function _calculateBounds() {
	        var trim = this._texture.trim;
	        var orig = this._texture.orig;
	
	        // First lets check to see if the current texture has a trim..
	        if (!trim || trim.width === orig.width && trim.height === orig.height) {
	            // no trim! lets use the usual calculations..
	            this.calculateVertices();
	            this._bounds.addQuad(this.vertexData);
	        } else {
	            // lets calculate a special trimmed bounds...
	            this.calculateTrimmedVertices();
	            this._bounds.addQuad(this.vertexTrimmedData);
	        }
	    };
	
	    /**
	     * Gets the local bounds of the sprite object.
	     *
	     * @param {Rectangle} rect - The output rectangle.
	     * @return {Rectangle} The bounds.
	     */
	
	
	    Sprite.prototype.getLocalBounds = function getLocalBounds(rect) {
	        // we can do a fast local bounds if the sprite has no children!
	        if (this.children.length === 0) {
	            this._bounds.minX = this._texture.orig.width * -this._anchor._x;
	            this._bounds.minY = this._texture.orig.height * -this._anchor._y;
	            this._bounds.maxX = this._texture.orig.width * (1 - this._anchor._x);
	            this._bounds.maxY = this._texture.orig.height * (1 - this._anchor._x);
	
	            if (!rect) {
	                if (!this._localBoundsRect) {
	                    this._localBoundsRect = new _math.Rectangle();
	                }
	
	                rect = this._localBoundsRect;
	            }
	
	            return this._bounds.getRectangle(rect);
	        }
	
	        return _Container.prototype.getLocalBounds.call(this, rect);
	    };
	
	    /**
	     * Tests if a point is inside this sprite
	     *
	     * @param {PIXI.Point} point - the point to test
	     * @return {boolean} the result of the test
	     */
	
	
	    Sprite.prototype.containsPoint = function containsPoint(point) {
	        this.worldTransform.applyInverse(point, tempPoint);
	
	        var width = this._texture.orig.width;
	        var height = this._texture.orig.height;
	        var x1 = -width * this.anchor.x;
	        var y1 = 0;
	
	        if (tempPoint.x > x1 && tempPoint.x < x1 + width) {
	            y1 = -height * this.anchor.y;
	
	            if (tempPoint.y > y1 && tempPoint.y < y1 + height) {
	                return true;
	            }
	        }
	
	        return false;
	    };
	
	    /**
	     * Destroys this sprite and optionally its texture and children
	     *
	     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options
	     *  have been set to that value
	     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy
	     *      method called as well. 'options' will be passed on to those calls.
	     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well
	     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well
	     */
	
	
	    Sprite.prototype.destroy = function destroy(options) {
	        _Container.prototype.destroy.call(this, options);
	
	        this._anchor = null;
	
	        var destroyTexture = typeof options === 'boolean' ? options : options && options.texture;
	
	        if (destroyTexture) {
	            var destroyBaseTexture = typeof options === 'boolean' ? options : options && options.baseTexture;
	
	            this._texture.destroy(!!destroyBaseTexture);
	        }
	
	        this._texture = null;
	        this.shader = null;
	    };
	
	    // some helper functions..
	
	    /**
	     * Helper function that creates a new sprite based on the source you provide.
	     * The source can be - frame id, image url, video url, canvas element, video element, base texture
	     *
	     * @static
	     * @param {number|string|PIXI.BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from
	     * @return {PIXI.Texture} The newly created texture
	     */
	
	
	    Sprite.from = function from(source) {
	        return new Sprite(_Texture2.default.from(source));
	    };
	
	    /**
	     * Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId
	     * The frame ids are created when a Texture packer file has been loaded
	     *
	     * @static
	     * @param {string} frameId - The frame Id of the texture in the cache
	     * @return {PIXI.Sprite} A new Sprite using a texture from the texture cache matching the frameId
	     */
	
	
	    Sprite.fromFrame = function fromFrame(frameId) {
	        var texture = _utils.TextureCache[frameId];
	
	        if (!texture) {
	            throw new Error('The frameId "' + frameId + '" does not exist in the texture cache');
	        }
	
	        return new Sprite(texture);
	    };
	
	    /**
	     * Helper function that creates a sprite that will contain a texture based on an image url
	     * If the image is not in the texture cache it will be loaded
	     *
	     * @static
	     * @param {string} imageId - The image url of the texture
	     * @param {boolean} [crossorigin=(auto)] - if you want to specify the cross-origin parameter
	     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - if you want to specify the scale mode,
	     *  see {@link PIXI.SCALE_MODES} for possible values
	     * @return {PIXI.Sprite} A new Sprite using a texture from the texture cache matching the image id
	     */
	
	
	    Sprite.fromImage = function fromImage(imageId, crossorigin, scaleMode) {
	        return new Sprite(_Texture2.default.fromImage(imageId, crossorigin, scaleMode));
	    };
	
	    /**
	     * The width of the sprite, setting this will actually modify the scale to achieve the value set
	     *
	     * @member {number}
	     * @memberof PIXI.Sprite#
	     */
	
	
	    _createClass(Sprite, [{
	        key: 'width',
	        get: function get() {
	            return Math.abs(this.scale.x) * this.texture.orig.width;
	        }
	
	        /**
	         * Sets the width of the sprite by modifying the scale.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            var s = (0, _utils.sign)(this.scale.x) || 1;
	
	            this.scale.x = s * value / this.texture.orig.width;
	            this._width = value;
	        }
	
	        /**
	         * The height of the sprite, setting this will actually modify the scale to achieve the value set
	         *
	         * @member {number}
	         * @memberof PIXI.Sprite#
	         */
	
	    }, {
	        key: 'height',
	        get: function get() {
	            return Math.abs(this.scale.y) * this.texture.orig.height;
	        }
	
	        /**
	         * Sets the height of the sprite by modifying the scale.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            var s = (0, _utils.sign)(this.scale.y) || 1;
	
	            this.scale.y = s * value / this.texture.orig.height;
	            this._height = value;
	        }
	
	        /**
	         * The anchor sets the origin point of the texture.
	         * The default is 0,0 this means the texture's origin is the top left
	         * Setting the anchor to 0.5,0.5 means the texture's origin is centered
	         * Setting the anchor to 1,1 would mean the texture's origin point will be the bottom right corner
	         *
	         * @member {PIXI.ObservablePoint}
	         * @memberof PIXI.Sprite#
	         */
	
	    }, {
	        key: 'anchor',
	        get: function get() {
	            return this._anchor;
	        }
	
	        /**
	         * Copies the anchor to the sprite.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this._anchor.copy(value);
	        }
	
	        /**
	         * The tint applied to the sprite. This is a hex value. A value of
	         * 0xFFFFFF will remove any tint effect.
	         *
	         * @member {number}
	         * @memberof PIXI.Sprite#
	         * @default 0xFFFFFF
	         */
	
	    }, {
	        key: 'tint',
	        get: function get() {
	            return this._tint;
	        }
	
	        /**
	         * Sets the tint of the sprite.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this._tint = value;
	            this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);
	        }
	
	        /**
	         * The texture that the sprite is using
	         *
	         * @member {PIXI.Texture}
	         * @memberof PIXI.Sprite#
	         */
	
	    }, {
	        key: 'texture',
	        get: function get() {
	            return this._texture;
	        }
	
	        /**
	         * Sets the texture of the sprite.
	         *
	         * @param {PIXI.Texture} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            if (this._texture === value) {
	                return;
	            }
	
	            this._texture = value;
	            this.cachedTint = 0xFFFFFF;
	
	            this._textureID = -1;
	
	            if (value) {
	                // wait for the texture to load
	                if (value.baseTexture.hasLoaded) {
	                    this._onTextureUpdate();
	                } else {
	                    value.once('update', this._onTextureUpdate, this);
	                }
	            }
	        }
	    }]);
	
	    return Sprite;
	}(_Container3.default);
	
	exports.default = Sprite;
	//# sourceMappingURL=Sprite.js.map

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _BaseTexture = __webpack_require__(55);
	
	var _BaseTexture2 = _interopRequireDefault(_BaseTexture);
	
	var _VideoBaseTexture = __webpack_require__(64);
	
	var _VideoBaseTexture2 = _interopRequireDefault(_VideoBaseTexture);
	
	var _TextureUvs = __webpack_require__(67);
	
	var _TextureUvs2 = _interopRequireDefault(_TextureUvs);
	
	var _eventemitter = __webpack_require__(42);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _math = __webpack_require__(14);
	
	var _utils = __webpack_require__(51);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * A texture stores the information that represents an image or part of an image. It cannot be added
	 * to the display list directly. Instead use it as the texture for a Sprite. If no frame is provided
	 * then the whole image is used.
	 *
	 * You can directly create a texture from an image and then reuse it multiple times like this :
	 *
	 * ```js
	 * let texture = PIXI.Texture.fromImage('assets/image.png');
	 * let sprite1 = new PIXI.Sprite(texture);
	 * let sprite2 = new PIXI.Sprite(texture);
	 * ```
	 *
	 * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.
	 * You can check for this by checking the sprite's _textureID property.
	 * ```js
	 * var texture = PIXI.Texture.fromImage('assets/image.svg');
	 * var sprite1 = new PIXI.Sprite(texture);
	 * //sprite1._textureID should not be undefined if the texture has finished processing the SVG file
	 * ```
	 * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.
	 *
	 * @class
	 * @extends EventEmitter
	 * @memberof PIXI
	 */
	var Texture = function (_EventEmitter) {
	    _inherits(Texture, _EventEmitter);
	
	    /**
	     * @param {PIXI.BaseTexture} baseTexture - The base texture source to create the texture from
	     * @param {PIXI.Rectangle} [frame] - The rectangle frame of the texture to show
	     * @param {PIXI.Rectangle} [orig] - The area of original texture
	     * @param {PIXI.Rectangle} [trim] - Trimmed rectangle of original texture
	     * @param {number} [rotate] - indicates how the texture was rotated by texture packer. See {@link PIXI.GroupD8}
	     */
	    function Texture(baseTexture, frame, orig, trim, rotate) {
	        _classCallCheck(this, Texture);
	
	        /**
	         * Does this Texture have any frame data assigned to it?
	         *
	         * @member {boolean}
	         */
	        var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));
	
	        _this.noFrame = false;
	
	        if (!frame) {
	            _this.noFrame = true;
	            frame = new _math.Rectangle(0, 0, 1, 1);
	        }
	
	        if (baseTexture instanceof Texture) {
	            baseTexture = baseTexture.baseTexture;
	        }
	
	        /**
	         * The base texture that this texture uses.
	         *
	         * @member {PIXI.BaseTexture}
	         */
	        _this.baseTexture = baseTexture;
	
	        /**
	         * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,
	         * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)
	         *
	         * @member {PIXI.Rectangle}
	         */
	        _this._frame = frame;
	
	        /**
	         * This is the trimmed area of original texture, before it was put in atlas
	         *
	         * @member {PIXI.Rectangle}
	         */
	        _this.trim = trim;
	
	        /**
	         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.
	         *
	         * @member {boolean}
	         */
	        _this.valid = false;
	
	        /**
	         * This will let a renderer know that a texture has been updated (used mainly for webGL uv updates)
	         *
	         * @member {boolean}
	         */
	        _this.requiresUpdate = false;
	
	        /**
	         * The WebGL UV data cache.
	         *
	         * @member {PIXI.TextureUvs}
	         * @private
	         */
	        _this._uvs = null;
	
	        /**
	         * This is the area of original texture, before it was put in atlas
	         *
	         * @member {PIXI.Rectangle}
	         */
	        _this.orig = orig || frame; // new Rectangle(0, 0, 1, 1);
	
	        _this._rotate = Number(rotate || 0);
	
	        if (rotate === true) {
	            // this is old texturepacker legacy, some games/libraries are passing "true" for rotated textures
	            _this._rotate = 2;
	        } else if (_this._rotate % 2 !== 0) {
	            throw new Error('attempt to use diamond-shaped UVs. If you are sure, set rotation manually');
	        }
	
	        if (baseTexture.hasLoaded) {
	            if (_this.noFrame) {
	                frame = new _math.Rectangle(0, 0, baseTexture.width, baseTexture.height);
	
	                // if there is no frame we should monitor for any base texture changes..
	                baseTexture.on('update', _this.onBaseTextureUpdated, _this);
	            }
	            _this.frame = frame;
	        } else {
	            baseTexture.once('loaded', _this.onBaseTextureLoaded, _this);
	        }
	
	        /**
	         * Fired when the texture is updated. This happens if the frame or the baseTexture is updated.
	         *
	         * @event update
	         * @memberof PIXI.Texture#
	         * @protected
	         */
	
	        _this._updateID = 0;
	
	        /**
	         * Extra field for extra plugins. May contain clamp settings and some matrices
	         * @type {Object}
	         */
	        _this.transform = null;
	        return _this;
	    }
	
	    /**
	     * Updates this texture on the gpu.
	     *
	     */
	
	
	    Texture.prototype.update = function update() {
	        this.baseTexture.update();
	    };
	
	    /**
	     * Called when the base texture is loaded
	     *
	     * @private
	     * @param {PIXI.BaseTexture} baseTexture - The base texture.
	     */
	
	
	    Texture.prototype.onBaseTextureLoaded = function onBaseTextureLoaded(baseTexture) {
	        this._updateID++;
	
	        // TODO this code looks confusing.. boo to abusing getters and setters!
	        if (this.noFrame) {
	            this.frame = new _math.Rectangle(0, 0, baseTexture.width, baseTexture.height);
	        } else {
	            this.frame = this._frame;
	        }
	
	        this.baseTexture.on('update', this.onBaseTextureUpdated, this);
	        this.emit('update', this);
	    };
	
	    /**
	     * Called when the base texture is updated
	     *
	     * @private
	     * @param {PIXI.BaseTexture} baseTexture - The base texture.
	     */
	
	
	    Texture.prototype.onBaseTextureUpdated = function onBaseTextureUpdated(baseTexture) {
	        this._updateID++;
	
	        this._frame.width = baseTexture.width;
	        this._frame.height = baseTexture.height;
	
	        this.emit('update', this);
	    };
	
	    /**
	     * Destroys this texture
	     *
	     * @param {boolean} [destroyBase=false] Whether to destroy the base texture as well
	     */
	
	
	    Texture.prototype.destroy = function destroy(destroyBase) {
	        if (this.baseTexture) {
	            if (destroyBase) {
	                // delete the texture if it exists in the texture cache..
	                // this only needs to be removed if the base texture is actually destroyed too..
	                if (_utils.TextureCache[this.baseTexture.imageUrl]) {
	                    delete _utils.TextureCache[this.baseTexture.imageUrl];
	                }
	
	                this.baseTexture.destroy();
	            }
	
	            this.baseTexture.off('update', this.onBaseTextureUpdated, this);
	            this.baseTexture.off('loaded', this.onBaseTextureLoaded, this);
	
	            this.baseTexture = null;
	        }
	
	        this._frame = null;
	        this._uvs = null;
	        this.trim = null;
	        this.orig = null;
	
	        this.valid = false;
	
	        this.off('dispose', this.dispose, this);
	        this.off('update', this.update, this);
	    };
	
	    /**
	     * Creates a new texture object that acts the same as this one.
	     *
	     * @return {PIXI.Texture} The new texture
	     */
	
	
	    Texture.prototype.clone = function clone() {
	        return new Texture(this.baseTexture, this.frame, this.orig, this.trim, this.rotate);
	    };
	
	    /**
	     * Updates the internal WebGL UV cache.
	     *
	     * @protected
	     */
	
	
	    Texture.prototype._updateUvs = function _updateUvs() {
	        if (!this._uvs) {
	            this._uvs = new _TextureUvs2.default();
	        }
	
	        this._uvs.set(this._frame, this.baseTexture, this.rotate);
	
	        this._updateID++;
	    };
	
	    /**
	     * Helper function that creates a Texture object from the given image url.
	     * If the image is not in the texture cache it will be  created and loaded.
	     *
	     * @static
	     * @param {string} imageUrl - The image url of the texture
	     * @param {boolean} [crossorigin] - Whether requests should be treated as crossorigin
	     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values
	     * @param {number} [sourceScale=(auto)] - Scale for the original image, used with SVG images.
	     * @return {PIXI.Texture} The newly created texture
	     */
	
	
	    Texture.fromImage = function fromImage(imageUrl, crossorigin, scaleMode, sourceScale) {
	        var texture = _utils.TextureCache[imageUrl];
	
	        if (!texture) {
	            texture = new Texture(_BaseTexture2.default.fromImage(imageUrl, crossorigin, scaleMode, sourceScale));
	            _utils.TextureCache[imageUrl] = texture;
	        }
	
	        return texture;
	    };
	
	    /**
	     * Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId
	     * The frame ids are created when a Texture packer file has been loaded
	     *
	     * @static
	     * @param {string} frameId - The frame Id of the texture in the cache
	     * @return {PIXI.Texture} The newly created texture
	     */
	
	
	    Texture.fromFrame = function fromFrame(frameId) {
	        var texture = _utils.TextureCache[frameId];
	
	        if (!texture) {
	            throw new Error('The frameId "' + frameId + '" does not exist in the texture cache');
	        }
	
	        return texture;
	    };
	
	    /**
	     * Helper function that creates a new Texture based on the given canvas element.
	     *
	     * @static
	     * @param {HTMLCanvasElement} canvas - The canvas element source of the texture
	     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values
	     * @return {PIXI.Texture} The newly created texture
	     */
	
	
	    Texture.fromCanvas = function fromCanvas(canvas, scaleMode) {
	        return new Texture(_BaseTexture2.default.fromCanvas(canvas, scaleMode));
	    };
	
	    /**
	     * Helper function that creates a new Texture based on the given video element.
	     *
	     * @static
	     * @param {HTMLVideoElement|string} video - The URL or actual element of the video
	     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values
	     * @return {PIXI.Texture} The newly created texture
	     */
	
	
	    Texture.fromVideo = function fromVideo(video, scaleMode) {
	        if (typeof video === 'string') {
	            return Texture.fromVideoUrl(video, scaleMode);
	        }
	
	        return new Texture(_VideoBaseTexture2.default.fromVideo(video, scaleMode));
	    };
	
	    /**
	     * Helper function that creates a new Texture based on the video url.
	     *
	     * @static
	     * @param {string} videoUrl - URL of the video
	     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values
	     * @return {PIXI.Texture} The newly created texture
	     */
	
	
	    Texture.fromVideoUrl = function fromVideoUrl(videoUrl, scaleMode) {
	        return new Texture(_VideoBaseTexture2.default.fromUrl(videoUrl, scaleMode));
	    };
	
	    /**
	     * Helper function that creates a new Texture based on the source you provide.
	     * The source can be - frame id, image url, video url, canvas element, video element, base texture
	     *
	     * @static
	     * @param {number|string|PIXI.BaseTexture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from
	     * @return {PIXI.Texture} The newly created texture
	     */
	
	
	    Texture.from = function from(source) {
	        // TODO auto detect cross origin..
	        // TODO pass in scale mode?
	        if (typeof source === 'string') {
	            var texture = _utils.TextureCache[source];
	
	            if (!texture) {
	                // check if its a video..
	                var isVideo = source.match(/\.(mp4|webm|ogg|h264|avi|mov)$/) !== null;
	
	                if (isVideo) {
	                    return Texture.fromVideoUrl(source);
	                }
	
	                return Texture.fromImage(source);
	            }
	
	            return texture;
	        } else if (source instanceof HTMLImageElement) {
	            return new Texture(new _BaseTexture2.default(source));
	        } else if (source instanceof HTMLCanvasElement) {
	            return Texture.fromCanvas(source);
	        } else if (source instanceof HTMLVideoElement) {
	            return Texture.fromVideo(source);
	        } else if (source instanceof _BaseTexture2.default) {
	            return new Texture(source);
	        }
	
	        // lets assume its a texture!
	        return source;
	    };
	
	    /**
	     * Adds a texture to the global TextureCache. This cache is shared across the whole PIXI object.
	     *
	     * @static
	     * @param {PIXI.Texture} texture - The Texture to add to the cache.
	     * @param {string} id - The id that the texture will be stored against.
	     */
	
	
	    Texture.addTextureToCache = function addTextureToCache(texture, id) {
	        _utils.TextureCache[id] = texture;
	    };
	
	    /**
	     * Remove a texture from the global TextureCache.
	     *
	     * @static
	     * @param {string} id - The id of the texture to be removed
	     * @return {PIXI.Texture} The texture that was removed
	     */
	
	
	    Texture.removeTextureFromCache = function removeTextureFromCache(id) {
	        var texture = _utils.TextureCache[id];
	
	        delete _utils.TextureCache[id];
	        delete _utils.BaseTextureCache[id];
	
	        return texture;
	    };
	
	    /**
	     * The frame specifies the region of the base texture that this texture uses.
	     *
	     * @member {PIXI.Rectangle}
	     * @memberof PIXI.Texture#
	     */
	
	
	    _createClass(Texture, [{
	        key: 'frame',
	        get: function get() {
	            return this._frame;
	        }
	
	        /**
	         * Set the frame.
	         *
	         * @param {Rectangle} frame - The new frame to set.
	         */
	        ,
	        set: function set(frame) {
	            this._frame = frame;
	
	            this.noFrame = false;
	
	            if (frame.x + frame.width > this.baseTexture.width || frame.y + frame.height > this.baseTexture.height) {
	                throw new Error('Texture Error: frame does not fit inside the base Texture dimensions ' + this);
	            }
	
	            // this.valid = frame && frame.width && frame.height && this.baseTexture.source && this.baseTexture.hasLoaded;
	            this.valid = frame && frame.width && frame.height && this.baseTexture.hasLoaded;
	
	            if (!this.trim && !this.rotate) {
	                this.orig = frame;
	            }
	
	            if (this.valid) {
	                this._updateUvs();
	            }
	        }
	
	        /**
	         * Indicates whether the texture is rotated inside the atlas
	         * set to 2 to compensate for texture packer rotation
	         * set to 6 to compensate for spine packer rotation
	         * can be used to rotate or mirror sprites
	         * See {@link PIXI.GroupD8} for explanation
	         *
	         * @member {number}
	         */
	
	    }, {
	        key: 'rotate',
	        get: function get() {
	            return this._rotate;
	        }
	
	        /**
	         * Set the rotation
	         *
	         * @param {number} rotate - The new rotation to set.
	         */
	        ,
	        set: function set(rotate) {
	            this._rotate = rotate;
	            if (this.valid) {
	                this._updateUvs();
	            }
	        }
	
	        /**
	         * The width of the Texture in pixels.
	         *
	         * @member {number}
	         */
	
	    }, {
	        key: 'width',
	        get: function get() {
	            return this.orig ? this.orig.width : 0;
	        }
	
	        /**
	         * The height of the Texture in pixels.
	         *
	         * @member {number}
	         */
	
	    }, {
	        key: 'height',
	        get: function get() {
	            return this.orig ? this.orig.height : 0;
	        }
	    }]);
	
	    return Texture;
	}(_eventemitter2.default);
	
	/**
	 * An empty texture, used often to not have to create multiple empty textures.
	 * Can not be destroyed.
	 *
	 * @static
	 * @constant
	 */
	
	
	exports.default = Texture;
	Texture.EMPTY = new Texture(new _BaseTexture2.default());
	Texture.EMPTY.destroy = function _emptyDestroy() {/* empty */};
	Texture.EMPTY.on = function _emptyOn() {/* empty */};
	Texture.EMPTY.once = function _emptyOnce() {/* empty */};
	Texture.EMPTY.emit = function _emptyEmit() {/* empty */};
	//# sourceMappingURL=Texture.js.map

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _utils = __webpack_require__(51);
	
	var _settings = __webpack_require__(43);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	var _eventemitter = __webpack_require__(42);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _determineCrossOrigin = __webpack_require__(56);
	
	var _determineCrossOrigin2 = _interopRequireDefault(_determineCrossOrigin);
	
	var _bitTwiddle = __webpack_require__(63);
	
	var _bitTwiddle2 = _interopRequireDefault(_bitTwiddle);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var RESOLUTION = _settings2.default.RESOLUTION,
	    MIPMAP_TEXTURES = _settings2.default.MIPMAP_TEXTURES,
	    SCALE_MODE = _settings2.default.SCALE_MODE,
	    WRAP_MODE = _settings2.default.WRAP_MODE;
	
	/**
	 * A texture stores the information that represents an image. All textures have a base texture.
	 *
	 * @class
	 * @extends EventEmitter
	 * @memberof PIXI
	 */
	
	var BaseTexture = function (_EventEmitter) {
	    _inherits(BaseTexture, _EventEmitter);
	
	    /**
	     * @param {HTMLImageElement|HTMLCanvasElement} [source] - the source object of the texture.
	     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values
	     * @param {number} [resolution=1] - The resolution / device pixel ratio of the texture
	     */
	    function BaseTexture(source, scaleMode, resolution) {
	        _classCallCheck(this, BaseTexture);
	
	        var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));
	
	        _this.uid = (0, _utils.uid)();
	
	        _this.touched = 0;
	
	        /**
	         * The resolution / device pixel ratio of the texture
	         *
	         * @member {number}
	         * @default 1
	         */
	        _this.resolution = resolution || RESOLUTION;
	
	        /**
	         * The width of the base texture set when the image has loaded
	         *
	         * @readonly
	         * @member {number}
	         */
	        _this.width = 100;
	
	        /**
	         * The height of the base texture set when the image has loaded
	         *
	         * @readonly
	         * @member {number}
	         */
	        _this.height = 100;
	
	        // TODO docs
	        // used to store the actual dimensions of the source
	        /**
	         * Used to store the actual width of the source of this texture
	         *
	         * @readonly
	         * @member {number}
	         */
	        _this.realWidth = 100;
	        /**
	         * Used to store the actual height of the source of this texture
	         *
	         * @readonly
	         * @member {number}
	         */
	        _this.realHeight = 100;
	
	        /**
	         * The scale mode to apply when scaling this texture
	         *
	         * @member {number}
	         * @default PIXI.settings.SCALE_MODE
	         * @see PIXI.SCALE_MODES
	         */
	        _this.scaleMode = scaleMode || SCALE_MODE;
	
	        /**
	         * Set to true once the base texture has successfully loaded.
	         *
	         * This is never true if the underlying source fails to load or has no texture data.
	         *
	         * @readonly
	         * @member {boolean}
	         */
	        _this.hasLoaded = false;
	
	        /**
	         * Set to true if the source is currently loading.
	         *
	         * If an Image source is loading the 'loaded' or 'error' event will be
	         * dispatched when the operation ends. An underyling source that is
	         * immediately-available bypasses loading entirely.
	         *
	         * @readonly
	         * @member {boolean}
	         */
	        _this.isLoading = false;
	
	        /**
	         * The image source that is used to create the texture.
	         *
	         * TODO: Make this a setter that calls loadSource();
	         *
	         * @readonly
	         * @member {HTMLImageElement|HTMLCanvasElement}
	         */
	        _this.source = null; // set in loadSource, if at all
	
	        /**
	         * The image source that is used to create the texture. This is used to
	         * store the original Svg source when it is replaced with a canvas element.
	         *
	         * TODO: Currently not in use but could be used when re-scaling svg.
	         *
	         * @readonly
	         * @member {Image}
	         */
	        _this.origSource = null; // set in loadSvg, if at all
	
	        /**
	         * Type of image defined in source, eg. `png` or `svg`
	         *
	         * @readonly
	         * @member {string}
	         */
	        _this.imageType = null; // set in updateImageType
	
	        /**
	         * Scale for source image. Used with Svg images to scale them before rasterization.
	         *
	         * @readonly
	         * @member {number}
	         */
	        _this.sourceScale = 1.0;
	
	        /**
	         * Controls if RGB channels should be pre-multiplied by Alpha  (WebGL only)
	         * All blend modes, and shaders written for default value. Change it on your own risk.
	         *
	         * @member {boolean}
	         * @default true
	         */
	        _this.premultipliedAlpha = true;
	
	        /**
	         * The image url of the texture
	         *
	         * @member {string}
	         */
	        _this.imageUrl = null;
	
	        /**
	         * Whether or not the texture is a power of two, try to use power of two textures as much
	         * as you can
	         *
	         * @private
	         * @member {boolean}
	         */
	        _this.isPowerOfTwo = false;
	
	        // used for webGL
	
	        /**
	         *
	         * Set this to true if a mipmap of this texture needs to be generated. This value needs
	         * to be set before the texture is used
	         * Also the texture must be a power of two size to work
	         *
	         * @member {boolean}
	         * @see PIXI.MIPMAP_TEXTURES
	         */
	        _this.mipmap = MIPMAP_TEXTURES;
	
	        /**
	         *
	         * WebGL Texture wrap mode
	         *
	         * @member {number}
	         * @see PIXI.WRAP_MODES
	         */
	        _this.wrapMode = WRAP_MODE;
	
	        /**
	         * A map of renderer IDs to webgl textures
	         *
	         * @private
	         * @member {object<number, WebGLTexture>}
	         */
	        _this._glTextures = {};
	
	        _this._enabled = 0;
	        _this._virtalBoundId = -1;
	
	        // if no source passed don't try to load
	        if (source) {
	            _this.loadSource(source);
	        }
	
	        /**
	         * Fired when a not-immediately-available source finishes loading.
	         *
	         * @protected
	         * @event loaded
	         * @memberof PIXI.BaseTexture#
	         */
	
	        /**
	         * Fired when a not-immediately-available source fails to load.
	         *
	         * @protected
	         * @event error
	         * @memberof PIXI.BaseTexture#
	         */
	        return _this;
	    }
	
	    /**
	     * Updates the texture on all the webgl renderers, this also assumes the src has changed.
	     *
	     * @fires update
	     */
	
	
	    BaseTexture.prototype.update = function update() {
	        // Svg size is handled during load
	        if (this.imageType !== 'svg') {
	            this.realWidth = this.source.naturalWidth || this.source.videoWidth || this.source.width;
	            this.realHeight = this.source.naturalHeight || this.source.videoHeight || this.source.height;
	
	            this.width = this.realWidth / this.resolution;
	            this.height = this.realHeight / this.resolution;
	
	            this.isPowerOfTwo = _bitTwiddle2.default.isPow2(this.realWidth) && _bitTwiddle2.default.isPow2(this.realHeight);
	        }
	
	        this.emit('update', this);
	    };
	
	    /**
	     * Load a source.
	     *
	     * If the source is not-immediately-available, such as an image that needs to be
	     * downloaded, then the 'loaded' or 'error' event will be dispatched in the future
	     * and `hasLoaded` will remain false after this call.
	     *
	     * The logic state after calling `loadSource` directly or indirectly (eg. `fromImage`, `new BaseTexture`) is:
	     *
	     *     if (texture.hasLoaded) {
	     *        // texture ready for use
	     *     } else if (texture.isLoading) {
	     *        // listen to 'loaded' and/or 'error' events on texture
	     *     } else {
	     *        // not loading, not going to load UNLESS the source is reloaded
	     *        // (it may still make sense to listen to the events)
	     *     }
	     *
	     * @protected
	     * @param {HTMLImageElement|HTMLCanvasElement} source - the source object of the texture.
	     */
	
	
	    BaseTexture.prototype.loadSource = function loadSource(source) {
	        var _this2 = this;
	
	        var wasLoading = this.isLoading;
	
	        this.hasLoaded = false;
	        this.isLoading = false;
	
	        if (wasLoading && this.source) {
	            this.source.onload = null;
	            this.source.onerror = null;
	        }
	
	        var firstSourceLoaded = !this.source;
	
	        this.source = source;
	
	        // Apply source if loaded. Otherwise setup appropriate loading monitors.
	        if ((source.src && source.complete || source.getContext) && source.width && source.height) {
	            this._updateImageType();
	
	            if (this.imageType === 'svg') {
	                this._loadSvgSource();
	            } else {
	                this._sourceLoaded();
	            }
	
	            if (firstSourceLoaded) {
	                // send loaded event if previous source was null and we have been passed a pre-loaded IMG element
	                this.emit('loaded', this);
	            }
	        } else if (!source.getContext) {
	            var _ret = function () {
	                // Image fail / not ready
	                _this2.isLoading = true;
	
	                var scope = _this2;
	
	                source.onload = function () {
	                    scope._updateImageType();
	                    source.onload = null;
	                    source.onerror = null;
	
	                    if (!scope.isLoading) {
	                        return;
	                    }
	
	                    scope.isLoading = false;
	                    scope._sourceLoaded();
	
	                    if (scope.imageType === 'svg') {
	                        scope._loadSvgSource();
	
	                        return;
	                    }
	
	                    scope.emit('loaded', scope);
	                };
	
	                source.onerror = function () {
	                    source.onload = null;
	                    source.onerror = null;
	
	                    if (!scope.isLoading) {
	                        return;
	                    }
	
	                    scope.isLoading = false;
	                    scope.emit('error', scope);
	                };
	
	                // Per http://www.w3.org/TR/html5/embedded-content-0.html#the-img-element
	                //   "The value of `complete` can thus change while a script is executing."
	                // So complete needs to be re-checked after the callbacks have been added..
	                // NOTE: complete will be true if the image has no src so best to check if the src is set.
	                if (source.complete && source.src) {
	                    // ..and if we're complete now, no need for callbacks
	                    source.onload = null;
	                    source.onerror = null;
	
	                    if (scope.imageType === 'svg') {
	                        scope._loadSvgSource();
	
	                        return {
	                            v: void 0
	                        };
	                    }
	
	                    _this2.isLoading = false;
	
	                    if (source.width && source.height) {
	                        _this2._sourceLoaded();
	
	                        // If any previous subscribers possible
	                        if (wasLoading) {
	                            _this2.emit('loaded', _this2);
	                        }
	                    }
	                    // If any previous subscribers possible
	                    else if (wasLoading) {
	                            _this2.emit('error', _this2);
	                        }
	                }
	            }();
	
	            if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	        }
	    };
	
	    /**
	     * Updates type of the source image.
	     */
	
	
	    BaseTexture.prototype._updateImageType = function _updateImageType() {
	        if (!this.imageUrl) {
	            return;
	        }
	
	        var dataUri = (0, _utils.decomposeDataUri)(this.imageUrl);
	        var imageType = void 0;
	
	        if (dataUri && dataUri.mediaType === 'image') {
	            // Check for subType validity
	            var firstSubType = dataUri.subType.split('+')[0];
	
	            imageType = (0, _utils.getUrlFileExtension)('.' + firstSubType);
	
	            if (!imageType) {
	                throw new Error('Invalid image type in data URI.');
	            }
	        } else {
	            imageType = (0, _utils.getUrlFileExtension)(this.imageUrl);
	
	            if (!imageType) {
	                imageType = 'png';
	            }
	        }
	
	        this.imageType = imageType;
	    };
	
	    /**
	     * Checks if `source` is an SVG image and whether it's loaded via a URL or a data URI. Then calls
	     * `_loadSvgSourceUsingDataUri` or `_loadSvgSourceUsingXhr`.
	     */
	
	
	    BaseTexture.prototype._loadSvgSource = function _loadSvgSource() {
	        if (this.imageType !== 'svg') {
	            // Do nothing if source is not svg
	            return;
	        }
	
	        var dataUri = (0, _utils.decomposeDataUri)(this.imageUrl);
	
	        if (dataUri) {
	            this._loadSvgSourceUsingDataUri(dataUri);
	        } else {
	            // We got an URL, so we need to do an XHR to check the svg size
	            this._loadSvgSourceUsingXhr();
	        }
	    };
	
	    /**
	     * Reads an SVG string from data URI and then calls `_loadSvgSourceUsingString`.
	     *
	     * @param {string} dataUri - The data uri to load from.
	     */
	
	
	    BaseTexture.prototype._loadSvgSourceUsingDataUri = function _loadSvgSourceUsingDataUri(dataUri) {
	        var svgString = void 0;
	
	        if (dataUri.encoding === 'base64') {
	            if (!atob) {
	                throw new Error('Your browser doesn\'t support base64 conversions.');
	            }
	            svgString = atob(dataUri.data);
	        } else {
	            svgString = dataUri.data;
	        }
	
	        this._loadSvgSourceUsingString(svgString);
	    };
	
	    /**
	     * Loads an SVG string from `imageUrl` using XHR and then calls `_loadSvgSourceUsingString`.
	     */
	
	
	    BaseTexture.prototype._loadSvgSourceUsingXhr = function _loadSvgSourceUsingXhr() {
	        var _this3 = this;
	
	        var svgXhr = new XMLHttpRequest();
	
	        // This throws error on IE, so SVG Document can't be used
	        // svgXhr.responseType = 'document';
	
	        // This is not needed since we load the svg as string (breaks IE too)
	        // but overrideMimeType() can be used to force the response to be parsed as XML
	        // svgXhr.overrideMimeType('image/svg+xml');
	
	        svgXhr.onload = function () {
	            if (svgXhr.readyState !== svgXhr.DONE || svgXhr.status !== 200) {
	                throw new Error('Failed to load SVG using XHR.');
	            }
	
	            _this3._loadSvgSourceUsingString(svgXhr.response);
	        };
	
	        svgXhr.onerror = function () {
	            return _this3.emit('error', _this3);
	        };
	
	        svgXhr.open('GET', this.imageUrl, true);
	        svgXhr.send();
	    };
	
	    /**
	     * Loads texture using an SVG string. The original SVG Image is stored as `origSource` and the
	     * created canvas is the new `source`. The SVG is scaled using `sourceScale`. Called by
	     * `_loadSvgSourceUsingXhr` or `_loadSvgSourceUsingDataUri`.
	     *
	     * @param  {string} svgString SVG source as string
	     *
	     * @fires loaded
	     */
	
	
	    BaseTexture.prototype._loadSvgSourceUsingString = function _loadSvgSourceUsingString(svgString) {
	        var svgSize = (0, _utils.getSvgSize)(svgString);
	
	        var svgWidth = svgSize.width;
	        var svgHeight = svgSize.height;
	
	        if (!svgWidth || !svgHeight) {
	            throw new Error('The SVG image must have width and height defined (in pixels), canvas API needs them.');
	        }
	
	        // Scale realWidth and realHeight
	        this.realWidth = Math.round(svgWidth * this.sourceScale);
	        this.realHeight = Math.round(svgHeight * this.sourceScale);
	
	        this.width = this.realWidth / this.resolution;
	        this.height = this.realHeight / this.resolution;
	
	        // Check pow2 after scale
	        this.isPowerOfTwo = _bitTwiddle2.default.isPow2(this.realWidth) && _bitTwiddle2.default.isPow2(this.realHeight);
	
	        // Create a canvas element
	        var canvas = document.createElement('canvas');
	
	        canvas.width = this.realWidth;
	        canvas.height = this.realHeight;
	        canvas._pixiId = 'canvas_' + (0, _utils.uid)();
	
	        // Draw the Svg to the canvas
	        canvas.getContext('2d').drawImage(this.source, 0, 0, svgWidth, svgHeight, 0, 0, this.realWidth, this.realHeight);
	
	        // Replace the original source image with the canvas
	        this.origSource = this.source;
	        this.source = canvas;
	
	        // Add also the canvas in cache (destroy clears by `imageUrl` and `source._pixiId`)
	        _utils.BaseTextureCache[canvas._pixiId] = this;
	
	        this.isLoading = false;
	        this._sourceLoaded();
	        this.emit('loaded', this);
	    };
	
	    /**
	     * Used internally to update the width, height, and some other tracking vars once
	     * a source has successfully loaded.
	     *
	     * @private
	     */
	
	
	    BaseTexture.prototype._sourceLoaded = function _sourceLoaded() {
	        this.hasLoaded = true;
	        this.update();
	    };
	
	    /**
	     * Destroys this base texture
	     *
	     */
	
	
	    BaseTexture.prototype.destroy = function destroy() {
	        if (this.imageUrl) {
	            delete _utils.BaseTextureCache[this.imageUrl];
	            delete _utils.TextureCache[this.imageUrl];
	
	            this.imageUrl = null;
	
	            if (!navigator.isCocoonJS) {
	                this.source.src = '';
	            }
	        }
	        // An svg source has both `imageUrl` and `__pixiId`, so no `else if` here
	        if (this.source && this.source._pixiId) {
	            delete _utils.BaseTextureCache[this.source._pixiId];
	        }
	
	        this.source = null;
	
	        this.dispose();
	    };
	
	    /**
	     * Frees the texture from WebGL memory without destroying this texture object.
	     * This means you can still use the texture later which will upload it to GPU
	     * memory again.
	     *
	     */
	
	
	    BaseTexture.prototype.dispose = function dispose() {
	        this.emit('dispose', this);
	    };
	
	    /**
	     * Changes the source image of the texture.
	     * The original source must be an Image element.
	     *
	     * @param {string} newSrc - the path of the image
	     */
	
	
	    BaseTexture.prototype.updateSourceImage = function updateSourceImage(newSrc) {
	        this.source.src = newSrc;
	
	        this.loadSource(this.source);
	    };
	
	    /**
	     * Helper function that creates a base texture from the given image url.
	     * If the image is not in the base texture cache it will be created and loaded.
	     *
	     * @static
	     * @param {string} imageUrl - The image url of the texture
	     * @param {boolean} [crossorigin=(auto)] - Should use anonymous CORS? Defaults to true if the URL is not a data-URI.
	     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values
	     * @param {number} [sourceScale=(auto)] - Scale for the original image, used with Svg images.
	     * @return {PIXI.BaseTexture} The new base texture.
	     */
	
	
	    BaseTexture.fromImage = function fromImage(imageUrl, crossorigin, scaleMode, sourceScale) {
	        var baseTexture = _utils.BaseTextureCache[imageUrl];
	
	        if (!baseTexture) {
	            // new Image() breaks tex loading in some versions of Chrome.
	            // See https://code.google.com/p/chromium/issues/detail?id=238071
	            var image = new Image(); // document.createElement('img');
	
	            if (crossorigin === undefined && imageUrl.indexOf('data:') !== 0) {
	                image.crossOrigin = (0, _determineCrossOrigin2.default)(imageUrl);
	            }
	
	            baseTexture = new BaseTexture(image, scaleMode);
	            baseTexture.imageUrl = imageUrl;
	
	            if (sourceScale) {
	                baseTexture.sourceScale = sourceScale;
	            }
	
	            // if there is an @2x at the end of the url we are going to assume its a highres image
	            baseTexture.resolution = (0, _utils.getResolutionOfUrl)(imageUrl);
	
	            image.src = imageUrl; // Setting this triggers load
	
	            _utils.BaseTextureCache[imageUrl] = baseTexture;
	        }
	
	        return baseTexture;
	    };
	
	    /**
	     * Helper function that creates a base texture from the given canvas element.
	     *
	     * @static
	     * @param {HTMLCanvasElement} canvas - The canvas element source of the texture
	     * @param {number} scaleMode - See {@link PIXI.SCALE_MODES} for possible values
	     * @return {PIXI.BaseTexture} The new base texture.
	     */
	
	
	    BaseTexture.fromCanvas = function fromCanvas(canvas, scaleMode) {
	        if (!canvas._pixiId) {
	            canvas._pixiId = 'canvas_' + (0, _utils.uid)();
	        }
	
	        var baseTexture = _utils.BaseTextureCache[canvas._pixiId];
	
	        if (!baseTexture) {
	            baseTexture = new BaseTexture(canvas, scaleMode);
	            _utils.BaseTextureCache[canvas._pixiId] = baseTexture;
	        }
	
	        return baseTexture;
	    };
	
	    return BaseTexture;
	}(_eventemitter2.default);
	
	exports.default = BaseTexture;
	//# sourceMappingURL=BaseTexture.js.map

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = determineCrossOrigin;
	
	var _url2 = __webpack_require__(57);
	
	var _url3 = _interopRequireDefault(_url2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var tempAnchor = void 0;
	
	/**
	 * Sets the `crossOrigin` property for this resource based on if the url
	 * for this resource is cross-origin. If crossOrigin was manually set, this
	 * function does nothing.
	 * Nipped from the resource loader!
	 *
	 * @ignore
	 * @param {string} url - The url to test.
	 * @param {object} [loc=window.location] - The location object to test against.
	 * @return {string} The crossOrigin value to use (or empty string for none).
	 */
	function determineCrossOrigin(url) {
	    var loc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location;
	
	    // data: and javascript: urls are considered same-origin
	    if (url.indexOf('data:') === 0) {
	        return '';
	    }
	
	    // default is window.location
	    loc = loc || window.location;
	
	    if (!tempAnchor) {
	        tempAnchor = document.createElement('a');
	    }
	
	    // let the browser determine the full href for the url of this resource and then
	    // parse with the node url lib, we can't use the properties of the anchor element
	    // because they don't work in IE9 :(
	    tempAnchor.href = url;
	    url = _url3.default.parse(tempAnchor.href);
	
	    var samePort = !url.port && loc.port === '' || url.port === loc.port;
	
	    // if cross origin
	    if (url.hostname !== loc.hostname || !samePort || url.protocol !== loc.protocol) {
	        return 'anonymous';
	    }
	
	    return '';
	}
	//# sourceMappingURL=determineCrossOrigin.js.map

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var punycode = __webpack_require__(58);
	
	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;
	
	exports.Url = Url;
	
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}
	
	// Reference: RFC 3986, RFC 1808, RFC 2396
	
	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,
	
	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
	
	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
	
	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(60);
	
	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;
	
	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	
	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }
	
	  var rest = url;
	
	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();
	
	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }
	
	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }
	
	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {
	
	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c
	
	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.
	
	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	
	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }
	
	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }
	
	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;
	
	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);
	
	    // pull out port.
	    this.parseHost();
	
	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';
	
	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';
	
	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }
	
	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }
	
	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }
	
	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;
	
	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }
	
	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {
	
	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }
	
	
	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }
	
	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }
	
	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};
	
	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}
	
	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }
	
	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';
	
	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }
	
	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }
	
	  var search = this.search || (query && ('?' + query)) || '';
	
	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
	
	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }
	
	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;
	
	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');
	
	  return protocol + host + pathname + search + hash;
	};
	
	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}
	
	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};
	
	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}
	
	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }
	
	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);
	
	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;
	
	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }
	
	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });
	
	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }
	
	    result.href = result.format();
	    return result;
	  }
	
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }
	
	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }
	
	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];
	
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	
	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');
	
	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }
	
	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }
	
	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }
	
	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');
	
	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }
	
	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);
	
	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }
	
	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }
	
	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};
	
	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};
	
	function isString(arg) {
	  return typeof arg === "string";
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {
	
		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}
	
		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,
	
		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
	
		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'
	
		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
	
		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},
	
		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,
	
		/** Temporary variable */
		key;
	
		/*--------------------------------------------------------------------------*/
	
		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}
	
		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}
	
		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}
	
		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}
	
		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}
	
		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}
	
		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}
	
		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;
	
			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.
	
			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}
	
			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}
	
			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.
	
			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
	
				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
	
					if (index >= inputLength) {
						error('invalid-input');
					}
	
					digit = basicToDigit(input.charCodeAt(index++));
	
					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}
	
					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	
					if (digit < t) {
						break;
					}
	
					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}
	
					w *= baseMinusT;
	
				}
	
				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);
	
				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}
	
				n += floor(i / out);
				i %= out;
	
				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);
	
			}
	
			return ucs2encode(output);
		}
	
		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;
	
			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);
	
			// Cache the length
			inputLength = input.length;
	
			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;
	
			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}
	
			handledCPCount = basicLength = output.length;
	
			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.
	
			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}
	
			// Main encoding loop:
			while (handledCPCount < inputLength) {
	
				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}
	
				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}
	
				delta += (m - n) * handledCPCountPlusOne;
				n = m;
	
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
	
					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}
	
					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}
	
						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
	
				++delta;
				++n;
	
			}
			return output.join('');
		}
	
		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}
	
		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}
	
		/*--------------------------------------------------------------------------*/
	
		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};
	
		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}
	
	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(59)(module), (function() { return this; }())))

/***/ },
/* 59 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.decode = exports.parse = __webpack_require__(61);
	exports.encode = exports.stringify = __webpack_require__(62);


/***/ },
/* 61 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};
	
	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }
	
	  var regexp = /\+/g;
	  qs = qs.split(sep);
	
	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }
	
	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }
	
	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;
	
	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }
	
	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);
	
	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }
	
	  return obj;
	};


/***/ },
/* 62 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;
	
	    case 'boolean':
	      return v ? 'true' : 'false';
	
	    case 'number':
	      return isFinite(v) ? v : '';
	
	    default:
	      return '';
	  }
	};
	
	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }
	
	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);
	
	  }
	
	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 63 */
/***/ function(module, exports) {

	/**
	 * Bit twiddling hacks for JavaScript.
	 *
	 * Author: Mikola Lysenko
	 *
	 * Ported from Stanford bit twiddling hack library:
	 *    http://graphics.stanford.edu/~seander/bithacks.html
	 */
	
	"use strict"; "use restrict";
	
	//Number of bits in an integer
	var INT_BITS = 32;
	
	//Constants
	exports.INT_BITS  = INT_BITS;
	exports.INT_MAX   =  0x7fffffff;
	exports.INT_MIN   = -1<<(INT_BITS-1);
	
	//Returns -1, 0, +1 depending on sign of x
	exports.sign = function(v) {
	  return (v > 0) - (v < 0);
	}
	
	//Computes absolute value of integer
	exports.abs = function(v) {
	  var mask = v >> (INT_BITS-1);
	  return (v ^ mask) - mask;
	}
	
	//Computes minimum of integers x and y
	exports.min = function(x, y) {
	  return y ^ ((x ^ y) & -(x < y));
	}
	
	//Computes maximum of integers x and y
	exports.max = function(x, y) {
	  return x ^ ((x ^ y) & -(x < y));
	}
	
	//Checks if a number is a power of two
	exports.isPow2 = function(v) {
	  return !(v & (v-1)) && (!!v);
	}
	
	//Computes log base 2 of v
	exports.log2 = function(v) {
	  var r, shift;
	  r =     (v > 0xFFFF) << 4; v >>>= r;
	  shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;
	  shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;
	  shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;
	  return r | (v >> 1);
	}
	
	//Computes log base 10 of v
	exports.log10 = function(v) {
	  return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :
	          (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :
	          (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;
	}
	
	//Counts number of bits
	exports.popCount = function(v) {
	  v = v - ((v >>> 1) & 0x55555555);
	  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);
	  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
	}
	
	//Counts number of trailing zeros
	function countTrailingZeros(v) {
	  var c = 32;
	  v &= -v;
	  if (v) c--;
	  if (v & 0x0000FFFF) c -= 16;
	  if (v & 0x00FF00FF) c -= 8;
	  if (v & 0x0F0F0F0F) c -= 4;
	  if (v & 0x33333333) c -= 2;
	  if (v & 0x55555555) c -= 1;
	  return c;
	}
	exports.countTrailingZeros = countTrailingZeros;
	
	//Rounds to next power of 2
	exports.nextPow2 = function(v) {
	  v += v === 0;
	  --v;
	  v |= v >>> 1;
	  v |= v >>> 2;
	  v |= v >>> 4;
	  v |= v >>> 8;
	  v |= v >>> 16;
	  return v + 1;
	}
	
	//Rounds down to previous power of 2
	exports.prevPow2 = function(v) {
	  v |= v >>> 1;
	  v |= v >>> 2;
	  v |= v >>> 4;
	  v |= v >>> 8;
	  v |= v >>> 16;
	  return v - (v>>>1);
	}
	
	//Computes parity of word
	exports.parity = function(v) {
	  v ^= v >>> 16;
	  v ^= v >>> 8;
	  v ^= v >>> 4;
	  v &= 0xf;
	  return (0x6996 >>> v) & 1;
	}
	
	var REVERSE_TABLE = new Array(256);
	
	(function(tab) {
	  for(var i=0; i<256; ++i) {
	    var v = i, r = i, s = 7;
	    for (v >>>= 1; v; v >>>= 1) {
	      r <<= 1;
	      r |= v & 1;
	      --s;
	    }
	    tab[i] = (r << s) & 0xff;
	  }
	})(REVERSE_TABLE);
	
	//Reverse bits in a 32 bit word
	exports.reverse = function(v) {
	  return  (REVERSE_TABLE[ v         & 0xff] << 24) |
	          (REVERSE_TABLE[(v >>> 8)  & 0xff] << 16) |
	          (REVERSE_TABLE[(v >>> 16) & 0xff] << 8)  |
	           REVERSE_TABLE[(v >>> 24) & 0xff];
	}
	
	//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes
	exports.interleave2 = function(x, y) {
	  x &= 0xFFFF;
	  x = (x | (x << 8)) & 0x00FF00FF;
	  x = (x | (x << 4)) & 0x0F0F0F0F;
	  x = (x | (x << 2)) & 0x33333333;
	  x = (x | (x << 1)) & 0x55555555;
	
	  y &= 0xFFFF;
	  y = (y | (y << 8)) & 0x00FF00FF;
	  y = (y | (y << 4)) & 0x0F0F0F0F;
	  y = (y | (y << 2)) & 0x33333333;
	  y = (y | (y << 1)) & 0x55555555;
	
	  return x | (y << 1);
	}
	
	//Extracts the nth interleaved component
	exports.deinterleave2 = function(v, n) {
	  v = (v >>> n) & 0x55555555;
	  v = (v | (v >>> 1))  & 0x33333333;
	  v = (v | (v >>> 2))  & 0x0F0F0F0F;
	  v = (v | (v >>> 4))  & 0x00FF00FF;
	  v = (v | (v >>> 16)) & 0x000FFFF;
	  return (v << 16) >> 16;
	}
	
	
	//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes
	exports.interleave3 = function(x, y, z) {
	  x &= 0x3FF;
	  x  = (x | (x<<16)) & 4278190335;
	  x  = (x | (x<<8))  & 251719695;
	  x  = (x | (x<<4))  & 3272356035;
	  x  = (x | (x<<2))  & 1227133513;
	
	  y &= 0x3FF;
	  y  = (y | (y<<16)) & 4278190335;
	  y  = (y | (y<<8))  & 251719695;
	  y  = (y | (y<<4))  & 3272356035;
	  y  = (y | (y<<2))  & 1227133513;
	  x |= (y << 1);
	  
	  z &= 0x3FF;
	  z  = (z | (z<<16)) & 4278190335;
	  z  = (z | (z<<8))  & 251719695;
	  z  = (z | (z<<4))  & 3272356035;
	  z  = (z | (z<<2))  & 1227133513;
	  
	  return x | (z << 2);
	}
	
	//Extracts nth interleaved component of a 3-tuple
	exports.deinterleave3 = function(v, n) {
	  v = (v >>> n)       & 1227133513;
	  v = (v | (v>>>2))   & 3272356035;
	  v = (v | (v>>>4))   & 251719695;
	  v = (v | (v>>>8))   & 4278190335;
	  v = (v | (v>>>16))  & 0x3FF;
	  return (v<<22)>>22;
	}
	
	//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)
	exports.nextCombination = function(v) {
	  var t = v | (v - 1);
	  return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));
	}
	


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _BaseTexture2 = __webpack_require__(55);
	
	var _BaseTexture3 = _interopRequireDefault(_BaseTexture2);
	
	var _utils = __webpack_require__(51);
	
	var _ticker = __webpack_require__(65);
	
	var ticker = _interopRequireWildcard(_ticker);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * A texture of a [playing] Video.
	 *
	 * Video base textures mimic Pixi BaseTexture.from.... method in their creation process.
	 *
	 * This can be used in several ways, such as:
	 *
	 * ```js
	 * let texture = PIXI.VideoBaseTexture.fromUrl('http://mydomain.com/video.mp4');
	 *
	 * let texture = PIXI.VideoBaseTexture.fromUrl({ src: 'http://mydomain.com/video.mp4', mime: 'video/mp4' });
	 *
	 * let texture = PIXI.VideoBaseTexture.fromUrls(['/video.webm', '/video.mp4']);
	 *
	 * let texture = PIXI.VideoBaseTexture.fromUrls([
	 *     { src: '/video.webm', mime: 'video/webm' },
	 *     { src: '/video.mp4', mime: 'video/mp4' }
	 * ]);
	 * ```
	 *
	 * See the ["deus" demo](http://www.goodboydigital.com/pixijs/examples/deus/).
	 *
	 * @class
	 * @extends PIXI.BaseTexture
	 * @memberof PIXI
	 */
	var VideoBaseTexture = function (_BaseTexture) {
	    _inherits(VideoBaseTexture, _BaseTexture);
	
	    /**
	     * @param {HTMLVideoElement} source - Video source
	     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values
	     */
	    function VideoBaseTexture(source, scaleMode) {
	        _classCallCheck(this, VideoBaseTexture);
	
	        if (!source) {
	            throw new Error('No video source element specified.');
	        }
	
	        // hook in here to check if video is already available.
	        // BaseTexture looks for a source.complete boolean, plus width & height.
	
	        if ((source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA) && source.width && source.height) {
	            source.complete = true;
	        }
	
	        var _this = _possibleConstructorReturn(this, _BaseTexture.call(this, source, scaleMode));
	
	        _this.width = source.videoWidth;
	        _this.height = source.videoHeight;
	
	        _this._autoUpdate = true;
	        _this._isAutoUpdating = false;
	
	        /**
	         * When set to true will automatically play videos used by this texture once
	         * they are loaded. If false, it will not modify the playing state.
	         *
	         * @member {boolean}
	         * @default true
	         */
	        _this.autoPlay = true;
	
	        _this.update = _this.update.bind(_this);
	        _this._onCanPlay = _this._onCanPlay.bind(_this);
	
	        source.addEventListener('play', _this._onPlayStart.bind(_this));
	        source.addEventListener('pause', _this._onPlayStop.bind(_this));
	        _this.hasLoaded = false;
	        _this.__loaded = false;
	
	        if (!_this._isSourceReady()) {
	            source.addEventListener('canplay', _this._onCanPlay);
	            source.addEventListener('canplaythrough', _this._onCanPlay);
	        } else {
	            _this._onCanPlay();
	        }
	        return _this;
	    }
	
	    /**
	     * Returns true if the underlying source is playing.
	     *
	     * @private
	     * @return {boolean} True if playing.
	     */
	
	
	    VideoBaseTexture.prototype._isSourcePlaying = function _isSourcePlaying() {
	        var source = this.source;
	
	        return source.currentTime > 0 && source.paused === false && source.ended === false && source.readyState > 2;
	    };
	
	    /**
	     * Returns true if the underlying source is ready for playing.
	     *
	     * @private
	     * @return {boolean} True if ready.
	     */
	
	
	    VideoBaseTexture.prototype._isSourceReady = function _isSourceReady() {
	        return this.source.readyState === 3 || this.source.readyState === 4;
	    };
	
	    /**
	     * Runs the update loop when the video is ready to play
	     *
	     * @private
	     */
	
	
	    VideoBaseTexture.prototype._onPlayStart = function _onPlayStart() {
	        // Just in case the video has not received its can play even yet..
	        if (!this.hasLoaded) {
	            this._onCanPlay();
	        }
	
	        if (!this._isAutoUpdating && this.autoUpdate) {
	            ticker.shared.add(this.update, this);
	            this._isAutoUpdating = true;
	        }
	    };
	
	    /**
	     * Fired when a pause event is triggered, stops the update loop
	     *
	     * @private
	     */
	
	
	    VideoBaseTexture.prototype._onPlayStop = function _onPlayStop() {
	        if (this._isAutoUpdating) {
	            ticker.shared.remove(this.update, this);
	            this._isAutoUpdating = false;
	        }
	    };
	
	    /**
	     * Fired when the video is loaded and ready to play
	     *
	     * @private
	     */
	
	
	    VideoBaseTexture.prototype._onCanPlay = function _onCanPlay() {
	        this.hasLoaded = true;
	
	        if (this.source) {
	            this.source.removeEventListener('canplay', this._onCanPlay);
	            this.source.removeEventListener('canplaythrough', this._onCanPlay);
	
	            this.width = this.source.videoWidth;
	            this.height = this.source.videoHeight;
	
	            // prevent multiple loaded dispatches..
	            if (!this.__loaded) {
	                this.__loaded = true;
	                this.emit('loaded', this);
	            }
	
	            if (this._isSourcePlaying()) {
	                this._onPlayStart();
	            } else if (this.autoPlay) {
	                this.source.play();
	            }
	        }
	    };
	
	    /**
	     * Destroys this texture
	     *
	     */
	
	
	    VideoBaseTexture.prototype.destroy = function destroy() {
	        if (this._isAutoUpdating) {
	            ticker.shared.remove(this.update, this);
	        }
	
	        if (this.source && this.source._pixiId) {
	            delete _utils.BaseTextureCache[this.source._pixiId];
	            delete this.source._pixiId;
	        }
	
	        _BaseTexture.prototype.destroy.call(this);
	    };
	
	    /**
	     * Mimic Pixi BaseTexture.from.... method.
	     *
	     * @static
	     * @param {HTMLVideoElement} video - Video to create texture from
	     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values
	     * @return {PIXI.VideoBaseTexture} Newly created VideoBaseTexture
	     */
	
	
	    VideoBaseTexture.fromVideo = function fromVideo(video, scaleMode) {
	        if (!video._pixiId) {
	            video._pixiId = 'video_' + (0, _utils.uid)();
	        }
	
	        var baseTexture = _utils.BaseTextureCache[video._pixiId];
	
	        if (!baseTexture) {
	            baseTexture = new VideoBaseTexture(video, scaleMode);
	            _utils.BaseTextureCache[video._pixiId] = baseTexture;
	        }
	
	        return baseTexture;
	    };
	
	    /**
	     * Helper function that creates a new BaseTexture based on the given video element.
	     * This BaseTexture can then be used to create a texture
	     *
	     * @static
	     * @param {string|object|string[]|object[]} videoSrc - The URL(s) for the video.
	     * @param {string} [videoSrc.src] - One of the source urls for the video
	     * @param {string} [videoSrc.mime] - The mimetype of the video (e.g. 'video/mp4'). If not specified
	     *  the url's extension will be used as the second part of the mime type.
	     * @param {number} scaleMode - See {@link PIXI.SCALE_MODES} for possible values
	     * @return {PIXI.VideoBaseTexture} Newly created VideoBaseTexture
	     */
	
	
	    VideoBaseTexture.fromUrl = function fromUrl(videoSrc, scaleMode) {
	        var video = document.createElement('video');
	
	        video.setAttribute('webkit-playsinline', '');
	        video.setAttribute('playsinline', '');
	
	        // array of objects or strings
	        if (Array.isArray(videoSrc)) {
	            for (var i = 0; i < videoSrc.length; ++i) {
	                video.appendChild(createSource(videoSrc[i].src || videoSrc[i], videoSrc[i].mime));
	            }
	        }
	        // single object or string
	        else {
	                video.appendChild(createSource(videoSrc.src || videoSrc, videoSrc.mime));
	            }
	
	        video.load();
	
	        return VideoBaseTexture.fromVideo(video, scaleMode);
	    };
	
	    /**
	     * Should the base texture automatically update itself, set to true by default
	     *
	     * @member {boolean}
	     * @memberof PIXI.VideoBaseTexture#
	     */
	
	
	    _createClass(VideoBaseTexture, [{
	        key: 'autoUpdate',
	        get: function get() {
	            return this._autoUpdate;
	        }
	
	        /**
	         * Sets autoUpdate property.
	         *
	         * @param {number} value - enable auto update or not
	         */
	        ,
	        set: function set(value) {
	            if (value !== this._autoUpdate) {
	                this._autoUpdate = value;
	
	                if (!this._autoUpdate && this._isAutoUpdating) {
	                    ticker.shared.remove(this.update, this);
	                    this._isAutoUpdating = false;
	                } else if (this._autoUpdate && !this._isAutoUpdating) {
	                    ticker.shared.add(this.update, this);
	                    this._isAutoUpdating = true;
	                }
	            }
	        }
	    }]);
	
	    return VideoBaseTexture;
	}(_BaseTexture3.default);
	
	exports.default = VideoBaseTexture;
	
	
	VideoBaseTexture.fromUrls = VideoBaseTexture.fromUrl;
	
	function createSource(path, type) {
	    if (!type) {
	        type = 'video/' + path.substr(path.lastIndexOf('.') + 1);
	    }
	
	    var source = document.createElement('source');
	
	    source.src = path;
	    source.type = type;
	
	    return source;
	}
	//# sourceMappingURL=VideoBaseTexture.js.map

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Ticker = exports.shared = undefined;
	
	var _Ticker = __webpack_require__(66);
	
	var _Ticker2 = _interopRequireDefault(_Ticker);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The shared ticker instance used by {@link PIXI.extras.AnimatedSprite}.
	 * and by {@link PIXI.interaction.InteractionManager}.
	 * The property {@link PIXI.ticker.Ticker#autoStart} is set to `true`
	 * for this instance. Please follow the examples for usage, including
	 * how to opt-out of auto-starting the shared ticker.
	 *
	 * @example
	 * let ticker = PIXI.ticker.shared;
	 * // Set this to prevent starting this ticker when listeners are added.
	 * // By default this is true only for the PIXI.ticker.shared instance.
	 * ticker.autoStart = false;
	 * // FYI, call this to ensure the ticker is stopped. It should be stopped
	 * // if you have not attempted to render anything yet.
	 * ticker.stop();
	 * // Call this when you are ready for a running shared ticker.
	 * ticker.start();
	 *
	 * @example
	 * // You may use the shared ticker to render...
	 * let renderer = PIXI.autoDetectRenderer(800, 600);
	 * let stage = new PIXI.Container();
	 * let interactionManager = PIXI.interaction.InteractionManager(renderer);
	 * document.body.appendChild(renderer.view);
	 * ticker.add(function (time) {
	 *     renderer.render(stage);
	 * });
	 *
	 * @example
	 * // Or you can just update it manually.
	 * ticker.autoStart = false;
	 * ticker.stop();
	 * function animate(time) {
	 *     ticker.update(time);
	 *     renderer.render(stage);
	 *     requestAnimationFrame(animate);
	 * }
	 * animate(performance.now());
	 *
	 * @type {PIXI.ticker.Ticker}
	 * @memberof PIXI.ticker
	 */
	var shared = new _Ticker2.default();
	
	shared.autoStart = true;
	
	/**
	 * @namespace PIXI.ticker
	 */
	exports.shared = shared;
	exports.Ticker = _Ticker2.default;
	//# sourceMappingURL=index.js.map

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _settings = __webpack_require__(43);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	var _eventemitter = __webpack_require__(42);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// Internal event used by composed emitter
	var TICK = 'tick';
	
	var TARGET_FPMS = _settings2.default.TARGET_FPMS;
	
	/**
	 * A Ticker class that runs an update loop that other objects listen to.
	 * This class is composed around an EventEmitter object to add listeners
	 * meant for execution on the next requested animation frame.
	 * Animation frames are requested only when necessary,
	 * e.g. When the ticker is started and the emitter has listeners.
	 *
	 * @class
	 * @memberof PIXI.ticker
	 */
	
	var Ticker = function () {
	    /**
	     *
	     */
	    function Ticker() {
	        var _this = this;
	
	        _classCallCheck(this, Ticker);
	
	        /**
	         * Internal emitter used to fire 'tick' event
	         * @private
	         */
	        this._emitter = new _eventemitter2.default();
	
	        /**
	         * Internal current frame request ID
	         * @private
	         */
	        this._requestId = null;
	
	        /**
	         * Internal value managed by minFPS property setter and getter.
	         * This is the maximum allowed milliseconds between updates.
	         * @private
	         */
	        this._maxElapsedMS = 100;
	
	        /**
	         * Whether or not this ticker should invoke the method
	         * {@link PIXI.ticker.Ticker#start} automatically
	         * when a listener is added.
	         *
	         * @member {boolean}
	         * @default false
	         */
	        this.autoStart = false;
	
	        /**
	         * Scalar time value from last frame to this frame.
	         * This value is capped by setting {@link PIXI.ticker.Ticker#minFPS}
	         * and is scaled with {@link PIXI.ticker.Ticker#speed}.
	         * **Note:** The cap may be exceeded by scaling.
	         *
	         * @member {number}
	         * @default 1
	         */
	        this.deltaTime = 1;
	
	        /**
	         * Time elapsed in milliseconds from last frame to this frame.
	         * Opposed to what the scalar {@link PIXI.ticker.Ticker#deltaTime}
	         * is based, this value is neither capped nor scaled.
	         * If the platform supports DOMHighResTimeStamp,
	         * this value will have a precision of 1 ¬µs.
	         *
	         * @member {number}
	         * @default 1 / TARGET_FPMS
	         */
	        this.elapsedMS = 1 / TARGET_FPMS; // default to target frame time
	
	        /**
	         * The last time {@link PIXI.ticker.Ticker#update} was invoked.
	         * This value is also reset internally outside of invoking
	         * update, but only when a new animation frame is requested.
	         * If the platform supports DOMHighResTimeStamp,
	         * this value will have a precision of 1 ¬µs.
	         *
	         * @member {number}
	         * @default 0
	         */
	        this.lastTime = 0;
	
	        /**
	         * Factor of current {@link PIXI.ticker.Ticker#deltaTime}.
	         * @example
	         * // Scales ticker.deltaTime to what would be
	         * // the equivalent of approximately 120 FPS
	         * ticker.speed = 2;
	         *
	         * @member {number}
	         * @default 1
	         */
	        this.speed = 1;
	
	        /**
	         * Whether or not this ticker has been started.
	         * `true` if {@link PIXI.ticker.Ticker#start} has been called.
	         * `false` if {@link PIXI.ticker.Ticker#stop} has been called.
	         * While `false`, this value may change to `true` in the
	         * event of {@link PIXI.ticker.Ticker#autoStart} being `true`
	         * and a listener is added.
	         *
	         * @member {boolean}
	         * @default false
	         */
	        this.started = false;
	
	        /**
	         * Internal tick method bound to ticker instance.
	         * This is because in early 2015, Function.bind
	         * is still 60% slower in high performance scenarios.
	         * Also separating frame requests from update method
	         * so listeners may be called at any time and with
	         * any animation API, just invoke ticker.update(time).
	         *
	         * @private
	         * @param {number} time - Time since last tick.
	         */
	        this._tick = function (time) {
	            _this._requestId = null;
	
	            if (_this.started) {
	                // Invoke listeners now
	                _this.update(time);
	                // Listener side effects may have modified ticker state.
	                if (_this.started && _this._requestId === null && _this._emitter.listeners(TICK, true)) {
	                    _this._requestId = requestAnimationFrame(_this._tick);
	                }
	            }
	        };
	    }
	
	    /**
	     * Conditionally requests a new animation frame.
	     * If a frame has not already been requested, and if the internal
	     * emitter has listeners, a new frame is requested.
	     *
	     * @private
	     */
	
	
	    Ticker.prototype._requestIfNeeded = function _requestIfNeeded() {
	        if (this._requestId === null && this._emitter.listeners(TICK, true)) {
	            // ensure callbacks get correct delta
	            this.lastTime = performance.now();
	            this._requestId = requestAnimationFrame(this._tick);
	        }
	    };
	
	    /**
	     * Conditionally cancels a pending animation frame.
	     *
	     * @private
	     */
	
	
	    Ticker.prototype._cancelIfNeeded = function _cancelIfNeeded() {
	        if (this._requestId !== null) {
	            cancelAnimationFrame(this._requestId);
	            this._requestId = null;
	        }
	    };
	
	    /**
	     * Conditionally requests a new animation frame.
	     * If the ticker has been started it checks if a frame has not already
	     * been requested, and if the internal emitter has listeners. If these
	     * conditions are met, a new frame is requested. If the ticker has not
	     * been started, but autoStart is `true`, then the ticker starts now,
	     * and continues with the previous conditions to request a new frame.
	     *
	     * @private
	     */
	
	
	    Ticker.prototype._startIfPossible = function _startIfPossible() {
	        if (this.started) {
	            this._requestIfNeeded();
	        } else if (this.autoStart) {
	            this.start();
	        }
	    };
	
	    /**
	     * Calls {@link module:eventemitter3.EventEmitter#on} internally for the
	     * internal 'tick' event. It checks if the emitter has listeners,
	     * and if so it requests a new animation frame at this point.
	     *
	     * @param {Function} fn - The listener function to be added for updates
	     * @param {Function} [context] - The listener context
	     * @returns {PIXI.ticker.Ticker} This instance of a ticker
	     */
	
	
	    Ticker.prototype.add = function add(fn, context) {
	        this._emitter.on(TICK, fn, context);
	
	        this._startIfPossible();
	
	        return this;
	    };
	
	    /**
	     * Calls {@link module:eventemitter3.EventEmitter#once} internally for the
	     * internal 'tick' event. It checks if the emitter has listeners,
	     * and if so it requests a new animation frame at this point.
	     *
	     * @param {Function} fn - The listener function to be added for one update
	     * @param {Function} [context] - The listener context
	     * @returns {PIXI.ticker.Ticker} This instance of a ticker
	     */
	
	
	    Ticker.prototype.addOnce = function addOnce(fn, context) {
	        this._emitter.once(TICK, fn, context);
	
	        this._startIfPossible();
	
	        return this;
	    };
	
	    /**
	     * Calls {@link module:eventemitter3.EventEmitter#off} internally for 'tick' event.
	     * It checks if the emitter has listeners for 'tick' event.
	     * If it does, then it cancels the animation frame.
	     *
	     * @param {Function} [fn] - The listener function to be removed
	     * @param {Function} [context] - The listener context to be removed
	     * @returns {PIXI.ticker.Ticker} This instance of a ticker
	     */
	
	
	    Ticker.prototype.remove = function remove(fn, context) {
	        this._emitter.off(TICK, fn, context);
	
	        if (!this._emitter.listeners(TICK, true)) {
	            this._cancelIfNeeded();
	        }
	
	        return this;
	    };
	
	    /**
	     * Starts the ticker. If the ticker has listeners
	     * a new animation frame is requested at this point.
	     */
	
	
	    Ticker.prototype.start = function start() {
	        if (!this.started) {
	            this.started = true;
	            this._requestIfNeeded();
	        }
	    };
	
	    /**
	     * Stops the ticker. If the ticker has requested
	     * an animation frame it is canceled at this point.
	     */
	
	
	    Ticker.prototype.stop = function stop() {
	        if (this.started) {
	            this.started = false;
	            this._cancelIfNeeded();
	        }
	    };
	
	    /**
	     * Triggers an update. An update entails setting the
	     * current {@link PIXI.ticker.Ticker#elapsedMS},
	     * the current {@link PIXI.ticker.Ticker#deltaTime},
	     * invoking all listeners with current deltaTime,
	     * and then finally setting {@link PIXI.ticker.Ticker#lastTime}
	     * with the value of currentTime that was provided.
	     * This method will be called automatically by animation
	     * frame callbacks if the ticker instance has been started
	     * and listeners are added.
	     *
	     * @param {number} [currentTime=performance.now()] - the current time of execution
	     */
	
	
	    Ticker.prototype.update = function update() {
	        var currentTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : performance.now();
	
	        var elapsedMS = void 0;
	
	        // If the difference in time is zero or negative, we ignore most of the work done here.
	        // If there is no valid difference, then should be no reason to let anyone know about it.
	        // A zero delta, is exactly that, nothing should update.
	        //
	        // The difference in time can be negative, and no this does not mean time traveling.
	        // This can be the result of a race condition between when an animation frame is requested
	        // on the current JavaScript engine event loop, and when the ticker's start method is invoked
	        // (which invokes the internal _requestIfNeeded method). If a frame is requested before
	        // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,
	        // can receive a time argument that can be less than the lastTime value that was set within
	        // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.
	        //
	        // This check covers this browser engine timing issue, as well as if consumers pass an invalid
	        // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.
	
	        if (currentTime > this.lastTime) {
	            // Save uncapped elapsedMS for measurement
	            elapsedMS = this.elapsedMS = currentTime - this.lastTime;
	
	            // cap the milliseconds elapsed used for deltaTime
	            if (elapsedMS > this._maxElapsedMS) {
	                elapsedMS = this._maxElapsedMS;
	            }
	
	            this.deltaTime = elapsedMS * TARGET_FPMS * this.speed;
	
	            // Invoke listeners added to internal emitter
	            this._emitter.emit(TICK, this.deltaTime);
	        } else {
	            this.deltaTime = this.elapsedMS = 0;
	        }
	
	        this.lastTime = currentTime;
	    };
	
	    /**
	     * The frames per second at which this ticker is running.
	     * The default is approximately 60 in most modern browsers.
	     * **Note:** This does not factor in the value of
	     * {@link PIXI.ticker.Ticker#speed}, which is specific
	     * to scaling {@link PIXI.ticker.Ticker#deltaTime}.
	     *
	     * @memberof PIXI.ticker.Ticker#
	     * @readonly
	     */
	
	
	    _createClass(Ticker, [{
	        key: 'FPS',
	        get: function get() {
	            return 1000 / this.elapsedMS;
	        }
	
	        /**
	         * Manages the maximum amount of milliseconds allowed to
	         * elapse between invoking {@link PIXI.ticker.Ticker#update}.
	         * This value is used to cap {@link PIXI.ticker.Ticker#deltaTime},
	         * but does not effect the measured value of {@link PIXI.ticker.Ticker#FPS}.
	         * When setting this property it is clamped to a value between
	         * `0` and `PIXI.settings.TARGET_FPMS * 1000`.
	         *
	         * @memberof PIXI.ticker.Ticker#
	         * @default 10
	         */
	
	    }, {
	        key: 'minFPS',
	        get: function get() {
	            return 1000 / this._maxElapsedMS;
	        }
	
	        /**
	         * Sets the min fps.
	         *
	         * @param {number} fps - value to set.
	         */
	        ,
	        set: function set(fps) {
	            // Clamp: 0 to TARGET_FPMS
	            var minFPMS = Math.min(Math.max(0, fps) / 1000, TARGET_FPMS);
	
	            this._maxElapsedMS = 1 / minFPMS;
	        }
	    }]);
	
	    return Ticker;
	}();
	
	exports.default = Ticker;
	//# sourceMappingURL=Ticker.js.map

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _GroupD = __webpack_require__(18);
	
	var _GroupD2 = _interopRequireDefault(_GroupD);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * A standard object to store the Uvs of a texture
	 *
	 * @class
	 * @private
	 * @memberof PIXI
	 */
	var TextureUvs = function () {
	    /**
	     *
	     */
	    function TextureUvs() {
	        _classCallCheck(this, TextureUvs);
	
	        this.x0 = 0;
	        this.y0 = 0;
	
	        this.x1 = 1;
	        this.y1 = 0;
	
	        this.x2 = 1;
	        this.y2 = 1;
	
	        this.x3 = 0;
	        this.y3 = 1;
	
	        this.uvsUint32 = new Uint32Array(4);
	    }
	
	    /**
	     * Sets the texture Uvs based on the given frame information.
	     *
	     * @private
	     * @param {PIXI.Rectangle} frame - The frame of the texture
	     * @param {PIXI.Rectangle} baseFrame - The base frame of the texture
	     * @param {number} rotate - Rotation of frame, see {@link PIXI.GroupD8}
	     */
	
	
	    TextureUvs.prototype.set = function set(frame, baseFrame, rotate) {
	        var tw = baseFrame.width;
	        var th = baseFrame.height;
	
	        if (rotate) {
	            // width and height div 2 div baseFrame size
	            var w2 = frame.width / 2 / tw;
	            var h2 = frame.height / 2 / th;
	
	            // coordinates of center
	            var cX = frame.x / tw + w2;
	            var cY = frame.y / th + h2;
	
	            rotate = _GroupD2.default.add(rotate, _GroupD2.default.NW); // NW is top-left corner
	            this.x0 = cX + w2 * _GroupD2.default.uX(rotate);
	            this.y0 = cY + h2 * _GroupD2.default.uY(rotate);
	
	            rotate = _GroupD2.default.add(rotate, 2); // rotate 90 degrees clockwise
	            this.x1 = cX + w2 * _GroupD2.default.uX(rotate);
	            this.y1 = cY + h2 * _GroupD2.default.uY(rotate);
	
	            rotate = _GroupD2.default.add(rotate, 2);
	            this.x2 = cX + w2 * _GroupD2.default.uX(rotate);
	            this.y2 = cY + h2 * _GroupD2.default.uY(rotate);
	
	            rotate = _GroupD2.default.add(rotate, 2);
	            this.x3 = cX + w2 * _GroupD2.default.uX(rotate);
	            this.y3 = cY + h2 * _GroupD2.default.uY(rotate);
	        } else {
	            this.x0 = frame.x / tw;
	            this.y0 = frame.y / th;
	
	            this.x1 = (frame.x + frame.width) / tw;
	            this.y1 = frame.y / th;
	
	            this.x2 = (frame.x + frame.width) / tw;
	            this.y2 = (frame.y + frame.height) / th;
	
	            this.x3 = frame.x / tw;
	            this.y3 = (frame.y + frame.height) / th;
	        }
	
	        this.uvsUint32[0] = (this.y0 * 65535 & 0xFFFF) << 16 | this.x0 * 65535 & 0xFFFF;
	        this.uvsUint32[1] = (this.y1 * 65535 & 0xFFFF) << 16 | this.x1 * 65535 & 0xFFFF;
	        this.uvsUint32[2] = (this.y2 * 65535 & 0xFFFF) << 16 | this.x2 * 65535 & 0xFFFF;
	        this.uvsUint32[3] = (this.y3 * 65535 & 0xFFFF) << 16 | this.x3 * 65535 & 0xFFFF;
	    };
	
	    return TextureUvs;
	}();
	
	exports.default = TextureUvs;
	//# sourceMappingURL=TextureUvs.js.map

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _CanvasRenderer = __webpack_require__(69);
	
	var _CanvasRenderer2 = _interopRequireDefault(_CanvasRenderer);
	
	var _const = __webpack_require__(12);
	
	var _math = __webpack_require__(14);
	
	var _CanvasTinter = __webpack_require__(77);
	
	var _CanvasTinter2 = _interopRequireDefault(_CanvasTinter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var canvasRenderWorldTransform = new _math.Matrix();
	
	/**
	 * @author Mat Groves
	 *
	 * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/
	 * for creating the original pixi version!
	 * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now
	 * share 4 bytes on the vertex buffer
	 *
	 * Heavily inspired by LibGDX's CanvasSpriteRenderer:
	 * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/CanvasSpriteRenderer.java
	 */
	
	/**
	 * Renderer dedicated to drawing and batching sprites.
	 *
	 * @class
	 * @private
	 * @memberof PIXI
	 */
	
	var CanvasSpriteRenderer = function () {
	    /**
	     * @param {PIXI.WebGLRenderer} renderer -The renderer sprite this batch works for.
	     */
	    function CanvasSpriteRenderer(renderer) {
	        _classCallCheck(this, CanvasSpriteRenderer);
	
	        this.renderer = renderer;
	    }
	
	    /**
	     * Renders the sprite object.
	     *
	     * @param {PIXI.Sprite} sprite - the sprite to render when using this spritebatch
	     */
	
	
	    CanvasSpriteRenderer.prototype.render = function render(sprite) {
	        var texture = sprite._texture;
	        var renderer = this.renderer;
	
	        var width = texture._frame.width;
	        var height = texture._frame.height;
	
	        var wt = sprite.transform.worldTransform;
	        var dx = 0;
	        var dy = 0;
	
	        if (texture.orig.width <= 0 || texture.orig.height <= 0 || !texture.baseTexture.source) {
	            return;
	        }
	
	        renderer.setBlendMode(sprite.blendMode);
	
	        //  Ignore null sources
	        if (texture.valid) {
	            renderer.context.globalAlpha = sprite.worldAlpha;
	
	            // If smoothingEnabled is supported and we need to change the smoothing property for sprite texture
	            var smoothingEnabled = texture.baseTexture.scaleMode === _const.SCALE_MODES.LINEAR;
	
	            if (renderer.smoothProperty && renderer.context[renderer.smoothProperty] !== smoothingEnabled) {
	                renderer.context[renderer.smoothProperty] = smoothingEnabled;
	            }
	
	            if (texture.trim) {
	                dx = texture.trim.width / 2 + texture.trim.x - sprite.anchor.x * texture.orig.width;
	                dy = texture.trim.height / 2 + texture.trim.y - sprite.anchor.y * texture.orig.height;
	            } else {
	                dx = (0.5 - sprite.anchor.x) * texture.orig.width;
	                dy = (0.5 - sprite.anchor.y) * texture.orig.height;
	            }
	
	            if (texture.rotate) {
	                wt.copy(canvasRenderWorldTransform);
	                wt = canvasRenderWorldTransform;
	                _math.GroupD8.matrixAppendRotationInv(wt, texture.rotate, dx, dy);
	                // the anchor has already been applied above, so lets set it to zero
	                dx = 0;
	                dy = 0;
	            }
	
	            dx -= width / 2;
	            dy -= height / 2;
	
	            // Allow for pixel rounding
	            if (renderer.roundPixels) {
	                renderer.context.setTransform(wt.a, wt.b, wt.c, wt.d, wt.tx * renderer.resolution | 0, wt.ty * renderer.resolution | 0);
	
	                dx = dx | 0;
	                dy = dy | 0;
	            } else {
	                renderer.context.setTransform(wt.a, wt.b, wt.c, wt.d, wt.tx * renderer.resolution, wt.ty * renderer.resolution);
	            }
	
	            var resolution = texture.baseTexture.resolution;
	
	            if (sprite.tint !== 0xFFFFFF) {
	                if (sprite.cachedTint !== sprite.tint) {
	                    sprite.cachedTint = sprite.tint;
	
	                    // TODO clean up caching - how to clean up the caches?
	                    sprite.tintedTexture = _CanvasTinter2.default.getTintedTexture(sprite, sprite.tint);
	                }
	
	                renderer.context.drawImage(sprite.tintedTexture, 0, 0, width * resolution, height * resolution, dx * renderer.resolution, dy * renderer.resolution, width * renderer.resolution, height * renderer.resolution);
	            } else {
	                renderer.context.drawImage(texture.baseTexture.source, texture._frame.x * resolution, texture._frame.y * resolution, width * resolution, height * resolution, dx * renderer.resolution, dy * renderer.resolution, width * renderer.resolution, height * renderer.resolution);
	            }
	        }
	    };
	
	    /**
	     * destroy the sprite object.
	     *
	     */
	
	
	    CanvasSpriteRenderer.prototype.destroy = function destroy() {
	        this.renderer = null;
	    };
	
	    return CanvasSpriteRenderer;
	}();
	
	exports.default = CanvasSpriteRenderer;
	
	
	_CanvasRenderer2.default.registerPlugin('sprite', CanvasSpriteRenderer);
	//# sourceMappingURL=CanvasSpriteRenderer.js.map

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _SystemRenderer2 = __webpack_require__(70);
	
	var _SystemRenderer3 = _interopRequireDefault(_SystemRenderer2);
	
	var _CanvasMaskManager = __webpack_require__(73);
	
	var _CanvasMaskManager2 = _interopRequireDefault(_CanvasMaskManager);
	
	var _CanvasRenderTarget = __webpack_require__(74);
	
	var _CanvasRenderTarget2 = _interopRequireDefault(_CanvasRenderTarget);
	
	var _mapCanvasBlendModesToPixi = __webpack_require__(75);
	
	var _mapCanvasBlendModesToPixi2 = _interopRequireDefault(_mapCanvasBlendModesToPixi);
	
	var _utils = __webpack_require__(51);
	
	var _const = __webpack_require__(12);
	
	var _settings = __webpack_require__(43);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The CanvasRenderer draws the scene and all its content onto a 2d canvas. This renderer should
	 * be used for browsers that do not support WebGL. Don't forget to add the CanvasRenderer.view to
	 * your DOM or you will not see anything :)
	 *
	 * @class
	 * @memberof PIXI
	 * @extends PIXI.SystemRenderer
	 */
	var CanvasRenderer = function (_SystemRenderer) {
	    _inherits(CanvasRenderer, _SystemRenderer);
	
	    /**
	     * @param {number} [width=800] - the width of the canvas view
	     * @param {number} [height=600] - the height of the canvas view
	     * @param {object} [options] - The optional renderer parameters
	     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional
	     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false
	     * @param {boolean} [options.autoResize=false] - If the render view is automatically resized, default false
	     * @param {boolean} [options.antialias=false] - sets antialias (only applicable in chrome at the moment)
	     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer. The
	     *  resolution of the renderer retina would be 2.
	     * @param {boolean} [options.clearBeforeRender=true] - This sets if the CanvasRenderer will clear the canvas or
	     *      not before the new render pass.
	     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area
	     *  (shown if not transparent).
	     * @param {boolean} [options.roundPixels=false] - If true Pixi will Math.floor() x/y values when rendering,
	     *  stopping pixel interpolation.
	     */
	    function CanvasRenderer(width, height) {
	        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        _classCallCheck(this, CanvasRenderer);
	
	        var _this = _possibleConstructorReturn(this, _SystemRenderer.call(this, 'Canvas', width, height, options));
	
	        _this.type = _const.RENDERER_TYPE.CANVAS;
	
	        /**
	         * The canvas 2d context that everything is drawn with.
	         *
	         * @member {CanvasRenderingContext2D}
	         */
	        _this.rootContext = _this.view.getContext('2d', { alpha: _this.transparent });
	
	        /**
	         * Boolean flag controlling canvas refresh.
	         *
	         * @member {boolean}
	         */
	        _this.refresh = true;
	
	        /**
	         * Instance of a CanvasMaskManager, handles masking when using the canvas renderer.
	         *
	         * @member {PIXI.CanvasMaskManager}
	         */
	        _this.maskManager = new _CanvasMaskManager2.default(_this);
	
	        /**
	         * The canvas property used to set the canvas smoothing property.
	         *
	         * @member {string}
	         */
	        _this.smoothProperty = 'imageSmoothingEnabled';
	
	        if (!_this.rootContext.imageSmoothingEnabled) {
	            if (_this.rootContext.webkitImageSmoothingEnabled) {
	                _this.smoothProperty = 'webkitImageSmoothingEnabled';
	            } else if (_this.rootContext.mozImageSmoothingEnabled) {
	                _this.smoothProperty = 'mozImageSmoothingEnabled';
	            } else if (_this.rootContext.oImageSmoothingEnabled) {
	                _this.smoothProperty = 'oImageSmoothingEnabled';
	            } else if (_this.rootContext.msImageSmoothingEnabled) {
	                _this.smoothProperty = 'msImageSmoothingEnabled';
	            }
	        }
	
	        _this.initPlugins();
	
	        _this.blendModes = (0, _mapCanvasBlendModesToPixi2.default)();
	        _this._activeBlendMode = null;
	
	        _this.context = null;
	        _this.renderingToScreen = false;
	
	        _this.resize(width, height);
	        return _this;
	    }
	
	    /**
	     * Renders the object to this canvas view
	     *
	     * @param {PIXI.DisplayObject} displayObject - The object to be rendered
	     * @param {PIXI.RenderTexture} [renderTexture] - A render texture to be rendered to.
	     *  If unset, it will render to the root context.
	     * @param {boolean} [clear=false] - Whether to clear the canvas before drawing
	     * @param {PIXI.Transform} [transform] - A transformation to be applied
	     * @param {boolean} [skipUpdateTransform=false] - Whether to skip the update transform
	     */
	
	
	    CanvasRenderer.prototype.render = function render(displayObject, renderTexture, clear, transform, skipUpdateTransform) {
	        if (!this.view) {
	            return;
	        }
	
	        // can be handy to know!
	        this.renderingToScreen = !renderTexture;
	
	        this.emit('prerender');
	
	        if (renderTexture) {
	            renderTexture = renderTexture.baseTexture || renderTexture;
	
	            if (!renderTexture._canvasRenderTarget) {
	                renderTexture._canvasRenderTarget = new _CanvasRenderTarget2.default(renderTexture.width, renderTexture.height, renderTexture.resolution);
	                renderTexture.source = renderTexture._canvasRenderTarget.canvas;
	                renderTexture.valid = true;
	            }
	
	            this.context = renderTexture._canvasRenderTarget.context;
	            this.resolution = renderTexture._canvasRenderTarget.resolution;
	        } else {
	            this.context = this.rootContext;
	        }
	
	        var context = this.context;
	
	        if (!renderTexture) {
	            this._lastObjectRendered = displayObject;
	        }
	
	        if (!skipUpdateTransform) {
	            // update the scene graph
	            var cacheParent = displayObject.parent;
	            var tempWt = this._tempDisplayObjectParent.transform.worldTransform;
	
	            if (transform) {
	                transform.copy(tempWt);
	            } else {
	                tempWt.identity();
	            }
	
	            displayObject.parent = this._tempDisplayObjectParent;
	            displayObject.updateTransform();
	            displayObject.parent = cacheParent;
	            // displayObject.hitArea = //TODO add a temp hit area
	        }
	
	        context.setTransform(1, 0, 0, 1, 0, 0);
	        context.globalAlpha = 1;
	        context.globalCompositeOperation = this.blendModes[_const.BLEND_MODES.NORMAL];
	
	        if (navigator.isCocoonJS && this.view.screencanvas) {
	            context.fillStyle = 'black';
	            context.clear();
	        }
	
	        if (clear !== undefined ? clear : this.clearBeforeRender) {
	            if (this.renderingToScreen) {
	                if (this.transparent) {
	                    context.clearRect(0, 0, this.width, this.height);
	                } else {
	                    context.fillStyle = this._backgroundColorString;
	                    context.fillRect(0, 0, this.width, this.height);
	                }
	            } // else {
	            // TODO: implement background for CanvasRenderTarget or RenderTexture?
	            // }
	        }
	
	        // TODO RENDER TARGET STUFF HERE..
	        var tempContext = this.context;
	
	        this.context = context;
	        displayObject.renderCanvas(this);
	        this.context = tempContext;
	
	        this.emit('postrender');
	    };
	
	    /**
	     * Sets the blend mode of the renderer.
	     *
	     * @param {number} blendMode - See {@link PIXI.BLEND_MODES} for valid values.
	     */
	
	
	    CanvasRenderer.prototype.setBlendMode = function setBlendMode(blendMode) {
	        if (this._activeBlendMode === blendMode) {
	            return;
	        }
	
	        this._activeBlendMode = blendMode;
	        this.context.globalCompositeOperation = this.blendModes[blendMode];
	    };
	
	    /**
	     * Removes everything from the renderer and optionally removes the Canvas DOM element.
	     *
	     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.
	     */
	
	
	    CanvasRenderer.prototype.destroy = function destroy(removeView) {
	        this.destroyPlugins();
	
	        // call the base destroy
	        _SystemRenderer.prototype.destroy.call(this, removeView);
	
	        this.context = null;
	
	        this.refresh = true;
	
	        this.maskManager.destroy();
	        this.maskManager = null;
	
	        this.smoothProperty = null;
	    };
	
	    /**
	     * Resizes the canvas view to the specified width and height.
	     *
	     * @extends PIXI.SystemRenderer#resize
	     *
	     * @param {number} width - The new width of the canvas view
	     * @param {number} height - The new height of the canvas view
	     */
	
	
	    CanvasRenderer.prototype.resize = function resize(width, height) {
	        _SystemRenderer.prototype.resize.call(this, width, height);
	
	        // reset the scale mode.. oddly this seems to be reset when the canvas is resized.
	        // surely a browser bug?? Let pixi fix that for you..
	        if (this.smoothProperty) {
	            this.rootContext[this.smoothProperty] = _settings2.default.SCALE_MODE === _const.SCALE_MODES.LINEAR;
	        }
	    };
	
	    return CanvasRenderer;
	}(_SystemRenderer3.default);
	
	exports.default = CanvasRenderer;
	
	
	_utils.pluginTarget.mixin(CanvasRenderer);
	//# sourceMappingURL=CanvasRenderer.js.map

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _utils = __webpack_require__(51);
	
	var _math = __webpack_require__(14);
	
	var _const = __webpack_require__(12);
	
	var _settings = __webpack_require__(43);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	var _Container = __webpack_require__(50);
	
	var _Container2 = _interopRequireDefault(_Container);
	
	var _RenderTexture = __webpack_require__(71);
	
	var _RenderTexture2 = _interopRequireDefault(_RenderTexture);
	
	var _eventemitter = __webpack_require__(42);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var tempMatrix = new _math.Matrix();
	var RESOLUTION = _settings2.default.RESOLUTION,
	    RENDER_OPTIONS = _settings2.default.RENDER_OPTIONS;
	
	/**
	 * The SystemRenderer is the base for a Pixi Renderer. It is extended by the {@link PIXI.CanvasRenderer}
	 * and {@link PIXI.WebGLRenderer} which can be used for rendering a Pixi scene.
	 *
	 * @abstract
	 * @class
	 * @extends EventEmitter
	 * @memberof PIXI
	 */
	
	var SystemRenderer = function (_EventEmitter) {
	  _inherits(SystemRenderer, _EventEmitter);
	
	  /**
	   * @param {string} system - The name of the system this renderer is for.
	   * @param {number} [width=800] - the width of the canvas view
	   * @param {number} [height=600] - the height of the canvas view
	   * @param {object} [options] - The optional renderer parameters
	   * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional
	   * @param {boolean} [options.transparent=false] - If the render view is transparent, default false
	   * @param {boolean} [options.autoResize=false] - If the render view is automatically resized, default false
	   * @param {boolean} [options.antialias=false] - sets antialias (only applicable in chrome at the moment)
	   * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer. The
	   *  resolution of the renderer retina would be 2.
	   * @param {boolean} [options.clearBeforeRender=true] - This sets if the CanvasRenderer will clear the canvas or
	   *      not before the new render pass.
	   * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area
	   *  (shown if not transparent).
	   * @param {boolean} [options.roundPixels=false] - If true Pixi will Math.floor() x/y values when rendering,
	   *  stopping pixel interpolation.
	   */
	  function SystemRenderer(system, width, height, options) {
	    _classCallCheck(this, SystemRenderer);
	
	    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));
	
	    (0, _utils.sayHello)(system);
	
	    // prepare options
	    if (options) {
	      for (var i in RENDER_OPTIONS) {
	        if (typeof options[i] === 'undefined') {
	          options[i] = RENDER_OPTIONS[i];
	        }
	      }
	    } else {
	      options = RENDER_OPTIONS;
	    }
	
	    /**
	     * The type of the renderer.
	     *
	     * @member {number}
	     * @default PIXI.RENDERER_TYPE.UNKNOWN
	     * @see PIXI.RENDERER_TYPE
	     */
	    _this.type = _const.RENDERER_TYPE.UNKNOWN;
	
	    /**
	     * The width of the canvas view
	     *
	     * @member {number}
	     * @default 800
	     */
	    _this.width = width || 800;
	
	    /**
	     * The height of the canvas view
	     *
	     * @member {number}
	     * @default 600
	     */
	    _this.height = height || 600;
	
	    /**
	     * The canvas element that everything is drawn to
	     *
	     * @member {HTMLCanvasElement}
	     */
	    _this.view = options.view || document.createElement('canvas');
	
	    /**
	     * The resolution / device pixel ratio of the renderer
	     *
	     * @member {number}
	     * @default 1
	     */
	    _this.resolution = options.resolution || RESOLUTION;
	
	    /**
	     * Whether the render view is transparent
	     *
	     * @member {boolean}
	     */
	    _this.transparent = options.transparent;
	
	    /**
	     * Whether the render view should be resized automatically
	     *
	     * @member {boolean}
	     */
	    _this.autoResize = options.autoResize || false;
	
	    /**
	     * Tracks the blend modes useful for this renderer.
	     *
	     * @member {object<string, mixed>}
	     */
	    _this.blendModes = null;
	
	    /**
	     * The value of the preserveDrawingBuffer flag affects whether or not the contents of
	     * the stencil buffer is retained after rendering.
	     *
	     * @member {boolean}
	     */
	    _this.preserveDrawingBuffer = options.preserveDrawingBuffer;
	
	    /**
	     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.
	     * If the scene is NOT transparent Pixi will use a canvas sized fillRect operation every
	     * frame to set the canvas background color. If the scene is transparent Pixi will use clearRect
	     * to clear the canvas every frame. Disable this by setting this to false. For example if
	     * your game has a canvas filling background image you often don't need this set.
	     *
	     * @member {boolean}
	     * @default
	     */
	    _this.clearBeforeRender = options.clearBeforeRender;
	
	    /**
	     * If true Pixi will Math.floor() x/y values when rendering, stopping pixel interpolation.
	     * Handy for crisp pixel art and speed on legacy devices.
	     *
	     * @member {boolean}
	     */
	    _this.roundPixels = options.roundPixels;
	
	    /**
	     * The background color as a number.
	     *
	     * @member {number}
	     * @private
	     */
	    _this._backgroundColor = 0x000000;
	
	    /**
	     * The background color as an [R, G, B] array.
	     *
	     * @member {number[]}
	     * @private
	     */
	    _this._backgroundColorRgba = [0, 0, 0, 0];
	
	    /**
	     * The background color as a string.
	     *
	     * @member {string}
	     * @private
	     */
	    _this._backgroundColorString = '#000000';
	
	    _this.backgroundColor = options.backgroundColor || _this._backgroundColor; // run bg color setter
	
	    /**
	     * This temporary display object used as the parent of the currently being rendered item
	     *
	     * @member {PIXI.DisplayObject}
	     * @private
	     */
	    _this._tempDisplayObjectParent = new _Container2.default();
	
	    /**
	     * The last root object that the renderer tried to render.
	     *
	     * @member {PIXI.DisplayObject}
	     * @private
	     */
	    _this._lastObjectRendered = _this._tempDisplayObjectParent;
	    return _this;
	  }
	
	  /**
	   * Resizes the canvas view to the specified width and height
	   *
	   * @param {number} width - the new width of the canvas view
	   * @param {number} height - the new height of the canvas view
	   */
	
	
	  SystemRenderer.prototype.resize = function resize(width, height) {
	    this.width = width * this.resolution;
	    this.height = height * this.resolution;
	
	    this.view.width = this.width;
	    this.view.height = this.height;
	
	    if (this.autoResize) {
	      this.view.style.width = this.width / this.resolution + 'px';
	      this.view.style.height = this.height / this.resolution + 'px';
	    }
	  };
	
	  /**
	   * Useful function that returns a texture of the display object that can then be used to create sprites
	   * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.
	   *
	   * @param {PIXI.DisplayObject} displayObject - The displayObject the object will be generated from
	   * @param {number} scaleMode - Should be one of the scaleMode consts
	   * @param {number} resolution - The resolution / device pixel ratio of the texture being generated
	   * @return {PIXI.Texture} a texture of the graphics object
	   */
	
	
	  SystemRenderer.prototype.generateTexture = function generateTexture(displayObject, scaleMode, resolution) {
	    var bounds = displayObject.getLocalBounds();
	
	    var renderTexture = _RenderTexture2.default.create(bounds.width | 0, bounds.height | 0, scaleMode, resolution);
	
	    tempMatrix.tx = -bounds.x;
	    tempMatrix.ty = -bounds.y;
	
	    this.render(displayObject, renderTexture, false, tempMatrix, true);
	
	    return renderTexture;
	  };
	
	  /**
	   * Removes everything from the renderer and optionally removes the Canvas DOM element.
	   *
	   * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.
	   */
	
	
	  SystemRenderer.prototype.destroy = function destroy(removeView) {
	    if (removeView && this.view.parentNode) {
	      this.view.parentNode.removeChild(this.view);
	    }
	
	    this.type = _const.RENDERER_TYPE.UNKNOWN;
	
	    this.width = 0;
	    this.height = 0;
	
	    this.view = null;
	
	    this.resolution = 0;
	
	    this.transparent = false;
	
	    this.autoResize = false;
	
	    this.blendModes = null;
	
	    this.preserveDrawingBuffer = false;
	    this.clearBeforeRender = false;
	
	    this.roundPixels = false;
	
	    this._backgroundColor = 0;
	    this._backgroundColorRgba = null;
	    this._backgroundColorString = null;
	
	    this.backgroundColor = 0;
	    this._tempDisplayObjectParent = null;
	    this._lastObjectRendered = null;
	  };
	
	  /**
	   * The background color to fill if not transparent
	   *
	   * @member {number}
	   * @memberof PIXI.SystemRenderer#
	   */
	
	
	  _createClass(SystemRenderer, [{
	    key: 'backgroundColor',
	    get: function get() {
	      return this._backgroundColor;
	    }
	
	    /**
	     * Sets the background color.
	     *
	     * @param {number} value - The value to set to.
	     */
	    ,
	    set: function set(value) {
	      this._backgroundColor = value;
	      this._backgroundColorString = (0, _utils.hex2string)(value);
	      (0, _utils.hex2rgb)(value, this._backgroundColorRgba);
	    }
	  }]);
	
	  return SystemRenderer;
	}(_eventemitter2.default);
	
	exports.default = SystemRenderer;
	//# sourceMappingURL=SystemRenderer.js.map

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _BaseRenderTexture = __webpack_require__(72);
	
	var _BaseRenderTexture2 = _interopRequireDefault(_BaseRenderTexture);
	
	var _Texture2 = __webpack_require__(54);
	
	var _Texture3 = _interopRequireDefault(_Texture2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * A RenderTexture is a special texture that allows any Pixi display object to be rendered to it.
	 *
	 * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded
	 * otherwise black rectangles will be drawn instead.
	 *
	 * A RenderTexture takes a snapshot of any Display Object given to its render method. The position
	 * and rotation of the given Display Objects is ignored. For example:
	 *
	 * ```js
	 * let renderer = PIXI.autoDetectRenderer(1024, 1024, { view: canvas, ratio: 1 });
	 * let renderTexture = PIXI.RenderTexture.create(800, 600);
	 * let sprite = PIXI.Sprite.fromImage("spinObj_01.png");
	 *
	 * sprite.position.x = 800/2;
	 * sprite.position.y = 600/2;
	 * sprite.anchor.x = 0.5;
	 * sprite.anchor.y = 0.5;
	 *
	 * renderer.render(sprite, renderTexture);
	 * ```
	 *
	 * The Sprite in this case will be rendered to a position of 0,0. To render this sprite at its actual
	 * position a Container should be used:
	 *
	 * ```js
	 * let doc = new PIXI.Container();
	 *
	 * doc.addChild(sprite);
	 *
	 * renderer.render(doc, renderTexture);  // Renders to center of renderTexture
	 * ```
	 *
	 * @class
	 * @extends PIXI.Texture
	 * @memberof PIXI
	 */
	var RenderTexture = function (_Texture) {
	    _inherits(RenderTexture, _Texture);
	
	    /**
	     * @param {PIXI.BaseRenderTexture} baseRenderTexture - The renderer used for this RenderTexture
	     * @param {PIXI.Rectangle} [frame] - The rectangle frame of the texture to show
	     */
	    function RenderTexture(baseRenderTexture, frame) {
	        _classCallCheck(this, RenderTexture);
	
	        // support for legacy..
	        var _legacyRenderer = null;
	
	        if (!(baseRenderTexture instanceof _BaseRenderTexture2.default)) {
	            /* eslint-disable prefer-rest-params, no-console */
	            var width = arguments[1];
	            var height = arguments[2];
	            var scaleMode = arguments[3] || 0;
	            var resolution = arguments[4] || 1;
	
	            // we have an old render texture..
	            console.warn('Please use RenderTexture.create(' + width + ', ' + height + ') instead of the ctor directly.');
	            _legacyRenderer = arguments[0];
	            /* eslint-enable prefer-rest-params, no-console */
	
	            frame = null;
	            baseRenderTexture = new _BaseRenderTexture2.default(width, height, scaleMode, resolution);
	        }
	
	        /**
	         * The base texture object that this texture uses
	         *
	         * @member {BaseTexture}
	         */
	
	        var _this = _possibleConstructorReturn(this, _Texture.call(this, baseRenderTexture, frame));
	
	        _this.legacyRenderer = _legacyRenderer;
	
	        /**
	         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.
	         *
	         * @member {boolean}
	         */
	        _this.valid = true;
	
	        _this._updateUvs();
	        return _this;
	    }
	
	    /**
	     * Resizes the RenderTexture.
	     *
	     * @param {number} width - The width to resize to.
	     * @param {number} height - The height to resize to.
	     * @param {boolean} doNotResizeBaseTexture - Should the baseTexture.width and height values be resized as well?
	     */
	
	
	    RenderTexture.prototype.resize = function resize(width, height, doNotResizeBaseTexture) {
	        // TODO - could be not required..
	        this.valid = width > 0 && height > 0;
	
	        this._frame.width = this.orig.width = width;
	        this._frame.height = this.orig.height = height;
	
	        if (!doNotResizeBaseTexture) {
	            this.baseTexture.resize(width, height);
	        }
	
	        this._updateUvs();
	    };
	
	    /**
	     * A short hand way of creating a render texture.
	     *
	     * @param {number} [width=100] - The width of the render texture
	     * @param {number} [height=100] - The height of the render texture
	     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values
	     * @param {number} [resolution=1] - The resolution / device pixel ratio of the texture being generated
	     * @return {PIXI.RenderTexture} The new render texture
	     */
	
	
	    RenderTexture.create = function create(width, height, scaleMode, resolution) {
	        return new RenderTexture(new _BaseRenderTexture2.default(width, height, scaleMode, resolution));
	    };
	
	    return RenderTexture;
	}(_Texture3.default);
	
	exports.default = RenderTexture;
	//# sourceMappingURL=RenderTexture.js.map

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _BaseTexture2 = __webpack_require__(55);
	
	var _BaseTexture3 = _interopRequireDefault(_BaseTexture2);
	
	var _settings = __webpack_require__(43);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var RESOLUTION = _settings2.default.RESOLUTION,
	    SCALE_MODE = _settings2.default.SCALE_MODE;
	
	/**
	 * A BaseRenderTexture is a special texture that allows any Pixi display object to be rendered to it.
	 *
	 * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded
	 * otherwise black rectangles will be drawn instead.
	 *
	 * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position
	 * and rotation of the given Display Objects is ignored. For example:
	 *
	 * ```js
	 * let renderer = PIXI.autoDetectRenderer(1024, 1024, { view: canvas, ratio: 1 });
	 * let baseRenderTexture = new PIXI.BaseRenderTexture(renderer, 800, 600);
	 * let sprite = PIXI.Sprite.fromImage("spinObj_01.png");
	 *
	 * sprite.position.x = 800/2;
	 * sprite.position.y = 600/2;
	 * sprite.anchor.x = 0.5;
	 * sprite.anchor.y = 0.5;
	 *
	 * baseRenderTexture.render(sprite);
	 * ```
	 *
	 * The Sprite in this case will be rendered to a position of 0,0. To render this sprite at its actual
	 * position a Container should be used:
	 *
	 * ```js
	 * let doc = new PIXI.Container();
	 *
	 * doc.addChild(sprite);
	 *
	 * let baseRenderTexture = new PIXI.BaseRenderTexture(100, 100);
	 * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);
	 *
	 * renderer.render(doc, renderTexture);  // Renders to center of RenderTexture
	 * ```
	 *
	 * @class
	 * @extends PIXI.BaseTexture
	 * @memberof PIXI
	 */
	
	var BaseRenderTexture = function (_BaseTexture) {
	  _inherits(BaseRenderTexture, _BaseTexture);
	
	  /**
	   * @param {number} [width=100] - The width of the base render texture
	   * @param {number} [height=100] - The height of the base render texture
	   * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values
	   * @param {number} [resolution=1] - The resolution / device pixel ratio of the texture being generated
	   */
	  function BaseRenderTexture() {
	    var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
	    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
	    var scaleMode = arguments[2];
	    var resolution = arguments[3];
	
	    _classCallCheck(this, BaseRenderTexture);
	
	    var _this = _possibleConstructorReturn(this, _BaseTexture.call(this, null, scaleMode));
	
	    _this.resolution = resolution || RESOLUTION;
	
	    _this.width = width;
	    _this.height = height;
	
	    _this.realWidth = _this.width * _this.resolution;
	    _this.realHeight = _this.height * _this.resolution;
	
	    _this.scaleMode = scaleMode || SCALE_MODE;
	    _this.hasLoaded = true;
	
	    /**
	     * A map of renderer IDs to webgl renderTargets
	     *
	     * @private
	     * @member {object<number, WebGLTexture>}
	     */
	    _this._glRenderTargets = {};
	
	    /**
	     * A reference to the canvas render target (we only need one as this can be shared across renderers)
	     *
	     * @private
	     * @member {object<number, WebGLTexture>}
	     */
	    _this._canvasRenderTarget = null;
	
	    /**
	     * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.
	     *
	     * @member {boolean}
	     */
	    _this.valid = false;
	    return _this;
	  }
	
	  /**
	   * Resizes the BaseRenderTexture.
	   *
	   * @param {number} width - The width to resize to.
	   * @param {number} height - The height to resize to.
	   */
	
	
	  BaseRenderTexture.prototype.resize = function resize(width, height) {
	    if (width === this.width && height === this.height) {
	      return;
	    }
	
	    this.valid = width > 0 && height > 0;
	
	    this.width = width;
	    this.height = height;
	
	    this.realWidth = this.width * this.resolution;
	    this.realHeight = this.height * this.resolution;
	
	    if (!this.valid) {
	      return;
	    }
	
	    this.emit('update', this);
	  };
	
	  /**
	   * Destroys this texture
	   *
	   */
	
	
	  BaseRenderTexture.prototype.destroy = function destroy() {
	    _BaseTexture.prototype.destroy.call(this, true);
	    this.renderer = null;
	  };
	
	  return BaseRenderTexture;
	}(_BaseTexture3.default);
	
	exports.default = BaseRenderTexture;
	//# sourceMappingURL=BaseRenderTexture.js.map

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _const = __webpack_require__(12);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * A set of functions used to handle masking.
	 *
	 * @class
	 * @memberof PIXI
	 */
	var CanvasMaskManager = function () {
	    /**
	     * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.
	     */
	    function CanvasMaskManager(renderer) {
	        _classCallCheck(this, CanvasMaskManager);
	
	        this.renderer = renderer;
	    }
	
	    /**
	     * This method adds it to the current stack of masks.
	     *
	     * @param {object} maskData - the maskData that will be pushed
	     */
	
	
	    CanvasMaskManager.prototype.pushMask = function pushMask(maskData) {
	        var renderer = this.renderer;
	
	        renderer.context.save();
	
	        var cacheAlpha = maskData.alpha;
	        var transform = maskData.transform.worldTransform;
	        var resolution = renderer.resolution;
	
	        renderer.context.setTransform(transform.a * resolution, transform.b * resolution, transform.c * resolution, transform.d * resolution, transform.tx * resolution, transform.ty * resolution);
	
	        // TODO suport sprite alpha masks??
	        // lots of effort required. If demand is great enough..
	        if (!maskData._texture) {
	            this.renderGraphicsShape(maskData);
	            renderer.context.clip();
	        }
	
	        maskData.worldAlpha = cacheAlpha;
	    };
	
	    /**
	     * Renders a PIXI.Graphics shape.
	     *
	     * @param {PIXI.Graphics} graphics - The object to render.
	     */
	
	
	    CanvasMaskManager.prototype.renderGraphicsShape = function renderGraphicsShape(graphics) {
	        var context = this.renderer.context;
	        var len = graphics.graphicsData.length;
	
	        if (len === 0) {
	            return;
	        }
	
	        context.beginPath();
	
	        for (var i = 0; i < len; i++) {
	            var data = graphics.graphicsData[i];
	            var shape = data.shape;
	
	            if (data.type === _const.SHAPES.POLY) {
	                var points = shape.points;
	
	                context.moveTo(points[0], points[1]);
	
	                for (var j = 1; j < points.length / 2; j++) {
	                    context.lineTo(points[j * 2], points[j * 2 + 1]);
	                }
	
	                // if the first and last point are the same close the path - much neater :)
	                if (points[0] === points[points.length - 2] && points[1] === points[points.length - 1]) {
	                    context.closePath();
	                }
	            } else if (data.type === _const.SHAPES.RECT) {
	                context.rect(shape.x, shape.y, shape.width, shape.height);
	                context.closePath();
	            } else if (data.type === _const.SHAPES.CIRC) {
	                // TODO - need to be Undefined!
	                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);
	                context.closePath();
	            } else if (data.type === _const.SHAPES.ELIP) {
	                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
	
	                var w = shape.width * 2;
	                var h = shape.height * 2;
	
	                var x = shape.x - w / 2;
	                var y = shape.y - h / 2;
	
	                var kappa = 0.5522848;
	                var ox = w / 2 * kappa; // control point offset horizontal
	                var oy = h / 2 * kappa; // control point offset vertical
	                var xe = x + w; // x-end
	                var ye = y + h; // y-end
	                var xm = x + w / 2; // x-middle
	                var ym = y + h / 2; // y-middle
	
	                context.moveTo(x, ym);
	                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
	                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
	                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
	                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
	                context.closePath();
	            } else if (data.type === _const.SHAPES.RREC) {
	                var rx = shape.x;
	                var ry = shape.y;
	                var width = shape.width;
	                var height = shape.height;
	                var radius = shape.radius;
	
	                var maxRadius = Math.min(width, height) / 2 | 0;
	
	                radius = radius > maxRadius ? maxRadius : radius;
	
	                context.moveTo(rx, ry + radius);
	                context.lineTo(rx, ry + height - radius);
	                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);
	                context.lineTo(rx + width - radius, ry + height);
	                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);
	                context.lineTo(rx + width, ry + radius);
	                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);
	                context.lineTo(rx + radius, ry);
	                context.quadraticCurveTo(rx, ry, rx, ry + radius);
	                context.closePath();
	            }
	        }
	    };
	
	    /**
	     * Restores the current drawing context to the state it was before the mask was applied.
	     *
	     * @param {PIXI.CanvasRenderer} renderer - The renderer context to use.
	     */
	
	
	    CanvasMaskManager.prototype.popMask = function popMask(renderer) {
	        renderer.context.restore();
	    };
	
	    /**
	     * Destroys this canvas mask manager.
	     *
	     */
	
	
	    CanvasMaskManager.prototype.destroy = function destroy() {
	        /* empty */
	    };
	
	    return CanvasMaskManager;
	}();
	
	exports.default = CanvasMaskManager;
	//# sourceMappingURL=CanvasMaskManager.js.map

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _settings = __webpack_require__(43);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var RESOLUTION = _settings2.default.RESOLUTION;
	
	/**
	 * Creates a Canvas element of the given size.
	 *
	 * @class
	 * @memberof PIXI
	 */
	
	var CanvasRenderTarget = function () {
	  /**
	   * @param {number} width - the width for the newly created canvas
	   * @param {number} height - the height for the newly created canvas
	   * @param {number} [resolution=1] - The resolution / device pixel ratio of the canvas
	   */
	  function CanvasRenderTarget(width, height, resolution) {
	    _classCallCheck(this, CanvasRenderTarget);
	
	    /**
	     * The Canvas object that belongs to this CanvasRenderTarget.
	     *
	     * @member {HTMLCanvasElement}
	     */
	    this.canvas = document.createElement('canvas');
	
	    /**
	     * A CanvasRenderingContext2D object representing a two-dimensional rendering context.
	     *
	     * @member {CanvasRenderingContext2D}
	     */
	    this.context = this.canvas.getContext('2d');
	
	    this.resolution = resolution || RESOLUTION;
	
	    this.resize(width, height);
	  }
	
	  /**
	   * Clears the canvas that was created by the CanvasRenderTarget class.
	   *
	   * @private
	   */
	
	
	  CanvasRenderTarget.prototype.clear = function clear() {
	    this.context.setTransform(1, 0, 0, 1, 0, 0);
	    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
	  };
	
	  /**
	   * Resizes the canvas to the specified width and height.
	   *
	   * @param {number} width - the new width of the canvas
	   * @param {number} height - the new height of the canvas
	   */
	
	
	  CanvasRenderTarget.prototype.resize = function resize(width, height) {
	    this.canvas.width = width * this.resolution;
	    this.canvas.height = height * this.resolution;
	  };
	
	  /**
	   * Destroys this canvas.
	   *
	   */
	
	
	  CanvasRenderTarget.prototype.destroy = function destroy() {
	    this.context = null;
	    this.canvas = null;
	  };
	
	  /**
	   * The width of the canvas buffer in pixels.
	   *
	   * @member {number}
	   * @memberof PIXI.CanvasRenderTarget#
	   */
	
	
	  _createClass(CanvasRenderTarget, [{
	    key: 'width',
	    get: function get() {
	      return this.canvas.width;
	    }
	
	    /**
	     * Sets the width.
	     *
	     * @param {number} val - The value to set.
	     */
	    ,
	    set: function set(val) {
	      this.canvas.width = val;
	    }
	
	    /**
	     * The height of the canvas buffer in pixels.
	     *
	     * @member {number}
	     * @memberof PIXI.CanvasRenderTarget#
	     */
	
	  }, {
	    key: 'height',
	    get: function get() {
	      return this.canvas.height;
	    }
	
	    /**
	     * Sets the height.
	     *
	     * @param {number} val - The value to set.
	     */
	    ,
	    set: function set(val) {
	      this.canvas.height = val;
	    }
	  }]);
	
	  return CanvasRenderTarget;
	}();
	
	exports.default = CanvasRenderTarget;
	//# sourceMappingURL=CanvasRenderTarget.js.map

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = mapCanvasBlendModesToPixi;
	
	var _const = __webpack_require__(12);
	
	var _canUseNewCanvasBlendModes = __webpack_require__(76);
	
	var _canUseNewCanvasBlendModes2 = _interopRequireDefault(_canUseNewCanvasBlendModes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Maps blend combinations to Canvas.
	 *
	 * @memberof PIXI
	 * @function mapCanvasBlendModesToPixi
	 * @private
	 * @param {string[]} [array=[]] - The array to output into.
	 * @return {string[]} Mapped modes.
	 */
	function mapCanvasBlendModesToPixi() {
	    var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	
	    if ((0, _canUseNewCanvasBlendModes2.default)()) {
	        array[_const.BLEND_MODES.NORMAL] = 'source-over';
	        array[_const.BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???
	        array[_const.BLEND_MODES.MULTIPLY] = 'multiply';
	        array[_const.BLEND_MODES.SCREEN] = 'screen';
	        array[_const.BLEND_MODES.OVERLAY] = 'overlay';
	        array[_const.BLEND_MODES.DARKEN] = 'darken';
	        array[_const.BLEND_MODES.LIGHTEN] = 'lighten';
	        array[_const.BLEND_MODES.COLOR_DODGE] = 'color-dodge';
	        array[_const.BLEND_MODES.COLOR_BURN] = 'color-burn';
	        array[_const.BLEND_MODES.HARD_LIGHT] = 'hard-light';
	        array[_const.BLEND_MODES.SOFT_LIGHT] = 'soft-light';
	        array[_const.BLEND_MODES.DIFFERENCE] = 'difference';
	        array[_const.BLEND_MODES.EXCLUSION] = 'exclusion';
	        array[_const.BLEND_MODES.HUE] = 'hue';
	        array[_const.BLEND_MODES.SATURATION] = 'saturate';
	        array[_const.BLEND_MODES.COLOR] = 'color';
	        array[_const.BLEND_MODES.LUMINOSITY] = 'luminosity';
	    } else {
	        // this means that the browser does not support the cool new blend modes in canvas 'cough' ie 'cough'
	        array[_const.BLEND_MODES.NORMAL] = 'source-over';
	        array[_const.BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???
	        array[_const.BLEND_MODES.MULTIPLY] = 'source-over';
	        array[_const.BLEND_MODES.SCREEN] = 'source-over';
	        array[_const.BLEND_MODES.OVERLAY] = 'source-over';
	        array[_const.BLEND_MODES.DARKEN] = 'source-over';
	        array[_const.BLEND_MODES.LIGHTEN] = 'source-over';
	        array[_const.BLEND_MODES.COLOR_DODGE] = 'source-over';
	        array[_const.BLEND_MODES.COLOR_BURN] = 'source-over';
	        array[_const.BLEND_MODES.HARD_LIGHT] = 'source-over';
	        array[_const.BLEND_MODES.SOFT_LIGHT] = 'source-over';
	        array[_const.BLEND_MODES.DIFFERENCE] = 'source-over';
	        array[_const.BLEND_MODES.EXCLUSION] = 'source-over';
	        array[_const.BLEND_MODES.HUE] = 'source-over';
	        array[_const.BLEND_MODES.SATURATION] = 'source-over';
	        array[_const.BLEND_MODES.COLOR] = 'source-over';
	        array[_const.BLEND_MODES.LUMINOSITY] = 'source-over';
	    }
	
	    return array;
	}
	//# sourceMappingURL=mapCanvasBlendModesToPixi.js.map

/***/ },
/* 76 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = canUseNewCanvasBlendModes;
	/**
	 * Creates a little colored canvas
	 *
	 * @ignore
	 * @param {number} color - The color to make the canvas
	 * @return {canvas} a small canvas element
	 */
	function createColoredCanvas(color) {
	    var canvas = document.createElement('canvas');
	
	    canvas.width = 6;
	    canvas.height = 1;
	
	    var context = canvas.getContext('2d');
	
	    context.fillStyle = color;
	    context.fillRect(0, 0, 6, 1);
	
	    return canvas;
	}
	
	/**
	 * Checks whether the Canvas BlendModes are supported by the current browser
	 *
	 * @return {boolean} whether they are supported
	 */
	function canUseNewCanvasBlendModes() {
	    if (typeof document === 'undefined') {
	        return false;
	    }
	
	    var magenta = createColoredCanvas('#ff00ff');
	    var yellow = createColoredCanvas('#ffff00');
	
	    var canvas = document.createElement('canvas');
	
	    canvas.width = 6;
	    canvas.height = 1;
	
	    var context = canvas.getContext('2d');
	
	    context.globalCompositeOperation = 'multiply';
	    context.drawImage(magenta, 0, 0);
	    context.drawImage(yellow, 2, 0);
	
	    var imageData = context.getImageData(2, 0, 1, 1);
	
	    if (!imageData) {
	        return false;
	    }
	
	    var data = imageData.data;
	
	    return data[0] === 255 && data[1] === 0 && data[2] === 0;
	}
	//# sourceMappingURL=canUseNewCanvasBlendModes.js.map

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _utils = __webpack_require__(51);
	
	var _canUseNewCanvasBlendModes = __webpack_require__(76);
	
	var _canUseNewCanvasBlendModes2 = _interopRequireDefault(_canUseNewCanvasBlendModes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Utility methods for Sprite/Texture tinting.
	 *
	 * @namespace PIXI.CanvasTinter
	 */
	var CanvasTinter = {
	    /**
	     * Basically this method just needs a sprite and a color and tints the sprite with the given color.
	     *
	     * @memberof PIXI.CanvasTinter
	     * @param {PIXI.Sprite} sprite - the sprite to tint
	     * @param {number} color - the color to use to tint the sprite with
	     * @return {HTMLCanvasElement} The tinted canvas
	     */
	    getTintedTexture: function getTintedTexture(sprite, color) {
	        var texture = sprite.texture;
	
	        color = CanvasTinter.roundColor(color);
	
	        var stringColor = '#' + ('00000' + (color | 0).toString(16)).substr(-6);
	
	        texture.tintCache = texture.tintCache || {};
	
	        if (texture.tintCache[stringColor]) {
	            return texture.tintCache[stringColor];
	        }
	
	        // clone texture..
	        var canvas = CanvasTinter.canvas || document.createElement('canvas');
	
	        // CanvasTinter.tintWithPerPixel(texture, stringColor, canvas);
	        CanvasTinter.tintMethod(texture, color, canvas);
	
	        if (CanvasTinter.convertTintToImage) {
	            // is this better?
	            var tintImage = new Image();
	
	            tintImage.src = canvas.toDataURL();
	
	            texture.tintCache[stringColor] = tintImage;
	        } else {
	            texture.tintCache[stringColor] = canvas;
	            // if we are not converting the texture to an image then we need to lose the reference to the canvas
	            CanvasTinter.canvas = null;
	        }
	
	        return canvas;
	    },
	
	    /**
	     * Tint a texture using the 'multiply' operation.
	     *
	     * @memberof PIXI.CanvasTinter
	     * @param {PIXI.Texture} texture - the texture to tint
	     * @param {number} color - the color to use to tint the sprite with
	     * @param {HTMLCanvasElement} canvas - the current canvas
	     */
	    tintWithMultiply: function tintWithMultiply(texture, color, canvas) {
	        var context = canvas.getContext('2d');
	        var crop = texture._frame.clone();
	        var resolution = texture.baseTexture.resolution;
	
	        crop.x *= resolution;
	        crop.y *= resolution;
	        crop.width *= resolution;
	        crop.height *= resolution;
	
	        canvas.width = crop.width;
	        canvas.height = crop.height;
	
	        context.fillStyle = '#' + ('00000' + (color | 0).toString(16)).substr(-6);
	
	        context.fillRect(0, 0, crop.width, crop.height);
	
	        context.globalCompositeOperation = 'multiply';
	
	        context.drawImage(texture.baseTexture.source, crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height);
	
	        context.globalCompositeOperation = 'destination-atop';
	
	        context.drawImage(texture.baseTexture.source, crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height);
	    },
	
	    /**
	     * Tint a texture using the 'overlay' operation.
	     *
	     * @memberof PIXI.CanvasTinter
	     * @param {PIXI.Texture} texture - the texture to tint
	     * @param {number} color - the color to use to tint the sprite with
	     * @param {HTMLCanvasElement} canvas - the current canvas
	     */
	    tintWithOverlay: function tintWithOverlay(texture, color, canvas) {
	        var context = canvas.getContext('2d');
	        var crop = texture._frame.clone();
	        var resolution = texture.baseTexture.resolution;
	
	        crop.x *= resolution;
	        crop.y *= resolution;
	        crop.width *= resolution;
	        crop.height *= resolution;
	
	        canvas.width = crop.width;
	        canvas.height = crop.height;
	
	        context.globalCompositeOperation = 'copy';
	        context.fillStyle = '#' + ('00000' + (color | 0).toString(16)).substr(-6);
	        context.fillRect(0, 0, crop.width, crop.height);
	
	        context.globalCompositeOperation = 'destination-atop';
	        context.drawImage(texture.baseTexture.source, crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height);
	
	        // context.globalCompositeOperation = 'copy';
	    },
	
	
	    /**
	     * Tint a texture pixel per pixel.
	     *
	     * @memberof PIXI.CanvasTinter
	     * @param {PIXI.Texture} texture - the texture to tint
	     * @param {number} color - the color to use to tint the sprite with
	     * @param {HTMLCanvasElement} canvas - the current canvas
	     */
	    tintWithPerPixel: function tintWithPerPixel(texture, color, canvas) {
	        var context = canvas.getContext('2d');
	        var crop = texture._frame.clone();
	        var resolution = texture.baseTexture.resolution;
	
	        crop.x *= resolution;
	        crop.y *= resolution;
	        crop.width *= resolution;
	        crop.height *= resolution;
	
	        canvas.width = crop.width;
	        canvas.height = crop.height;
	
	        context.globalCompositeOperation = 'copy';
	        context.drawImage(texture.baseTexture.source, crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height);
	
	        var rgbValues = (0, _utils.hex2rgb)(color);
	        var r = rgbValues[0];
	        var g = rgbValues[1];
	        var b = rgbValues[2];
	
	        var pixelData = context.getImageData(0, 0, crop.width, crop.height);
	
	        var pixels = pixelData.data;
	
	        for (var i = 0; i < pixels.length; i += 4) {
	            pixels[i + 0] *= r;
	            pixels[i + 1] *= g;
	            pixels[i + 2] *= b;
	        }
	
	        context.putImageData(pixelData, 0, 0);
	    },
	
	    /**
	     * Rounds the specified color according to the CanvasTinter.cacheStepsPerColorChannel.
	     *
	     * @memberof PIXI.CanvasTinter
	     * @param {number} color - the color to round, should be a hex color
	     * @return {number} The rounded color.
	     */
	    roundColor: function roundColor(color) {
	        var step = CanvasTinter.cacheStepsPerColorChannel;
	
	        var rgbValues = (0, _utils.hex2rgb)(color);
	
	        rgbValues[0] = Math.min(255, rgbValues[0] / step * step);
	        rgbValues[1] = Math.min(255, rgbValues[1] / step * step);
	        rgbValues[2] = Math.min(255, rgbValues[2] / step * step);
	
	        return (0, _utils.rgb2hex)(rgbValues);
	    },
	
	    /**
	     * Number of steps which will be used as a cap when rounding colors.
	     *
	     * @memberof PIXI.CanvasTinter
	     * @type {number}
	     */
	    cacheStepsPerColorChannel: 8,
	
	    /**
	     * Tint cache boolean flag.
	     *
	     * @memberof PIXI.CanvasTinter
	     * @type {boolean}
	     */
	    convertTintToImage: false,
	
	    /**
	     * Whether or not the Canvas BlendModes are supported, consequently the ability to tint using the multiply method.
	     *
	     * @memberof PIXI.CanvasTinter
	     * @type {boolean}
	     */
	    canUseMultiply: (0, _canUseNewCanvasBlendModes2.default)(),
	
	    /**
	     * The tinting method that will be used.
	     *
	     * @memberof PIXI.CanvasTinter
	     * @type {tintMethodFunctionType}
	     */
	    tintMethod: 0
	};
	
	CanvasTinter.tintMethod = CanvasTinter.canUseMultiply ? CanvasTinter.tintWithMultiply : CanvasTinter.tintWithPerPixel;
	
	/**
	 * The tintMethod type.
	 *
	 * @memberof PIXI.CanvasTinter
	 * @callback tintMethodFunctionType
	 * @param texture {PIXI.Texture} the texture to tint
	 * @param color {number} the color to use to tint the sprite with
	 * @param canvas {HTMLCanvasElement} the current canvas
	 */
	
	exports.default = CanvasTinter;
	//# sourceMappingURL=CanvasTinter.js.map

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _ObjectRenderer2 = __webpack_require__(79);
	
	var _ObjectRenderer3 = _interopRequireDefault(_ObjectRenderer2);
	
	var _WebGLRenderer = __webpack_require__(81);
	
	var _WebGLRenderer2 = _interopRequireDefault(_WebGLRenderer);
	
	var _createIndicesForQuads = __webpack_require__(92);
	
	var _createIndicesForQuads2 = _interopRequireDefault(_createIndicesForQuads);
	
	var _generateMultiTextureShader = __webpack_require__(101);
	
	var _generateMultiTextureShader2 = _interopRequireDefault(_generateMultiTextureShader);
	
	var _checkMaxIfStatmentsInShader = __webpack_require__(102);
	
	var _checkMaxIfStatmentsInShader2 = _interopRequireDefault(_checkMaxIfStatmentsInShader);
	
	var _BatchBuffer = __webpack_require__(103);
	
	var _BatchBuffer2 = _interopRequireDefault(_BatchBuffer);
	
	var _const = __webpack_require__(12);
	
	var _settings = __webpack_require__(43);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	var _pixiGlCore = __webpack_require__(24);
	
	var _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);
	
	var _bitTwiddle = __webpack_require__(63);
	
	var _bitTwiddle2 = _interopRequireDefault(_bitTwiddle);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var SPRITE_BATCH_SIZE = _settings2.default.SPRITE_BATCH_SIZE,
	    SPRITE_MAX_TEXTURES = _settings2.default.SPRITE_MAX_TEXTURES;
	
	
	var TICK = 0;
	var TEXTURE_TICK = 0;
	
	/**
	 * Renderer dedicated to drawing and batching sprites.
	 *
	 * @class
	 * @private
	 * @memberof PIXI
	 * @extends PIXI.ObjectRenderer
	 */
	
	var SpriteRenderer = function (_ObjectRenderer) {
	    _inherits(SpriteRenderer, _ObjectRenderer);
	
	    /**
	     * @param {PIXI.WebGLRenderer} renderer - The renderer this sprite batch works for.
	     */
	    function SpriteRenderer(renderer) {
	        _classCallCheck(this, SpriteRenderer);
	
	        /**
	         * Number of values sent in the vertex buffer.
	         * positionX, positionY, colorR, colorG, colorB = 5
	         *
	         * @member {number}
	         */
	        var _this = _possibleConstructorReturn(this, _ObjectRenderer.call(this, renderer));
	
	        _this.vertSize = 5;
	
	        /**
	         * The size of the vertex information in bytes.
	         *
	         * @member {number}
	         */
	        _this.vertByteSize = _this.vertSize * 4;
	
	        /**
	         * The number of images in the SpriteBatch before it flushes.
	         *
	         * @member {number}
	         */
	        _this.size = SPRITE_BATCH_SIZE; // 2000 is a nice balance between mobile / desktop
	
	        // the total number of bytes in our batch
	        // let numVerts = this.size * 4 * this.vertByteSize;
	
	        _this.buffers = [];
	        for (var i = 1; i <= _bitTwiddle2.default.nextPow2(_this.size); i *= 2) {
	            _this.buffers.push(new _BatchBuffer2.default(i * 4 * _this.vertByteSize));
	        }
	
	        /**
	         * Holds the indices of the geometry (quads) to draw
	         *
	         * @member {Uint16Array}
	         */
	        _this.indices = (0, _createIndicesForQuads2.default)(_this.size);
	
	        /**
	         * The default shaders that is used if a sprite doesn't have a more specific one.
	         * there is a shader for each number of textures that can be rendererd.
	         * These shaders will also be generated on the fly as required.
	         * @member {PIXI.Shader[]}
	         */
	        _this.shader = null;
	
	        _this.currentIndex = 0;
	        TICK = 0;
	        _this.groups = [];
	
	        for (var k = 0; k < _this.size; k++) {
	            _this.groups[k] = { textures: [], textureCount: 0, ids: [], size: 0, start: 0, blend: 0 };
	        }
	
	        _this.sprites = [];
	
	        _this.vertexBuffers = [];
	        _this.vaos = [];
	
	        _this.vaoMax = 2;
	        _this.vertexCount = 0;
	
	        _this.renderer.on('prerender', _this.onPrerender, _this);
	        return _this;
	    }
	
	    /**
	     * Sets up the renderer context and necessary buffers.
	     *
	     * @private
	     */
	
	
	    SpriteRenderer.prototype.onContextChange = function onContextChange() {
	        var gl = this.renderer.gl;
	
	        // step 1: first check max textures the GPU can handle.
	        this.MAX_TEXTURES = Math.min(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS), SPRITE_MAX_TEXTURES);
	
	        // step 2: check the maximum number of if statements the shader can have too..
	        this.MAX_TEXTURES = (0, _checkMaxIfStatmentsInShader2.default)(this.MAX_TEXTURES, gl);
	
	        var shader = this.shader = (0, _generateMultiTextureShader2.default)(gl, this.MAX_TEXTURES);
	
	        // create a couple of buffers
	        this.indexBuffer = _pixiGlCore2.default.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);
	
	        // we use the second shader as the first one depending on your browser may omit aTextureId
	        // as it is not used by the shader so is optimized out.
	
	        this.renderer.bindVao(null);
	
	        for (var i = 0; i < this.vaoMax; i++) {
	            this.vertexBuffers[i] = _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW);
	
	            /* eslint-disable max-len */
	
	            // build the vao object that will render..
	            this.vaos[i] = this.renderer.createVao().addIndex(this.indexBuffer).addAttribute(this.vertexBuffers[i], shader.attributes.aVertexPosition, gl.FLOAT, false, this.vertByteSize, 0).addAttribute(this.vertexBuffers[i], shader.attributes.aTextureCoord, gl.UNSIGNED_SHORT, true, this.vertByteSize, 2 * 4).addAttribute(this.vertexBuffers[i], shader.attributes.aColor, gl.UNSIGNED_BYTE, true, this.vertByteSize, 3 * 4).addAttribute(this.vertexBuffers[i], shader.attributes.aTextureId, gl.FLOAT, false, this.vertByteSize, 4 * 4);
	
	            /* eslint-disable max-len */
	        }
	
	        this.vao = this.vaos[0];
	        this.currentBlendMode = 99999;
	
	        this.boundTextures = new Array(this.MAX_TEXTURES);
	    };
	
	    /**
	     * Called before the renderer starts rendering.
	     *
	     */
	
	
	    SpriteRenderer.prototype.onPrerender = function onPrerender() {
	        this.vertexCount = 0;
	    };
	
	    /**
	     * Renders the sprite object.
	     *
	     * @param {PIXI.Sprite} sprite - the sprite to render when using this spritebatch
	     */
	
	
	    SpriteRenderer.prototype.render = function render(sprite) {
	        // TODO set blend modes..
	        // check texture..
	        if (this.currentIndex >= this.size) {
	            this.flush();
	        }
	
	        // get the uvs for the texture
	
	        // if the uvs have not updated then no point rendering just yet!
	        if (!sprite.texture._uvs) {
	            return;
	        }
	
	        // push a texture.
	        // increment the batchsize
	        this.sprites[this.currentIndex++] = sprite;
	    };
	
	    /**
	     * Renders the content and empties the current batch.
	     *
	     */
	
	
	    SpriteRenderer.prototype.flush = function flush() {
	        if (this.currentIndex === 0) {
	            return;
	        }
	
	        var gl = this.renderer.gl;
	        var MAX_TEXTURES = this.MAX_TEXTURES;
	
	        var np2 = _bitTwiddle2.default.nextPow2(this.currentIndex);
	        var log2 = _bitTwiddle2.default.log2(np2);
	        var buffer = this.buffers[log2];
	
	        var sprites = this.sprites;
	        var groups = this.groups;
	
	        var float32View = buffer.float32View;
	        var uint32View = buffer.uint32View;
	
	        var boundTextures = this.boundTextures;
	        var rendererBoundTextures = this.renderer.boundTextures;
	        var touch = this.renderer.textureGC.count;
	
	        var index = 0;
	        var nextTexture = void 0;
	        var currentTexture = void 0;
	        var groupCount = 1;
	        var textureCount = 0;
	        var currentGroup = groups[0];
	        var vertexData = void 0;
	        var uvs = void 0;
	        var blendMode = sprites[0].blendMode;
	
	        currentGroup.textureCount = 0;
	        currentGroup.start = 0;
	        currentGroup.blend = blendMode;
	
	        TICK++;
	
	        var i = void 0;
	
	        // copy textures..
	        for (i = 0; i < MAX_TEXTURES; ++i) {
	            boundTextures[i] = rendererBoundTextures[i];
	            boundTextures[i]._virtalBoundId = i;
	        }
	
	        for (i = 0; i < this.currentIndex; ++i) {
	            // upload the sprite elemetns...
	            // they have all ready been calculated so we just need to push them into the buffer.
	            var sprite = sprites[i];
	
	            nextTexture = sprite._texture.baseTexture;
	
	            if (blendMode !== sprite.blendMode) {
	                // finish a group..
	                blendMode = sprite.blendMode;
	
	                // force the batch to break!
	                currentTexture = null;
	                textureCount = MAX_TEXTURES;
	                TICK++;
	            }
	
	            if (currentTexture !== nextTexture) {
	                currentTexture = nextTexture;
	
	                if (nextTexture._enabled !== TICK) {
	                    if (textureCount === MAX_TEXTURES) {
	                        TICK++;
	
	                        currentGroup.size = i - currentGroup.start;
	
	                        textureCount = 0;
	
	                        currentGroup = groups[groupCount++];
	                        currentGroup.blend = blendMode;
	                        currentGroup.textureCount = 0;
	                        currentGroup.start = i;
	                    }
	
	                    nextTexture.touched = touch;
	
	                    if (nextTexture._virtalBoundId === -1) {
	                        for (var j = 0; j < MAX_TEXTURES; ++j) {
	                            var tIndex = (j + TEXTURE_TICK) % MAX_TEXTURES;
	
	                            var t = boundTextures[tIndex];
	
	                            if (t._enabled !== TICK) {
	                                TEXTURE_TICK++;
	
	                                t._virtalBoundId = -1;
	
	                                nextTexture._virtalBoundId = tIndex;
	
	                                boundTextures[tIndex] = nextTexture;
	                                break;
	                            }
	                        }
	                    }
	
	                    nextTexture._enabled = TICK;
	
	                    currentGroup.textureCount++;
	                    currentGroup.ids[textureCount] = nextTexture._virtalBoundId;
	                    currentGroup.textures[textureCount++] = nextTexture;
	                }
	            }
	
	            vertexData = sprite.vertexData;
	
	            // TODO this sum does not need to be set each frame..
	            uvs = sprite._texture._uvs.uvsUint32;
	
	            if (this.renderer.roundPixels) {
	                var resolution = this.renderer.resolution;
	
	                // xy
	                float32View[index] = (vertexData[0] * resolution | 0) / resolution;
	                float32View[index + 1] = (vertexData[1] * resolution | 0) / resolution;
	
	                // xy
	                float32View[index + 5] = (vertexData[2] * resolution | 0) / resolution;
	                float32View[index + 6] = (vertexData[3] * resolution | 0) / resolution;
	
	                // xy
	                float32View[index + 10] = (vertexData[4] * resolution | 0) / resolution;
	                float32View[index + 11] = (vertexData[5] * resolution | 0) / resolution;
	
	                // xy
	                float32View[index + 15] = (vertexData[6] * resolution | 0) / resolution;
	                float32View[index + 16] = (vertexData[7] * resolution | 0) / resolution;
	            } else {
	                // xy
	                float32View[index] = vertexData[0];
	                float32View[index + 1] = vertexData[1];
	
	                // xy
	                float32View[index + 5] = vertexData[2];
	                float32View[index + 6] = vertexData[3];
	
	                // xy
	                float32View[index + 10] = vertexData[4];
	                float32View[index + 11] = vertexData[5];
	
	                // xy
	                float32View[index + 15] = vertexData[6];
	                float32View[index + 16] = vertexData[7];
	            }
	
	            uint32View[index + 2] = uvs[0];
	            uint32View[index + 7] = uvs[1];
	            uint32View[index + 12] = uvs[2];
	            uint32View[index + 17] = uvs[3];
	
	            uint32View[index + 3] = uint32View[index + 8] = uint32View[index + 13] = uint32View[index + 18] = sprite._tintRGB + (sprite.worldAlpha * 255 << 24);
	
	            float32View[index + 4] = float32View[index + 9] = float32View[index + 14] = float32View[index + 19] = nextTexture._virtalBoundId;
	
	            index += 20;
	        }
	
	        currentGroup.size = i - currentGroup.start;
	
	        if (!_const.CAN_UPLOAD_SAME_BUFFER) {
	            // this is still needed for IOS performance..
	            // it realy doe not like uploading to  the same bufffer in a single frame!
	            if (this.vaoMax <= this.vertexCount) {
	                this.vaoMax++;
	                this.vertexBuffers[this.vertexCount] = _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW);
	
	                // build the vao object that will render..
	                this.vaos[this.vertexCount] = this.renderer.createVao().addIndex(this.indexBuffer).addAttribute(this.vertexBuffers[this.vertexCount], this.shader.attributes.aVertexPosition, gl.FLOAT, false, this.vertByteSize, 0).addAttribute(this.vertexBuffers[this.vertexCount], this.shader.attributes.aTextureCoord, gl.UNSIGNED_SHORT, true, this.vertByteSize, 2 * 4).addAttribute(this.vertexBuffers[this.vertexCount], this.shader.attributes.aColor, gl.UNSIGNED_BYTE, true, this.vertByteSize, 3 * 4).addAttribute(this.vertexBuffers[this.vertexCount], this.shader.attributes.aTextureId, gl.FLOAT, false, this.vertByteSize, 4 * 4);
	            }
	
	            this.renderer.bindVao(this.vaos[this.vertexCount]);
	
	            this.vertexBuffers[this.vertexCount].upload(buffer.vertices, 0, false);
	
	            this.vertexCount++;
	        } else {
	            // lets use the faster option..
	            this.vertexBuffers[this.vertexCount].upload(buffer.vertices, 0, true);
	        }
	
	        for (i = 0; i < MAX_TEXTURES; ++i) {
	            rendererBoundTextures[i]._virtalBoundId = -1;
	        }
	
	        // render the groups..
	        for (i = 0; i < groupCount; ++i) {
	            var group = groups[i];
	            var groupTextureCount = group.textureCount;
	
	            for (var _j = 0; _j < groupTextureCount; _j++) {
	                currentTexture = group.textures[_j];
	
	                // reset virtual ids..
	                // lets do a quick check..
	                if (rendererBoundTextures[group.ids[_j]] !== currentTexture) {
	                    this.renderer.bindTexture(currentTexture, group.ids[_j], true);
	                }
	
	                // reset the virtualId..
	                currentTexture._virtalBoundId = -1;
	            }
	
	            // set the blend mode..
	            this.renderer.state.setBlendMode(group.blend);
	
	            gl.drawElements(gl.TRIANGLES, group.size * 6, gl.UNSIGNED_SHORT, group.start * 6 * 2);
	        }
	
	        // reset elements for the next flush
	        this.currentIndex = 0;
	    };
	
	    /**
	     * Starts a new sprite batch.
	     */
	
	
	    SpriteRenderer.prototype.start = function start() {
	        this.renderer.bindShader(this.shader);
	
	        this.renderer.bindVao(this.vaos[this.vertexCount]);
	
	        this.vertexBuffers[this.vertexCount].bind();
	    };
	
	    /**
	     * Stops and flushes the current batch.
	     *
	     */
	
	
	    SpriteRenderer.prototype.stop = function stop() {
	        this.flush();
	    };
	
	    /**
	     * Destroys the SpriteBatch.
	     *
	     */
	
	
	    SpriteRenderer.prototype.destroy = function destroy() {
	        for (var i = 0; i < this.vaoMax; i++) {
	            if (this.vertexBuffers[i]) {
	                this.vertexBuffers[i].destroy();
	            }
	            if (this.vaos[i]) {
	                this.vaos[i].destroy();
	            }
	        }
	
	        if (this.indexBuffer) {
	            this.indexBuffer.destroy();
	        }
	
	        this.renderer.off('prerender', this.onPrerender, this);
	
	        _ObjectRenderer.prototype.destroy.call(this);
	
	        if (this.shader) {
	            this.shader.destroy();
	            this.shader = null;
	        }
	
	        this.vertexBuffers = null;
	        this.vaos = null;
	        this.indexBuffer = null;
	        this.indices = null;
	
	        this.sprites = null;
	
	        for (var _i = 0; _i < this.buffers.length; ++_i) {
	            this.buffers[_i].destroy();
	        }
	    };
	
	    return SpriteRenderer;
	}(_ObjectRenderer3.default);
	
	exports.default = SpriteRenderer;
	
	
	_WebGLRenderer2.default.registerPlugin('sprite', SpriteRenderer);
	//# sourceMappingURL=SpriteRenderer.js.map

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _WebGLManager2 = __webpack_require__(80);
	
	var _WebGLManager3 = _interopRequireDefault(_WebGLManager2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Base for a common object renderer that can be used as a system renderer plugin.
	 *
	 * @class
	 * @extends PIXI.WebGLManager
	 * @memberof PIXI
	 */
	var ObjectRenderer = function (_WebGLManager) {
	  _inherits(ObjectRenderer, _WebGLManager);
	
	  function ObjectRenderer() {
	    _classCallCheck(this, ObjectRenderer);
	
	    return _possibleConstructorReturn(this, _WebGLManager.apply(this, arguments));
	  }
	
	  /**
	   * Starts the renderer and sets the shader
	   *
	   */
	  ObjectRenderer.prototype.start = function start() {}
	  // set the shader..
	
	
	  /**
	   * Stops the renderer
	   *
	   */
	  ;
	
	  ObjectRenderer.prototype.stop = function stop() {
	    this.flush();
	  };
	
	  /**
	   * Stub method for rendering content and emptying the current batch.
	   *
	   */
	
	
	  ObjectRenderer.prototype.flush = function flush() {}
	  // flush!
	
	
	  /**
	   * Renders an object
	   *
	   * @param {PIXI.DisplayObject} object - The object to render.
	   */
	  ;
	
	  ObjectRenderer.prototype.render = function render(object) // eslint-disable-line no-unused-vars
	  {
	    // render the object
	  };
	
	  return ObjectRenderer;
	}(_WebGLManager3.default);
	
	exports.default = ObjectRenderer;
	//# sourceMappingURL=ObjectRenderer.js.map

/***/ },
/* 80 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class
	 * @memberof PIXI
	 */
	var WebGLManager = function () {
	  /**
	   * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.
	   */
	  function WebGLManager(renderer) {
	    _classCallCheck(this, WebGLManager);
	
	    /**
	     * The renderer this manager works for.
	     *
	     * @member {PIXI.WebGLRenderer}
	     */
	    this.renderer = renderer;
	
	    this.renderer.on('context', this.onContextChange, this);
	  }
	
	  /**
	   * Generic method called when there is a WebGL context change.
	   *
	   */
	
	
	  WebGLManager.prototype.onContextChange = function onContextChange() {}
	  // do some codes init!
	
	
	  /**
	   * Generic destroy methods to be overridden by the subclass
	   *
	   */
	  ;
	
	  WebGLManager.prototype.destroy = function destroy() {
	    this.renderer.off('context', this.onContextChange, this);
	
	    this.renderer = null;
	  };
	
	  return WebGLManager;
	}();
	
	exports.default = WebGLManager;
	//# sourceMappingURL=WebGLManager.js.map

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _SystemRenderer2 = __webpack_require__(70);
	
	var _SystemRenderer3 = _interopRequireDefault(_SystemRenderer2);
	
	var _MaskManager = __webpack_require__(82);
	
	var _MaskManager2 = _interopRequireDefault(_MaskManager);
	
	var _StencilManager = __webpack_require__(88);
	
	var _StencilManager2 = _interopRequireDefault(_StencilManager);
	
	var _FilterManager = __webpack_require__(89);
	
	var _FilterManager2 = _interopRequireDefault(_FilterManager);
	
	var _RenderTarget = __webpack_require__(90);
	
	var _RenderTarget2 = _interopRequireDefault(_RenderTarget);
	
	var _ObjectRenderer = __webpack_require__(79);
	
	var _ObjectRenderer2 = _interopRequireDefault(_ObjectRenderer);
	
	var _TextureManager = __webpack_require__(95);
	
	var _TextureManager2 = _interopRequireDefault(_TextureManager);
	
	var _BaseTexture = __webpack_require__(55);
	
	var _BaseTexture2 = _interopRequireDefault(_BaseTexture);
	
	var _TextureGarbageCollector = __webpack_require__(96);
	
	var _TextureGarbageCollector2 = _interopRequireDefault(_TextureGarbageCollector);
	
	var _WebGLState = __webpack_require__(97);
	
	var _WebGLState2 = _interopRequireDefault(_WebGLState);
	
	var _mapWebGLDrawModesToPixi = __webpack_require__(99);
	
	var _mapWebGLDrawModesToPixi2 = _interopRequireDefault(_mapWebGLDrawModesToPixi);
	
	var _validateContext = __webpack_require__(100);
	
	var _validateContext2 = _interopRequireDefault(_validateContext);
	
	var _utils = __webpack_require__(51);
	
	var _pixiGlCore = __webpack_require__(24);
	
	var _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);
	
	var _const = __webpack_require__(12);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var CONTEXT_UID = 0;
	
	/**
	 * The WebGLRenderer draws the scene and all its content onto a webGL enabled canvas. This renderer
	 * should be used for browsers that support webGL. This Render works by automatically managing webGLBatchs.
	 * So no need for Sprite Batches or Sprite Clouds.
	 * Don't forget to add the view to your DOM or you will not see anything :)
	 *
	 * @class
	 * @memberof PIXI
	 * @extends PIXI.SystemRenderer
	 */
	
	var WebGLRenderer = function (_SystemRenderer) {
	    _inherits(WebGLRenderer, _SystemRenderer);
	
	    /**
	     *
	     * @param {number} [width=0] - the width of the canvas view
	     * @param {number} [height=0] - the height of the canvas view
	     * @param {object} [options] - The optional renderer parameters
	     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional
	     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false
	     * @param {boolean} [options.autoResize=false] - If the render view is automatically resized, default false
	     * @param {boolean} [options.antialias=false] - sets antialias. If not available natively then FXAA
	     *  antialiasing is used
	     * @param {boolean} [options.forceFXAA=false] - forces FXAA antialiasing to be used over native.
	     *  FXAA is faster, but may not always look as great
	     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer.
	     *  The resolution of the renderer retina would be 2.
	     * @param {boolean} [options.clearBeforeRender=true] - This sets if the CanvasRenderer will clear
	     *  the canvas or not before the new render pass. If you wish to set this to false, you *must* set
	     *  preserveDrawingBuffer to `true`.
	     * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation,
	     *  enable this if you need to call toDataUrl on the webgl context.
	     * @param {boolean} [options.roundPixels=false] - If true Pixi will Math.floor() x/y values when
	     *  rendering, stopping pixel interpolation.
	     */
	    function WebGLRenderer(width, height) {
	        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        _classCallCheck(this, WebGLRenderer);
	
	        /**
	         * The type of this renderer as a standardised const
	         *
	         * @member {number}
	         * @see PIXI.RENDERER_TYPE
	         */
	        var _this = _possibleConstructorReturn(this, _SystemRenderer.call(this, 'WebGL', width, height, options));
	
	        _this.type = _const.RENDERER_TYPE.WEBGL;
	
	        _this.handleContextLost = _this.handleContextLost.bind(_this);
	        _this.handleContextRestored = _this.handleContextRestored.bind(_this);
	
	        _this.view.addEventListener('webglcontextlost', _this.handleContextLost, false);
	        _this.view.addEventListener('webglcontextrestored', _this.handleContextRestored, false);
	
	        /**
	         * The options passed in to create a new webgl context.
	         *
	         * @member {object}
	         * @private
	         */
	        _this._contextOptions = {
	            alpha: _this.transparent,
	            antialias: options.antialias,
	            premultipliedAlpha: _this.transparent && _this.transparent !== 'notMultiplied',
	            stencil: true,
	            preserveDrawingBuffer: options.preserveDrawingBuffer
	        };
	
	        _this._backgroundColorRgba[3] = _this.transparent ? 0 : 1;
	
	        /**
	         * Manages the masks using the stencil buffer.
	         *
	         * @member {PIXI.MaskManager}
	         */
	        _this.maskManager = new _MaskManager2.default(_this);
	
	        /**
	         * Manages the stencil buffer.
	         *
	         * @member {PIXI.StencilManager}
	         */
	        _this.stencilManager = new _StencilManager2.default(_this);
	
	        /**
	         * An empty renderer.
	         *
	         * @member {PIXI.ObjectRenderer}
	         */
	        _this.emptyRenderer = new _ObjectRenderer2.default(_this);
	
	        /**
	         * The currently active ObjectRenderer.
	         *
	         * @member {PIXI.ObjectRenderer}
	         */
	        _this.currentRenderer = _this.emptyRenderer;
	
	        _this.initPlugins();
	
	        /**
	         * The current WebGL rendering context, it is created here
	         *
	         * @member {WebGLRenderingContext}
	         */
	        // initialize the context so it is ready for the managers.
	        if (options.context) {
	            // checks to see if a context is valid..
	            (0, _validateContext2.default)(options.context);
	        }
	
	        _this.gl = options.context || _pixiGlCore2.default.createContext(_this.view, _this._contextOptions);
	
	        _this.CONTEXT_UID = CONTEXT_UID++;
	
	        /**
	         * The currently active ObjectRenderer.
	         *
	         * @member {PIXI.WebGLState}
	         */
	        _this.state = new _WebGLState2.default(_this.gl);
	
	        _this.renderingToScreen = true;
	
	        /**
	         * Holds the current state of textures bound to the GPU.
	         * @type {Array}
	         */
	        _this.boundTextures = null;
	
	        _this._initContext();
	        /**
	         * Manages the filters.
	         *
	         * @member {PIXI.FilterManager}
	         */
	        _this.filterManager = new _FilterManager2.default(_this);
	        // map some webGL blend and drawmodes..
	        _this.drawModes = (0, _mapWebGLDrawModesToPixi2.default)(_this.gl);
	
	        /**
	         * Holds the current shader
	         *
	         * @member {PIXI.Shader}
	         */
	        _this._activeShader = null;
	
	        _this._activeVao = null;
	
	        /**
	         * Holds the current render target
	         *
	         * @member {PIXI.RenderTarget}
	         */
	        _this._activeRenderTarget = null;
	
	        _this._nextTextureLocation = 0;
	
	        _this.setBlendMode(0);
	        return _this;
	    }
	
	    /**
	     * Creates the WebGL context
	     *
	     * @private
	     */
	
	
	    WebGLRenderer.prototype._initContext = function _initContext() {
	        var gl = this.gl;
	
	        // restore a context if it was previously lost
	        if (gl.isContextLost() && gl.getExtension('WEBGL_lose_context')) {
	            gl.getExtension('WEBGL_lose_context').restoreContext();
	        }
	
	        var maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
	
	        this.boundTextures = new Array(maxTextures);
	        this.emptyTextures = new Array(maxTextures);
	
	        // create a texture manager...
	        this.textureManager = new _TextureManager2.default(this);
	        this.textureGC = new _TextureGarbageCollector2.default(this);
	
	        this.state.resetToDefault();
	
	        this.rootRenderTarget = new _RenderTarget2.default(gl, this.width, this.height, null, this.resolution, true);
	        this.rootRenderTarget.clearColor = this._backgroundColorRgba;
	
	        this.bindRenderTarget(this.rootRenderTarget);
	
	        // now lets fill up the textures with empty ones!
	        var emptyGLTexture = new _pixiGlCore2.default.GLTexture.fromData(gl, null, 1, 1);
	
	        var tempObj = { _glTextures: {} };
	
	        tempObj._glTextures[this.CONTEXT_UID] = {};
	
	        for (var i = 0; i < maxTextures; i++) {
	            var empty = new _BaseTexture2.default();
	
	            empty._glTextures[this.CONTEXT_UID] = emptyGLTexture;
	
	            this.boundTextures[i] = tempObj;
	            this.emptyTextures[i] = empty;
	            this.bindTexture(null, i);
	        }
	
	        this.emit('context', gl);
	
	        // setup the width/height properties and gl viewport
	        this.resize(this.width, this.height);
	    };
	
	    /**
	     * Renders the object to its webGL view
	     *
	     * @param {PIXI.DisplayObject} displayObject - the object to be rendered
	     * @param {PIXI.RenderTexture} renderTexture - The render texture to render to.
	     * @param {boolean} [clear] - Should the canvas be cleared before the new render
	     * @param {PIXI.Transform} [transform] - A transform to apply to the render texture before rendering.
	     * @param {boolean} [skipUpdateTransform] - Should we skip the update transform pass?
	     */
	
	
	    WebGLRenderer.prototype.render = function render(displayObject, renderTexture, clear, transform, skipUpdateTransform) {
	        // can be handy to know!
	        this.renderingToScreen = !renderTexture;
	
	        this.emit('prerender');
	
	        // no point rendering if our context has been blown up!
	        if (!this.gl || this.gl.isContextLost()) {
	            return;
	        }
	
	        this._nextTextureLocation = 0;
	
	        if (!renderTexture) {
	            this._lastObjectRendered = displayObject;
	        }
	
	        if (!skipUpdateTransform) {
	            // update the scene graph
	            var cacheParent = displayObject.parent;
	
	            displayObject.parent = this._tempDisplayObjectParent;
	            displayObject.updateTransform();
	            displayObject.parent = cacheParent;
	            // displayObject.hitArea = //TODO add a temp hit area
	        }
	
	        this.bindRenderTexture(renderTexture, transform);
	
	        this.currentRenderer.start();
	
	        if (clear !== undefined ? clear : this.clearBeforeRender) {
	            this._activeRenderTarget.clear();
	        }
	
	        displayObject.renderWebGL(this);
	
	        // apply transform..
	        this.currentRenderer.flush();
	
	        // this.setObjectRenderer(this.emptyRenderer);
	
	        this.textureGC.update();
	
	        this.emit('postrender');
	    };
	
	    /**
	     * Changes the current renderer to the one given in parameter
	     *
	     * @param {PIXI.ObjectRenderer} objectRenderer - The object renderer to use.
	     */
	
	
	    WebGLRenderer.prototype.setObjectRenderer = function setObjectRenderer(objectRenderer) {
	        if (this.currentRenderer === objectRenderer) {
	            return;
	        }
	
	        this.currentRenderer.stop();
	        this.currentRenderer = objectRenderer;
	        this.currentRenderer.start();
	    };
	
	    /**
	     * This should be called if you wish to do some custom rendering
	     * It will basically render anything that may be batched up such as sprites
	     *
	     */
	
	
	    WebGLRenderer.prototype.flush = function flush() {
	        this.setObjectRenderer(this.emptyRenderer);
	    };
	
	    /**
	     * Resizes the webGL view to the specified width and height.
	     *
	     * @param {number} width - the new width of the webGL view
	     * @param {number} height - the new height of the webGL view
	     */
	
	
	    WebGLRenderer.prototype.resize = function resize(width, height) {
	        //  if(width * this.resolution === this.width && height * this.resolution === this.height)return;
	
	        _SystemRenderer3.default.prototype.resize.call(this, width, height);
	
	        this.rootRenderTarget.resize(width, height);
	
	        if (this._activeRenderTarget === this.rootRenderTarget) {
	            this.rootRenderTarget.activate();
	
	            if (this._activeShader) {
	                this._activeShader.uniforms.projectionMatrix = this.rootRenderTarget.projectionMatrix.toArray(true);
	            }
	        }
	    };
	
	    /**
	     * Resizes the webGL view to the specified width and height.
	     *
	     * @param {number} blendMode - the desired blend mode
	     */
	
	
	    WebGLRenderer.prototype.setBlendMode = function setBlendMode(blendMode) {
	        this.state.setBlendMode(blendMode);
	    };
	
	    /**
	     * Erases the active render target and fills the drawing area with a colour
	     *
	     * @param {number} [clearColor] - The colour
	     */
	
	
	    WebGLRenderer.prototype.clear = function clear(clearColor) {
	        this._activeRenderTarget.clear(clearColor);
	    };
	
	    /**
	     * Sets the transform of the active render target to the given matrix
	     *
	     * @param {PIXI.Matrix} matrix - The transformation matrix
	     */
	
	
	    WebGLRenderer.prototype.setTransform = function setTransform(matrix) {
	        this._activeRenderTarget.transform = matrix;
	    };
	
	    /**
	     * Binds a render texture for rendering
	     *
	     * @param {PIXI.RenderTexture} renderTexture - The render texture to render
	     * @param {PIXI.Transform} transform - The transform to be applied to the render texture
	     * @return {PIXI.WebGLRenderer} Returns itself.
	     */
	
	
	    WebGLRenderer.prototype.bindRenderTexture = function bindRenderTexture(renderTexture, transform) {
	        var renderTarget = void 0;
	
	        if (renderTexture) {
	            var baseTexture = renderTexture.baseTexture;
	
	            if (!baseTexture._glRenderTargets[this.CONTEXT_UID]) {
	                // bind the current texture
	                this.textureManager.updateTexture(baseTexture, 0);
	            }
	
	            this.unbindTexture(baseTexture);
	
	            renderTarget = baseTexture._glRenderTargets[this.CONTEXT_UID];
	            renderTarget.setFrame(renderTexture.frame);
	        } else {
	            renderTarget = this.rootRenderTarget;
	        }
	
	        renderTarget.transform = transform;
	        this.bindRenderTarget(renderTarget);
	
	        return this;
	    };
	
	    /**
	     * Changes the current render target to the one given in parameter
	     *
	     * @param {PIXI.RenderTarget} renderTarget - the new render target
	     * @return {PIXI.WebGLRenderer} Returns itself.
	     */
	
	
	    WebGLRenderer.prototype.bindRenderTarget = function bindRenderTarget(renderTarget) {
	        if (renderTarget !== this._activeRenderTarget) {
	            this._activeRenderTarget = renderTarget;
	            renderTarget.activate();
	
	            if (this._activeShader) {
	                this._activeShader.uniforms.projectionMatrix = renderTarget.projectionMatrix.toArray(true);
	            }
	
	            this.stencilManager.setMaskStack(renderTarget.stencilMaskStack);
	        }
	
	        return this;
	    };
	
	    /**
	     * Changes the current shader to the one given in parameter
	     *
	     * @param {PIXI.Shader} shader - the new shader
	     * @return {PIXI.WebGLRenderer} Returns itself.
	     */
	
	
	    WebGLRenderer.prototype.bindShader = function bindShader(shader) {
	        // TODO cache
	        if (this._activeShader !== shader) {
	            this._activeShader = shader;
	            shader.bind();
	
	            // automatically set the projection matrix
	            shader.uniforms.projectionMatrix = this._activeRenderTarget.projectionMatrix.toArray(true);
	        }
	
	        return this;
	    };
	
	    /**
	     * Binds the texture. This will return the location of the bound texture.
	     * It may not be the same as the one you pass in. This is due to optimisation that prevents
	     * needless binding of textures. For example if the texture is already bound it will return the
	     * current location of the texture instead of the one provided. To bypass this use force location
	     *
	     * @param {PIXI.Texture} texture - the new texture
	     * @param {number} location - the suggested texture location
	     * @param {boolean} forceLocation - force the location
	     * @return {PIXI.WebGLRenderer} Returns itself.
	     */
	
	
	    WebGLRenderer.prototype.bindTexture = function bindTexture(texture, location, forceLocation) {
	        texture = texture || this.emptyTextures[location];
	        texture = texture.baseTexture || texture;
	        texture.touched = this.textureGC.count;
	
	        if (!forceLocation) {
	            // TODO - maybe look into adding boundIds.. save us the loop?
	            for (var i = 0; i < this.boundTextures.length; i++) {
	                if (this.boundTextures[i] === texture) {
	                    return i;
	                }
	            }
	
	            if (location === undefined) {
	                this._nextTextureLocation++;
	                this._nextTextureLocation %= this.boundTextures.length;
	                location = this.boundTextures.length - this._nextTextureLocation - 1;
	            }
	        } else {
	            location = location || 0;
	        }
	
	        var gl = this.gl;
	        var glTexture = texture._glTextures[this.CONTEXT_UID];
	
	        if (!glTexture) {
	            // this will also bind the texture..
	            this.textureManager.updateTexture(texture, location);
	        } else {
	            // bind the current texture
	            this.boundTextures[location] = texture;
	            gl.activeTexture(gl.TEXTURE0 + location);
	            gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);
	        }
	
	        return location;
	    };
	
	    /**
	    * unbinds the texture ...
	    *
	    * @param {PIXI.Texture} texture - the texture to unbind
	    * @return {PIXI.WebGLRenderer} Returns itself.
	    */
	
	
	    WebGLRenderer.prototype.unbindTexture = function unbindTexture(texture) {
	        var gl = this.gl;
	
	        texture = texture.baseTexture || texture;
	
	        for (var i = 0; i < this.boundTextures.length; i++) {
	            if (this.boundTextures[i] === texture) {
	                this.boundTextures[i] = this.emptyTextures[i];
	
	                gl.activeTexture(gl.TEXTURE0 + i);
	                gl.bindTexture(gl.TEXTURE_2D, this.emptyTextures[i]._glTextures[this.CONTEXT_UID].texture);
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Creates a new VAO from this renderer's context and state.
	     *
	     * @return {VertexArrayObject} The new VAO.
	     */
	
	
	    WebGLRenderer.prototype.createVao = function createVao() {
	        return new _pixiGlCore2.default.VertexArrayObject(this.gl, this.state.attribState);
	    };
	
	    /**
	     * Changes the current Vao to the one given in parameter
	     *
	     * @param {PIXI.VertexArrayObject} vao - the new Vao
	     * @return {PIXI.WebGLRenderer} Returns itself.
	     */
	
	
	    WebGLRenderer.prototype.bindVao = function bindVao(vao) {
	        if (this._activeVao === vao) {
	            return this;
	        }
	
	        if (vao) {
	            vao.bind();
	        } else if (this._activeVao) {
	            // TODO this should always be true i think?
	            this._activeVao.unbind();
	        }
	
	        this._activeVao = vao;
	
	        return this;
	    };
	
	    /**
	     * Resets the WebGL state so you can render things however you fancy!
	     *
	     * @return {PIXI.WebGLRenderer} Returns itself.
	     */
	
	
	    WebGLRenderer.prototype.reset = function reset() {
	        this.setObjectRenderer(this.emptyRenderer);
	
	        this._activeShader = null;
	        this._activeRenderTarget = this.rootRenderTarget;
	
	        // bind the main frame buffer (the screen);
	        this.rootRenderTarget.activate();
	
	        this.state.resetToDefault();
	
	        return this;
	    };
	
	    /**
	     * Handles a lost webgl context
	     *
	     * @private
	     * @param {WebGLContextEvent} event - The context lost event.
	     */
	
	
	    WebGLRenderer.prototype.handleContextLost = function handleContextLost(event) {
	        event.preventDefault();
	    };
	
	    /**
	     * Handles a restored webgl context
	     *
	     * @private
	     */
	
	
	    WebGLRenderer.prototype.handleContextRestored = function handleContextRestored() {
	        this._initContext();
	        this.textureManager.removeAll();
	    };
	
	    /**
	     * Removes everything from the renderer (event listeners, spritebatch, etc...)
	     *
	     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.
	     *  See: https://github.com/pixijs/pixi.js/issues/2233
	     */
	
	
	    WebGLRenderer.prototype.destroy = function destroy(removeView) {
	        this.destroyPlugins();
	
	        // remove listeners
	        this.view.removeEventListener('webglcontextlost', this.handleContextLost);
	        this.view.removeEventListener('webglcontextrestored', this.handleContextRestored);
	
	        this.textureManager.destroy();
	
	        // call base destroy
	        _SystemRenderer.prototype.destroy.call(this, removeView);
	
	        this.uid = 0;
	
	        // destroy the managers
	        this.maskManager.destroy();
	        this.stencilManager.destroy();
	        this.filterManager.destroy();
	
	        this.maskManager = null;
	        this.filterManager = null;
	        this.textureManager = null;
	        this.currentRenderer = null;
	
	        this.handleContextLost = null;
	        this.handleContextRestored = null;
	
	        this._contextOptions = null;
	        this.gl.useProgram(null);
	
	        if (this.gl.getExtension('WEBGL_lose_context')) {
	            this.gl.getExtension('WEBGL_lose_context').loseContext();
	        }
	
	        this.gl = null;
	
	        // this = null;
	    };
	
	    return WebGLRenderer;
	}(_SystemRenderer3.default);
	
	exports.default = WebGLRenderer;
	
	
	_utils.pluginTarget.mixin(WebGLRenderer);
	//# sourceMappingURL=WebGLRenderer.js.map

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _WebGLManager2 = __webpack_require__(80);
	
	var _WebGLManager3 = _interopRequireDefault(_WebGLManager2);
	
	var _SpriteMaskFilter = __webpack_require__(83);
	
	var _SpriteMaskFilter2 = _interopRequireDefault(_SpriteMaskFilter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class
	 * @extends PIXI.WebGLManager
	 * @memberof PIXI
	 */
	var MaskManager = function (_WebGLManager) {
	    _inherits(MaskManager, _WebGLManager);
	
	    /**
	     * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.
	     */
	    function MaskManager(renderer) {
	        _classCallCheck(this, MaskManager);
	
	        // TODO - we don't need both!
	        var _this = _possibleConstructorReturn(this, _WebGLManager.call(this, renderer));
	
	        _this.scissor = false;
	        _this.scissorData = null;
	        _this.scissorRenderTarget = null;
	
	        _this.enableScissor = true;
	
	        _this.alphaMaskPool = [];
	        _this.alphaMaskIndex = 0;
	        return _this;
	    }
	
	    /**
	     * Applies the Mask and adds it to the current filter stack.
	     *
	     * @param {PIXI.DisplayObject} target - Display Object to push the mask to
	     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.
	     */
	
	
	    MaskManager.prototype.pushMask = function pushMask(target, maskData) {
	        if (maskData.texture) {
	            this.pushSpriteMask(target, maskData);
	        } else if (this.enableScissor && !this.scissor && !this.renderer.stencilManager.stencilMaskStack.length && maskData.isFastRect()) {
	            var matrix = maskData.worldTransform;
	
	            var rot = Math.atan2(matrix.b, matrix.a);
	
	            // use the nearest degree!
	            rot = Math.round(rot * (180 / Math.PI));
	
	            if (rot % 90) {
	                this.pushStencilMask(maskData);
	            } else {
	                this.pushScissorMask(target, maskData);
	            }
	        } else {
	            this.pushStencilMask(maskData);
	        }
	    };
	
	    /**
	     * Removes the last mask from the mask stack and doesn't return it.
	     *
	     * @param {PIXI.DisplayObject} target - Display Object to pop the mask from
	     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.
	     */
	
	
	    MaskManager.prototype.popMask = function popMask(target, maskData) {
	        if (maskData.texture) {
	            this.popSpriteMask(target, maskData);
	        } else if (this.enableScissor && !this.renderer.stencilManager.stencilMaskStack.length) {
	            this.popScissorMask(target, maskData);
	        } else {
	            this.popStencilMask(target, maskData);
	        }
	    };
	
	    /**
	     * Applies the Mask and adds it to the current filter stack.
	     *
	     * @param {PIXI.RenderTarget} target - Display Object to push the sprite mask to
	     * @param {PIXI.Sprite} maskData - Sprite to be used as the mask
	     */
	
	
	    MaskManager.prototype.pushSpriteMask = function pushSpriteMask(target, maskData) {
	        var alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex];
	
	        if (!alphaMaskFilter) {
	            alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [new _SpriteMaskFilter2.default(maskData)];
	        }
	
	        alphaMaskFilter[0].resolution = this.renderer.resolution;
	        alphaMaskFilter[0].maskSprite = maskData;
	
	        // TODO - may cause issues!
	        target.filterArea = maskData.getBounds(true);
	
	        this.renderer.filterManager.pushFilter(target, alphaMaskFilter);
	
	        this.alphaMaskIndex++;
	    };
	
	    /**
	     * Removes the last filter from the filter stack and doesn't return it.
	     *
	     */
	
	
	    MaskManager.prototype.popSpriteMask = function popSpriteMask() {
	        this.renderer.filterManager.popFilter();
	        this.alphaMaskIndex--;
	    };
	
	    /**
	     * Applies the Mask and adds it to the current filter stack.
	     *
	     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.
	     */
	
	
	    MaskManager.prototype.pushStencilMask = function pushStencilMask(maskData) {
	        this.renderer.currentRenderer.stop();
	        this.renderer.stencilManager.pushStencil(maskData);
	    };
	
	    /**
	     * Removes the last filter from the filter stack and doesn't return it.
	     *
	     */
	
	
	    MaskManager.prototype.popStencilMask = function popStencilMask() {
	        this.renderer.currentRenderer.stop();
	        this.renderer.stencilManager.popStencil();
	    };
	
	    /**
	     *
	     * @param {PIXI.DisplayObject} target - Display Object to push the mask to
	     * @param {PIXI.Graphics} maskData - The masking data.
	     */
	
	
	    MaskManager.prototype.pushScissorMask = function pushScissorMask(target, maskData) {
	        maskData.renderable = true;
	
	        var renderTarget = this.renderer._activeRenderTarget;
	
	        var bounds = maskData.getBounds();
	
	        bounds.fit(renderTarget.size);
	        maskData.renderable = false;
	
	        this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);
	
	        var resolution = this.renderer.resolution;
	
	        this.renderer.gl.scissor(bounds.x * resolution, (renderTarget.root ? renderTarget.size.height - bounds.y - bounds.height : bounds.y) * resolution, bounds.width * resolution, bounds.height * resolution);
	
	        this.scissorRenderTarget = renderTarget;
	        this.scissorData = maskData;
	        this.scissor = true;
	    };
	
	    /**
	     *
	     *
	     */
	
	
	    MaskManager.prototype.popScissorMask = function popScissorMask() {
	        this.scissorRenderTarget = null;
	        this.scissorData = null;
	        this.scissor = false;
	
	        // must be scissor!
	        var gl = this.renderer.gl;
	
	        gl.disable(gl.SCISSOR_TEST);
	    };
	
	    return MaskManager;
	}(_WebGLManager3.default);
	
	exports.default = MaskManager;
	//# sourceMappingURL=MaskManager.js.map

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _Filter2 = __webpack_require__(84);
	
	var _Filter3 = _interopRequireDefault(_Filter2);
	
	var _math = __webpack_require__(14);
	
	var _path = __webpack_require__(86);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The SpriteMaskFilter class
	 *
	 * @class
	 * @extends PIXI.Filter
	 * @memberof PIXI
	 */
	var SpriteMaskFilter = function (_Filter) {
	    _inherits(SpriteMaskFilter, _Filter);
	
	    /**
	     * @param {PIXI.Sprite} sprite - the target sprite
	     */
	    function SpriteMaskFilter(sprite) {
	        _classCallCheck(this, SpriteMaskFilter);
	
	        var maskMatrix = new _math.Matrix();
	
	        var _this = _possibleConstructorReturn(this, _Filter.call(this, 'attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 otherMatrix;\n\nvarying vec2 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n    vMaskCoord = ( otherMatrix * vec3( aTextureCoord, 1.0)  ).xy;\n}\n', 'varying vec2 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform float alpha;\nuniform sampler2D mask;\n\nvoid main(void)\n{\n    // check clip! this will stop the mask bleeding out from the edges\n    vec2 text = abs( vMaskCoord - 0.5 );\n    text = step(0.5, text);\n\n    float clip = 1.0 - max(text.y, text.x);\n    vec4 original = texture2D(uSampler, vTextureCoord);\n    vec4 masky = texture2D(mask, vMaskCoord);\n\n    original *= (masky.r * masky.a * alpha * clip);\n\n    gl_FragColor = original;\n}\n'));
	
	        sprite.renderable = false;
	
	        _this.maskSprite = sprite;
	        _this.maskMatrix = maskMatrix;
	        return _this;
	    }
	
	    /**
	     * Applies the filter
	     *
	     * @param {PIXI.FilterManager} filterManager - The renderer to retrieve the filter from
	     * @param {PIXI.RenderTarget} input - The input render target.
	     * @param {PIXI.RenderTarget} output - The target to output to.
	     */
	
	
	    SpriteMaskFilter.prototype.apply = function apply(filterManager, input, output) {
	        var maskSprite = this.maskSprite;
	
	        this.uniforms.mask = maskSprite._texture;
	        this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite);
	        this.uniforms.alpha = maskSprite.worldAlpha;
	
	        filterManager.applyFilter(this, input, output);
	    };
	
	    return SpriteMaskFilter;
	}(_Filter3.default);
	
	exports.default = SpriteMaskFilter;
	//# sourceMappingURL=SpriteMaskFilter.js.map

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _extractUniformsFromSrc = __webpack_require__(85);
	
	var _extractUniformsFromSrc2 = _interopRequireDefault(_extractUniformsFromSrc);
	
	var _utils = __webpack_require__(51);
	
	var _const = __webpack_require__(12);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SOURCE_KEY_MAP = {};
	
	// let math = require('../../../math');
	/**
	 * @class
	 * @memberof PIXI
	 * @extends PIXI.Shader
	 */
	
	var Filter = function () {
	  /**
	   * @param {string} [vertexSrc] - The source of the vertex shader.
	   * @param {string} [fragmentSrc] - The source of the fragment shader.
	   * @param {object} [uniforms] - Custom uniforms to use to augment the built-in ones.
	   */
	  function Filter(vertexSrc, fragmentSrc, uniforms) {
	    _classCallCheck(this, Filter);
	
	    /**
	     * The vertex shader.
	     *
	     * @member {string}
	     */
	    this.vertexSrc = vertexSrc || Filter.defaultVertexSrc;
	
	    /**
	     * The fragment shader.
	     *
	     * @member {string}
	     */
	    this.fragmentSrc = fragmentSrc || Filter.defaultFragmentSrc;
	
	    this.blendMode = _const.BLEND_MODES.NORMAL;
	
	    // pull out the vertex and shader uniforms if they are not specified..
	    // currently this does not extract structs only default types
	    this.uniformData = uniforms || (0, _extractUniformsFromSrc2.default)(this.vertexSrc, this.fragmentSrc, 'projectionMatrix|uSampler');
	
	    /**
	     * An object containing the current values of custom uniforms.
	     * @example <caption>Updating the value of a custom uniform</caption>
	     * filter.uniforms.time = performance.now();
	     *
	     * @member {object}
	     */
	    this.uniforms = {};
	
	    for (var i in this.uniformData) {
	      this.uniforms[i] = this.uniformData[i].value;
	    }
	
	    // this is where we store shader references..
	    // TODO we could cache this!
	    this.glShaders = {};
	
	    // used for cacheing.. sure there is a better way!
	    if (!SOURCE_KEY_MAP[this.vertexSrc + this.fragmentSrc]) {
	      SOURCE_KEY_MAP[this.vertexSrc + this.fragmentSrc] = (0, _utils.uid)();
	    }
	
	    this.glShaderKey = SOURCE_KEY_MAP[this.vertexSrc + this.fragmentSrc];
	
	    /**
	     * The padding of the filter. Some filters require extra space to breath such as a blur.
	     * Increasing this will add extra width and height to the bounds of the object that the
	     * filter is applied to.
	     *
	     * @member {number}
	     */
	    this.padding = 4;
	
	    /**
	     * The resolution of the filter. Setting this to be lower will lower the quality but
	     * increase the performance of the filter.
	     *
	     * @member {number}
	     */
	    this.resolution = 1;
	
	    /**
	     * If enabled is true the filter is applied, if false it will not.
	     *
	     * @member {boolean}
	     */
	    this.enabled = true;
	  }
	
	  /**
	   * Applies the filter
	   *
	   * @param {PIXI.FilterManager} filterManager - The renderer to retrieve the filter from
	   * @param {PIXI.RenderTarget} input - The input render target.
	   * @param {PIXI.RenderTarget} output - The target to output to.
	   * @param {boolean} clear - Should the output be cleared before rendering to it
	   */
	
	
	  Filter.prototype.apply = function apply(filterManager, input, output, clear) {
	    // --- //
	    //  this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(tempMatrix, window.panda );
	
	    // do as you please!
	
	    filterManager.applyFilter(this, input, output, clear);
	
	    // or just do a regular render..
	  };
	
	  /**
	   * The default vertex shader source
	   *
	   * @static
	   * @constant
	   */
	
	
	  _createClass(Filter, null, [{
	    key: 'defaultVertexSrc',
	    get: function get() {
	      return ['attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'uniform mat3 projectionMatrix;', 'uniform mat3 filterMatrix;', 'varying vec2 vTextureCoord;', 'varying vec2 vFilterCoord;', 'void main(void){', '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);', '   vFilterCoord = ( filterMatrix * vec3( aTextureCoord, 1.0)  ).xy;', '   vTextureCoord = aTextureCoord ;', '}'].join('\n');
	    }
	
	    /**
	     * The default fragment shader source
	     *
	     * @static
	     * @constant
	     */
	
	  }, {
	    key: 'defaultFragmentSrc',
	    get: function get() {
	      return ['varying vec2 vTextureCoord;', 'varying vec2 vFilterCoord;', 'uniform sampler2D uSampler;', 'uniform sampler2D filterSampler;', 'void main(void){', '   vec4 masky = texture2D(filterSampler, vFilterCoord);', '   vec4 sample = texture2D(uSampler, vTextureCoord);', '   vec4 color;', '   if(mod(vFilterCoord.x, 1.0) > 0.5)', '   {', '     color = vec4(1.0, 0.0, 0.0, 1.0);', '   }', '   else', '   {', '     color = vec4(0.0, 1.0, 0.0, 1.0);', '   }',
	      // '   gl_FragColor = vec4(mod(vFilterCoord.x, 1.5), vFilterCoord.y,0.0,1.0);',
	      '   gl_FragColor = mix(sample, masky, 0.5);', '   gl_FragColor *= sample.a;', '}'].join('\n');
	    }
	  }]);
	
	  return Filter;
	}();
	
	exports.default = Filter;
	//# sourceMappingURL=Filter.js.map

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = extractUniformsFromSrc;
	
	var _pixiGlCore = __webpack_require__(24);
	
	var _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var defaultValue = _pixiGlCore2.default.shader.defaultValue;
	
	function extractUniformsFromSrc(vertexSrc, fragmentSrc, mask) {
	    var vertUniforms = extractUniformsFromString(vertexSrc, mask);
	    var fragUniforms = extractUniformsFromString(fragmentSrc, mask);
	
	    return Object.assign(vertUniforms, fragUniforms);
	}
	
	function extractUniformsFromString(string) {
	    var maskRegex = new RegExp('^(projectionMatrix|uSampler|filterArea)$');
	
	    var uniforms = {};
	    var nameSplit = void 0;
	
	    // clean the lines a little - remove extra spaces / tabs etc
	    // then split along ';'
	    var lines = string.replace(/\s+/g, ' ').split(/\s*;\s*/);
	
	    // loop through..
	    for (var i = 0; i < lines.length; i++) {
	        var line = lines[i].trim();
	
	        if (line.indexOf('uniform') > -1) {
	            var splitLine = line.split(' ');
	            var type = splitLine[1];
	
	            var name = splitLine[2];
	            var size = 1;
	
	            if (name.indexOf('[') > -1) {
	                // array!
	                nameSplit = name.split(/\[|]/);
	                name = nameSplit[0];
	                size *= Number(nameSplit[1]);
	            }
	
	            if (!name.match(maskRegex)) {
	                uniforms[name] = {
	                    value: defaultValue(type, size),
	                    name: name,
	                    type: type
	                };
	            }
	        }
	    }
	
	    return uniforms;
	}
	//# sourceMappingURL=extractUniformsFromSrc.js.map

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }
	
	  return parts;
	}
	
	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};
	
	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;
	
	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();
	
	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }
	
	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }
	
	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)
	
	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');
	
	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};
	
	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';
	
	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');
	
	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }
	
	  return (isAbsolute ? '/' : '') + path;
	};
	
	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};
	
	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};
	
	
	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);
	
	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }
	
	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }
	
	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }
	
	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));
	
	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }
	
	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }
	
	  outputParts = outputParts.concat(toParts.slice(samePartsLength));
	
	  return outputParts.join('/');
	};
	
	exports.sep = '/';
	exports.delimiter = ':';
	
	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];
	
	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }
	
	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }
	
	  return root + dir;
	};
	
	
	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};
	
	
	exports.extname = function(path) {
	  return splitPath(path)[3];
	};
	
	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}
	
	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(87)))

/***/ },
/* 87 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _WebGLManager2 = __webpack_require__(80);
	
	var _WebGLManager3 = _interopRequireDefault(_WebGLManager2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class
	 * @extends PIXI.WebGLManager
	 * @memberof PIXI
	 */
	var StencilManager = function (_WebGLManager) {
	    _inherits(StencilManager, _WebGLManager);
	
	    /**
	     * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.
	     */
	    function StencilManager(renderer) {
	        _classCallCheck(this, StencilManager);
	
	        var _this = _possibleConstructorReturn(this, _WebGLManager.call(this, renderer));
	
	        _this.stencilMaskStack = null;
	        return _this;
	    }
	
	    /**
	     * Changes the mask stack that is used by this manager.
	     *
	     * @param {PIXI.Graphics[]} stencilMaskStack - The mask stack
	     */
	
	
	    StencilManager.prototype.setMaskStack = function setMaskStack(stencilMaskStack) {
	        this.stencilMaskStack = stencilMaskStack;
	
	        var gl = this.renderer.gl;
	
	        if (stencilMaskStack.length === 0) {
	            gl.disable(gl.STENCIL_TEST);
	        } else {
	            gl.enable(gl.STENCIL_TEST);
	        }
	    };
	
	    /**
	     * Applies the Mask and adds it to the current filter stack. @alvin
	     *
	     * @param {PIXI.Graphics} graphics - The mask
	     */
	
	
	    StencilManager.prototype.pushStencil = function pushStencil(graphics) {
	        this.renderer.setObjectRenderer(this.renderer.plugins.graphics);
	
	        this.renderer._activeRenderTarget.attachStencilBuffer();
	
	        var gl = this.renderer.gl;
	        var sms = this.stencilMaskStack;
	
	        if (sms.length === 0) {
	            gl.enable(gl.STENCIL_TEST);
	            gl.clear(gl.STENCIL_BUFFER_BIT);
	            gl.stencilFunc(gl.ALWAYS, 1, 1);
	        }
	
	        sms.push(graphics);
	
	        gl.colorMask(false, false, false, false);
	        gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);
	
	        this.renderer.plugins.graphics.render(graphics);
	
	        gl.colorMask(true, true, true, true);
	        gl.stencilFunc(gl.NOTEQUAL, 0, sms.length);
	        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
	    };
	
	    /**
	     * TODO @alvin
	     */
	
	
	    StencilManager.prototype.popStencil = function popStencil() {
	        this.renderer.setObjectRenderer(this.renderer.plugins.graphics);
	
	        var gl = this.renderer.gl;
	        var sms = this.stencilMaskStack;
	
	        var graphics = sms.pop();
	
	        if (sms.length === 0) {
	            // the stack is empty!
	            gl.disable(gl.STENCIL_TEST);
	        } else {
	            gl.colorMask(false, false, false, false);
	            gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);
	
	            this.renderer.plugins.graphics.render(graphics);
	
	            gl.colorMask(true, true, true, true);
	            gl.stencilFunc(gl.NOTEQUAL, 0, sms.length);
	            gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
	        }
	    };
	
	    /**
	     * Destroys the mask stack.
	     *
	     */
	
	
	    StencilManager.prototype.destroy = function destroy() {
	        _WebGLManager3.default.prototype.destroy.call(this);
	
	        this.stencilMaskStack.stencilStack = null;
	    };
	
	    return StencilManager;
	}(_WebGLManager3.default);
	
	exports.default = StencilManager;
	//# sourceMappingURL=StencilManager.js.map

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _WebGLManager2 = __webpack_require__(80);
	
	var _WebGLManager3 = _interopRequireDefault(_WebGLManager2);
	
	var _RenderTarget = __webpack_require__(90);
	
	var _RenderTarget2 = _interopRequireDefault(_RenderTarget);
	
	var _Quad = __webpack_require__(91);
	
	var _Quad2 = _interopRequireDefault(_Quad);
	
	var _math = __webpack_require__(14);
	
	var _Shader = __webpack_require__(93);
	
	var _Shader2 = _interopRequireDefault(_Shader);
	
	var _filterTransforms = __webpack_require__(94);
	
	var filterTransforms = _interopRequireWildcard(_filterTransforms);
	
	var _bitTwiddle = __webpack_require__(63);
	
	var _bitTwiddle2 = _interopRequireDefault(_bitTwiddle);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @ignore
	 * @class
	 */
	var FilterState =
	/**
	 *
	 */
	function FilterState() {
	    _classCallCheck(this, FilterState);
	
	    this.renderTarget = null;
	    this.sourceFrame = new _math.Rectangle();
	    this.destinationFrame = new _math.Rectangle();
	    this.filters = [];
	    this.target = null;
	    this.resolution = 1;
	};
	
	/**
	 * @class
	 * @memberof PIXI
	 * @extends PIXI.WebGLManager
	 */
	
	
	var FilterManager = function (_WebGLManager) {
	    _inherits(FilterManager, _WebGLManager);
	
	    /**
	     * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.
	     */
	    function FilterManager(renderer) {
	        _classCallCheck(this, FilterManager);
	
	        var _this = _possibleConstructorReturn(this, _WebGLManager.call(this, renderer));
	
	        _this.gl = _this.renderer.gl;
	        // know about sprites!
	        _this.quad = new _Quad2.default(_this.gl, renderer.state.attribState);
	
	        _this.shaderCache = {};
	        // todo add default!
	        _this.pool = {};
	
	        _this.filterData = null;
	        return _this;
	    }
	
	    /**
	     * Adds a new filter to the manager.
	     *
	     * @param {PIXI.DisplayObject} target - The target of the filter to render.
	     * @param {PIXI.Filter[]} filters - The filters to apply.
	     */
	
	
	    FilterManager.prototype.pushFilter = function pushFilter(target, filters) {
	        var renderer = this.renderer;
	
	        var filterData = this.filterData;
	
	        if (!filterData) {
	            filterData = this.renderer._activeRenderTarget.filterStack;
	
	            // add new stack
	            var filterState = new FilterState();
	
	            filterState.sourceFrame = filterState.destinationFrame = this.renderer._activeRenderTarget.size;
	            filterState.renderTarget = renderer._activeRenderTarget;
	
	            this.renderer._activeRenderTarget.filterData = filterData = {
	                index: 0,
	                stack: [filterState]
	            };
	
	            this.filterData = filterData;
	        }
	
	        // get the current filter state..
	        var currentState = filterData.stack[++filterData.index];
	
	        if (!currentState) {
	            currentState = filterData.stack[filterData.index] = new FilterState();
	        }
	
	        // for now we go off the filter of the first resolution..
	        var resolution = filters[0].resolution;
	        var padding = filters[0].padding | 0;
	        var targetBounds = target.filterArea || target.getBounds(true);
	        var sourceFrame = currentState.sourceFrame;
	        var destinationFrame = currentState.destinationFrame;
	
	        sourceFrame.x = (targetBounds.x * resolution | 0) / resolution;
	        sourceFrame.y = (targetBounds.y * resolution | 0) / resolution;
	        sourceFrame.width = (targetBounds.width * resolution | 0) / resolution;
	        sourceFrame.height = (targetBounds.height * resolution | 0) / resolution;
	
	        if (filterData.stack[0].renderTarget.transform) {//
	
	            // TODO we should fit the rect around the transform..
	        } else {
	            sourceFrame.fit(filterData.stack[0].destinationFrame);
	        }
	
	        // lets apply the padding After we fit the element to the screen.
	        // this should stop the strange side effects that can occur when cropping to the edges
	        sourceFrame.pad(padding);
	
	        destinationFrame.width = sourceFrame.width;
	        destinationFrame.height = sourceFrame.height;
	
	        // lets play the padding after we fit the element to the screen.
	        // this should stop the strange side effects that can occur when cropping to the edges
	
	        var renderTarget = this.getPotRenderTarget(renderer.gl, sourceFrame.width, sourceFrame.height, resolution);
	
	        currentState.target = target;
	        currentState.filters = filters;
	        currentState.resolution = resolution;
	        currentState.renderTarget = renderTarget;
	
	        // bind the render target to draw the shape in the top corner..
	
	        renderTarget.setFrame(destinationFrame, sourceFrame);
	        // bind the render target
	        renderer.bindRenderTarget(renderTarget);
	
	        // clear the renderTarget
	        renderer.clear(); // [0.5,0.5,0.5, 1.0]);
	    };
	
	    /**
	     * Pops off the filter and applies it.
	     *
	     */
	
	
	    FilterManager.prototype.popFilter = function popFilter() {
	        var filterData = this.filterData;
	
	        var lastState = filterData.stack[filterData.index - 1];
	        var currentState = filterData.stack[filterData.index];
	
	        this.quad.map(currentState.renderTarget.size, currentState.sourceFrame).upload();
	
	        var filters = currentState.filters;
	
	        if (filters.length === 1) {
	            filters[0].apply(this, currentState.renderTarget, lastState.renderTarget, false);
	            this.freePotRenderTarget(currentState.renderTarget);
	        } else {
	            var flip = currentState.renderTarget;
	            var flop = this.getPotRenderTarget(this.renderer.gl, currentState.sourceFrame.width, currentState.sourceFrame.height, currentState.resolution);
	
	            flop.setFrame(currentState.destinationFrame, currentState.sourceFrame);
	
	            var i = 0;
	
	            for (i = 0; i < filters.length - 1; ++i) {
	                filters[i].apply(this, flip, flop, true);
	
	                var t = flip;
	
	                flip = flop;
	                flop = t;
	            }
	
	            filters[i].apply(this, flip, lastState.renderTarget, false);
	
	            this.freePotRenderTarget(flip);
	            this.freePotRenderTarget(flop);
	        }
	
	        filterData.index--;
	
	        if (filterData.index === 0) {
	            this.filterData = null;
	        }
	    };
	
	    /**
	     * Draws a filter.
	     *
	     * @param {PIXI.Filter} filter - The filter to draw.
	     * @param {PIXI.RenderTarget} input - The input render target.
	     * @param {PIXI.RenderTarget} output - The target to output to.
	     * @param {boolean} clear - Should the output be cleared before rendering to it
	     */
	
	
	    FilterManager.prototype.applyFilter = function applyFilter(filter, input, output, clear) {
	        var renderer = this.renderer;
	        var gl = renderer.gl;
	
	        var shader = filter.glShaders[renderer.CONTEXT_UID];
	
	        // cacheing..
	        if (!shader) {
	            if (filter.glShaderKey) {
	                shader = this.shaderCache[filter.glShaderKey];
	
	                if (!shader) {
	                    shader = new _Shader2.default(this.gl, filter.vertexSrc, filter.fragmentSrc);
	
	                    filter.glShaders[renderer.CONTEXT_UID] = this.shaderCache[filter.glShaderKey] = shader;
	                }
	            } else {
	                shader = filter.glShaders[renderer.CONTEXT_UID] = new _Shader2.default(this.gl, filter.vertexSrc, filter.fragmentSrc);
	            }
	
	            // TODO - this only needs to be done once?
	            renderer.bindVao(null);
	
	            this.quad.initVao(shader);
	        }
	
	        renderer.bindVao(this.quad.vao);
	
	        renderer.bindRenderTarget(output);
	
	        if (clear) {
	            gl.disable(gl.SCISSOR_TEST);
	            renderer.clear(); // [1, 1, 1, 1]);
	            gl.enable(gl.SCISSOR_TEST);
	        }
	
	        // in case the render target is being masked using a scissor rect
	        if (output === renderer.maskManager.scissorRenderTarget) {
	            renderer.maskManager.pushScissorMask(null, renderer.maskManager.scissorData);
	        }
	
	        renderer.bindShader(shader);
	
	        // this syncs the pixi filters  uniforms with glsl uniforms
	        this.syncUniforms(shader, filter);
	
	        renderer.state.setBlendMode(filter.blendMode);
	
	        // temporary bypass cache..
	        var tex = this.renderer.boundTextures[0];
	
	        gl.activeTexture(gl.TEXTURE0);
	        gl.bindTexture(gl.TEXTURE_2D, input.texture.texture);
	
	        this.quad.vao.draw(this.renderer.gl.TRIANGLES, 6, 0);
	
	        // restore cache.
	        gl.bindTexture(gl.TEXTURE_2D, tex._glTextures[this.renderer.CONTEXT_UID].texture);
	    };
	
	    /**
	     * Uploads the uniforms of the filter.
	     *
	     * @param {GLShader} shader - The underlying gl shader.
	     * @param {PIXI.Filter} filter - The filter we are synchronizing.
	     */
	
	
	    FilterManager.prototype.syncUniforms = function syncUniforms(shader, filter) {
	        var uniformData = filter.uniformData;
	        var uniforms = filter.uniforms;
	
	        // 0 is reserved for the pixi texture so we start at 1!
	        var textureCount = 1;
	        var currentState = void 0;
	
	        if (shader.uniforms.data.filterArea) {
	            currentState = this.filterData.stack[this.filterData.index];
	            var filterArea = shader.uniforms.filterArea;
	
	            filterArea[0] = currentState.renderTarget.size.width;
	            filterArea[1] = currentState.renderTarget.size.height;
	            filterArea[2] = currentState.sourceFrame.x;
	            filterArea[3] = currentState.sourceFrame.y;
	
	            shader.uniforms.filterArea = filterArea;
	        }
	
	        // use this to clamp displaced texture coords so they belong to filterArea
	        // see displacementFilter fragment shader for an example
	        if (shader.uniforms.data.filterClamp) {
	            currentState = this.filterData.stack[this.filterData.index];
	
	            var filterClamp = shader.uniforms.filterClamp;
	
	            filterClamp[0] = 0;
	            filterClamp[1] = 0;
	            filterClamp[2] = (currentState.sourceFrame.width - 1) / currentState.renderTarget.size.width;
	            filterClamp[3] = (currentState.sourceFrame.height - 1) / currentState.renderTarget.size.height;
	
	            shader.uniforms.filterClamp = filterClamp;
	        }
	
	        // TODO Cacheing layer..
	        for (var i in uniformData) {
	            if (uniformData[i].type === 'sampler2D' && uniforms[i] !== 0) {
	                if (uniforms[i].baseTexture) {
	                    shader.uniforms[i] = this.renderer.bindTexture(uniforms[i].baseTexture, textureCount);
	                } else {
	                    shader.uniforms[i] = textureCount;
	
	                    // TODO
	                    // this is helpful as renderTargets can also be set.
	                    // Although thinking about it, we could probably
	                    // make the filter texture cache return a RenderTexture
	                    // rather than a renderTarget
	                    var gl = this.renderer.gl;
	
	                    gl.activeTexture(gl.TEXTURE0 + textureCount);
	                    uniforms[i].texture.bind();
	                }
	
	                textureCount++;
	            } else if (uniformData[i].type === 'mat3') {
	                // check if its pixi matrix..
	                if (uniforms[i].a !== undefined) {
	                    shader.uniforms[i] = uniforms[i].toArray(true);
	                } else {
	                    shader.uniforms[i] = uniforms[i];
	                }
	            } else if (uniformData[i].type === 'vec2') {
	                // check if its a point..
	                if (uniforms[i].x !== undefined) {
	                    var val = shader.uniforms[i] || new Float32Array(2);
	
	                    val[0] = uniforms[i].x;
	                    val[1] = uniforms[i].y;
	                    shader.uniforms[i] = val;
	                } else {
	                    shader.uniforms[i] = uniforms[i];
	                }
	            } else if (uniformData[i].type === 'float') {
	                if (shader.uniforms.data[i].value !== uniformData[i]) {
	                    shader.uniforms[i] = uniforms[i];
	                }
	            } else {
	                shader.uniforms[i] = uniforms[i];
	            }
	        }
	    };
	
	    /**
	     * Gets a render target from the pool, or creates a new one.
	     *
	     * @param {boolean} clear - Should we clear the render texture when we get it?
	     * @param {number} resolution - The resolution of the target.
	     * @return {PIXI.RenderTarget} The new render target
	     */
	
	
	    FilterManager.prototype.getRenderTarget = function getRenderTarget(clear, resolution) {
	        var currentState = this.filterData.stack[this.filterData.index];
	        var renderTarget = this.getPotRenderTarget(this.renderer.gl, currentState.sourceFrame.width, currentState.sourceFrame.height, resolution || currentState.resolution);
	
	        renderTarget.setFrame(currentState.destinationFrame, currentState.sourceFrame);
	
	        return renderTarget;
	    };
	
	    /**
	     * Returns a render target to the pool.
	     *
	     * @param {PIXI.RenderTarget} renderTarget - The render target to return.
	     */
	
	
	    FilterManager.prototype.returnRenderTarget = function returnRenderTarget(renderTarget) {
	        this.freePotRenderTarget(renderTarget);
	    };
	
	    /**
	     * Calculates the mapped matrix.
	     *
	     * TODO playing around here.. this is temporary - (will end up in the shader)
	     * this returns a matrix that will normalise map filter cords in the filter to screen space
	     *
	     * @param {PIXI.Matrix} outputMatrix - the matrix to output to.
	     * @return {PIXI.Matrix} The mapped matrix.
	     */
	
	
	    FilterManager.prototype.calculateScreenSpaceMatrix = function calculateScreenSpaceMatrix(outputMatrix) {
	        var currentState = this.filterData.stack[this.filterData.index];
	
	        return filterTransforms.calculateScreenSpaceMatrix(outputMatrix, currentState.sourceFrame, currentState.renderTarget.size);
	    };
	
	    /**
	     * Multiply vTextureCoord to this matrix to achieve (0,0,1,1) for filterArea
	     *
	     * @param {PIXI.Matrix} outputMatrix - The matrix to output to.
	     * @return {PIXI.Matrix} The mapped matrix.
	     */
	
	
	    FilterManager.prototype.calculateNormalizedScreenSpaceMatrix = function calculateNormalizedScreenSpaceMatrix(outputMatrix) {
	        var currentState = this.filterData.stack[this.filterData.index];
	
	        return filterTransforms.calculateNormalizedScreenSpaceMatrix(outputMatrix, currentState.sourceFrame, currentState.renderTarget.size, currentState.destinationFrame);
	    };
	
	    /**
	     * This will map the filter coord so that a texture can be used based on the transform of a sprite
	     *
	     * @param {PIXI.Matrix} outputMatrix - The matrix to output to.
	     * @param {PIXI.Sprite} sprite - The sprite to map to.
	     * @return {PIXI.Matrix} The mapped matrix.
	     */
	
	
	    FilterManager.prototype.calculateSpriteMatrix = function calculateSpriteMatrix(outputMatrix, sprite) {
	        var currentState = this.filterData.stack[this.filterData.index];
	
	        return filterTransforms.calculateSpriteMatrix(outputMatrix, currentState.sourceFrame, currentState.renderTarget.size, sprite);
	    };
	
	    /**
	     * Destroys this Filter Manager.
	     *
	     */
	
	
	    FilterManager.prototype.destroy = function destroy() {
	        this.shaderCache = [];
	        this.emptyPool();
	    };
	
	    /**
	     * Gets a Power-of-Two render texture.
	     *
	     * TODO move to a seperate class could be on renderer?
	     * also - could cause issue with multiple contexts?
	     *
	     * @private
	     * @param {WebGLRenderingContext} gl - The webgl rendering context
	     * @param {number} minWidth - The minimum width of the render target.
	     * @param {number} minHeight - The minimum height of the render target.
	     * @param {number} resolution - The resolution of the render target.
	     * @return {PIXI.RenderTarget} The new render target.
	     */
	
	
	    FilterManager.prototype.getPotRenderTarget = function getPotRenderTarget(gl, minWidth, minHeight, resolution) {
	        // TODO you could return a bigger texture if there is not one in the pool?
	        minWidth = _bitTwiddle2.default.nextPow2(minWidth * resolution);
	        minHeight = _bitTwiddle2.default.nextPow2(minHeight * resolution);
	
	        var key = (minWidth & 0xFFFF) << 16 | minHeight & 0xFFFF;
	
	        if (!this.pool[key]) {
	            this.pool[key] = [];
	        }
	
	        var renderTarget = this.pool[key].pop();
	
	        // creating render target will cause texture to be bound!
	        if (!renderTarget) {
	            // temporary bypass cache..
	            var tex = this.renderer.boundTextures[0];
	
	            gl.activeTexture(gl.TEXTURE0);
	
	            // internally - this will cause a texture to be bound..
	            renderTarget = new _RenderTarget2.default(gl, minWidth, minHeight, null, 1);
	
	            // set the current one back
	            gl.bindTexture(gl.TEXTURE_2D, tex._glTextures[this.renderer.CONTEXT_UID].texture);
	        }
	
	        // manually tweak the resolution...
	        // this will not modify the size of the frame buffer, just its resolution.
	        renderTarget.resolution = resolution;
	        renderTarget.defaultFrame.width = renderTarget.size.width = minWidth / resolution;
	        renderTarget.defaultFrame.height = renderTarget.size.height = minHeight / resolution;
	
	        return renderTarget;
	    };
	
	    /**
	     * Empties the texture pool.
	     *
	     */
	
	
	    FilterManager.prototype.emptyPool = function emptyPool() {
	        for (var i in this.pool) {
	            var textures = this.pool[i];
	
	            if (textures) {
	                for (var j = 0; j < textures.length; j++) {
	                    textures[j].destroy(true);
	                }
	            }
	        }
	
	        this.pool = {};
	    };
	
	    /**
	     * Frees a render target back into the pool.
	     *
	     * @param {PIXI.RenderTarget} renderTarget - The renderTarget to free
	     */
	
	
	    FilterManager.prototype.freePotRenderTarget = function freePotRenderTarget(renderTarget) {
	        var minWidth = renderTarget.size.width * renderTarget.resolution;
	        var minHeight = renderTarget.size.height * renderTarget.resolution;
	        var key = (minWidth & 0xFFFF) << 16 | minHeight & 0xFFFF;
	
	        this.pool[key].push(renderTarget);
	    };
	
	    return FilterManager;
	}(_WebGLManager3.default);
	
	exports.default = FilterManager;
	//# sourceMappingURL=FilterManager.js.map

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _math = __webpack_require__(14);
	
	var _const = __webpack_require__(12);
	
	var _settings = __webpack_require__(43);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	var _pixiGlCore = __webpack_require__(24);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var RESOLUTION = _settings2.default.RESOLUTION,
	    SCALE_MODE = _settings2.default.SCALE_MODE;
	
	/**
	 * @class
	 * @memberof PIXI
	 */
	
	var RenderTarget = function () {
	  /**
	   * @param {WebGLRenderingContext} gl - The current WebGL drawing context
	   * @param {number} [width=0] - the horizontal range of the filter
	   * @param {number} [height=0] - the vertical range of the filter
	   * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values
	   * @param {number} [resolution=1] - The current resolution / device pixel ratio
	   * @param {boolean} [root=false] - Whether this object is the root element or not
	   */
	  function RenderTarget(gl, width, height, scaleMode, resolution, root) {
	    _classCallCheck(this, RenderTarget);
	
	    // TODO Resolution could go here ( eg low res blurs )
	
	    /**
	     * The current WebGL drawing context.
	     *
	     * @member {WebGLRenderingContext}
	     */
	    this.gl = gl;
	
	    // next time to create a frame buffer and texture
	
	    /**
	     * A frame buffer
	     *
	     * @member {PIXI.glCore.GLFramebuffer}
	     */
	    this.frameBuffer = null;
	
	    /**
	     * The texture
	     *
	     * @member {PIXI.glCore.GLTexture}
	     */
	    this.texture = null;
	
	    /**
	     * The background colour of this render target, as an array of [r,g,b,a] values
	     *
	     * @member {number[]}
	     */
	    this.clearColor = [0, 0, 0, 0];
	
	    /**
	     * The size of the object as a rectangle
	     *
	     * @member {PIXI.Rectangle}
	     */
	    this.size = new _math.Rectangle(0, 0, 1, 1);
	
	    /**
	     * The current resolution / device pixel ratio
	     *
	     * @member {number}
	     * @default 1
	     */
	    this.resolution = resolution || RESOLUTION;
	
	    /**
	     * The projection matrix
	     *
	     * @member {PIXI.Matrix}
	     */
	    this.projectionMatrix = new _math.Matrix();
	
	    /**
	     * The object's transform
	     *
	     * @member {PIXI.Matrix}
	     */
	    this.transform = null;
	
	    /**
	     * The frame.
	     *
	     * @member {PIXI.Rectangle}
	     */
	    this.frame = null;
	
	    /**
	     * The stencil buffer stores masking data for the render target
	     *
	     * @member {glCore.GLBuffer}
	     */
	    this.defaultFrame = new _math.Rectangle();
	    this.destinationFrame = null;
	    this.sourceFrame = null;
	
	    /**
	     * The stencil buffer stores masking data for the render target
	     *
	     * @member {glCore.GLBuffer}
	     */
	    this.stencilBuffer = null;
	
	    /**
	     * The data structure for the stencil masks
	     *
	     * @member {PIXI.Graphics[]}
	     */
	    this.stencilMaskStack = [];
	
	    /**
	     * Stores filter data for the render target
	     *
	     * @member {object[]}
	     */
	    this.filterData = null;
	
	    /**
	     * The scale mode.
	     *
	     * @member {number}
	     * @default PIXI.settings.SCALE_MODE
	     * @see PIXI.SCALE_MODES
	     */
	    this.scaleMode = scaleMode || SCALE_MODE;
	
	    /**
	     * Whether this object is the root element or not
	     *
	     * @member {boolean}
	     */
	    this.root = root;
	
	    if (!this.root) {
	      this.frameBuffer = _pixiGlCore.GLFramebuffer.createRGBA(gl, 100, 100);
	
	      if (this.scaleMode === _const.SCALE_MODES.NEAREST) {
	        this.frameBuffer.texture.enableNearestScaling();
	      } else {
	        this.frameBuffer.texture.enableLinearScaling();
	      }
	      /*
	          A frame buffer needs a target to render to..
	          create a texture and bind it attach it to the framebuffer..
	       */
	
	      // this is used by the base texture
	      this.texture = this.frameBuffer.texture;
	    } else {
	      // make it a null framebuffer..
	      this.frameBuffer = new _pixiGlCore.GLFramebuffer(gl, 100, 100);
	      this.frameBuffer.framebuffer = null;
	    }
	
	    this.setFrame();
	
	    this.resize(width, height);
	  }
	
	  /**
	   * Clears the filter texture.
	   *
	   * @param {number[]} [clearColor=this.clearColor] - Array of [r,g,b,a] to clear the framebuffer
	   */
	
	
	  RenderTarget.prototype.clear = function clear(clearColor) {
	    var cc = clearColor || this.clearColor;
	
	    this.frameBuffer.clear(cc[0], cc[1], cc[2], cc[3]); // r,g,b,a);
	  };
	
	  /**
	   * Binds the stencil buffer.
	   *
	   */
	
	
	  RenderTarget.prototype.attachStencilBuffer = function attachStencilBuffer() {
	    // TODO check if stencil is done?
	    /**
	     * The stencil buffer is used for masking in pixi
	     * lets create one and then add attach it to the framebuffer..
	     */
	    if (!this.root) {
	      this.frameBuffer.enableStencil();
	    }
	  };
	
	  /**
	   * Sets the frame of the render target.
	   *
	   * @param {Rectangle} destinationFrame - The destination frame.
	   * @param {Rectangle} sourceFrame - The source frame.
	   */
	
	
	  RenderTarget.prototype.setFrame = function setFrame(destinationFrame, sourceFrame) {
	    this.destinationFrame = destinationFrame || this.destinationFrame || this.defaultFrame;
	    this.sourceFrame = sourceFrame || this.sourceFrame || destinationFrame;
	  };
	
	  /**
	   * Binds the buffers and initialises the viewport.
	   *
	   */
	
	
	  RenderTarget.prototype.activate = function activate() {
	    // TOOD refactor usage of frame..
	    var gl = this.gl;
	
	    // make sure the texture is unbound!
	    this.frameBuffer.bind();
	
	    this.calculateProjection(this.destinationFrame, this.sourceFrame);
	
	    if (this.transform) {
	      this.projectionMatrix.append(this.transform);
	    }
	
	    // TODO add a check as them may be the same!
	    if (this.destinationFrame !== this.sourceFrame) {
	      gl.enable(gl.SCISSOR_TEST);
	      gl.scissor(this.destinationFrame.x | 0, this.destinationFrame.y | 0, this.destinationFrame.width * this.resolution | 0, this.destinationFrame.height * this.resolution | 0);
	    } else {
	      gl.disable(gl.SCISSOR_TEST);
	    }
	
	    // TODO - does not need to be updated all the time??
	    gl.viewport(this.destinationFrame.x | 0, this.destinationFrame.y | 0, this.destinationFrame.width * this.resolution | 0, this.destinationFrame.height * this.resolution | 0);
	  };
	
	  /**
	   * Updates the projection matrix based on a projection frame (which is a rectangle)
	   *
	   * @param {Rectangle} destinationFrame - The destination frame.
	   * @param {Rectangle} sourceFrame - The source frame.
	   */
	
	
	  RenderTarget.prototype.calculateProjection = function calculateProjection(destinationFrame, sourceFrame) {
	    var pm = this.projectionMatrix;
	
	    sourceFrame = sourceFrame || destinationFrame;
	
	    pm.identity();
	
	    // TODO: make dest scale source
	    if (!this.root) {
	      pm.a = 1 / destinationFrame.width * 2;
	      pm.d = 1 / destinationFrame.height * 2;
	
	      pm.tx = -1 - sourceFrame.x * pm.a;
	      pm.ty = -1 - sourceFrame.y * pm.d;
	    } else {
	      pm.a = 1 / destinationFrame.width * 2;
	      pm.d = -1 / destinationFrame.height * 2;
	
	      pm.tx = -1 - sourceFrame.x * pm.a;
	      pm.ty = 1 - sourceFrame.y * pm.d;
	    }
	  };
	
	  /**
	   * Resizes the texture to the specified width and height
	   *
	   * @param {number} width - the new width of the texture
	   * @param {number} height - the new height of the texture
	   */
	
	
	  RenderTarget.prototype.resize = function resize(width, height) {
	    width = width | 0;
	    height = height | 0;
	
	    if (this.size.width === width && this.size.height === height) {
	      return;
	    }
	
	    this.size.width = width;
	    this.size.height = height;
	
	    this.defaultFrame.width = width;
	    this.defaultFrame.height = height;
	
	    this.frameBuffer.resize(width * this.resolution, height * this.resolution);
	
	    var projectionFrame = this.frame || this.size;
	
	    this.calculateProjection(projectionFrame);
	  };
	
	  /**
	   * Destroys the render target.
	   *
	   */
	
	
	  RenderTarget.prototype.destroy = function destroy() {
	    this.frameBuffer.destroy();
	
	    this.frameBuffer = null;
	    this.texture = null;
	  };
	
	  return RenderTarget;
	}();
	
	exports.default = RenderTarget;
	//# sourceMappingURL=RenderTarget.js.map

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _pixiGlCore = __webpack_require__(24);
	
	var _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);
	
	var _createIndicesForQuads = __webpack_require__(92);
	
	var _createIndicesForQuads2 = _interopRequireDefault(_createIndicesForQuads);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Helper class to create a quad
	 *
	 * @class
	 * @memberof PIXI
	 */
	var Quad = function () {
	  /**
	   * @param {WebGLRenderingContext} gl - The gl context for this quad to use.
	   * @param {object} state - TODO: Description
	   */
	  function Quad(gl, state) {
	    _classCallCheck(this, Quad);
	
	    /*
	     * the current WebGL drawing context
	     *
	     * @member {WebGLRenderingContext}
	     */
	    this.gl = gl;
	
	    /**
	     * An array of vertices
	     *
	     * @member {Float32Array}
	     */
	    this.vertices = new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]);
	
	    /**
	     * The Uvs of the quad
	     *
	     * @member {Float32Array}
	     */
	    this.uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);
	
	    this.interleaved = new Float32Array(8 * 2);
	
	    for (var i = 0; i < 4; i++) {
	      this.interleaved[i * 4] = this.vertices[i * 2];
	      this.interleaved[i * 4 + 1] = this.vertices[i * 2 + 1];
	      this.interleaved[i * 4 + 2] = this.uvs[i * 2];
	      this.interleaved[i * 4 + 3] = this.uvs[i * 2 + 1];
	    }
	
	    /*
	     * @member {Uint16Array} An array containing the indices of the vertices
	     */
	    this.indices = (0, _createIndicesForQuads2.default)(1);
	
	    /*
	     * @member {glCore.GLBuffer} The vertex buffer
	     */
	    this.vertexBuffer = _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl, this.interleaved, gl.STATIC_DRAW);
	
	    /*
	     * @member {glCore.GLBuffer} The index buffer
	     */
	    this.indexBuffer = _pixiGlCore2.default.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);
	
	    /*
	     * @member {glCore.VertexArrayObject} The index buffer
	     */
	    this.vao = new _pixiGlCore2.default.VertexArrayObject(gl, state);
	  }
	
	  /**
	   * Initialises the vaos and uses the shader.
	   *
	   * @param {PIXI.Shader} shader - the shader to use
	   */
	
	
	  Quad.prototype.initVao = function initVao(shader) {
	    this.vao.clear().addIndex(this.indexBuffer).addAttribute(this.vertexBuffer, shader.attributes.aVertexPosition, this.gl.FLOAT, false, 4 * 4, 0).addAttribute(this.vertexBuffer, shader.attributes.aTextureCoord, this.gl.FLOAT, false, 4 * 4, 2 * 4);
	  };
	
	  /**
	   * Maps two Rectangle to the quad.
	   *
	   * @param {PIXI.Rectangle} targetTextureFrame - the first rectangle
	   * @param {PIXI.Rectangle} destinationFrame - the second rectangle
	   * @return {PIXI.Quad} Returns itself.
	   */
	
	
	  Quad.prototype.map = function map(targetTextureFrame, destinationFrame) {
	    var x = 0; // destinationFrame.x / targetTextureFrame.width;
	    var y = 0; // destinationFrame.y / targetTextureFrame.height;
	
	    this.uvs[0] = x;
	    this.uvs[1] = y;
	
	    this.uvs[2] = x + destinationFrame.width / targetTextureFrame.width;
	    this.uvs[3] = y;
	
	    this.uvs[4] = x + destinationFrame.width / targetTextureFrame.width;
	    this.uvs[5] = y + destinationFrame.height / targetTextureFrame.height;
	
	    this.uvs[6] = x;
	    this.uvs[7] = y + destinationFrame.height / targetTextureFrame.height;
	
	    x = destinationFrame.x;
	    y = destinationFrame.y;
	
	    this.vertices[0] = x;
	    this.vertices[1] = y;
	
	    this.vertices[2] = x + destinationFrame.width;
	    this.vertices[3] = y;
	
	    this.vertices[4] = x + destinationFrame.width;
	    this.vertices[5] = y + destinationFrame.height;
	
	    this.vertices[6] = x;
	    this.vertices[7] = y + destinationFrame.height;
	
	    return this;
	  };
	
	  /**
	   * Binds the buffer and uploads the data
	   *
	   * @return {PIXI.Quad} Returns itself.
	   */
	
	
	  Quad.prototype.upload = function upload() {
	    for (var i = 0; i < 4; i++) {
	      this.interleaved[i * 4] = this.vertices[i * 2];
	      this.interleaved[i * 4 + 1] = this.vertices[i * 2 + 1];
	      this.interleaved[i * 4 + 2] = this.uvs[i * 2];
	      this.interleaved[i * 4 + 3] = this.uvs[i * 2 + 1];
	    }
	
	    this.vertexBuffer.upload(this.interleaved);
	
	    return this;
	  };
	
	  /**
	   * Removes this quad from WebGL
	   */
	
	
	  Quad.prototype.destroy = function destroy() {
	    var gl = this.gl;
	
	    gl.deleteBuffer(this.vertexBuffer);
	    gl.deleteBuffer(this.indexBuffer);
	  };
	
	  return Quad;
	}();
	
	exports.default = Quad;
	//# sourceMappingURL=Quad.js.map

/***/ },
/* 92 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = createIndicesForQuads;
	/**
	 * Generic Mask Stack data structure
	 *
	 * @memberof PIXI
	 * @function createIndicesForQuads
	 * @private
	 * @param {number} size - Number of quads
	 * @return {Uint16Array} indices
	 */
	function createIndicesForQuads(size) {
	    // the total number of indices in our array, there are 6 points per quad.
	
	    var totalIndices = size * 6;
	
	    var indices = new Uint16Array(totalIndices);
	
	    // fill the indices with the quads to draw
	    for (var i = 0, j = 0; i < totalIndices; i += 6, j += 4) {
	        indices[i + 0] = j + 0;
	        indices[i + 1] = j + 1;
	        indices[i + 2] = j + 2;
	        indices[i + 3] = j + 0;
	        indices[i + 4] = j + 2;
	        indices[i + 5] = j + 3;
	    }
	
	    return indices;
	}
	//# sourceMappingURL=createIndicesForQuads.js.map

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _pixiGlCore = __webpack_require__(24);
	
	var _settings = __webpack_require__(43);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var PRECISION = _settings2.default.PRECISION;
	
	
	function checkPrecision(src) {
	    if (src instanceof Array) {
	        if (src[0].substring(0, 9) !== 'precision') {
	            var copy = src.slice(0);
	
	            copy.unshift('precision ' + PRECISION + ' float;');
	
	            return copy;
	        }
	    } else if (src.substring(0, 9) !== 'precision') {
	        return 'precision ' + PRECISION + ' float;\n' + src;
	    }
	
	    return src;
	}
	
	/**
	 * Wrapper class, webGL Shader for Pixi.
	 * Adds precision string if vertexSrc or fragmentSrc have no mention of it.
	 *
	 * @class
	 * @extends GLShader
	 * @memberof PIXI
	 */
	
	var Shader = function (_GLShader) {
	    _inherits(Shader, _GLShader);
	
	    /**
	     *
	     * @param {WebGLRenderingContext} gl - The current WebGL rendering context
	     * @param {string|string[]} vertexSrc - The vertex shader source as an array of strings.
	     * @param {string|string[]} fragmentSrc - The fragment shader source as an array of strings.
	     */
	    function Shader(gl, vertexSrc, fragmentSrc) {
	        _classCallCheck(this, Shader);
	
	        return _possibleConstructorReturn(this, _GLShader.call(this, gl, checkPrecision(vertexSrc), checkPrecision(fragmentSrc)));
	    }
	
	    return Shader;
	}(_pixiGlCore.GLShader);
	
	exports.default = Shader;
	//# sourceMappingURL=Shader.js.map

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.calculateScreenSpaceMatrix = calculateScreenSpaceMatrix;
	exports.calculateNormalizedScreenSpaceMatrix = calculateNormalizedScreenSpaceMatrix;
	exports.calculateSpriteMatrix = calculateSpriteMatrix;
	
	var _math = __webpack_require__(14);
	
	/*
	 * Calculates the mapped matrix
	 * @param filterArea {Rectangle} The filter area
	 * @param sprite {Sprite} the target sprite
	 * @param outputMatrix {Matrix} @alvin
	 */
	// TODO playing around here.. this is temporary - (will end up in the shader)
	// this returns a matrix that will normalise map filter cords in the filter to screen space
	function calculateScreenSpaceMatrix(outputMatrix, filterArea, textureSize) {
	    // let worldTransform = sprite.worldTransform.copy(Matrix.TEMP_MATRIX),
	    // let texture = {width:1136, height:700};//sprite._texture.baseTexture;
	
	    // TODO unwrap?
	    var mappedMatrix = outputMatrix.identity();
	
	    mappedMatrix.translate(filterArea.x / textureSize.width, filterArea.y / textureSize.height);
	
	    mappedMatrix.scale(textureSize.width, textureSize.height);
	
	    return mappedMatrix;
	}
	
	function calculateNormalizedScreenSpaceMatrix(outputMatrix, filterArea, textureSize) {
	    var mappedMatrix = outputMatrix.identity();
	
	    mappedMatrix.translate(filterArea.x / textureSize.width, filterArea.y / textureSize.height);
	
	    var translateScaleX = textureSize.width / filterArea.width;
	    var translateScaleY = textureSize.height / filterArea.height;
	
	    mappedMatrix.scale(translateScaleX, translateScaleY);
	
	    return mappedMatrix;
	}
	
	// this will map the filter coord so that a texture can be used based on the transform of a sprite
	function calculateSpriteMatrix(outputMatrix, filterArea, textureSize, sprite) {
	    var worldTransform = sprite.worldTransform.copy(_math.Matrix.TEMP_MATRIX);
	    var texture = sprite._texture.baseTexture;
	
	    // TODO unwrap?
	    var mappedMatrix = outputMatrix.identity();
	
	    // scale..
	    var ratio = textureSize.height / textureSize.width;
	
	    mappedMatrix.translate(filterArea.x / textureSize.width, filterArea.y / textureSize.height);
	
	    mappedMatrix.scale(1, ratio);
	
	    var translateScaleX = textureSize.width / texture.width;
	    var translateScaleY = textureSize.height / texture.height;
	
	    worldTransform.tx /= texture.width * translateScaleX;
	
	    // this...?  free beer for anyone who can explain why this makes sense!
	    worldTransform.ty /= texture.width * translateScaleX;
	    // worldTransform.ty /= texture.height * translateScaleY;
	
	    worldTransform.invert();
	    mappedMatrix.prepend(worldTransform);
	
	    // apply inverse scale..
	    mappedMatrix.scale(1, 1 / ratio);
	
	    mappedMatrix.scale(translateScaleX, translateScaleY);
	
	    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);
	
	    return mappedMatrix;
	}
	//# sourceMappingURL=filterTransforms.js.map

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _pixiGlCore = __webpack_require__(24);
	
	var _const = __webpack_require__(12);
	
	var _RenderTarget = __webpack_require__(90);
	
	var _RenderTarget2 = _interopRequireDefault(_RenderTarget);
	
	var _utils = __webpack_require__(51);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Helper class to create a webGL Texture
	 *
	 * @class
	 * @memberof PIXI
	 */
	var TextureManager = function () {
	    /**
	     * @param {PIXI.WebGLRenderer} renderer - A reference to the current renderer
	     */
	    function TextureManager(renderer) {
	        _classCallCheck(this, TextureManager);
	
	        /**
	         * A reference to the current renderer
	         *
	         * @member {PIXI.WebGLRenderer}
	         */
	        this.renderer = renderer;
	
	        /**
	         * The current WebGL rendering context
	         *
	         * @member {WebGLRenderingContext}
	         */
	        this.gl = renderer.gl;
	
	        /**
	         * Track textures in the renderer so we can no longer listen to them on destruction.
	         *
	         * @member {Array<*>}
	         * @private
	         */
	        this._managedTextures = [];
	    }
	
	    /**
	     * Binds a texture.
	     *
	     */
	
	
	    TextureManager.prototype.bindTexture = function bindTexture() {}
	    // empty
	
	
	    /**
	     * Gets a texture.
	     *
	     */
	    ;
	
	    TextureManager.prototype.getTexture = function getTexture() {}
	    // empty
	
	
	    /**
	     * Updates and/or Creates a WebGL texture for the renderer's context.
	     *
	     * @param {PIXI.BaseTexture|PIXI.Texture} texture - the texture to update
	     * @param {Number} location - the location the texture will be bound to.
	     * @return {GLTexture} The gl texture.
	     */
	    ;
	
	    TextureManager.prototype.updateTexture = function updateTexture(texture, location) {
	        // assume it good!
	        // texture = texture.baseTexture || texture;
	        location = location || 0;
	
	        var gl = this.gl;
	
	        var isRenderTexture = !!texture._glRenderTargets;
	
	        if (!texture.hasLoaded) {
	            return null;
	        }
	
	        gl.activeTexture(gl.TEXTURE0 + location);
	
	        var glTexture = texture._glTextures[this.renderer.CONTEXT_UID];
	
	        if (!glTexture) {
	            if (isRenderTexture) {
	                var renderTarget = new _RenderTarget2.default(this.gl, texture.width, texture.height, texture.scaleMode, texture.resolution);
	
	                renderTarget.resize(texture.width, texture.height);
	                texture._glRenderTargets[this.renderer.CONTEXT_UID] = renderTarget;
	                glTexture = renderTarget.texture;
	            } else {
	                glTexture = new _pixiGlCore.GLTexture(this.gl, null, null, null, null);
	                glTexture.bind(location);
	                glTexture.premultiplyAlpha = true;
	                glTexture.upload(texture.source);
	            }
	
	            texture._glTextures[this.renderer.CONTEXT_UID] = glTexture;
	
	            texture.on('update', this.updateTexture, this);
	            texture.on('dispose', this.destroyTexture, this);
	
	            this._managedTextures.push(texture);
	
	            if (texture.isPowerOfTwo) {
	                if (texture.mipmap) {
	                    glTexture.enableMipmap();
	                }
	
	                if (texture.wrapMode === _const.WRAP_MODES.CLAMP) {
	                    glTexture.enableWrapClamp();
	                } else if (texture.wrapMode === _const.WRAP_MODES.REPEAT) {
	                    glTexture.enableWrapRepeat();
	                } else {
	                    glTexture.enableWrapMirrorRepeat();
	                }
	            } else {
	                glTexture.enableWrapClamp();
	            }
	
	            if (texture.scaleMode === _const.SCALE_MODES.NEAREST) {
	                glTexture.enableNearestScaling();
	            } else {
	                glTexture.enableLinearScaling();
	            }
	        }
	        // the texture already exists so we only need to update it..
	        else if (isRenderTexture) {
	                texture._glRenderTargets[this.renderer.CONTEXT_UID].resize(texture.width, texture.height);
	            } else {
	                glTexture.upload(texture.source);
	            }
	
	        this.renderer.boundTextures[location] = texture;
	
	        return glTexture;
	    };
	
	    /**
	     * Deletes the texture from WebGL
	     *
	     * @param {PIXI.BaseTexture|PIXI.Texture} texture - the texture to destroy
	     * @param {boolean} [skipRemove=false] - Whether to skip removing the texture from the TextureManager.
	     */
	
	
	    TextureManager.prototype.destroyTexture = function destroyTexture(texture, skipRemove) {
	        texture = texture.baseTexture || texture;
	
	        if (!texture.hasLoaded) {
	            return;
	        }
	
	        if (texture._glTextures[this.renderer.CONTEXT_UID]) {
	            this.renderer.unbindTexture(texture);
	
	            texture._glTextures[this.renderer.CONTEXT_UID].destroy();
	            texture.off('update', this.updateTexture, this);
	            texture.off('dispose', this.destroyTexture, this);
	
	            delete texture._glTextures[this.renderer.CONTEXT_UID];
	
	            if (!skipRemove) {
	                var i = this._managedTextures.indexOf(texture);
	
	                if (i !== -1) {
	                    (0, _utils.removeItems)(this._managedTextures, i, 1);
	                }
	            }
	        }
	    };
	
	    /**
	     * Deletes all the textures from WebGL
	     */
	
	
	    TextureManager.prototype.removeAll = function removeAll() {
	        // empty all the old gl textures as they are useless now
	        for (var i = 0; i < this._managedTextures.length; ++i) {
	            var texture = this._managedTextures[i];
	
	            if (texture._glTextures[this.renderer.CONTEXT_UID]) {
	                delete texture._glTextures[this.renderer.CONTEXT_UID];
	            }
	        }
	    };
	
	    /**
	     * Destroys this manager and removes all its textures
	     */
	
	
	    TextureManager.prototype.destroy = function destroy() {
	        // destroy managed textures
	        for (var i = 0; i < this._managedTextures.length; ++i) {
	            var texture = this._managedTextures[i];
	
	            this.destroyTexture(texture, true);
	
	            texture.off('update', this.updateTexture, this);
	            texture.off('dispose', this.destroyTexture, this);
	        }
	
	        this._managedTextures = null;
	    };
	
	    return TextureManager;
	}();
	
	exports.default = TextureManager;
	//# sourceMappingURL=TextureManager.js.map

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _const = __webpack_require__(12);
	
	var _settings = __webpack_require__(43);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * TextureGarbageCollector. This class manages the GPU and ensures that it does not get clogged
	 * up with textures that are no longer being used.
	 *
	 * @class
	 * @memberof PIXI
	 */
	var TextureGarbageCollector = function () {
	    /**
	     * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.
	     */
	    function TextureGarbageCollector(renderer) {
	        _classCallCheck(this, TextureGarbageCollector);
	
	        this.renderer = renderer;
	
	        this.count = 0;
	        this.checkCount = 0;
	        this.maxIdle = 60 * 60;
	        this.checkCountMax = 60 * 10;
	
	        this.mode = _settings2.default.GC_MODE;
	    }
	
	    /**
	     * Checks to see when the last time a texture was used
	     * if the texture has not been used for a specified amount of time it will be removed from the GPU
	     */
	
	
	    TextureGarbageCollector.prototype.update = function update() {
	        this.count++;
	
	        if (this.mode === _const.GC_MODES.MANUAL) {
	            return;
	        }
	
	        this.checkCount++;
	
	        if (this.checkCount > this.checkCountMax) {
	            this.checkCount = 0;
	
	            this.run();
	        }
	    };
	
	    /**
	     * Checks to see when the last time a texture was used
	     * if the texture has not been used for a specified amount of time it will be removed from the GPU
	     */
	
	
	    TextureGarbageCollector.prototype.run = function run() {
	        var tm = this.renderer.textureManager;
	        var managedTextures = tm._managedTextures;
	        var wasRemoved = false;
	
	        for (var i = 0; i < managedTextures.length; i++) {
	            var texture = managedTextures[i];
	
	            // only supports non generated textures at the moment!
	            if (!texture._glRenderTargets && this.count - texture.touched > this.maxIdle) {
	                tm.destroyTexture(texture, true);
	                managedTextures[i] = null;
	                wasRemoved = true;
	            }
	        }
	
	        if (wasRemoved) {
	            var j = 0;
	
	            for (var _i = 0; _i < managedTextures.length; _i++) {
	                if (managedTextures[_i] !== null) {
	                    managedTextures[j++] = managedTextures[_i];
	                }
	            }
	
	            managedTextures.length = j;
	        }
	    };
	
	    /**
	     * Removes all the textures within the specified displayObject and its children from the GPU
	     *
	     * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.
	     */
	
	
	    TextureGarbageCollector.prototype.unload = function unload(displayObject) {
	        var tm = this.renderer.textureManager;
	
	        if (displayObject._texture) {
	            tm.destroyTexture(displayObject._texture, true);
	        }
	
	        for (var i = displayObject.children.length - 1; i >= 0; i--) {
	            this.unload(displayObject.children[i]);
	        }
	    };
	
	    return TextureGarbageCollector;
	}();
	
	exports.default = TextureGarbageCollector;
	//# sourceMappingURL=TextureGarbageCollector.js.map

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _mapWebGLBlendModesToPixi = __webpack_require__(98);
	
	var _mapWebGLBlendModesToPixi2 = _interopRequireDefault(_mapWebGLBlendModesToPixi);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var BLEND = 0;
	var DEPTH_TEST = 1;
	var FRONT_FACE = 2;
	var CULL_FACE = 3;
	var BLEND_FUNC = 4;
	
	/**
	 * A WebGL state machines
	 *
	 * @memberof PIXI
	 * @class
	 */
	
	var WebGLState = function () {
	    /**
	     * @param {WebGLRenderingContext} gl - The current WebGL rendering context
	     */
	    function WebGLState(gl) {
	        _classCallCheck(this, WebGLState);
	
	        /**
	         * The current active state
	         *
	         * @member {Uint8Array}
	         */
	        this.activeState = new Uint8Array(16);
	
	        /**
	         * The default state
	         *
	         * @member {Uint8Array}
	         */
	        this.defaultState = new Uint8Array(16);
	
	        // default blend mode..
	        this.defaultState[0] = 1;
	
	        /**
	         * The current state index in the stack
	         *
	         * @member {number}
	         * @private
	         */
	        this.stackIndex = 0;
	
	        /**
	         * The stack holding all the different states
	         *
	         * @member {Array<*>}
	         * @private
	         */
	        this.stack = [];
	
	        /**
	         * The current WebGL rendering context
	         *
	         * @member {WebGLRenderingContext}
	         */
	        this.gl = gl;
	
	        this.maxAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
	
	        this.attribState = {
	            tempAttribState: new Array(this.maxAttribs),
	            attribState: new Array(this.maxAttribs)
	        };
	
	        this.blendModes = (0, _mapWebGLBlendModesToPixi2.default)(gl);
	
	        // check we have vao..
	        this.nativeVaoExtension = gl.getExtension('OES_vertex_array_object') || gl.getExtension('MOZ_OES_vertex_array_object') || gl.getExtension('WEBKIT_OES_vertex_array_object');
	    }
	
	    /**
	     * Pushes a new active state
	     */
	
	
	    WebGLState.prototype.push = function push() {
	        // next state..
	        var state = this.stack[++this.stackIndex];
	
	        if (!state) {
	            state = this.stack[this.stackIndex] = new Uint8Array(16);
	        }
	
	        // copy state..
	        // set active state so we can force overrides of gl state
	        for (var i = 0; i < this.activeState.length; i++) {
	            this.activeState[i] = state[i];
	        }
	    };
	
	    /**
	     * Pops a state out
	     */
	
	
	    WebGLState.prototype.pop = function pop() {
	        var state = this.stack[--this.stackIndex];
	
	        this.setState(state);
	    };
	
	    /**
	     * Sets the current state
	     *
	     * @param {*} state - The state to set.
	     */
	
	
	    WebGLState.prototype.setState = function setState(state) {
	        this.setBlend(state[BLEND]);
	        this.setDepthTest(state[DEPTH_TEST]);
	        this.setFrontFace(state[FRONT_FACE]);
	        this.setCullFace(state[CULL_FACE]);
	        this.setBlendMode(state[BLEND_FUNC]);
	    };
	
	    /**
	     * Enables or disabled blending.
	     *
	     * @param {boolean} value - Turn on or off webgl blending.
	     */
	
	
	    WebGLState.prototype.setBlend = function setBlend(value) {
	        value = value ? 1 : 0;
	
	        if (this.activeState[BLEND] === value) {
	            return;
	        }
	
	        this.activeState[BLEND] = value;
	        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);
	    };
	
	    /**
	     * Sets the blend mode.
	     *
	     * @param {number} value - The blend mode to set to.
	     */
	
	
	    WebGLState.prototype.setBlendMode = function setBlendMode(value) {
	        if (value === this.activeState[BLEND_FUNC]) {
	            return;
	        }
	
	        this.activeState[BLEND_FUNC] = value;
	
	        this.gl.blendFunc(this.blendModes[value][0], this.blendModes[value][1]);
	    };
	
	    /**
	     * Sets whether to enable or disable depth test.
	     *
	     * @param {boolean} value - Turn on or off webgl depth testing.
	     */
	
	
	    WebGLState.prototype.setDepthTest = function setDepthTest(value) {
	        value = value ? 1 : 0;
	
	        if (this.activeState[DEPTH_TEST] === value) {
	            return;
	        }
	
	        this.activeState[DEPTH_TEST] = value;
	        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);
	    };
	
	    /**
	     * Sets whether to enable or disable cull face.
	     *
	     * @param {boolean} value - Turn on or off webgl cull face.
	     */
	
	
	    WebGLState.prototype.setCullFace = function setCullFace(value) {
	        value = value ? 1 : 0;
	
	        if (this.activeState[CULL_FACE] === value) {
	            return;
	        }
	
	        this.activeState[CULL_FACE] = value;
	        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);
	    };
	
	    /**
	     * Sets the gl front face.
	     *
	     * @param {boolean} value - true is clockwise and false is counter-clockwise
	     */
	
	
	    WebGLState.prototype.setFrontFace = function setFrontFace(value) {
	        value = value ? 1 : 0;
	
	        if (this.activeState[FRONT_FACE] === value) {
	            return;
	        }
	
	        this.activeState[FRONT_FACE] = value;
	        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);
	    };
	
	    /**
	     * Disables all the vaos in use
	     *
	     */
	
	
	    WebGLState.prototype.resetAttributes = function resetAttributes() {
	        for (var i = 0; i < this.attribState.tempAttribState.length; i++) {
	            this.attribState.tempAttribState[i] = 0;
	        }
	
	        for (var _i = 0; _i < this.attribState.attribState.length; _i++) {
	            this.attribState.attribState[_i] = 0;
	        }
	
	        // im going to assume one is always active for performance reasons.
	        for (var _i2 = 1; _i2 < this.maxAttribs; _i2++) {
	            this.gl.disableVertexAttribArray(_i2);
	        }
	    };
	
	    // used
	    /**
	     * Resets all the logic and disables the vaos
	     */
	
	
	    WebGLState.prototype.resetToDefault = function resetToDefault() {
	        // unbind any VAO if they exist..
	        if (this.nativeVaoExtension) {
	            this.nativeVaoExtension.bindVertexArrayOES(null);
	        }
	
	        // reset all attributes..
	        this.resetAttributes();
	
	        // set active state so we can force overrides of gl state
	        for (var i = 0; i < this.activeState.length; ++i) {
	            this.activeState[i] = 32;
	        }
	
	        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);
	
	        this.setState(this.defaultState);
	    };
	
	    return WebGLState;
	}();
	
	exports.default = WebGLState;
	//# sourceMappingURL=WebGLState.js.map

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = mapWebGLBlendModesToPixi;
	
	var _const = __webpack_require__(12);
	
	/**
	 * Maps gl blend combinations to WebGL.
	 *
	 * @memberof PIXI
	 * @function mapWebGLBlendModesToPixi
	 * @private
	 * @param {WebGLRenderingContext} gl - The rendering context.
	 * @param {string[]} [array=[]] - The array to output into.
	 * @return {string[]} Mapped modes.
	 */
	function mapWebGLBlendModesToPixi(gl) {
	    var array = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	
	    // TODO - premultiply alpha would be different.
	    // add a boolean for that!
	    array[_const.BLEND_MODES.NORMAL] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
	    array[_const.BLEND_MODES.ADD] = [gl.ONE, gl.DST_ALPHA];
	    array[_const.BLEND_MODES.MULTIPLY] = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];
	    array[_const.BLEND_MODES.SCREEN] = [gl.ONE, gl.ONE_MINUS_SRC_COLOR];
	    array[_const.BLEND_MODES.OVERLAY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
	    array[_const.BLEND_MODES.DARKEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
	    array[_const.BLEND_MODES.LIGHTEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
	    array[_const.BLEND_MODES.COLOR_DODGE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
	    array[_const.BLEND_MODES.COLOR_BURN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
	    array[_const.BLEND_MODES.HARD_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
	    array[_const.BLEND_MODES.SOFT_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
	    array[_const.BLEND_MODES.DIFFERENCE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
	    array[_const.BLEND_MODES.EXCLUSION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
	    array[_const.BLEND_MODES.HUE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
	    array[_const.BLEND_MODES.SATURATION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
	    array[_const.BLEND_MODES.COLOR] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
	    array[_const.BLEND_MODES.LUMINOSITY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
	
	    return array;
	}
	//# sourceMappingURL=mapWebGLBlendModesToPixi.js.map

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = mapWebGLDrawModesToPixi;
	
	var _const = __webpack_require__(12);
	
	/**
	 * Generic Mask Stack data structure.
	 *
	 * @memberof PIXI
	 * @function mapWebGLDrawModesToPixi
	 * @private
	 * @param {WebGLRenderingContext} gl - The current WebGL drawing context
	 * @param {object} [object={}] - The object to map into
	 * @return {object} The mapped draw modes.
	 */
	function mapWebGLDrawModesToPixi(gl) {
	  var object = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	  object[_const.DRAW_MODES.POINTS] = gl.POINTS;
	  object[_const.DRAW_MODES.LINES] = gl.LINES;
	  object[_const.DRAW_MODES.LINE_LOOP] = gl.LINE_LOOP;
	  object[_const.DRAW_MODES.LINE_STRIP] = gl.LINE_STRIP;
	  object[_const.DRAW_MODES.TRIANGLES] = gl.TRIANGLES;
	  object[_const.DRAW_MODES.TRIANGLE_STRIP] = gl.TRIANGLE_STRIP;
	  object[_const.DRAW_MODES.TRIANGLE_FAN] = gl.TRIANGLE_FAN;
	
	  return object;
	}
	//# sourceMappingURL=mapWebGLDrawModesToPixi.js.map

/***/ },
/* 100 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = validateContext;
	function validateContext(gl) {
	    var attributes = gl.getContextAttributes();
	
	    // this is going to be fairly simple for now.. but at least we have room to grow!
	    if (!attributes.stencil) {
	        /* eslint-disable no-console */
	        console.warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');
	        /* eslint-enable no-console */
	    }
	}
	//# sourceMappingURL=validateContext.js.map

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = generateMultiTextureShader;
	
	var _Shader = __webpack_require__(93);
	
	var _Shader2 = _interopRequireDefault(_Shader);
	
	var _path = __webpack_require__(86);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var fragTemplate = ['varying vec2 vTextureCoord;', 'varying vec4 vColor;', 'varying float vTextureId;', 'uniform sampler2D uSamplers[%count%];', 'void main(void){', 'vec4 color;', 'float textureId = floor(vTextureId+0.5);', '%forloop%', 'gl_FragColor = color * vColor;', '}'].join('\n');
	
	function generateMultiTextureShader(gl, maxTextures) {
	    var vertexSrc = 'attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec4 aColor;\nattribute float aTextureId;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\n\nvoid main(void){\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n    vTextureId = aTextureId;\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a);\n}\n';
	    var fragmentSrc = fragTemplate;
	
	    fragmentSrc = fragmentSrc.replace(/%count%/gi, maxTextures);
	    fragmentSrc = fragmentSrc.replace(/%forloop%/gi, generateSampleSrc(maxTextures));
	
	    var shader = new _Shader2.default(gl, vertexSrc, fragmentSrc);
	
	    var sampleValues = [];
	
	    for (var i = 0; i < maxTextures; i++) {
	        sampleValues[i] = i;
	    }
	
	    shader.bind();
	    shader.uniforms.uSamplers = sampleValues;
	
	    return shader;
	}
	
	function generateSampleSrc(maxTextures) {
	    var src = '';
	
	    src += '\n';
	    src += '\n';
	
	    for (var i = 0; i < maxTextures; i++) {
	        if (i > 0) {
	            src += '\nelse ';
	        }
	
	        if (i < maxTextures - 1) {
	            src += 'if(textureId == ' + i + '.0)';
	        }
	
	        src += '\n{';
	        src += '\n\tcolor = texture2D(uSamplers[' + i + '], vTextureCoord);';
	        src += '\n}';
	    }
	
	    src += '\n';
	    src += '\n';
	
	    return src;
	}
	//# sourceMappingURL=generateMultiTextureShader.js.map

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = checkMaxIfStatmentsInShader;
	
	var _pixiGlCore = __webpack_require__(24);
	
	var _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var fragTemplate = ['precision mediump float;', 'void main(void){', 'float test = 0.1;', '%forloop%', 'gl_FragColor = vec4(0.0);', '}'].join('\n');
	
	function checkMaxIfStatmentsInShader(maxIfs, gl) {
	    var createTempContext = !gl;
	
	    // @if DEBUG
	    if (maxIfs === 0) {
	        throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');
	    }
	    // @endif
	
	    if (createTempContext) {
	        var tinyCanvas = document.createElement('canvas');
	
	        tinyCanvas.width = 1;
	        tinyCanvas.height = 1;
	
	        gl = _pixiGlCore2.default.createContext(tinyCanvas);
	    }
	
	    var shader = gl.createShader(gl.FRAGMENT_SHADER);
	
	    while (true) // eslint-disable-line no-constant-condition
	    {
	        var fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));
	
	        gl.shaderSource(shader, fragmentSrc);
	        gl.compileShader(shader);
	
	        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
	            maxIfs = maxIfs / 2 | 0;
	        } else {
	            // valid!
	            break;
	        }
	    }
	
	    if (createTempContext) {
	        // get rid of context
	        if (gl.getExtension('WEBGL_lose_context')) {
	            gl.getExtension('WEBGL_lose_context').loseContext();
	        }
	    }
	
	    return maxIfs;
	}
	
	function generateIfTestSrc(maxIfs) {
	    var src = '';
	
	    for (var i = 0; i < maxIfs; ++i) {
	        if (i > 0) {
	            src += '\nelse ';
	        }
	
	        if (i < maxIfs - 1) {
	            src += 'if(test == ' + i + '.0){}';
	        }
	    }
	
	    return src;
	}
	//# sourceMappingURL=checkMaxIfStatmentsInShader.js.map

/***/ },
/* 103 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class
	 */
	var Buffer = function () {
	  /**
	   * @param {number} size - The size of the buffer in bytes.
	   */
	  function Buffer(size) {
	    _classCallCheck(this, Buffer);
	
	    this.vertices = new ArrayBuffer(size);
	
	    /**
	     * View on the vertices as a Float32Array for positions
	     *
	     * @member {Float32Array}
	     */
	    this.float32View = new Float32Array(this.vertices);
	
	    /**
	     * View on the vertices as a Uint32Array for uvs
	     *
	     * @member {Float32Array}
	     */
	    this.uint32View = new Uint32Array(this.vertices);
	  }
	
	  /**
	   * Destroys the buffer.
	   *
	   */
	
	
	  Buffer.prototype.destroy = function destroy() {
	    this.vertices = null;
	    this.positions = null;
	    this.uvs = null;
	    this.colors = null;
	  };
	
	  return Buffer;
	}();
	
	exports.default = Buffer;
	//# sourceMappingURL=BatchBuffer.js.map

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Sprite2 = __webpack_require__(53);
	
	var _Sprite3 = _interopRequireDefault(_Sprite2);
	
	var _Texture = __webpack_require__(54);
	
	var _Texture2 = _interopRequireDefault(_Texture);
	
	var _math = __webpack_require__(14);
	
	var _utils = __webpack_require__(51);
	
	var _const = __webpack_require__(12);
	
	var _settings = __webpack_require__(43);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	var _TextStyle = __webpack_require__(105);
	
	var _TextStyle2 = _interopRequireDefault(_TextStyle);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint max-depth: [2, 8] */
	
	
	var RESOLUTION = _settings2.default.RESOLUTION;
	
	
	var defaultDestroyOptions = {
	    texture: true,
	    children: false,
	    baseTexture: true
	};
	
	/**
	 * A Text Object will create a line or multiple lines of text. To split a line you can use '\n' in your text string,
	 * or add a wordWrap property set to true and and wordWrapWidth property with a value in the style object.
	 *
	 * A Text can be created directly from a string and a style object
	 *
	 * ```js
	 * let text = new PIXI.Text('This is a pixi text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});
	 * ```
	 *
	 * @class
	 * @extends PIXI.Sprite
	 * @memberof PIXI
	 */
	
	var Text = function (_Sprite) {
	    _inherits(Text, _Sprite);
	
	    /**
	     * @param {string} text - The string that you would like the text to display
	     * @param {object|PIXI.TextStyle} [style] - The style parameters
	     */
	    function Text(text, style) {
	        _classCallCheck(this, Text);
	
	        var canvas = document.createElement('canvas');
	
	        canvas.width = 3;
	        canvas.height = 3;
	
	        var texture = _Texture2.default.fromCanvas(canvas);
	
	        texture.orig = new _math.Rectangle();
	        texture.trim = new _math.Rectangle();
	
	        /**
	         * The canvas element that everything is drawn to
	         *
	         * @member {HTMLCanvasElement}
	         */
	        var _this = _possibleConstructorReturn(this, _Sprite.call(this, texture));
	
	        _this.canvas = canvas;
	
	        /**
	         * The canvas 2d context that everything is drawn with
	         * @member {HTMLCanvasElement}
	         */
	        _this.context = _this.canvas.getContext('2d');
	
	        /**
	         * The resolution / device pixel ratio of the canvas. This is set automatically by the renderer.
	         * @member {number}
	         * @default 1
	         */
	        _this.resolution = RESOLUTION;
	
	        /**
	         * Private tracker for the current text.
	         *
	         * @member {string}
	         * @private
	         */
	        _this._text = null;
	
	        /**
	         * Private tracker for the current style.
	         *
	         * @member {object}
	         * @private
	         */
	        _this._style = null;
	        /**
	         * Private listener to track style changes.
	         *
	         * @member {Function}
	         * @private
	         */
	        _this._styleListener = null;
	
	        /**
	         * Private tracker for the current font.
	         *
	         * @member {string}
	         * @private
	         */
	        _this._font = '';
	
	        _this.text = text;
	        _this.style = style;
	
	        _this.localStyleID = -1;
	        return _this;
	    }
	
	    /**
	     * Renders text and updates it when needed.
	     *
	     * @private
	     * @param {boolean} respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.
	     */
	
	
	    Text.prototype.updateText = function updateText(respectDirty) {
	        var style = this._style;
	
	        // check if style has changed..
	        if (this.localStyleID !== style.styleID) {
	            this.dirty = true;
	            this.localStyleID = style.styleID;
	        }
	
	        if (!this.dirty && respectDirty) {
	            return;
	        }
	
	        this._font = Text.getFontStyle(style);
	
	        this.context.font = this._font;
	
	        // word wrap
	        // preserve original text
	        var outputText = style.wordWrap ? this.wordWrap(this._text) : this._text;
	
	        // split text into lines
	        var lines = outputText.split(/(?:\r\n|\r|\n)/);
	
	        // calculate text width
	        var lineWidths = new Array(lines.length);
	        var maxLineWidth = 0;
	        var fontProperties = Text.calculateFontProperties(this._font);
	
	        for (var i = 0; i < lines.length; i++) {
	            var lineWidth = this.context.measureText(lines[i]).width + (lines[i].length - 1) * style.letterSpacing;
	
	            lineWidths[i] = lineWidth;
	            maxLineWidth = Math.max(maxLineWidth, lineWidth);
	        }
	
	        var width = maxLineWidth + style.strokeThickness;
	
	        if (style.dropShadow) {
	            width += style.dropShadowDistance;
	        }
	
	        width += style.padding * 2;
	
	        this.canvas.width = Math.ceil((width + this.context.lineWidth) * this.resolution);
	
	        // calculate text height
	        var lineHeight = this.style.lineHeight || fontProperties.fontSize + style.strokeThickness;
	
	        var height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness) + (lines.length - 1) * lineHeight;
	
	        if (style.dropShadow) {
	            height += style.dropShadowDistance;
	        }
	
	        this.canvas.height = Math.ceil((height + this._style.padding * 2) * this.resolution);
	
	        this.context.scale(this.resolution, this.resolution);
	
	        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
	
	        this.context.font = this._font;
	        this.context.strokeStyle = style.stroke;
	        this.context.lineWidth = style.strokeThickness;
	        this.context.textBaseline = style.textBaseline;
	        this.context.lineJoin = style.lineJoin;
	        this.context.miterLimit = style.miterLimit;
	
	        var linePositionX = void 0;
	        var linePositionY = void 0;
	
	        if (style.dropShadow) {
	            if (style.dropShadowBlur > 0) {
	                this.context.shadowColor = style.dropShadowColor;
	                this.context.shadowBlur = style.dropShadowBlur;
	            } else {
	                this.context.fillStyle = style.dropShadowColor;
	            }
	
	            var xShadowOffset = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;
	            var yShadowOffset = Math.sin(style.dropShadowAngle) * style.dropShadowDistance;
	
	            for (var _i = 0; _i < lines.length; _i++) {
	                linePositionX = style.strokeThickness / 2;
	                linePositionY = style.strokeThickness / 2 + _i * lineHeight + fontProperties.ascent;
	
	                if (style.align === 'right') {
	                    linePositionX += maxLineWidth - lineWidths[_i];
	                } else if (style.align === 'center') {
	                    linePositionX += (maxLineWidth - lineWidths[_i]) / 2;
	                }
	
	                if (style.fill) {
	                    this.drawLetterSpacing(lines[_i], linePositionX + xShadowOffset + style.padding, linePositionY + yShadowOffset + style.padding);
	
	                    if (style.stroke && style.strokeThickness) {
	                        this.context.strokeStyle = style.dropShadowColor;
	                        this.drawLetterSpacing(lines[_i], linePositionX + xShadowOffset + style.padding, linePositionY + yShadowOffset + style.padding, true);
	                        this.context.strokeStyle = style.stroke;
	                    }
	                }
	            }
	        }
	
	        // set canvas text styles
	        this.context.fillStyle = this._generateFillStyle(style, lines);
	
	        // draw lines line by line
	        for (var _i2 = 0; _i2 < lines.length; _i2++) {
	            linePositionX = style.strokeThickness / 2;
	            linePositionY = style.strokeThickness / 2 + _i2 * lineHeight + fontProperties.ascent;
	
	            if (style.align === 'right') {
	                linePositionX += maxLineWidth - lineWidths[_i2];
	            } else if (style.align === 'center') {
	                linePositionX += (maxLineWidth - lineWidths[_i2]) / 2;
	            }
	
	            if (style.stroke && style.strokeThickness) {
	                this.drawLetterSpacing(lines[_i2], linePositionX + style.padding, linePositionY + style.padding, true);
	            }
	
	            if (style.fill) {
	                this.drawLetterSpacing(lines[_i2], linePositionX + style.padding, linePositionY + style.padding);
	            }
	        }
	
	        this.updateTexture();
	    };
	
	    /**
	     * Render the text with letter-spacing.
	     * @param {string} text - The text to draw
	     * @param {number} x - Horizontal position to draw the text
	     * @param {number} y - Vertical position to draw the text
	     * @param {boolean} [isStroke=false] - Is this drawing for the outside stroke of the
	     *  text? If not, it's for the inside fill
	     * @private
	     */
	
	
	    Text.prototype.drawLetterSpacing = function drawLetterSpacing(text, x, y) {
	        var isStroke = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	
	        var style = this._style;
	
	        // letterSpacing of 0 means normal
	        var letterSpacing = style.letterSpacing;
	
	        if (letterSpacing === 0) {
	            if (isStroke) {
	                this.context.strokeText(text, x, y);
	            } else {
	                this.context.fillText(text, x, y);
	            }
	
	            return;
	        }
	
	        var characters = String.prototype.split.call(text, '');
	        var currentPosition = x;
	        var index = 0;
	        var current = '';
	
	        while (index < text.length) {
	            current = characters[index++];
	            if (isStroke) {
	                this.context.strokeText(current, currentPosition, y);
	            } else {
	                this.context.fillText(current, currentPosition, y);
	            }
	            currentPosition += this.context.measureText(current).width + letterSpacing;
	        }
	    };
	
	    /**
	     * Updates texture size based on canvas size
	     *
	     * @private
	     */
	
	
	    Text.prototype.updateTexture = function updateTexture() {
	        var texture = this._texture;
	        var style = this._style;
	
	        texture.baseTexture.hasLoaded = true;
	        texture.baseTexture.resolution = this.resolution;
	
	        texture.baseTexture.realWidth = this.canvas.width;
	        texture.baseTexture.realHeight = this.canvas.height;
	        texture.baseTexture.width = this.canvas.width / this.resolution;
	        texture.baseTexture.height = this.canvas.height / this.resolution;
	        texture.trim.width = texture._frame.width = this.canvas.width / this.resolution;
	        texture.trim.height = texture._frame.height = this.canvas.height / this.resolution;
	
	        texture.trim.x = -style.padding;
	        texture.trim.y = -style.padding;
	
	        texture.orig.width = texture._frame.width - style.padding * 2;
	        texture.orig.height = texture._frame.height - style.padding * 2;
	
	        // call sprite onTextureUpdate to update scale if _width or _height were set
	        this._onTextureUpdate();
	
	        texture.baseTexture.emit('update', texture.baseTexture);
	
	        this.dirty = false;
	    };
	
	    /**
	     * Renders the object using the WebGL renderer
	     *
	     * @param {PIXI.WebGLRenderer} renderer - The renderer
	     */
	
	
	    Text.prototype.renderWebGL = function renderWebGL(renderer) {
	        if (this.resolution !== renderer.resolution) {
	            this.resolution = renderer.resolution;
	            this.dirty = true;
	        }
	
	        this.updateText(true);
	
	        _Sprite.prototype.renderWebGL.call(this, renderer);
	    };
	
	    /**
	     * Renders the object using the Canvas renderer
	     *
	     * @private
	     * @param {PIXI.CanvasRenderer} renderer - The renderer
	     */
	
	
	    Text.prototype._renderCanvas = function _renderCanvas(renderer) {
	        if (this.resolution !== renderer.resolution) {
	            this.resolution = renderer.resolution;
	            this.dirty = true;
	        }
	
	        this.updateText(true);
	
	        _Sprite.prototype._renderCanvas.call(this, renderer);
	    };
	
	    /**
	     * Applies newlines to a string to have it optimally fit into the horizontal
	     * bounds set by the Text object's wordWrapWidth property.
	     *
	     * @private
	     * @param {string} text - String to apply word wrapping to
	     * @return {string} New string with new lines applied where required
	     */
	
	
	    Text.prototype.wordWrap = function wordWrap(text) {
	        // Greedy wrapping algorithm that will wrap words as the line grows longer
	        // than its horizontal bounds.
	        var result = '';
	        var lines = text.split('\n');
	        var wordWrapWidth = this._style.wordWrapWidth;
	
	        for (var i = 0; i < lines.length; i++) {
	            var spaceLeft = wordWrapWidth;
	            var words = lines[i].split(' ');
	
	            for (var j = 0; j < words.length; j++) {
	                var wordWidth = this.context.measureText(words[j]).width;
	
	                if (this._style.breakWords && wordWidth > wordWrapWidth) {
	                    // Word should be split in the middle
	                    var characters = words[j].split('');
	
	                    for (var c = 0; c < characters.length; c++) {
	                        var characterWidth = this.context.measureText(characters[c]).width;
	
	                        if (characterWidth > spaceLeft) {
	                            result += '\n' + characters[c];
	                            spaceLeft = wordWrapWidth - characterWidth;
	                        } else {
	                            if (c === 0) {
	                                result += ' ';
	                            }
	
	                            result += characters[c];
	                            spaceLeft -= characterWidth;
	                        }
	                    }
	                } else {
	                    var wordWidthWithSpace = wordWidth + this.context.measureText(' ').width;
	
	                    if (j === 0 || wordWidthWithSpace > spaceLeft) {
	                        // Skip printing the newline if it's the first word of the line that is
	                        // greater than the word wrap width.
	                        if (j > 0) {
	                            result += '\n';
	                        }
	                        result += words[j];
	                        spaceLeft = wordWrapWidth - wordWidth;
	                    } else {
	                        spaceLeft -= wordWidthWithSpace;
	                        result += ' ' + words[j];
	                    }
	                }
	            }
	
	            if (i < lines.length - 1) {
	                result += '\n';
	            }
	        }
	
	        return result;
	    };
	
	    /**
	     * calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.
	     */
	
	
	    Text.prototype._calculateBounds = function _calculateBounds() {
	        this.updateText(true);
	        this.calculateVertices();
	        // if we have already done this on THIS frame.
	        this._bounds.addQuad(this.vertexData);
	    };
	
	    /**
	     * Method to be called upon a TextStyle change.
	     * @private
	     */
	
	
	    Text.prototype._onStyleChange = function _onStyleChange() {
	        this.dirty = true;
	    };
	
	    /**
	     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array
	     *
	     * @private
	     * @param {object} style - The style.
	     * @param {string} lines - The lines of text.
	     * @return {string|number|CanvasGradient} The fill style
	     */
	
	
	    Text.prototype._generateFillStyle = function _generateFillStyle(style, lines) {
	        if (!Array.isArray(style.fill)) {
	            return style.fill;
	        }
	
	        // cocoon on canvas+ cannot generate textures, so use the first colour instead
	        if (navigator.isCocoonJS) {
	            return style.fill[0];
	        }
	
	        // the gradient will be evenly spaced out according to how large the array is.
	        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75
	        var gradient = void 0;
	        var totalIterations = void 0;
	        var currentIteration = void 0;
	        var stop = void 0;
	
	        var width = this.canvas.width / this.resolution;
	        var height = this.canvas.height / this.resolution;
	
	        if (style.fillGradientType === _const.TEXT_GRADIENT.LINEAR_VERTICAL) {
	            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas
	            gradient = this.context.createLinearGradient(width / 2, 0, width / 2, height);
	
	            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect
	            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875
	            totalIterations = (style.fill.length + 1) * lines.length;
	            currentIteration = 0;
	            for (var i = 0; i < lines.length; i++) {
	                currentIteration += 1;
	                for (var j = 0; j < style.fill.length; j++) {
	                    stop = currentIteration / totalIterations;
	                    gradient.addColorStop(stop, style.fill[j]);
	                    currentIteration++;
	                }
	            }
	        } else {
	            // start the gradient at the center left of the canvas, and end at the center right of the canvas
	            gradient = this.context.createLinearGradient(0, height / 2, width, height / 2);
	
	            // can just evenly space out the gradients in this case, as multiple lines makes no difference
	            // to an even left to right gradient
	            totalIterations = style.fill.length + 1;
	            currentIteration = 1;
	
	            for (var _i3 = 0; _i3 < style.fill.length; _i3++) {
	                stop = currentIteration / totalIterations;
	                gradient.addColorStop(stop, style.fill[_i3]);
	                currentIteration++;
	            }
	        }
	
	        return gradient;
	    };
	
	    /**
	     * Destroys this text object.
	     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as
	     * the majorety of the time the texture will not be shared with any other Sprites.
	     *
	     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options
	     *  have been set to that value
	     * @param {boolean} [options.children=false] - if set to true, all the children will have their
	     *  destroy method called as well. 'options' will be passed on to those calls.
	     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well
	     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well
	     */
	
	
	    Text.prototype.destroy = function destroy(options) {
	        if (typeof options === 'boolean') {
	            options = { children: options };
	        }
	
	        options = Object.assign({}, defaultDestroyOptions, options);
	
	        _Sprite.prototype.destroy.call(this, options);
	
	        // make sure to reset the the context and canvas.. dont want this hanging around in memory!
	        this.context = null;
	        this.canvas = null;
	
	        this._style = null;
	    };
	
	    /**
	     * The width of the Text, setting this will actually modify the scale to achieve the value set
	     *
	     * @member {number}
	     * @memberof PIXI.Text#
	     */
	
	
	    /**
	     * Generates a font style string to use for Text.calculateFontProperties(). Takes the same parameter
	     * as Text.style.
	     *
	     * @static
	     * @param {object|TextStyle} style - String representing the style of the font
	     * @return {string} Font style string, for passing to Text.calculateFontProperties()
	     */
	    Text.getFontStyle = function getFontStyle(style) {
	        style = style || {};
	
	        if (!(style instanceof _TextStyle2.default)) {
	            style = new _TextStyle2.default(style);
	        }
	
	        // build canvas api font setting from individual components. Convert a numeric style.fontSize to px
	        var fontSizeString = typeof style.fontSize === 'number' ? style.fontSize + 'px' : style.fontSize;
	
	        return style.fontStyle + ' ' + style.fontVariant + ' ' + style.fontWeight + ' ' + fontSizeString + ' ' + style.fontFamily;
	    };
	
	    /**
	     * Calculates the ascent, descent and fontSize of a given fontStyle
	     *
	     * @static
	     * @param {string} fontStyle - String representing the style of the font
	     * @return {Object} Font properties object
	     */
	
	
	    Text.calculateFontProperties = function calculateFontProperties(fontStyle) {
	        // as this method is used for preparing assets, don't recalculate things if we don't need to
	        if (Text.fontPropertiesCache[fontStyle]) {
	            return Text.fontPropertiesCache[fontStyle];
	        }
	
	        var properties = {};
	
	        var canvas = Text.fontPropertiesCanvas;
	        var context = Text.fontPropertiesContext;
	
	        context.font = fontStyle;
	
	        var width = Math.ceil(context.measureText('|M√âq').width);
	        var baseline = Math.ceil(context.measureText('M').width);
	        var height = 2 * baseline;
	
	        baseline = baseline * 1.4 | 0;
	
	        canvas.width = width;
	        canvas.height = height;
	
	        context.fillStyle = '#f00';
	        context.fillRect(0, 0, width, height);
	
	        context.font = fontStyle;
	
	        context.textBaseline = 'alphabetic';
	        context.fillStyle = '#000';
	        context.fillText('|M√âq', 0, baseline);
	
	        var imagedata = context.getImageData(0, 0, width, height).data;
	        var pixels = imagedata.length;
	        var line = width * 4;
	
	        var i = 0;
	        var idx = 0;
	        var stop = false;
	
	        // ascent. scan from top to bottom until we find a non red pixel
	        for (i = 0; i < baseline; ++i) {
	            for (var j = 0; j < line; j += 4) {
	                if (imagedata[idx + j] !== 255) {
	                    stop = true;
	                    break;
	                }
	            }
	            if (!stop) {
	                idx += line;
	            } else {
	                break;
	            }
	        }
	
	        properties.ascent = baseline - i;
	
	        idx = pixels - line;
	        stop = false;
	
	        // descent. scan from bottom to top until we find a non red pixel
	        for (i = height; i > baseline; --i) {
	            for (var _j = 0; _j < line; _j += 4) {
	                if (imagedata[idx + _j] !== 255) {
	                    stop = true;
	                    break;
	                }
	            }
	
	            if (!stop) {
	                idx -= line;
	            } else {
	                break;
	            }
	        }
	
	        properties.descent = i - baseline;
	        properties.fontSize = properties.ascent + properties.descent;
	
	        Text.fontPropertiesCache[fontStyle] = properties;
	
	        return properties;
	    };
	
	    _createClass(Text, [{
	        key: 'width',
	        get: function get() {
	            this.updateText(true);
	
	            return Math.abs(this.scale.x) * this.texture.orig.width;
	        }
	
	        /**
	         * Sets the width of the text.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this.updateText(true);
	
	            var s = (0, _utils.sign)(this.scale.x) || 1;
	
	            this.scale.x = s * value / this.texture.orig.width;
	            this._width = value;
	        }
	
	        /**
	         * The height of the Text, setting this will actually modify the scale to achieve the value set
	         *
	         * @member {number}
	         * @memberof PIXI.Text#
	         */
	
	    }, {
	        key: 'height',
	        get: function get() {
	            this.updateText(true);
	
	            return Math.abs(this.scale.y) * this._texture.orig.height;
	        }
	
	        /**
	         * Sets the height of the text.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this.updateText(true);
	
	            var s = (0, _utils.sign)(this.scale.y) || 1;
	
	            this.scale.y = s * value / this.texture.orig.height;
	            this._height = value;
	        }
	
	        /**
	         * Set the style of the text. Set up an event listener to listen for changes on the style
	         * object and mark the text as dirty.
	         *
	         * @member {object|PIXI.TextStyle}
	         * @memberof PIXI.Text#
	         */
	
	    }, {
	        key: 'style',
	        get: function get() {
	            return this._style;
	        }
	
	        /**
	         * Sets the style of the text.
	         *
	         * @param {object} style - The value to set to.
	         */
	        ,
	        set: function set(style) {
	            style = style || {};
	
	            if (style instanceof _TextStyle2.default) {
	                this._style = style;
	            } else {
	                this._style = new _TextStyle2.default(style);
	            }
	
	            this.localStyleID = -1;
	            this.dirty = true;
	        }
	
	        /**
	         * Set the copy for the text object. To split a line you can use '\n'.
	         *
	         * @member {string}
	         * @memberof PIXI.Text#
	         */
	
	    }, {
	        key: 'text',
	        get: function get() {
	            return this._text;
	        }
	
	        /**
	         * Sets the text.
	         *
	         * @param {string} text - The value to set to.
	         */
	        ,
	        set: function set(text) {
	            text = text || ' ';
	            text = text.toString();
	
	            if (this._text === text) {
	                return;
	            }
	            this._text = text;
	            this.dirty = true;
	        }
	    }]);
	
	    return Text;
	}(_Sprite3.default);
	
	exports.default = Text;
	
	
	Text.fontPropertiesCache = {};
	Text.fontPropertiesCanvas = document.createElement('canvas');
	Text.fontPropertiesContext = Text.fontPropertiesCanvas.getContext('2d');
	//# sourceMappingURL=Text.js.map

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // disabling eslint for now, going to rewrite this in v5
	/* eslint-disable */
	
	var _const = __webpack_require__(12);
	
	var _utils = __webpack_require__(51);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var defaultStyle = {
	    align: 'left',
	    breakWords: false,
	    dropShadow: false,
	    dropShadowAngle: Math.PI / 6,
	    dropShadowBlur: 0,
	    dropShadowColor: '#000000',
	    dropShadowDistance: 5,
	    fill: 'black',
	    fillGradientType: _const.TEXT_GRADIENT.LINEAR_VERTICAL,
	    fontFamily: 'Arial',
	    fontSize: 26,
	    fontStyle: 'normal',
	    fontVariant: 'normal',
	    fontWeight: 'normal',
	    letterSpacing: 0,
	    lineHeight: 0,
	    lineJoin: 'miter',
	    miterLimit: 10,
	    padding: 0,
	    stroke: 'black',
	    strokeThickness: 0,
	    textBaseline: 'alphabetic',
	    wordWrap: false,
	    wordWrapWidth: 100
	};
	
	/**
	 * A TextStyle Object decorates a Text Object. It can be shared between
	 * multiple Text objects. Changing the style will update all text objects using it.
	 *
	 * @class
	 * @memberof PIXI
	 */
	
	var TextStyle = function () {
	    /**
	     * @param {object} [style] - The style parameters
	     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),
	     *  does not affect single line text
	     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it
	     *  needs wordWrap to be set to true
	     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text
	     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow
	     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius
	     * @param {string} [style.dropShadowColor='#000000'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'
	     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow
	     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas
	     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient
	     *  eg ['#000000','#FFFFFF']
	     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}
	     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fills styles are
	     *  supplied, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT} for possible values
	     * @param {string} [style.fontFamily='Arial'] - The font family
	     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,
	     *  equivalents are '26px','20pt','160%' or '1.6em')
	     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')
	     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')
	     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',
	     *  '200', '300', '400', '500', '600', '700', 800' or '900')
	     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0
	     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses
	     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve
	     *      spiked text issues. Default is 'miter' (creates a sharp corner).
	     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce
	     *      or increase the spikiness of rendered text.
	     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from
	     *     happening by adding padding to all sides of the text.
	     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke
	     *  e.g 'blue', '#FCFF00'
	     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.
	     *  Default is 0 (no stroke)
	     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.
	     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used
	     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true
	     */
	    function TextStyle(style) {
	        _classCallCheck(this, TextStyle);
	
	        this.styleID = 0;
	
	        Object.assign(this, defaultStyle, style);
	    }
	
	    /**
	     * Creates a new TextStyle object with the same values as this one.
	     * Note that the only the properties of the object are cloned.
	     *
	     * @return {PIXI.TextStyle} New cloned TextStyle object
	     */
	
	
	    TextStyle.prototype.clone = function clone() {
	        var clonedProperties = {};
	
	        for (var key in this._defaults) {
	            clonedProperties[key] = this[key];
	        }
	
	        return new TextStyle(clonedProperties);
	    };
	
	    /**
	     * Resets all properties to the defaults specified in TextStyle.prototype._default
	     */
	
	
	    TextStyle.prototype.reset = function reset() {
	        Object.assign(this, this._defaults);
	    };
	
	    _createClass(TextStyle, [{
	        key: 'align',
	        get: function get() {
	            return this._align;
	        },
	        set: function set(align) {
	            if (this._align !== align) {
	                this._align = align;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'breakWords',
	        get: function get() {
	            return this._breakWords;
	        },
	        set: function set(breakWords) {
	            if (this._breakWords !== breakWords) {
	                this._breakWords = breakWords;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'dropShadow',
	        get: function get() {
	            return this._dropShadow;
	        },
	        set: function set(dropShadow) {
	            if (this._dropShadow !== dropShadow) {
	                this._dropShadow = dropShadow;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'dropShadowAngle',
	        get: function get() {
	            return this._dropShadowAngle;
	        },
	        set: function set(dropShadowAngle) {
	            if (this._dropShadowAngle !== dropShadowAngle) {
	                this._dropShadowAngle = dropShadowAngle;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'dropShadowBlur',
	        get: function get() {
	            return this._dropShadowBlur;
	        },
	        set: function set(dropShadowBlur) {
	            if (this._dropShadowBlur !== dropShadowBlur) {
	                this._dropShadowBlur = dropShadowBlur;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'dropShadowColor',
	        get: function get() {
	            return this._dropShadowColor;
	        },
	        set: function set(dropShadowColor) {
	            var outputColor = getColor(dropShadowColor);
	            if (this._dropShadowColor !== outputColor) {
	                this._dropShadowColor = outputColor;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'dropShadowDistance',
	        get: function get() {
	            return this._dropShadowDistance;
	        },
	        set: function set(dropShadowDistance) {
	            if (this._dropShadowDistance !== dropShadowDistance) {
	                this._dropShadowDistance = dropShadowDistance;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'fill',
	        get: function get() {
	            return this._fill;
	        },
	        set: function set(fill) {
	            var outputColor = getColor(fill);
	            if (this._fill !== outputColor) {
	                this._fill = outputColor;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'fillGradientType',
	        get: function get() {
	            return this._fillGradientType;
	        },
	        set: function set(fillGradientType) {
	            if (this._fillGradientType !== fillGradientType) {
	                this._fillGradientType = fillGradientType;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'fontFamily',
	        get: function get() {
	            return this._fontFamily;
	        },
	        set: function set(fontFamily) {
	            if (this.fontFamily !== fontFamily) {
	                this._fontFamily = fontFamily;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'fontSize',
	        get: function get() {
	            return this._fontSize;
	        },
	        set: function set(fontSize) {
	            if (this._fontSize !== fontSize) {
	                this._fontSize = fontSize;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'fontStyle',
	        get: function get() {
	            return this._fontStyle;
	        },
	        set: function set(fontStyle) {
	            if (this._fontStyle !== fontStyle) {
	                this._fontStyle = fontStyle;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'fontVariant',
	        get: function get() {
	            return this._fontVariant;
	        },
	        set: function set(fontVariant) {
	            if (this._fontVariant !== fontVariant) {
	                this._fontVariant = fontVariant;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'fontWeight',
	        get: function get() {
	            return this._fontWeight;
	        },
	        set: function set(fontWeight) {
	            if (this._fontWeight !== fontWeight) {
	                this._fontWeight = fontWeight;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'letterSpacing',
	        get: function get() {
	            return this._letterSpacing;
	        },
	        set: function set(letterSpacing) {
	            if (this._letterSpacing !== letterSpacing) {
	                this._letterSpacing = letterSpacing;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'lineHeight',
	        get: function get() {
	            return this._lineHeight;
	        },
	        set: function set(lineHeight) {
	            if (this._lineHeight !== lineHeight) {
	                this._lineHeight = lineHeight;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'lineJoin',
	        get: function get() {
	            return this._lineJoin;
	        },
	        set: function set(lineJoin) {
	            if (this._lineJoin !== lineJoin) {
	                this._lineJoin = lineJoin;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'miterLimit',
	        get: function get() {
	            return this._miterLimit;
	        },
	        set: function set(miterLimit) {
	            if (this._miterLimit !== miterLimit) {
	                this._miterLimit = miterLimit;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'padding',
	        get: function get() {
	            return this._padding;
	        },
	        set: function set(padding) {
	            if (this._padding !== padding) {
	                this._padding = padding;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'stroke',
	        get: function get() {
	            return this._stroke;
	        },
	        set: function set(stroke) {
	            var outputColor = getColor(stroke);
	            if (this._stroke !== outputColor) {
	                this._stroke = outputColor;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'strokeThickness',
	        get: function get() {
	            return this._strokeThickness;
	        },
	        set: function set(strokeThickness) {
	            if (this._strokeThickness !== strokeThickness) {
	                this._strokeThickness = strokeThickness;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'textBaseline',
	        get: function get() {
	            return this._textBaseline;
	        },
	        set: function set(textBaseline) {
	            if (this._textBaseline !== textBaseline) {
	                this._textBaseline = textBaseline;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'wordWrap',
	        get: function get() {
	            return this._wordWrap;
	        },
	        set: function set(wordWrap) {
	            if (this._wordWrap !== wordWrap) {
	                this._wordWrap = wordWrap;
	                this.styleID++;
	            }
	        }
	    }, {
	        key: 'wordWrapWidth',
	        get: function get() {
	            return this._wordWrapWidth;
	        },
	        set: function set(wordWrapWidth) {
	            if (this._wordWrapWidth !== wordWrapWidth) {
	                this._wordWrapWidth = wordWrapWidth;
	                this.styleID++;
	            }
	        }
	    }]);
	
	    return TextStyle;
	}();
	
	/**
	 * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.
	 *
	 * @param {number|number[]} color
	 * @return {string} The color as a string.
	 */
	
	
	exports.default = TextStyle;
	function getColor(color) {
	    if (typeof color === 'number') {
	        return (0, _utils.hex2string)(color);
	    } else if (Array.isArray(color)) {
	        for (var i = 0; i < color.length; ++i) {
	            if (typeof color[i] === 'number') {
	                color[i] = (0, _utils.hex2string)(color[i]);
	            }
	        }
	    }
	
	    return color;
	}
	//# sourceMappingURL=TextStyle.js.map

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _Container2 = __webpack_require__(50);
	
	var _Container3 = _interopRequireDefault(_Container2);
	
	var _RenderTexture = __webpack_require__(71);
	
	var _RenderTexture2 = _interopRequireDefault(_RenderTexture);
	
	var _Texture = __webpack_require__(54);
	
	var _Texture2 = _interopRequireDefault(_Texture);
	
	var _GraphicsData = __webpack_require__(107);
	
	var _GraphicsData2 = _interopRequireDefault(_GraphicsData);
	
	var _Sprite = __webpack_require__(53);
	
	var _Sprite2 = _interopRequireDefault(_Sprite);
	
	var _math = __webpack_require__(14);
	
	var _utils = __webpack_require__(51);
	
	var _const = __webpack_require__(12);
	
	var _Bounds = __webpack_require__(49);
	
	var _Bounds2 = _interopRequireDefault(_Bounds);
	
	var _bezierCurveTo2 = __webpack_require__(108);
	
	var _bezierCurveTo3 = _interopRequireDefault(_bezierCurveTo2);
	
	var _CanvasRenderer = __webpack_require__(69);
	
	var _CanvasRenderer2 = _interopRequireDefault(_CanvasRenderer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var canvasRenderer = void 0;
	var tempMatrix = new _math.Matrix();
	var tempPoint = new _math.Point();
	var tempColor1 = new Float32Array(4);
	var tempColor2 = new Float32Array(4);
	
	/**
	 * The Graphics class contains methods used to draw primitive shapes such as lines, circles and
	 * rectangles to the display, and to color and fill them.
	 *
	 * @class
	 * @extends PIXI.Container
	 * @memberof PIXI
	 */
	
	var Graphics = function (_Container) {
	    _inherits(Graphics, _Container);
	
	    /**
	     *
	     */
	    function Graphics() {
	        _classCallCheck(this, Graphics);
	
	        /**
	         * The alpha value used when filling the Graphics object.
	         *
	         * @member {number}
	         * @default 1
	         */
	        var _this = _possibleConstructorReturn(this, _Container.call(this));
	
	        _this.fillAlpha = 1;
	
	        /**
	         * The width (thickness) of any lines drawn.
	         *
	         * @member {number}
	         * @default 0
	         */
	        _this.lineWidth = 0;
	
	        /**
	         * The color of any lines drawn.
	         *
	         * @member {string}
	         * @default 0
	         */
	        _this.lineColor = 0;
	
	        /**
	         * Graphics data
	         *
	         * @member {PIXI.GraphicsData[]}
	         * @private
	         */
	        _this.graphicsData = [];
	
	        /**
	         * The tint applied to the graphic shape. This is a hex value. Apply a value of 0xFFFFFF to
	         * reset the tint.
	         *
	         * @member {number}
	         * @default 0xFFFFFF
	         */
	        _this.tint = 0xFFFFFF;
	
	        /**
	         * The previous tint applied to the graphic shape. Used to compare to the current tint and
	         * check if theres change.
	         *
	         * @member {number}
	         * @private
	         * @default 0xFFFFFF
	         */
	        _this._prevTint = 0xFFFFFF;
	
	        /**
	         * The blend mode to be applied to the graphic shape. Apply a value of
	         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
	         *
	         * @member {number}
	         * @default PIXI.BLEND_MODES.NORMAL;
	         * @see PIXI.BLEND_MODES
	         */
	        _this.blendMode = _const.BLEND_MODES.NORMAL;
	
	        /**
	         * Current path
	         *
	         * @member {PIXI.GraphicsData}
	         * @private
	         */
	        _this.currentPath = null;
	
	        /**
	         * Array containing some WebGL-related properties used by the WebGL renderer.
	         *
	         * @member {object<number, object>}
	         * @private
	         */
	        // TODO - _webgl should use a prototype object, not a random undocumented object...
	        _this._webGL = {};
	
	        /**
	         * Whether this shape is being used as a mask.
	         *
	         * @member {boolean}
	         */
	        _this.isMask = false;
	
	        /**
	         * The bounds' padding used for bounds calculation.
	         *
	         * @member {number}
	         */
	        _this.boundsPadding = 0;
	
	        /**
	         * A cache of the local bounds to prevent recalculation.
	         *
	         * @member {PIXI.Rectangle}
	         * @private
	         */
	        _this._localBounds = new _Bounds2.default();
	
	        /**
	         * Used to detect if the graphics object has changed. If this is set to true then the graphics
	         * object will be recalculated.
	         *
	         * @member {boolean}
	         * @private
	         */
	        _this.dirty = 0;
	
	        /**
	         * Used to detect if we need to do a fast rect check using the id compare method
	         * @type {Number}
	         */
	        _this.fastRectDirty = -1;
	
	        /**
	         * Used to detect if we clear the graphics webGL data
	         * @type {Number}
	         */
	        _this.clearDirty = 0;
	
	        /**
	         * Used to detect if we we need to recalculate local bounds
	         * @type {Number}
	         */
	        _this.boundsDirty = -1;
	
	        /**
	         * Used to detect if the cached sprite object needs to be updated.
	         *
	         * @member {boolean}
	         * @private
	         */
	        _this.cachedSpriteDirty = false;
	
	        _this._spriteRect = null;
	        _this._fastRect = false;
	
	        /**
	         * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.
	         * This is useful if your graphics element does not change often, as it will speed up the rendering
	         * of the object in exchange for taking up texture memory. It is also useful if you need the graphics
	         * object to be anti-aliased, because it will be rendered using canvas. This is not recommended if
	         * you are constantly redrawing the graphics element.
	         *
	         * @name cacheAsBitmap
	         * @member {boolean}
	         * @memberof PIXI.Graphics#
	         * @default false
	         */
	        return _this;
	    }
	
	    /**
	     * Creates a new Graphics object with the same values as this one.
	     * Note that the only the properties of the object are cloned, not its transform (position,scale,etc)
	     *
	     * @return {PIXI.Graphics} A clone of the graphics object
	     */
	
	
	    Graphics.prototype.clone = function clone() {
	        var clone = new Graphics();
	
	        clone.renderable = this.renderable;
	        clone.fillAlpha = this.fillAlpha;
	        clone.lineWidth = this.lineWidth;
	        clone.lineColor = this.lineColor;
	        clone.tint = this.tint;
	        clone.blendMode = this.blendMode;
	        clone.isMask = this.isMask;
	        clone.boundsPadding = this.boundsPadding;
	        clone.dirty = 0;
	        clone.cachedSpriteDirty = this.cachedSpriteDirty;
	
	        // copy graphics data
	        for (var i = 0; i < this.graphicsData.length; ++i) {
	            clone.graphicsData.push(this.graphicsData[i].clone());
	        }
	
	        clone.currentPath = clone.graphicsData[clone.graphicsData.length - 1];
	
	        clone.updateLocalBounds();
	
	        return clone;
	    };
	
	    /**
	     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()
	     * method or the drawCircle() method.
	     *
	     * @param {number} [lineWidth=0] - width of the line to draw, will update the objects stored style
	     * @param {number} [color=0] - color of the line to draw, will update the objects stored style
	     * @param {number} [alpha=1] - alpha of the line to draw, will update the objects stored style
	     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
	     */
	
	
	    Graphics.prototype.lineStyle = function lineStyle() {
	        var lineWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	        var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	        var alpha = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
	
	        this.lineWidth = lineWidth;
	        this.lineColor = color;
	        this.lineAlpha = alpha;
	
	        if (this.currentPath) {
	            if (this.currentPath.shape.points.length) {
	                // halfway through a line? start a new one!
	                var shape = new _math.Polygon(this.currentPath.shape.points.slice(-2));
	
	                shape.closed = false;
	
	                this.drawShape(shape);
	            } else {
	                // otherwise its empty so lets just set the line properties
	                this.currentPath.lineWidth = this.lineWidth;
	                this.currentPath.lineColor = this.lineColor;
	                this.currentPath.lineAlpha = this.lineAlpha;
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Moves the current drawing position to x, y.
	     *
	     * @param {number} x - the X coordinate to move to
	     * @param {number} y - the Y coordinate to move to
	     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
	     */
	
	
	    Graphics.prototype.moveTo = function moveTo(x, y) {
	        var shape = new _math.Polygon([x, y]);
	
	        shape.closed = false;
	        this.drawShape(shape);
	
	        return this;
	    };
	
	    /**
	     * Draws a line using the current line style from the current drawing position to (x, y);
	     * The current drawing position is then set to (x, y).
	     *
	     * @param {number} x - the X coordinate to draw to
	     * @param {number} y - the Y coordinate to draw to
	     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
	     */
	
	
	    Graphics.prototype.lineTo = function lineTo(x, y) {
	        this.currentPath.shape.points.push(x, y);
	        this.dirty++;
	
	        return this;
	    };
	
	    /**
	     * Calculate the points for a quadratic bezier curve and then draws it.
	     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c
	     *
	     * @param {number} cpX - Control point x
	     * @param {number} cpY - Control point y
	     * @param {number} toX - Destination point x
	     * @param {number} toY - Destination point y
	     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
	     */
	
	
	    Graphics.prototype.quadraticCurveTo = function quadraticCurveTo(cpX, cpY, toX, toY) {
	        if (this.currentPath) {
	            if (this.currentPath.shape.points.length === 0) {
	                this.currentPath.shape.points = [0, 0];
	            }
	        } else {
	            this.moveTo(0, 0);
	        }
	
	        var n = 20;
	        var points = this.currentPath.shape.points;
	        var xa = 0;
	        var ya = 0;
	
	        if (points.length === 0) {
	            this.moveTo(0, 0);
	        }
	
	        var fromX = points[points.length - 2];
	        var fromY = points[points.length - 1];
	
	        for (var i = 1; i <= n; ++i) {
	            var j = i / n;
	
	            xa = fromX + (cpX - fromX) * j;
	            ya = fromY + (cpY - fromY) * j;
	
	            points.push(xa + (cpX + (toX - cpX) * j - xa) * j, ya + (cpY + (toY - cpY) * j - ya) * j);
	        }
	
	        this.dirty++;
	
	        return this;
	    };
	
	    /**
	     * Calculate the points for a bezier curve and then draws it.
	     *
	     * @param {number} cpX - Control point x
	     * @param {number} cpY - Control point y
	     * @param {number} cpX2 - Second Control point x
	     * @param {number} cpY2 - Second Control point y
	     * @param {number} toX - Destination point x
	     * @param {number} toY - Destination point y
	     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
	     */
	
	
	    Graphics.prototype.bezierCurveTo = function bezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY) {
	        if (this.currentPath) {
	            if (this.currentPath.shape.points.length === 0) {
	                this.currentPath.shape.points = [0, 0];
	            }
	        } else {
	            this.moveTo(0, 0);
	        }
	
	        var points = this.currentPath.shape.points;
	
	        var fromX = points[points.length - 2];
	        var fromY = points[points.length - 1];
	
	        points.length -= 2;
	
	        (0, _bezierCurveTo3.default)(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY, points);
	
	        this.dirty++;
	
	        return this;
	    };
	
	    /**
	     * The arcTo() method creates an arc/curve between two tangents on the canvas.
	     *
	     * "borrowed" from https://code.google.com/p/fxcanvas/ - thanks google!
	     *
	     * @param {number} x1 - The x-coordinate of the beginning of the arc
	     * @param {number} y1 - The y-coordinate of the beginning of the arc
	     * @param {number} x2 - The x-coordinate of the end of the arc
	     * @param {number} y2 - The y-coordinate of the end of the arc
	     * @param {number} radius - The radius of the arc
	     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
	     */
	
	
	    Graphics.prototype.arcTo = function arcTo(x1, y1, x2, y2, radius) {
	        if (this.currentPath) {
	            if (this.currentPath.shape.points.length === 0) {
	                this.currentPath.shape.points.push(x1, y1);
	            }
	        } else {
	            this.moveTo(x1, y1);
	        }
	
	        var points = this.currentPath.shape.points;
	        var fromX = points[points.length - 2];
	        var fromY = points[points.length - 1];
	        var a1 = fromY - y1;
	        var b1 = fromX - x1;
	        var a2 = y2 - y1;
	        var b2 = x2 - x1;
	        var mm = Math.abs(a1 * b2 - b1 * a2);
	
	        if (mm < 1.0e-8 || radius === 0) {
	            if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1) {
	                points.push(x1, y1);
	            }
	        } else {
	            var dd = a1 * a1 + b1 * b1;
	            var cc = a2 * a2 + b2 * b2;
	            var tt = a1 * a2 + b1 * b2;
	            var k1 = radius * Math.sqrt(dd) / mm;
	            var k2 = radius * Math.sqrt(cc) / mm;
	            var j1 = k1 * tt / dd;
	            var j2 = k2 * tt / cc;
	            var cx = k1 * b2 + k2 * b1;
	            var cy = k1 * a2 + k2 * a1;
	            var px = b1 * (k2 + j1);
	            var py = a1 * (k2 + j1);
	            var qx = b2 * (k1 + j2);
	            var qy = a2 * (k1 + j2);
	            var startAngle = Math.atan2(py - cy, px - cx);
	            var endAngle = Math.atan2(qy - cy, qx - cx);
	
	            this.arc(cx + x1, cy + y1, radius, startAngle, endAngle, b1 * a2 > b2 * a1);
	        }
	
	        this.dirty++;
	
	        return this;
	    };
	
	    /**
	     * The arc method creates an arc/curve (used to create circles, or parts of circles).
	     *
	     * @param {number} cx - The x-coordinate of the center of the circle
	     * @param {number} cy - The y-coordinate of the center of the circle
	     * @param {number} radius - The radius of the circle
	     * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position
	     *  of the arc's circle)
	     * @param {number} endAngle - The ending angle, in radians
	     * @param {boolean} [anticlockwise=false] - Specifies whether the drawing should be
	     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true
	     *  indicates counter-clockwise.
	     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
	     */
	
	
	    Graphics.prototype.arc = function arc(cx, cy, radius, startAngle, endAngle) {
	        var anticlockwise = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
	
	        if (startAngle === endAngle) {
	            return this;
	        }
	
	        if (!anticlockwise && endAngle <= startAngle) {
	            endAngle += Math.PI * 2;
	        } else if (anticlockwise && startAngle <= endAngle) {
	            startAngle += Math.PI * 2;
	        }
	
	        var sweep = endAngle - startAngle;
	        var segs = Math.ceil(Math.abs(sweep) / (Math.PI * 2)) * 40;
	
	        if (sweep === 0) {
	            return this;
	        }
	
	        var startX = cx + Math.cos(startAngle) * radius;
	        var startY = cy + Math.sin(startAngle) * radius;
	
	        var points = this.currentPath.shape.points;
	
	        if (this.currentPath) {
	            if (points[points.length - 2] !== startX || points[points.length - 1] !== startY) {
	                points.push(startX, startY);
	            }
	        } else {
	            this.moveTo(startX, startY);
	        }
	
	        var theta = sweep / (segs * 2);
	        var theta2 = theta * 2;
	
	        var cTheta = Math.cos(theta);
	        var sTheta = Math.sin(theta);
	
	        var segMinus = segs - 1;
	
	        var remainder = segMinus % 1 / segMinus;
	
	        for (var i = 0; i <= segMinus; ++i) {
	            var real = i + remainder * i;
	
	            var angle = theta + startAngle + theta2 * real;
	
	            var c = Math.cos(angle);
	            var s = -Math.sin(angle);
	
	            points.push((cTheta * c + sTheta * s) * radius + cx, (cTheta * -s + sTheta * c) * radius + cy);
	        }
	
	        this.dirty++;
	
	        return this;
	    };
	
	    /**
	     * Specifies a simple one-color fill that subsequent calls to other Graphics methods
	     * (such as lineTo() or drawCircle()) use when drawing.
	     *
	     * @param {number} [color=0] - the color of the fill
	     * @param {number} [alpha=1] - the alpha of the fill
	     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
	     */
	
	
	    Graphics.prototype.beginFill = function beginFill() {
	        var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	        var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	
	        this.filling = true;
	        this.fillColor = color;
	        this.fillAlpha = alpha;
	
	        if (this.currentPath) {
	            if (this.currentPath.shape.points.length <= 2) {
	                this.currentPath.fill = this.filling;
	                this.currentPath.fillColor = this.fillColor;
	                this.currentPath.fillAlpha = this.fillAlpha;
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.
	     *
	     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
	     */
	
	
	    Graphics.prototype.endFill = function endFill() {
	        this.filling = false;
	        this.fillColor = null;
	        this.fillAlpha = 1;
	
	        return this;
	    };
	
	    /**
	     *
	     * @param {number} x - The X coord of the top-left of the rectangle
	     * @param {number} y - The Y coord of the top-left of the rectangle
	     * @param {number} width - The width of the rectangle
	     * @param {number} height - The height of the rectangle
	     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
	     */
	
	
	    Graphics.prototype.drawRect = function drawRect(x, y, width, height) {
	        this.drawShape(new _math.Rectangle(x, y, width, height));
	
	        return this;
	    };
	
	    /**
	     *
	     * @param {number} x - The X coord of the top-left of the rectangle
	     * @param {number} y - The Y coord of the top-left of the rectangle
	     * @param {number} width - The width of the rectangle
	     * @param {number} height - The height of the rectangle
	     * @param {number} radius - Radius of the rectangle corners
	     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
	     */
	
	
	    Graphics.prototype.drawRoundedRect = function drawRoundedRect(x, y, width, height, radius) {
	        this.drawShape(new _math.RoundedRectangle(x, y, width, height, radius));
	
	        return this;
	    };
	
	    /**
	     * Draws a circle.
	     *
	     * @param {number} x - The X coordinate of the center of the circle
	     * @param {number} y - The Y coordinate of the center of the circle
	     * @param {number} radius - The radius of the circle
	     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
	     */
	
	
	    Graphics.prototype.drawCircle = function drawCircle(x, y, radius) {
	        this.drawShape(new _math.Circle(x, y, radius));
	
	        return this;
	    };
	
	    /**
	     * Draws an ellipse.
	     *
	     * @param {number} x - The X coordinate of the center of the ellipse
	     * @param {number} y - The Y coordinate of the center of the ellipse
	     * @param {number} width - The half width of the ellipse
	     * @param {number} height - The half height of the ellipse
	     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
	     */
	
	
	    Graphics.prototype.drawEllipse = function drawEllipse(x, y, width, height) {
	        this.drawShape(new _math.Ellipse(x, y, width, height));
	
	        return this;
	    };
	
	    /**
	     * Draws a polygon using the given path.
	     *
	     * @param {number[]|PIXI.Point[]} path - The path data used to construct the polygon.
	     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
	     */
	
	
	    Graphics.prototype.drawPolygon = function drawPolygon(path) {
	        // prevents an argument assignment deopt
	        // see section 3.1: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments
	        var points = path;
	
	        var closed = true;
	
	        if (points instanceof _math.Polygon) {
	            closed = points.closed;
	            points = points.points;
	        }
	
	        if (!Array.isArray(points)) {
	            // prevents an argument leak deopt
	            // see section 3.2: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments
	            points = new Array(arguments.length);
	
	            for (var i = 0; i < points.length; ++i) {
	                points[i] = arguments[i]; // eslint-disable-line prefer-rest-params
	            }
	        }
	
	        var shape = new _math.Polygon(points);
	
	        shape.closed = closed;
	
	        this.drawShape(shape);
	
	        return this;
	    };
	
	    /**
	     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.
	     *
	     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls
	     */
	
	
	    Graphics.prototype.clear = function clear() {
	        if (this.lineWidth || this.filling || this.graphicsData.length > 0) {
	            this.lineWidth = 0;
	            this.filling = false;
	
	            this.dirty++;
	            this.clearDirty++;
	            this.graphicsData.length = 0;
	        }
	
	        return this;
	    };
	
	    /**
	     * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and
	     * masked with gl.scissor.
	     *
	     * @returns {boolean} True if only 1 rect.
	     */
	
	
	    Graphics.prototype.isFastRect = function isFastRect() {
	        return this.graphicsData.length === 1 && this.graphicsData[0].shape.type === _const.SHAPES.RECT && !this.graphicsData[0].lineWidth;
	    };
	
	    /**
	     * Renders the object using the WebGL renderer
	     *
	     * @private
	     * @param {PIXI.WebGLRenderer} renderer - The renderer
	     */
	
	
	    Graphics.prototype._renderWebGL = function _renderWebGL(renderer) {
	        // if the sprite is not visible or the alpha is 0 then no need to render this element
	        if (this.dirty !== this.fastRectDirty) {
	            this.fastRectDirty = this.dirty;
	            this._fastRect = this.isFastRect();
	        }
	
	        // TODO this check can be moved to dirty?
	        if (this._fastRect) {
	            this._renderSpriteRect(renderer);
	        } else {
	            renderer.setObjectRenderer(renderer.plugins.graphics);
	            renderer.plugins.graphics.render(this);
	        }
	    };
	
	    /**
	     * Renders a sprite rectangle.
	     *
	     * @private
	     * @param {PIXI.WebGLRenderer} renderer - The renderer
	     */
	
	
	    Graphics.prototype._renderSpriteRect = function _renderSpriteRect(renderer) {
	        var rect = this.graphicsData[0].shape;
	
	        if (!this._spriteRect) {
	            if (!Graphics._SPRITE_TEXTURE) {
	                Graphics._SPRITE_TEXTURE = _RenderTexture2.default.create(10, 10);
	
	                var canvas = document.createElement('canvas');
	
	                canvas.width = 10;
	                canvas.height = 10;
	
	                var context = canvas.getContext('2d');
	
	                context.fillStyle = 'white';
	                context.fillRect(0, 0, 10, 10);
	
	                Graphics._SPRITE_TEXTURE = _Texture2.default.fromCanvas(canvas);
	            }
	
	            this._spriteRect = new _Sprite2.default(Graphics._SPRITE_TEXTURE);
	        }
	        if (this.tint === 0xffffff) {
	            this._spriteRect.tint = this.graphicsData[0].fillColor;
	        } else {
	            var t1 = tempColor1;
	            var t2 = tempColor2;
	
	            (0, _utils.hex2rgb)(this.graphicsData[0].fillColor, t1);
	            (0, _utils.hex2rgb)(this.tint, t2);
	
	            t1[0] *= t2[0];
	            t1[1] *= t2[1];
	            t1[2] *= t2[2];
	
	            this._spriteRect.tint = (0, _utils.rgb2hex)(t1);
	        }
	        this._spriteRect.alpha = this.graphicsData[0].fillAlpha;
	        this._spriteRect.worldAlpha = this.worldAlpha * this._spriteRect.alpha;
	
	        Graphics._SPRITE_TEXTURE._frame.width = rect.width;
	        Graphics._SPRITE_TEXTURE._frame.height = rect.height;
	
	        this._spriteRect.transform.worldTransform = this.transform.worldTransform;
	
	        this._spriteRect.anchor.set(-rect.x / rect.width, -rect.y / rect.height);
	        this._spriteRect._onAnchorUpdate();
	
	        this._spriteRect._renderWebGL(renderer);
	    };
	
	    /**
	     * Renders the object using the Canvas renderer
	     *
	     * @private
	     * @param {PIXI.CanvasRenderer} renderer - The renderer
	     */
	
	
	    Graphics.prototype._renderCanvas = function _renderCanvas(renderer) {
	        if (this.isMask === true) {
	            return;
	        }
	
	        renderer.plugins.graphics.render(this);
	    };
	
	    /**
	     * Retrieves the bounds of the graphic shape as a rectangle object
	     *
	     * @private
	     */
	
	
	    Graphics.prototype._calculateBounds = function _calculateBounds() {
	        if (this.boundsDirty !== this.dirty) {
	            this.boundsDirty = this.dirty;
	            this.updateLocalBounds();
	
	            this.dirty++;
	            this.cachedSpriteDirty = true;
	        }
	
	        var lb = this._localBounds;
	
	        this._bounds.addFrame(this.transform, lb.minX, lb.minY, lb.maxX, lb.maxY);
	    };
	
	    /**
	     * Tests if a point is inside this graphics object
	     *
	     * @param {PIXI.Point} point - the point to test
	     * @return {boolean} the result of the test
	     */
	
	
	    Graphics.prototype.containsPoint = function containsPoint(point) {
	        this.worldTransform.applyInverse(point, tempPoint);
	
	        var graphicsData = this.graphicsData;
	
	        for (var i = 0; i < graphicsData.length; ++i) {
	            var data = graphicsData[i];
	
	            if (!data.fill) {
	                continue;
	            }
	
	            // only deal with fills..
	            if (data.shape) {
	                if (data.shape.contains(tempPoint.x, tempPoint.y)) {
	                    return true;
	                }
	            }
	        }
	
	        return false;
	    };
	
	    /**
	     * Update the bounds of the object
	     *
	     */
	
	
	    Graphics.prototype.updateLocalBounds = function updateLocalBounds() {
	        var minX = Infinity;
	        var maxX = -Infinity;
	
	        var minY = Infinity;
	        var maxY = -Infinity;
	
	        if (this.graphicsData.length) {
	            var shape = 0;
	            var x = 0;
	            var y = 0;
	            var w = 0;
	            var h = 0;
	
	            for (var i = 0; i < this.graphicsData.length; i++) {
	                var data = this.graphicsData[i];
	                var type = data.type;
	                var lineWidth = data.lineWidth;
	
	                shape = data.shape;
	
	                if (type === _const.SHAPES.RECT || type === _const.SHAPES.RREC) {
	                    x = shape.x - lineWidth / 2;
	                    y = shape.y - lineWidth / 2;
	                    w = shape.width + lineWidth;
	                    h = shape.height + lineWidth;
	
	                    minX = x < minX ? x : minX;
	                    maxX = x + w > maxX ? x + w : maxX;
	
	                    minY = y < minY ? y : minY;
	                    maxY = y + h > maxY ? y + h : maxY;
	                } else if (type === _const.SHAPES.CIRC) {
	                    x = shape.x;
	                    y = shape.y;
	                    w = shape.radius + lineWidth / 2;
	                    h = shape.radius + lineWidth / 2;
	
	                    minX = x - w < minX ? x - w : minX;
	                    maxX = x + w > maxX ? x + w : maxX;
	
	                    minY = y - h < minY ? y - h : minY;
	                    maxY = y + h > maxY ? y + h : maxY;
	                } else if (type === _const.SHAPES.ELIP) {
	                    x = shape.x;
	                    y = shape.y;
	                    w = shape.width + lineWidth / 2;
	                    h = shape.height + lineWidth / 2;
	
	                    minX = x - w < minX ? x - w : minX;
	                    maxX = x + w > maxX ? x + w : maxX;
	
	                    minY = y - h < minY ? y - h : minY;
	                    maxY = y + h > maxY ? y + h : maxY;
	                } else {
	                    // POLY
	                    var points = shape.points;
	                    var x2 = 0;
	                    var y2 = 0;
	                    var dx = 0;
	                    var dy = 0;
	                    var rw = 0;
	                    var rh = 0;
	                    var cx = 0;
	                    var cy = 0;
	
	                    for (var j = 0; j + 2 < points.length; j += 2) {
	                        x = points[j];
	                        y = points[j + 1];
	                        x2 = points[j + 2];
	                        y2 = points[j + 3];
	                        dx = Math.abs(x2 - x);
	                        dy = Math.abs(y2 - y);
	                        h = lineWidth;
	                        w = Math.sqrt(dx * dx + dy * dy);
	
	                        if (w < 1e-9) {
	                            continue;
	                        }
	
	                        rw = (h / w * dy + dx) / 2;
	                        rh = (h / w * dx + dy) / 2;
	                        cx = (x2 + x) / 2;
	                        cy = (y2 + y) / 2;
	
	                        minX = cx - rw < minX ? cx - rw : minX;
	                        maxX = cx + rw > maxX ? cx + rw : maxX;
	
	                        minY = cy - rh < minY ? cy - rh : minY;
	                        maxY = cy + rh > maxY ? cy + rh : maxY;
	                    }
	                }
	            }
	        } else {
	            minX = 0;
	            maxX = 0;
	            minY = 0;
	            maxY = 0;
	        }
	
	        var padding = this.boundsPadding;
	
	        this._localBounds.minX = minX - padding;
	        this._localBounds.maxX = maxX + padding * 2;
	
	        this._localBounds.minY = minY - padding;
	        this._localBounds.maxY = maxY + padding * 2;
	    };
	
	    /**
	     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.
	     *
	     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.
	     * @return {PIXI.GraphicsData} The generated GraphicsData object.
	     */
	
	
	    Graphics.prototype.drawShape = function drawShape(shape) {
	        if (this.currentPath) {
	            // check current path!
	            if (this.currentPath.shape.points.length <= 2) {
	                this.graphicsData.pop();
	            }
	        }
	
	        this.currentPath = null;
	
	        var data = new _GraphicsData2.default(this.lineWidth, this.lineColor, this.lineAlpha, this.fillColor, this.fillAlpha, this.filling, shape);
	
	        this.graphicsData.push(data);
	
	        if (data.type === _const.SHAPES.POLY) {
	            data.shape.closed = data.shape.closed || this.filling;
	            this.currentPath = data;
	        }
	
	        this.dirty++;
	
	        return data;
	    };
	
	    /**
	     * Generates a canvas texture.
	     *
	     * @param {number} scaleMode - The scale mode of the texture.
	     * @param {number} resolution - The resolution of the texture.
	     * @return {PIXI.Texture} The new texture.
	     */
	
	
	    Graphics.prototype.generateCanvasTexture = function generateCanvasTexture(scaleMode) {
	        var resolution = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	
	        var bounds = this.getLocalBounds();
	
	        var canvasBuffer = _RenderTexture2.default.create(bounds.width, bounds.height, scaleMode, resolution);
	
	        if (!canvasRenderer) {
	            canvasRenderer = new _CanvasRenderer2.default();
	        }
	
	        tempMatrix.tx = -bounds.x;
	        tempMatrix.ty = -bounds.y;
	
	        canvasRenderer.render(this, canvasBuffer, false, tempMatrix);
	
	        var texture = _Texture2.default.fromCanvas(canvasBuffer.baseTexture._canvasRenderTarget.canvas, scaleMode);
	
	        texture.baseTexture.resolution = resolution;
	        texture.baseTexture.update();
	
	        return texture;
	    };
	
	    /**
	     * Closes the current path.
	     *
	     * @return {PIXI.Graphics} Returns itself.
	     */
	
	
	    Graphics.prototype.closePath = function closePath() {
	        // ok so close path assumes next one is a hole!
	        var currentPath = this.currentPath;
	
	        if (currentPath && currentPath.shape) {
	            currentPath.shape.close();
	        }
	
	        return this;
	    };
	
	    /**
	     * Adds a hole in the current path.
	     *
	     * @return {PIXI.Graphics} Returns itself.
	     */
	
	
	    Graphics.prototype.addHole = function addHole() {
	        // this is a hole!
	        var hole = this.graphicsData.pop();
	
	        this.currentPath = this.graphicsData[this.graphicsData.length - 1];
	
	        this.currentPath.addHole(hole.shape);
	        this.currentPath = null;
	
	        return this;
	    };
	
	    /**
	     * Destroys the Graphics object.
	     *
	     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all
	     *  options have been set to that value
	     * @param {boolean} [options.children=false] - if set to true, all the children will have
	     *  their destroy method called as well. 'options' will be passed on to those calls.
	     */
	
	
	    Graphics.prototype.destroy = function destroy(options) {
	        _Container.prototype.destroy.call(this, options);
	
	        // destroy each of the GraphicsData objects
	        for (var i = 0; i < this.graphicsData.length; ++i) {
	            this.graphicsData[i].destroy();
	        }
	
	        // for each webgl data entry, destroy the WebGLGraphicsData
	        for (var id in this._webgl) {
	            for (var j = 0; j < this._webgl[id].data.length; ++j) {
	                this._webgl[id].data[j].destroy();
	            }
	        }
	
	        if (this._spriteRect) {
	            this._spriteRect.destroy();
	        }
	
	        this.graphicsData = null;
	
	        this.currentPath = null;
	        this._webgl = null;
	        this._localBounds = null;
	    };
	
	    return Graphics;
	}(_Container3.default);
	
	exports.default = Graphics;
	
	
	Graphics._SPRITE_TEXTURE = null;
	//# sourceMappingURL=Graphics.js.map

/***/ },
/* 107 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * A GraphicsData object.
	 *
	 * @class
	 * @memberof PIXI
	 */
	var GraphicsData = function () {
	  /**
	   *
	   * @param {number} lineWidth - the width of the line to draw
	   * @param {number} lineColor - the color of the line to draw
	   * @param {number} lineAlpha - the alpha of the line to draw
	   * @param {number} fillColor - the color of the fill
	   * @param {number} fillAlpha - the alpha of the fill
	   * @param {boolean} fill - whether or not the shape is filled with a colour
	   * @param {PIXI.Circle|PIXI.Rectangle|PIXI.Ellipse|PIXI.Polygon} shape - The shape object to draw.
	   */
	  function GraphicsData(lineWidth, lineColor, lineAlpha, fillColor, fillAlpha, fill, shape) {
	    _classCallCheck(this, GraphicsData);
	
	    /**
	     * @member {number} the width of the line to draw
	     */
	    this.lineWidth = lineWidth;
	
	    /**
	     * @member {number} the color of the line to draw
	     */
	    this.lineColor = lineColor;
	
	    /**
	     * @member {number} the alpha of the line to draw
	     */
	    this.lineAlpha = lineAlpha;
	
	    /**
	     * @member {number} cached tint of the line to draw
	     */
	    this._lineTint = lineColor;
	
	    /**
	     * @member {number} the color of the fill
	     */
	    this.fillColor = fillColor;
	
	    /**
	     * @member {number} the alpha of the fill
	     */
	    this.fillAlpha = fillAlpha;
	
	    /**
	     * @member {number} cached tint of the fill
	     */
	    this._fillTint = fillColor;
	
	    /**
	     * @member {boolean} whether or not the shape is filled with a colour
	     */
	    this.fill = fill;
	
	    this.holes = [];
	
	    /**
	     * @member {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} The shape object to draw.
	     */
	    this.shape = shape;
	
	    /**
	     * @member {number} The type of the shape, see the Const.Shapes file for all the existing types,
	     */
	    this.type = shape.type;
	  }
	
	  /**
	   * Creates a new GraphicsData object with the same values as this one.
	   *
	   * @return {PIXI.GraphicsData} Cloned GraphicsData object
	   */
	
	
	  GraphicsData.prototype.clone = function clone() {
	    return new GraphicsData(this.lineWidth, this.lineColor, this.lineAlpha, this.fillColor, this.fillAlpha, this.fill, this.shape);
	  };
	
	  /**
	   * Adds a hole to the shape.
	   *
	   * @param {PIXI.Rectangle|PIXI.Circle} shape - The shape of the hole.
	   */
	
	
	  GraphicsData.prototype.addHole = function addHole(shape) {
	    this.holes.push(shape);
	  };
	
	  /**
	   * Destroys the Graphics data.
	   */
	
	
	  GraphicsData.prototype.destroy = function destroy() {
	    this.shape = null;
	    this.holes = null;
	  };
	
	  return GraphicsData;
	}();
	
	exports.default = GraphicsData;
	//# sourceMappingURL=GraphicsData.js.map

/***/ },
/* 108 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = bezierCurveTo;
	/**
	 * Calculate the points for a bezier curve and then draws it.
	 *
	 * Ignored from docs since it is not directly exposed.
	 *
	 * @ignore
	 * @param {number} fromX - Starting point x
	 * @param {number} fromY - Starting point y
	 * @param {number} cpX - Control point x
	 * @param {number} cpY - Control point y
	 * @param {number} cpX2 - Second Control point x
	 * @param {number} cpY2 - Second Control point y
	 * @param {number} toX - Destination point x
	 * @param {number} toY - Destination point y
	 * @param {number[]} [path=[]] - Path array to push points into
	 * @return {number[]} Array of points of the curve
	 */
	function bezierCurveTo(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY) {
	    var path = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : [];
	
	    var n = 20;
	    var dt = 0;
	    var dt2 = 0;
	    var dt3 = 0;
	    var t2 = 0;
	    var t3 = 0;
	
	    path.push(fromX, fromY);
	
	    for (var i = 1, j = 0; i <= n; ++i) {
	        j = i / n;
	
	        dt = 1 - j;
	        dt2 = dt * dt;
	        dt3 = dt2 * dt;
	
	        t2 = j * j;
	        t3 = t2 * j;
	
	        path.push(dt3 * fromX + 3 * dt2 * j * cpX + 3 * dt * t2 * cpX2 + t3 * toX, dt3 * fromY + 3 * dt2 * j * cpY + 3 * dt * t2 * cpY2 + t3 * toY);
	    }
	
	    return path;
	}
	//# sourceMappingURL=bezierCurveTo.js.map

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _utils = __webpack_require__(51);
	
	var _const = __webpack_require__(12);
	
	var _ObjectRenderer2 = __webpack_require__(79);
	
	var _ObjectRenderer3 = _interopRequireDefault(_ObjectRenderer2);
	
	var _WebGLRenderer = __webpack_require__(81);
	
	var _WebGLRenderer2 = _interopRequireDefault(_WebGLRenderer);
	
	var _WebGLGraphicsData = __webpack_require__(110);
	
	var _WebGLGraphicsData2 = _interopRequireDefault(_WebGLGraphicsData);
	
	var _PrimitiveShader = __webpack_require__(111);
	
	var _PrimitiveShader2 = _interopRequireDefault(_PrimitiveShader);
	
	var _buildPoly = __webpack_require__(112);
	
	var _buildPoly2 = _interopRequireDefault(_buildPoly);
	
	var _buildRectangle = __webpack_require__(115);
	
	var _buildRectangle2 = _interopRequireDefault(_buildRectangle);
	
	var _buildRoundedRectangle = __webpack_require__(116);
	
	var _buildRoundedRectangle2 = _interopRequireDefault(_buildRoundedRectangle);
	
	var _buildCircle = __webpack_require__(117);
	
	var _buildCircle2 = _interopRequireDefault(_buildCircle);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Renders the graphics object.
	 *
	 * @class
	 * @memberof PIXI
	 * @extends PIXI.ObjectRenderer
	 */
	var GraphicsRenderer = function (_ObjectRenderer) {
	    _inherits(GraphicsRenderer, _ObjectRenderer);
	
	    /**
	     * @param {PIXI.WebGLRenderer} renderer - The renderer this object renderer works for.
	     */
	    function GraphicsRenderer(renderer) {
	        _classCallCheck(this, GraphicsRenderer);
	
	        var _this = _possibleConstructorReturn(this, _ObjectRenderer.call(this, renderer));
	
	        _this.graphicsDataPool = [];
	
	        _this.primitiveShader = null;
	
	        _this.gl = renderer.gl;
	
	        // easy access!
	        _this.CONTEXT_UID = 0;
	        return _this;
	    }
	
	    /**
	     * Called when there is a WebGL context change
	     *
	     * @private
	     *
	     */
	
	
	    GraphicsRenderer.prototype.onContextChange = function onContextChange() {
	        this.gl = this.renderer.gl;
	        this.CONTEXT_UID = this.renderer.CONTEXT_UID;
	        this.primitiveShader = new _PrimitiveShader2.default(this.gl);
	    };
	
	    /**
	     * Destroys this renderer.
	     *
	     */
	
	
	    GraphicsRenderer.prototype.destroy = function destroy() {
	        _ObjectRenderer3.default.prototype.destroy.call(this);
	
	        for (var i = 0; i < this.graphicsDataPool.length; ++i) {
	            this.graphicsDataPool[i].destroy();
	        }
	
	        this.graphicsDataPool = null;
	    };
	
	    /**
	     * Renders a graphics object.
	     *
	     * @param {PIXI.Graphics} graphics - The graphics object to render.
	     */
	
	
	    GraphicsRenderer.prototype.render = function render(graphics) {
	        var renderer = this.renderer;
	        var gl = renderer.gl;
	
	        var webGLData = void 0;
	        var webGL = graphics._webGL[this.CONTEXT_UID];
	
	        if (!webGL || graphics.dirty !== webGL.dirty) {
	            this.updateGraphics(graphics);
	
	            webGL = graphics._webGL[this.CONTEXT_UID];
	        }
	
	        // This  could be speeded up for sure!
	        var shader = this.primitiveShader;
	
	        renderer.bindShader(shader);
	        renderer.state.setBlendMode(graphics.blendMode);
	
	        for (var i = 0, n = webGL.data.length; i < n; i++) {
	            webGLData = webGL.data[i];
	            var shaderTemp = webGLData.shader;
	
	            renderer.bindShader(shaderTemp);
	            shaderTemp.uniforms.translationMatrix = graphics.transform.worldTransform.toArray(true);
	            shaderTemp.uniforms.tint = (0, _utils.hex2rgb)(graphics.tint);
	            shaderTemp.uniforms.alpha = graphics.worldAlpha;
	
	            renderer.bindVao(webGLData.vao);
	            webGLData.vao.draw(gl.TRIANGLE_STRIP, webGLData.indices.length);
	        }
	    };
	
	    /**
	     * Updates the graphics object
	     *
	     * @private
	     * @param {PIXI.Graphics} graphics - The graphics object to update
	     */
	
	
	    GraphicsRenderer.prototype.updateGraphics = function updateGraphics(graphics) {
	        var gl = this.renderer.gl;
	
	        // get the contexts graphics object
	        var webGL = graphics._webGL[this.CONTEXT_UID];
	
	        // if the graphics object does not exist in the webGL context time to create it!
	        if (!webGL) {
	            webGL = graphics._webGL[this.CONTEXT_UID] = { lastIndex: 0, data: [], gl: gl, clearDirty: -1, dirty: -1 };
	        }
	
	        // flag the graphics as not dirty as we are about to update it...
	        webGL.dirty = graphics.dirty;
	
	        // if the user cleared the graphics object we will need to clear every object
	        if (graphics.clearDirty !== webGL.clearDirty) {
	            webGL.clearDirty = graphics.clearDirty;
	
	            // loop through and return all the webGLDatas to the object pool so than can be reused later on
	            for (var i = 0; i < webGL.data.length; i++) {
	                this.graphicsDataPool.push(webGL.data[i]);
	            }
	
	            // clear the array and reset the index..
	            webGL.data.length = 0;
	            webGL.lastIndex = 0;
	        }
	
	        var webGLData = void 0;
	
	        // loop through the graphics datas and construct each one..
	        // if the object is a complex fill then the new stencil buffer technique will be used
	        // other wise graphics objects will be pushed into a batch..
	        for (var _i = webGL.lastIndex; _i < graphics.graphicsData.length; _i++) {
	            var data = graphics.graphicsData[_i];
	
	            // TODO - this can be simplified
	            webGLData = this.getWebGLData(webGL, 0);
	
	            if (data.type === _const.SHAPES.POLY) {
	                (0, _buildPoly2.default)(data, webGLData);
	            }
	            if (data.type === _const.SHAPES.RECT) {
	                (0, _buildRectangle2.default)(data, webGLData);
	            } else if (data.type === _const.SHAPES.CIRC || data.type === _const.SHAPES.ELIP) {
	                (0, _buildCircle2.default)(data, webGLData);
	            } else if (data.type === _const.SHAPES.RREC) {
	                (0, _buildRoundedRectangle2.default)(data, webGLData);
	            }
	
	            webGL.lastIndex++;
	        }
	
	        this.renderer.bindVao(null);
	
	        // upload all the dirty data...
	        for (var _i2 = 0; _i2 < webGL.data.length; _i2++) {
	            webGLData = webGL.data[_i2];
	
	            if (webGLData.dirty) {
	                webGLData.upload();
	            }
	        }
	    };
	
	    /**
	     *
	     * @private
	     * @param {WebGLRenderingContext} gl - the current WebGL drawing context
	     * @param {number} type - TODO @Alvin
	     * @return {*} TODO
	     */
	
	
	    GraphicsRenderer.prototype.getWebGLData = function getWebGLData(gl, type) {
	        var webGLData = gl.data[gl.data.length - 1];
	
	        if (!webGLData || webGLData.points.length > 320000) {
	            webGLData = this.graphicsDataPool.pop() || new _WebGLGraphicsData2.default(this.renderer.gl, this.primitiveShader, this.renderer.state.attribsState);
	
	            webGLData.reset(type);
	            gl.data.push(webGLData);
	        }
	
	        webGLData.dirty = true;
	
	        return webGLData;
	    };
	
	    return GraphicsRenderer;
	}(_ObjectRenderer3.default);
	
	exports.default = GraphicsRenderer;
	
	
	_WebGLRenderer2.default.registerPlugin('graphics', GraphicsRenderer);
	//# sourceMappingURL=GraphicsRenderer.js.map

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _pixiGlCore = __webpack_require__(24);
	
	var _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * An object containing WebGL specific properties to be used by the WebGL renderer
	 *
	 * @class
	 * @private
	 * @memberof PIXI
	 */
	var WebGLGraphicsData = function () {
	  /**
	   * @param {WebGLRenderingContext} gl - The current WebGL drawing context
	   * @param {PIXI.Shader} shader - The shader
	   * @param {object} attribsState - The state for the VAO
	   */
	  function WebGLGraphicsData(gl, shader, attribsState) {
	    _classCallCheck(this, WebGLGraphicsData);
	
	    /**
	     * The current WebGL drawing context
	     *
	     * @member {WebGLRenderingContext}
	     */
	    this.gl = gl;
	
	    // TODO does this need to be split before uploading??
	    /**
	     * An array of color components (r,g,b)
	     * @member {number[]}
	     */
	    this.color = [0, 0, 0]; // color split!
	
	    /**
	     * An array of points to draw
	     * @member {PIXI.Point[]}
	     */
	    this.points = [];
	
	    /**
	     * The indices of the vertices
	     * @member {number[]}
	     */
	    this.indices = [];
	    /**
	     * The main buffer
	     * @member {WebGLBuffer}
	     */
	    this.buffer = _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl);
	
	    /**
	     * The index buffer
	     * @member {WebGLBuffer}
	     */
	    this.indexBuffer = _pixiGlCore2.default.GLBuffer.createIndexBuffer(gl);
	
	    /**
	     * Whether this graphics is dirty or not
	     * @member {boolean}
	     */
	    this.dirty = true;
	
	    this.glPoints = null;
	    this.glIndices = null;
	
	    /**
	     *
	     * @member {PIXI.Shader}
	     */
	    this.shader = shader;
	
	    this.vao = new _pixiGlCore2.default.VertexArrayObject(gl, attribsState).addIndex(this.indexBuffer).addAttribute(this.buffer, shader.attributes.aVertexPosition, gl.FLOAT, false, 4 * 6, 0).addAttribute(this.buffer, shader.attributes.aColor, gl.FLOAT, false, 4 * 6, 2 * 4);
	  }
	
	  /**
	   * Resets the vertices and the indices
	   */
	
	
	  WebGLGraphicsData.prototype.reset = function reset() {
	    this.points.length = 0;
	    this.indices.length = 0;
	  };
	
	  /**
	   * Binds the buffers and uploads the data
	   */
	
	
	  WebGLGraphicsData.prototype.upload = function upload() {
	    this.glPoints = new Float32Array(this.points);
	    this.buffer.upload(this.glPoints);
	
	    this.glIndices = new Uint16Array(this.indices);
	    this.indexBuffer.upload(this.glIndices);
	
	    this.dirty = false;
	  };
	
	  /**
	   * Empties all the data
	   */
	
	
	  WebGLGraphicsData.prototype.destroy = function destroy() {
	    this.color = null;
	    this.points = null;
	    this.indices = null;
	
	    this.vao.destroy();
	    this.buffer.destroy();
	    this.indexBuffer.destroy();
	
	    this.gl = null;
	
	    this.buffer = null;
	    this.indexBuffer = null;
	
	    this.glPoints = null;
	    this.glIndices = null;
	  };
	
	  return WebGLGraphicsData;
	}();
	
	exports.default = WebGLGraphicsData;
	//# sourceMappingURL=WebGLGraphicsData.js.map

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _Shader2 = __webpack_require__(93);
	
	var _Shader3 = _interopRequireDefault(_Shader2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * This shader is used to draw simple primitive shapes for {@link PIXI.Graphics}.
	 *
	 * @class
	 * @memberof PIXI
	 * @extends PIXI.Shader
	 */
	var PrimitiveShader = function (_Shader) {
	    _inherits(PrimitiveShader, _Shader);
	
	    /**
	     * @param {WebGLRenderingContext} gl - The webgl shader manager this shader works for.
	     */
	    function PrimitiveShader(gl) {
	        _classCallCheck(this, PrimitiveShader);
	
	        return _possibleConstructorReturn(this, _Shader.call(this, gl,
	        // vertex shader
	        ['attribute vec2 aVertexPosition;', 'attribute vec4 aColor;', 'uniform mat3 translationMatrix;', 'uniform mat3 projectionMatrix;', 'uniform float alpha;', 'uniform vec3 tint;', 'varying vec4 vColor;', 'void main(void){', '   gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);', '   vColor = aColor * vec4(tint * alpha, alpha);', '}'].join('\n'),
	        // fragment shader
	        ['varying vec4 vColor;', 'void main(void){', '   gl_FragColor = vColor;', '}'].join('\n')));
	    }
	
	    return PrimitiveShader;
	}(_Shader3.default);
	
	exports.default = PrimitiveShader;
	//# sourceMappingURL=PrimitiveShader.js.map

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = buildPoly;
	
	var _buildLine = __webpack_require__(113);
	
	var _buildLine2 = _interopRequireDefault(_buildLine);
	
	var _utils = __webpack_require__(51);
	
	var _earcut = __webpack_require__(114);
	
	var _earcut2 = _interopRequireDefault(_earcut);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Builds a polygon to draw
	 *
	 * Ignored from docs since it is not directly exposed.
	 *
	 * @ignore
	 * @private
	 * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties
	 * @param {object} webGLData - an object containing all the webGL-specific information to create this shape
	 */
	function buildPoly(graphicsData, webGLData) {
	    graphicsData.points = graphicsData.shape.points.slice();
	
	    var points = graphicsData.points;
	
	    if (graphicsData.fill && points.length >= 6) {
	        var holeArray = [];
	        // Process holes..
	        var holes = graphicsData.holes;
	
	        for (var i = 0; i < holes.length; i++) {
	            var hole = holes[i];
	
	            holeArray.push(points.length / 2);
	
	            points = points.concat(hole.points);
	        }
	
	        // get first and last point.. figure out the middle!
	        var verts = webGLData.points;
	        var indices = webGLData.indices;
	
	        var length = points.length / 2;
	
	        // sort color
	        var color = (0, _utils.hex2rgb)(graphicsData.fillColor);
	        var alpha = graphicsData.fillAlpha;
	        var r = color[0] * alpha;
	        var g = color[1] * alpha;
	        var b = color[2] * alpha;
	
	        var triangles = (0, _earcut2.default)(points, holeArray, 2);
	
	        if (!triangles) {
	            return;
	        }
	
	        var vertPos = verts.length / 6;
	
	        for (var _i = 0; _i < triangles.length; _i += 3) {
	            indices.push(triangles[_i] + vertPos);
	            indices.push(triangles[_i] + vertPos);
	            indices.push(triangles[_i + 1] + vertPos);
	            indices.push(triangles[_i + 2] + vertPos);
	            indices.push(triangles[_i + 2] + vertPos);
	        }
	
	        for (var _i2 = 0; _i2 < length; _i2++) {
	            verts.push(points[_i2 * 2], points[_i2 * 2 + 1], r, g, b, alpha);
	        }
	    }
	
	    if (graphicsData.lineWidth > 0) {
	        (0, _buildLine2.default)(graphicsData, webGLData);
	    }
	}
	//# sourceMappingURL=buildPoly.js.map

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = buildLine;
	
	var _math = __webpack_require__(14);
	
	var _utils = __webpack_require__(51);
	
	/**
	 * Builds a line to draw
	 *
	 * Ignored from docs since it is not directly exposed.
	 *
	 * @ignore
	 * @private
	 * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties
	 * @param {object} webGLData - an object containing all the webGL-specific information to create this shape
	 */
	function buildLine(graphicsData, webGLData) {
	    // TODO OPTIMISE!
	    var points = graphicsData.points;
	
	    if (points.length === 0) {
	        return;
	    }
	    // if the line width is an odd number add 0.5 to align to a whole pixel
	    // commenting this out fixes #711 and #1620
	    // if (graphicsData.lineWidth%2)
	    // {
	    //     for (i = 0; i < points.length; i++)
	    //     {
	    //         points[i] += 0.5;
	    //     }
	    // }
	
	    // get first and last point.. figure out the middle!
	    var firstPoint = new _math.Point(points[0], points[1]);
	    var lastPoint = new _math.Point(points[points.length - 2], points[points.length - 1]);
	
	    // if the first point is the last point - gonna have issues :)
	    if (firstPoint.x === lastPoint.x && firstPoint.y === lastPoint.y) {
	        // need to clone as we are going to slightly modify the shape..
	        points = points.slice();
	
	        points.pop();
	        points.pop();
	
	        lastPoint = new _math.Point(points[points.length - 2], points[points.length - 1]);
	
	        var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
	        var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
	
	        points.unshift(midPointX, midPointY);
	        points.push(midPointX, midPointY);
	    }
	
	    var verts = webGLData.points;
	    var indices = webGLData.indices;
	    var length = points.length / 2;
	    var indexCount = points.length;
	    var indexStart = verts.length / 6;
	
	    // DRAW the Line
	    var width = graphicsData.lineWidth / 2;
	
	    // sort color
	    var color = (0, _utils.hex2rgb)(graphicsData.lineColor);
	    var alpha = graphicsData.lineAlpha;
	    var r = color[0] * alpha;
	    var g = color[1] * alpha;
	    var b = color[2] * alpha;
	
	    var p1x = points[0];
	    var p1y = points[1];
	    var p2x = points[2];
	    var p2y = points[3];
	    var p3x = 0;
	    var p3y = 0;
	
	    var perpx = -(p1y - p2y);
	    var perpy = p1x - p2x;
	    var perp2x = 0;
	    var perp2y = 0;
	    var perp3x = 0;
	    var perp3y = 0;
	
	    var dist = Math.sqrt(perpx * perpx + perpy * perpy);
	
	    perpx /= dist;
	    perpy /= dist;
	    perpx *= width;
	    perpy *= width;
	
	    // start
	    verts.push(p1x - perpx, p1y - perpy, r, g, b, alpha);
	
	    verts.push(p1x + perpx, p1y + perpy, r, g, b, alpha);
	
	    for (var i = 1; i < length - 1; ++i) {
	        p1x = points[(i - 1) * 2];
	        p1y = points[(i - 1) * 2 + 1];
	
	        p2x = points[i * 2];
	        p2y = points[i * 2 + 1];
	
	        p3x = points[(i + 1) * 2];
	        p3y = points[(i + 1) * 2 + 1];
	
	        perpx = -(p1y - p2y);
	        perpy = p1x - p2x;
	
	        dist = Math.sqrt(perpx * perpx + perpy * perpy);
	        perpx /= dist;
	        perpy /= dist;
	        perpx *= width;
	        perpy *= width;
	
	        perp2x = -(p2y - p3y);
	        perp2y = p2x - p3x;
	
	        dist = Math.sqrt(perp2x * perp2x + perp2y * perp2y);
	        perp2x /= dist;
	        perp2y /= dist;
	        perp2x *= width;
	        perp2y *= width;
	
	        var a1 = -perpy + p1y - (-perpy + p2y);
	        var b1 = -perpx + p2x - (-perpx + p1x);
	        var c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
	        var a2 = -perp2y + p3y - (-perp2y + p2y);
	        var b2 = -perp2x + p2x - (-perp2x + p3x);
	        var c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
	
	        var denom = a1 * b2 - a2 * b1;
	
	        if (Math.abs(denom) < 0.1) {
	            denom += 10.1;
	            verts.push(p2x - perpx, p2y - perpy, r, g, b, alpha);
	
	            verts.push(p2x + perpx, p2y + perpy, r, g, b, alpha);
	
	            continue;
	        }
	
	        var px = (b1 * c2 - b2 * c1) / denom;
	        var py = (a2 * c1 - a1 * c2) / denom;
	        var pdist = (px - p2x) * (px - p2x) + (py - p2y) * (py - p2y);
	
	        if (pdist > 196 * width * width) {
	            perp3x = perpx - perp2x;
	            perp3y = perpy - perp2y;
	
	            dist = Math.sqrt(perp3x * perp3x + perp3y * perp3y);
	            perp3x /= dist;
	            perp3y /= dist;
	            perp3x *= width;
	            perp3y *= width;
	
	            verts.push(p2x - perp3x, p2y - perp3y);
	            verts.push(r, g, b, alpha);
	
	            verts.push(p2x + perp3x, p2y + perp3y);
	            verts.push(r, g, b, alpha);
	
	            verts.push(p2x - perp3x, p2y - perp3y);
	            verts.push(r, g, b, alpha);
	
	            indexCount++;
	        } else {
	            verts.push(px, py);
	            verts.push(r, g, b, alpha);
	
	            verts.push(p2x - (px - p2x), p2y - (py - p2y));
	            verts.push(r, g, b, alpha);
	        }
	    }
	
	    p1x = points[(length - 2) * 2];
	    p1y = points[(length - 2) * 2 + 1];
	
	    p2x = points[(length - 1) * 2];
	    p2y = points[(length - 1) * 2 + 1];
	
	    perpx = -(p1y - p2y);
	    perpy = p1x - p2x;
	
	    dist = Math.sqrt(perpx * perpx + perpy * perpy);
	    perpx /= dist;
	    perpy /= dist;
	    perpx *= width;
	    perpy *= width;
	
	    verts.push(p2x - perpx, p2y - perpy);
	    verts.push(r, g, b, alpha);
	
	    verts.push(p2x + perpx, p2y + perpy);
	    verts.push(r, g, b, alpha);
	
	    indices.push(indexStart);
	
	    for (var _i = 0; _i < indexCount; ++_i) {
	        indices.push(indexStart++);
	    }
	
	    indices.push(indexStart - 1);
	}
	//# sourceMappingURL=buildLine.js.map

/***/ },
/* 114 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = earcut;
	
	function earcut(data, holeIndices, dim) {
	
	    dim = dim || 2;
	
	    var hasHoles = holeIndices && holeIndices.length,
	        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
	        outerNode = linkedList(data, 0, outerLen, dim, true),
	        triangles = [];
	
	    if (!outerNode) return triangles;
	
	    var minX, minY, maxX, maxY, x, y, size;
	
	    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
	
	    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
	    if (data.length > 80 * dim) {
	        minX = maxX = data[0];
	        minY = maxY = data[1];
	
	        for (var i = dim; i < outerLen; i += dim) {
	            x = data[i];
	            y = data[i + 1];
	            if (x < minX) minX = x;
	            if (y < minY) minY = y;
	            if (x > maxX) maxX = x;
	            if (y > maxY) maxY = y;
	        }
	
	        // minX, minY and size are later used to transform coords into integers for z-order calculation
	        size = Math.max(maxX - minX, maxY - minY);
	    }
	
	    earcutLinked(outerNode, triangles, dim, minX, minY, size);
	
	    return triangles;
	}
	
	// create a circular doubly linked list from polygon points in the specified winding order
	function linkedList(data, start, end, dim, clockwise) {
	    var i, last;
	
	    if (clockwise === (signedArea(data, start, end, dim) > 0)) {
	        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
	    } else {
	        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
	    }
	
	    if (last && equals(last, last.next)) {
	        removeNode(last);
	        last = last.next;
	    }
	
	    return last;
	}
	
	// eliminate colinear or duplicate points
	function filterPoints(start, end) {
	    if (!start) return start;
	    if (!end) end = start;
	
	    var p = start,
	        again;
	    do {
	        again = false;
	
	        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
	            removeNode(p);
	            p = end = p.prev;
	            if (p === p.next) return null;
	            again = true;
	
	        } else {
	            p = p.next;
	        }
	    } while (again || p !== end);
	
	    return end;
	}
	
	// main ear slicing loop which triangulates a polygon (given as a linked list)
	function earcutLinked(ear, triangles, dim, minX, minY, size, pass) {
	    if (!ear) return;
	
	    // interlink polygon nodes in z-order
	    if (!pass && size) indexCurve(ear, minX, minY, size);
	
	    var stop = ear,
	        prev, next;
	
	    // iterate through ears, slicing them one by one
	    while (ear.prev !== ear.next) {
	        prev = ear.prev;
	        next = ear.next;
	
	        if (size ? isEarHashed(ear, minX, minY, size) : isEar(ear)) {
	            // cut off the triangle
	            triangles.push(prev.i / dim);
	            triangles.push(ear.i / dim);
	            triangles.push(next.i / dim);
	
	            removeNode(ear);
	
	            // skipping the next vertice leads to less sliver triangles
	            ear = next.next;
	            stop = next.next;
	
	            continue;
	        }
	
	        ear = next;
	
	        // if we looped through the whole remaining polygon and can't find any more ears
	        if (ear === stop) {
	            // try filtering points and slicing again
	            if (!pass) {
	                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1);
	
	            // if this didn't work, try curing all small self-intersections locally
	            } else if (pass === 1) {
	                ear = cureLocalIntersections(ear, triangles, dim);
	                earcutLinked(ear, triangles, dim, minX, minY, size, 2);
	
	            // as a last resort, try splitting the remaining polygon into two
	            } else if (pass === 2) {
	                splitEarcut(ear, triangles, dim, minX, minY, size);
	            }
	
	            break;
	        }
	    }
	}
	
	// check whether a polygon node forms a valid ear with adjacent nodes
	function isEar(ear) {
	    var a = ear.prev,
	        b = ear,
	        c = ear.next;
	
	    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
	
	    // now make sure we don't have other points inside the potential ear
	    var p = ear.next.next;
	
	    while (p !== ear.prev) {
	        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
	            area(p.prev, p, p.next) >= 0) return false;
	        p = p.next;
	    }
	
	    return true;
	}
	
	function isEarHashed(ear, minX, minY, size) {
	    var a = ear.prev,
	        b = ear,
	        c = ear.next;
	
	    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
	
	    // triangle bbox; min & max are calculated like this for speed
	    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
	        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
	        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
	        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);
	
	    // z-order range for the current triangle bbox;
	    var minZ = zOrder(minTX, minTY, minX, minY, size),
	        maxZ = zOrder(maxTX, maxTY, minX, minY, size);
	
	    // first look for points inside the triangle in increasing z-order
	    var p = ear.nextZ;
	
	    while (p && p.z <= maxZ) {
	        if (p !== ear.prev && p !== ear.next &&
	            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
	            area(p.prev, p, p.next) >= 0) return false;
	        p = p.nextZ;
	    }
	
	    // then look for points in decreasing z-order
	    p = ear.prevZ;
	
	    while (p && p.z >= minZ) {
	        if (p !== ear.prev && p !== ear.next &&
	            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
	            area(p.prev, p, p.next) >= 0) return false;
	        p = p.prevZ;
	    }
	
	    return true;
	}
	
	// go through all polygon nodes and cure small local self-intersections
	function cureLocalIntersections(start, triangles, dim) {
	    var p = start;
	    do {
	        var a = p.prev,
	            b = p.next.next;
	
	        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
	
	            triangles.push(a.i / dim);
	            triangles.push(p.i / dim);
	            triangles.push(b.i / dim);
	
	            // remove two nodes involved
	            removeNode(p);
	            removeNode(p.next);
	
	            p = start = b;
	        }
	        p = p.next;
	    } while (p !== start);
	
	    return p;
	}
	
	// try splitting polygon into two and triangulate them independently
	function splitEarcut(start, triangles, dim, minX, minY, size) {
	    // look for a valid diagonal that divides the polygon into two
	    var a = start;
	    do {
	        var b = a.next.next;
	        while (b !== a.prev) {
	            if (a.i !== b.i && isValidDiagonal(a, b)) {
	                // split the polygon in two by the diagonal
	                var c = splitPolygon(a, b);
	
	                // filter colinear points around the cuts
	                a = filterPoints(a, a.next);
	                c = filterPoints(c, c.next);
	
	                // run earcut on each half
	                earcutLinked(a, triangles, dim, minX, minY, size);
	                earcutLinked(c, triangles, dim, minX, minY, size);
	                return;
	            }
	            b = b.next;
	        }
	        a = a.next;
	    } while (a !== start);
	}
	
	// link every hole into the outer loop, producing a single-ring polygon without holes
	function eliminateHoles(data, holeIndices, outerNode, dim) {
	    var queue = [],
	        i, len, start, end, list;
	
	    for (i = 0, len = holeIndices.length; i < len; i++) {
	        start = holeIndices[i] * dim;
	        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
	        list = linkedList(data, start, end, dim, false);
	        if (list === list.next) list.steiner = true;
	        queue.push(getLeftmost(list));
	    }
	
	    queue.sort(compareX);
	
	    // process holes from left to right
	    for (i = 0; i < queue.length; i++) {
	        eliminateHole(queue[i], outerNode);
	        outerNode = filterPoints(outerNode, outerNode.next);
	    }
	
	    return outerNode;
	}
	
	function compareX(a, b) {
	    return a.x - b.x;
	}
	
	// find a bridge between vertices that connects hole with an outer ring and and link it
	function eliminateHole(hole, outerNode) {
	    outerNode = findHoleBridge(hole, outerNode);
	    if (outerNode) {
	        var b = splitPolygon(outerNode, hole);
	        filterPoints(b, b.next);
	    }
	}
	
	// David Eberly's algorithm for finding a bridge between hole and outer polygon
	function findHoleBridge(hole, outerNode) {
	    var p = outerNode,
	        hx = hole.x,
	        hy = hole.y,
	        qx = -Infinity,
	        m;
	
	    // find a segment intersected by a ray from the hole's leftmost point to the left;
	    // segment's endpoint with lesser x will be potential connection point
	    do {
	        if (hy <= p.y && hy >= p.next.y) {
	            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
	            if (x <= hx && x > qx) {
	                qx = x;
	                if (x === hx) {
	                    if (hy === p.y) return p;
	                    if (hy === p.next.y) return p.next;
	                }
	                m = p.x < p.next.x ? p : p.next;
	            }
	        }
	        p = p.next;
	    } while (p !== outerNode);
	
	    if (!m) return null;
	
	    if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint
	
	    // look for points inside the triangle of hole point, segment intersection and endpoint;
	    // if there are no points found, we have a valid connection;
	    // otherwise choose the point of the minimum angle with the ray as connection point
	
	    var stop = m,
	        mx = m.x,
	        my = m.y,
	        tanMin = Infinity,
	        tan;
	
	    p = m.next;
	
	    while (p !== stop) {
	        if (hx >= p.x && p.x >= mx &&
	                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
	
	            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential
	
	            if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {
	                m = p;
	                tanMin = tan;
	            }
	        }
	
	        p = p.next;
	    }
	
	    return m;
	}
	
	// interlink polygon nodes in z-order
	function indexCurve(start, minX, minY, size) {
	    var p = start;
	    do {
	        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, size);
	        p.prevZ = p.prev;
	        p.nextZ = p.next;
	        p = p.next;
	    } while (p !== start);
	
	    p.prevZ.nextZ = null;
	    p.prevZ = null;
	
	    sortLinked(p);
	}
	
	// Simon Tatham's linked list merge sort algorithm
	// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
	function sortLinked(list) {
	    var i, p, q, e, tail, numMerges, pSize, qSize,
	        inSize = 1;
	
	    do {
	        p = list;
	        list = null;
	        tail = null;
	        numMerges = 0;
	
	        while (p) {
	            numMerges++;
	            q = p;
	            pSize = 0;
	            for (i = 0; i < inSize; i++) {
	                pSize++;
	                q = q.nextZ;
	                if (!q) break;
	            }
	
	            qSize = inSize;
	
	            while (pSize > 0 || (qSize > 0 && q)) {
	
	                if (pSize === 0) {
	                    e = q;
	                    q = q.nextZ;
	                    qSize--;
	                } else if (qSize === 0 || !q) {
	                    e = p;
	                    p = p.nextZ;
	                    pSize--;
	                } else if (p.z <= q.z) {
	                    e = p;
	                    p = p.nextZ;
	                    pSize--;
	                } else {
	                    e = q;
	                    q = q.nextZ;
	                    qSize--;
	                }
	
	                if (tail) tail.nextZ = e;
	                else list = e;
	
	                e.prevZ = tail;
	                tail = e;
	            }
	
	            p = q;
	        }
	
	        tail.nextZ = null;
	        inSize *= 2;
	
	    } while (numMerges > 1);
	
	    return list;
	}
	
	// z-order of a point given coords and size of the data bounding box
	function zOrder(x, y, minX, minY, size) {
	    // coords are transformed into non-negative 15-bit integer range
	    x = 32767 * (x - minX) / size;
	    y = 32767 * (y - minY) / size;
	
	    x = (x | (x << 8)) & 0x00FF00FF;
	    x = (x | (x << 4)) & 0x0F0F0F0F;
	    x = (x | (x << 2)) & 0x33333333;
	    x = (x | (x << 1)) & 0x55555555;
	
	    y = (y | (y << 8)) & 0x00FF00FF;
	    y = (y | (y << 4)) & 0x0F0F0F0F;
	    y = (y | (y << 2)) & 0x33333333;
	    y = (y | (y << 1)) & 0x55555555;
	
	    return x | (y << 1);
	}
	
	// find the leftmost node of a polygon ring
	function getLeftmost(start) {
	    var p = start,
	        leftmost = start;
	    do {
	        if (p.x < leftmost.x) leftmost = p;
	        p = p.next;
	    } while (p !== start);
	
	    return leftmost;
	}
	
	// check if a point lies within a convex triangle
	function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
	    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
	           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
	           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
	}
	
	// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
	function isValidDiagonal(a, b) {
	    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&
	           locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
	}
	
	// signed area of a triangle
	function area(p, q, r) {
	    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
	}
	
	// check if two points are equal
	function equals(p1, p2) {
	    return p1.x === p2.x && p1.y === p2.y;
	}
	
	// check if two segments intersect
	function intersects(p1, q1, p2, q2) {
	    if ((equals(p1, q1) && equals(p2, q2)) ||
	        (equals(p1, q2) && equals(p2, q1))) return true;
	    return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&
	           area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;
	}
	
	// check if a polygon diagonal intersects any polygon segments
	function intersectsPolygon(a, b) {
	    var p = a;
	    do {
	        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
	                intersects(p, p.next, a, b)) return true;
	        p = p.next;
	    } while (p !== a);
	
	    return false;
	}
	
	// check if a polygon diagonal is locally inside the polygon
	function locallyInside(a, b) {
	    return area(a.prev, a, a.next) < 0 ?
	        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
	        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
	}
	
	// check if the middle point of a polygon diagonal is inside the polygon
	function middleInside(a, b) {
	    var p = a,
	        inside = false,
	        px = (a.x + b.x) / 2,
	        py = (a.y + b.y) / 2;
	    do {
	        if (((p.y > py) !== (p.next.y > py)) && (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
	            inside = !inside;
	        p = p.next;
	    } while (p !== a);
	
	    return inside;
	}
	
	// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
	// if one belongs to the outer ring and another to a hole, it merges it into a single ring
	function splitPolygon(a, b) {
	    var a2 = new Node(a.i, a.x, a.y),
	        b2 = new Node(b.i, b.x, b.y),
	        an = a.next,
	        bp = b.prev;
	
	    a.next = b;
	    b.prev = a;
	
	    a2.next = an;
	    an.prev = a2;
	
	    b2.next = a2;
	    a2.prev = b2;
	
	    bp.next = b2;
	    b2.prev = bp;
	
	    return b2;
	}
	
	// create a node and optionally link it with previous one (in a circular doubly linked list)
	function insertNode(i, x, y, last) {
	    var p = new Node(i, x, y);
	
	    if (!last) {
	        p.prev = p;
	        p.next = p;
	
	    } else {
	        p.next = last.next;
	        p.prev = last;
	        last.next.prev = p;
	        last.next = p;
	    }
	    return p;
	}
	
	function removeNode(p) {
	    p.next.prev = p.prev;
	    p.prev.next = p.next;
	
	    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
	    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
	}
	
	function Node(i, x, y) {
	    // vertice index in coordinates array
	    this.i = i;
	
	    // vertex coordinates
	    this.x = x;
	    this.y = y;
	
	    // previous and next vertice nodes in a polygon ring
	    this.prev = null;
	    this.next = null;
	
	    // z-order curve value
	    this.z = null;
	
	    // previous and next nodes in z-order
	    this.prevZ = null;
	    this.nextZ = null;
	
	    // indicates whether this is a steiner point
	    this.steiner = false;
	}
	
	// return a percentage difference between the polygon area and its triangulation area;
	// used to verify correctness of triangulation
	earcut.deviation = function (data, holeIndices, dim, triangles) {
	    var hasHoles = holeIndices && holeIndices.length;
	    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
	
	    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
	    if (hasHoles) {
	        for (var i = 0, len = holeIndices.length; i < len; i++) {
	            var start = holeIndices[i] * dim;
	            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
	            polygonArea -= Math.abs(signedArea(data, start, end, dim));
	        }
	    }
	
	    var trianglesArea = 0;
	    for (i = 0; i < triangles.length; i += 3) {
	        var a = triangles[i] * dim;
	        var b = triangles[i + 1] * dim;
	        var c = triangles[i + 2] * dim;
	        trianglesArea += Math.abs(
	            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
	            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
	    }
	
	    return polygonArea === 0 && trianglesArea === 0 ? 0 :
	        Math.abs((trianglesArea - polygonArea) / polygonArea);
	};
	
	function signedArea(data, start, end, dim) {
	    var sum = 0;
	    for (var i = start, j = end - dim; i < end; i += dim) {
	        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
	        j = i;
	    }
	    return sum;
	}
	
	// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
	earcut.flatten = function (data) {
	    var dim = data[0][0].length,
	        result = {vertices: [], holes: [], dimensions: dim},
	        holeIndex = 0;
	
	    for (var i = 0; i < data.length; i++) {
	        for (var j = 0; j < data[i].length; j++) {
	            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
	        }
	        if (i > 0) {
	            holeIndex += data[i - 1].length;
	            result.holes.push(holeIndex);
	        }
	    }
	    return result;
	};


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = buildRectangle;
	
	var _buildLine = __webpack_require__(113);
	
	var _buildLine2 = _interopRequireDefault(_buildLine);
	
	var _utils = __webpack_require__(51);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Builds a rectangle to draw
	 *
	 * Ignored from docs since it is not directly exposed.
	 *
	 * @ignore
	 * @private
	 * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties
	 * @param {object} webGLData - an object containing all the webGL-specific information to create this shape
	 */
	function buildRectangle(graphicsData, webGLData) {
	    // --- //
	    // need to convert points to a nice regular data
	    //
	    var rectData = graphicsData.shape;
	    var x = rectData.x;
	    var y = rectData.y;
	    var width = rectData.width;
	    var height = rectData.height;
	
	    if (graphicsData.fill) {
	        var color = (0, _utils.hex2rgb)(graphicsData.fillColor);
	        var alpha = graphicsData.fillAlpha;
	
	        var r = color[0] * alpha;
	        var g = color[1] * alpha;
	        var b = color[2] * alpha;
	
	        var verts = webGLData.points;
	        var indices = webGLData.indices;
	
	        var vertPos = verts.length / 6;
	
	        // start
	        verts.push(x, y);
	        verts.push(r, g, b, alpha);
	
	        verts.push(x + width, y);
	        verts.push(r, g, b, alpha);
	
	        verts.push(x, y + height);
	        verts.push(r, g, b, alpha);
	
	        verts.push(x + width, y + height);
	        verts.push(r, g, b, alpha);
	
	        // insert 2 dead triangles..
	        indices.push(vertPos, vertPos, vertPos + 1, vertPos + 2, vertPos + 3, vertPos + 3);
	    }
	
	    if (graphicsData.lineWidth) {
	        var tempPoints = graphicsData.points;
	
	        graphicsData.points = [x, y, x + width, y, x + width, y + height, x, y + height, x, y];
	
	        (0, _buildLine2.default)(graphicsData, webGLData);
	
	        graphicsData.points = tempPoints;
	    }
	}
	//# sourceMappingURL=buildRectangle.js.map

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = buildRoundedRectangle;
	
	var _earcut = __webpack_require__(114);
	
	var _earcut2 = _interopRequireDefault(_earcut);
	
	var _buildLine = __webpack_require__(113);
	
	var _buildLine2 = _interopRequireDefault(_buildLine);
	
	var _utils = __webpack_require__(51);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Builds a rounded rectangle to draw
	 *
	 * Ignored from docs since it is not directly exposed.
	 *
	 * @ignore
	 * @private
	 * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties
	 * @param {object} webGLData - an object containing all the webGL-specific information to create this shape
	 */
	function buildRoundedRectangle(graphicsData, webGLData) {
	    var rrectData = graphicsData.shape;
	    var x = rrectData.x;
	    var y = rrectData.y;
	    var width = rrectData.width;
	    var height = rrectData.height;
	
	    var radius = rrectData.radius;
	
	    var recPoints = [];
	
	    recPoints.push(x, y + radius);
	    quadraticBezierCurve(x, y + height - radius, x, y + height, x + radius, y + height, recPoints);
	    quadraticBezierCurve(x + width - radius, y + height, x + width, y + height, x + width, y + height - radius, recPoints);
	    quadraticBezierCurve(x + width, y + radius, x + width, y, x + width - radius, y, recPoints);
	    quadraticBezierCurve(x + radius, y, x, y, x, y + radius + 0.0000000001, recPoints);
	
	    // this tiny number deals with the issue that occurs when points overlap and earcut fails to triangulate the item.
	    // TODO - fix this properly, this is not very elegant.. but it works for now.
	
	    if (graphicsData.fill) {
	        var color = (0, _utils.hex2rgb)(graphicsData.fillColor);
	        var alpha = graphicsData.fillAlpha;
	
	        var r = color[0] * alpha;
	        var g = color[1] * alpha;
	        var b = color[2] * alpha;
	
	        var verts = webGLData.points;
	        var indices = webGLData.indices;
	
	        var vecPos = verts.length / 6;
	
	        var triangles = (0, _earcut2.default)(recPoints, null, 2);
	
	        for (var i = 0, j = triangles.length; i < j; i += 3) {
	            indices.push(triangles[i] + vecPos);
	            indices.push(triangles[i] + vecPos);
	            indices.push(triangles[i + 1] + vecPos);
	            indices.push(triangles[i + 2] + vecPos);
	            indices.push(triangles[i + 2] + vecPos);
	        }
	
	        for (var _i = 0, _j = recPoints.length; _i < _j; _i++) {
	            verts.push(recPoints[_i], recPoints[++_i], r, g, b, alpha);
	        }
	    }
	
	    if (graphicsData.lineWidth) {
	        var tempPoints = graphicsData.points;
	
	        graphicsData.points = recPoints;
	
	        (0, _buildLine2.default)(graphicsData, webGLData);
	
	        graphicsData.points = tempPoints;
	    }
	}
	
	/**
	 * Calculate the points for a quadratic bezier curve. (helper function..)
	 * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c
	 *
	 * Ignored from docs since it is not directly exposed.
	 *
	 * @ignore
	 * @private
	 * @param {number} fromX - Origin point x
	 * @param {number} fromY - Origin point x
	 * @param {number} cpX - Control point x
	 * @param {number} cpY - Control point y
	 * @param {number} toX - Destination point x
	 * @param {number} toY - Destination point y
	 * @param {number[]} [out=[]] - The output array to add points into. If not passed, a new array is created.
	 * @return {number[]} an array of points
	 */
	function quadraticBezierCurve(fromX, fromY, cpX, cpY, toX, toY) {
	    var out = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];
	
	    var n = 20;
	    var points = out;
	
	    var xa = 0;
	    var ya = 0;
	    var xb = 0;
	    var yb = 0;
	    var x = 0;
	    var y = 0;
	
	    function getPt(n1, n2, perc) {
	        var diff = n2 - n1;
	
	        return n1 + diff * perc;
	    }
	
	    for (var i = 0, j = 0; i <= n; ++i) {
	        j = i / n;
	
	        // The Green Line
	        xa = getPt(fromX, cpX, j);
	        ya = getPt(fromY, cpY, j);
	        xb = getPt(cpX, toX, j);
	        yb = getPt(cpY, toY, j);
	
	        // The Black Dot
	        x = getPt(xa, xb, j);
	        y = getPt(ya, yb, j);
	
	        points.push(x, y);
	    }
	
	    return points;
	}
	//# sourceMappingURL=buildRoundedRectangle.js.map

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = buildCircle;
	
	var _buildLine = __webpack_require__(113);
	
	var _buildLine2 = _interopRequireDefault(_buildLine);
	
	var _const = __webpack_require__(12);
	
	var _utils = __webpack_require__(51);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Builds a circle to draw
	 *
	 * Ignored from docs since it is not directly exposed.
	 *
	 * @ignore
	 * @private
	 * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object to draw
	 * @param {object} webGLData - an object containing all the webGL-specific information to create this shape
	 */
	function buildCircle(graphicsData, webGLData) {
	    // need to convert points to a nice regular data
	    var circleData = graphicsData.shape;
	    var x = circleData.x;
	    var y = circleData.y;
	    var width = void 0;
	    var height = void 0;
	
	    // TODO - bit hacky??
	    if (graphicsData.type === _const.SHAPES.CIRC) {
	        width = circleData.radius;
	        height = circleData.radius;
	    } else {
	        width = circleData.width;
	        height = circleData.height;
	    }
	
	    var totalSegs = Math.floor(30 * Math.sqrt(circleData.radius)) || Math.floor(15 * Math.sqrt(circleData.width + circleData.height));
	
	    var seg = Math.PI * 2 / totalSegs;
	
	    if (graphicsData.fill) {
	        var color = (0, _utils.hex2rgb)(graphicsData.fillColor);
	        var alpha = graphicsData.fillAlpha;
	
	        var r = color[0] * alpha;
	        var g = color[1] * alpha;
	        var b = color[2] * alpha;
	
	        var verts = webGLData.points;
	        var indices = webGLData.indices;
	
	        var vecPos = verts.length / 6;
	
	        indices.push(vecPos);
	
	        for (var i = 0; i < totalSegs + 1; i++) {
	            verts.push(x, y, r, g, b, alpha);
	
	            verts.push(x + Math.sin(seg * i) * width, y + Math.cos(seg * i) * height, r, g, b, alpha);
	
	            indices.push(vecPos++, vecPos++);
	        }
	
	        indices.push(vecPos - 1);
	    }
	
	    if (graphicsData.lineWidth) {
	        var tempPoints = graphicsData.points;
	
	        graphicsData.points = [];
	
	        for (var _i = 0; _i < totalSegs + 1; _i++) {
	            graphicsData.points.push(x + Math.sin(seg * _i) * width, y + Math.cos(seg * _i) * height);
	        }
	
	        (0, _buildLine2.default)(graphicsData, webGLData);
	
	        graphicsData.points = tempPoints;
	    }
	}
	//# sourceMappingURL=buildCircle.js.map

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _CanvasRenderer = __webpack_require__(69);
	
	var _CanvasRenderer2 = _interopRequireDefault(_CanvasRenderer);
	
	var _const = __webpack_require__(12);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @author Mat Groves
	 *
	 * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/
	 * for creating the original pixi version!
	 * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they
	 * now share 4 bytes on the vertex buffer
	 *
	 * Heavily inspired by LibGDX's CanvasGraphicsRenderer:
	 * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/CanvasGraphicsRenderer.java
	 */
	
	/**
	 * Renderer dedicated to drawing and batching graphics objects.
	 *
	 * @class
	 * @private
	 * @memberof PIXI
	 */
	var CanvasGraphicsRenderer = function () {
	    /**
	     * @param {PIXI.CanvasRenderer} renderer - The current PIXI renderer.
	     */
	    function CanvasGraphicsRenderer(renderer) {
	        _classCallCheck(this, CanvasGraphicsRenderer);
	
	        this.renderer = renderer;
	    }
	
	    /**
	     * Renders a Graphics object to a canvas.
	     *
	     * @param {PIXI.Graphics} graphics - the actual graphics object to render
	     */
	
	
	    CanvasGraphicsRenderer.prototype.render = function render(graphics) {
	        var renderer = this.renderer;
	        var context = renderer.context;
	        var worldAlpha = graphics.worldAlpha;
	        var transform = graphics.transform.worldTransform;
	        var resolution = renderer.resolution;
	
	        // if the tint has changed, set the graphics object to dirty.
	        if (this._prevTint !== this.tint) {
	            this.dirty = true;
	        }
	
	        context.setTransform(transform.a * resolution, transform.b * resolution, transform.c * resolution, transform.d * resolution, transform.tx * resolution, transform.ty * resolution);
	
	        if (graphics.dirty) {
	            this.updateGraphicsTint(graphics);
	            graphics.dirty = false;
	        }
	
	        renderer.setBlendMode(graphics.blendMode);
	
	        for (var i = 0; i < graphics.graphicsData.length; i++) {
	            var data = graphics.graphicsData[i];
	            var shape = data.shape;
	
	            var fillColor = data._fillTint;
	            var lineColor = data._lineTint;
	
	            context.lineWidth = data.lineWidth;
	
	            if (data.type === _const.SHAPES.POLY) {
	                context.beginPath();
	
	                this.renderPolygon(shape.points, shape.closed, context);
	
	                for (var j = 0; j < data.holes.length; j++) {
	                    this.renderPolygon(data.holes[j].points, true, context);
	                }
	
	                if (data.fill) {
	                    context.globalAlpha = data.fillAlpha * worldAlpha;
	                    context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);
	                    context.fill();
	                }
	                if (data.lineWidth) {
	                    context.globalAlpha = data.lineAlpha * worldAlpha;
	                    context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);
	                    context.stroke();
	                }
	            } else if (data.type === _const.SHAPES.RECT) {
	                if (data.fillColor || data.fillColor === 0) {
	                    context.globalAlpha = data.fillAlpha * worldAlpha;
	                    context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);
	                    context.fillRect(shape.x, shape.y, shape.width, shape.height);
	                }
	                if (data.lineWidth) {
	                    context.globalAlpha = data.lineAlpha * worldAlpha;
	                    context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);
	                    context.strokeRect(shape.x, shape.y, shape.width, shape.height);
	                }
	            } else if (data.type === _const.SHAPES.CIRC) {
	                // TODO - need to be Undefined!
	                context.beginPath();
	                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);
	                context.closePath();
	
	                if (data.fill) {
	                    context.globalAlpha = data.fillAlpha * worldAlpha;
	                    context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);
	                    context.fill();
	                }
	                if (data.lineWidth) {
	                    context.globalAlpha = data.lineAlpha * worldAlpha;
	                    context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);
	                    context.stroke();
	                }
	            } else if (data.type === _const.SHAPES.ELIP) {
	                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
	
	                var w = shape.width * 2;
	                var h = shape.height * 2;
	
	                var x = shape.x - w / 2;
	                var y = shape.y - h / 2;
	
	                context.beginPath();
	
	                var kappa = 0.5522848;
	                var ox = w / 2 * kappa; // control point offset horizontal
	                var oy = h / 2 * kappa; // control point offset vertical
	                var xe = x + w; // x-end
	                var ye = y + h; // y-end
	                var xm = x + w / 2; // x-middle
	                var ym = y + h / 2; // y-middle
	
	                context.moveTo(x, ym);
	                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
	                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
	                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
	                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
	
	                context.closePath();
	
	                if (data.fill) {
	                    context.globalAlpha = data.fillAlpha * worldAlpha;
	                    context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);
	                    context.fill();
	                }
	                if (data.lineWidth) {
	                    context.globalAlpha = data.lineAlpha * worldAlpha;
	                    context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);
	                    context.stroke();
	                }
	            } else if (data.type === _const.SHAPES.RREC) {
	                var rx = shape.x;
	                var ry = shape.y;
	                var width = shape.width;
	                var height = shape.height;
	                var radius = shape.radius;
	
	                var maxRadius = Math.min(width, height) / 2 | 0;
	
	                radius = radius > maxRadius ? maxRadius : radius;
	
	                context.beginPath();
	                context.moveTo(rx, ry + radius);
	                context.lineTo(rx, ry + height - radius);
	                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);
	                context.lineTo(rx + width - radius, ry + height);
	                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);
	                context.lineTo(rx + width, ry + radius);
	                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);
	                context.lineTo(rx + radius, ry);
	                context.quadraticCurveTo(rx, ry, rx, ry + radius);
	                context.closePath();
	
	                if (data.fillColor || data.fillColor === 0) {
	                    context.globalAlpha = data.fillAlpha * worldAlpha;
	                    context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);
	                    context.fill();
	                }
	
	                if (data.lineWidth) {
	                    context.globalAlpha = data.lineAlpha * worldAlpha;
	                    context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);
	                    context.stroke();
	                }
	            }
	        }
	    };
	
	    /**
	     * Updates the tint of a graphics object
	     *
	     * @private
	     * @param {PIXI.Graphics} graphics - the graphics that will have its tint updated
	     */
	
	
	    CanvasGraphicsRenderer.prototype.updateGraphicsTint = function updateGraphicsTint(graphics) {
	        graphics._prevTint = graphics.tint;
	
	        var tintR = (graphics.tint >> 16 & 0xFF) / 255;
	        var tintG = (graphics.tint >> 8 & 0xFF) / 255;
	        var tintB = (graphics.tint & 0xFF) / 255;
	
	        for (var i = 0; i < graphics.graphicsData.length; ++i) {
	            var data = graphics.graphicsData[i];
	
	            var fillColor = data.fillColor | 0;
	            var lineColor = data.lineColor | 0;
	
	            // super inline cos im an optimization NAZI :)
	            data._fillTint = ((fillColor >> 16 & 0xFF) / 255 * tintR * 255 << 16) + ((fillColor >> 8 & 0xFF) / 255 * tintG * 255 << 8) + (fillColor & 0xFF) / 255 * tintB * 255;
	
	            data._lineTint = ((lineColor >> 16 & 0xFF) / 255 * tintR * 255 << 16) + ((lineColor >> 8 & 0xFF) / 255 * tintG * 255 << 8) + (lineColor & 0xFF) / 255 * tintB * 255;
	        }
	    };
	
	    /**
	     * Renders a polygon.
	     *
	     * @param {PIXI.Point[]} points - The points to render
	     * @param {boolean} close - Should the polygon be closed
	     * @param {CanvasRenderingContext2D} context - The rendering context to use
	     */
	
	
	    CanvasGraphicsRenderer.prototype.renderPolygon = function renderPolygon(points, close, context) {
	        context.moveTo(points[0], points[1]);
	
	        for (var j = 1; j < points.length / 2; ++j) {
	            context.lineTo(points[j * 2], points[j * 2 + 1]);
	        }
	
	        if (close) {
	            context.closePath();
	        }
	    };
	
	    /**
	     * destroy graphics object
	     *
	     */
	
	
	    CanvasGraphicsRenderer.prototype.destroy = function destroy() {
	        this.renderer = null;
	    };
	
	    return CanvasGraphicsRenderer;
	}();
	
	exports.default = CanvasGraphicsRenderer;
	
	
	_CanvasRenderer2.default.registerPlugin('graphics', CanvasGraphicsRenderer);
	//# sourceMappingURL=CanvasGraphicsRenderer.js.map

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _Mesh = __webpack_require__(120);
	
	Object.defineProperty(exports, 'Mesh', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Mesh).default;
	  }
	});
	
	var _MeshRenderer = __webpack_require__(121);
	
	Object.defineProperty(exports, 'MeshRenderer', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_MeshRenderer).default;
	  }
	});
	
	var _CanvasMeshRenderer = __webpack_require__(122);
	
	Object.defineProperty(exports, 'CanvasMeshRenderer', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_CanvasMeshRenderer).default;
	  }
	});
	
	var _Plane = __webpack_require__(123);
	
	Object.defineProperty(exports, 'Plane', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Plane).default;
	  }
	});
	
	var _NineSlicePlane = __webpack_require__(124);
	
	Object.defineProperty(exports, 'NineSlicePlane', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_NineSlicePlane).default;
	  }
	});
	
	var _Rope = __webpack_require__(125);
	
	Object.defineProperty(exports, 'Rope', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Rope).default;
	  }
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	//# sourceMappingURL=index.js.map

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var tempPoint = new core.Point();
	var tempPolygon = new core.Polygon();
	
	/**
	 * Base mesh class
	 * @class
	 * @extends PIXI.Container
	 * @memberof PIXI.mesh
	 */
	
	var Mesh = function (_core$Container) {
	  _inherits(Mesh, _core$Container);
	
	  /**
	   * @param {PIXI.Texture} texture - The texture to use
	   * @param {Float32Array} [vertices] - if you want to specify the vertices
	   * @param {Float32Array} [uvs] - if you want to specify the uvs
	   * @param {Uint16Array} [indices] - if you want to specify the indices
	   * @param {number} [drawMode] - the drawMode, can be any of the Mesh.DRAW_MODES consts
	   */
	  function Mesh(texture, vertices, uvs, indices, drawMode) {
	    _classCallCheck(this, Mesh);
	
	    /**
	     * The texture of the Mesh
	     *
	     * @member {PIXI.Texture}
	     * @private
	     */
	    var _this = _possibleConstructorReturn(this, _core$Container.call(this));
	
	    _this._texture = null;
	
	    /**
	     * The Uvs of the Mesh
	     *
	     * @member {Float32Array}
	     */
	    _this.uvs = uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);
	
	    /**
	     * An array of vertices
	     *
	     * @member {Float32Array}
	     */
	    _this.vertices = vertices || new Float32Array([0, 0, 100, 0, 100, 100, 0, 100]);
	
	    /*
	     * @member {Uint16Array} An array containing the indices of the vertices
	     */
	    //  TODO auto generate this based on draw mode!
	    _this.indices = indices || new Uint16Array([0, 1, 3, 2]);
	
	    /**
	     * Version of mesh uvs are dirty or not
	     *
	     * @member {number}
	     */
	    _this.dirty = 0;
	
	    /**
	     * Version of mesh indices
	     *
	     * @member {number}
	     */
	    _this.indexDirty = 0;
	
	    /**
	     * The blend mode to be applied to the sprite. Set to `PIXI.BLEND_MODES.NORMAL` to remove
	     * any blend mode.
	     *
	     * @member {number}
	     * @default PIXI.BLEND_MODES.NORMAL
	     * @see PIXI.BLEND_MODES
	     */
	    _this.blendMode = core.BLEND_MODES.NORMAL;
	
	    /**
	     * Triangles in canvas mode are automatically antialiased, use this value to force triangles
	     * to overlap a bit with each other.
	     *
	     * @member {number}
	     */
	    _this.canvasPadding = 0;
	
	    /**
	     * The way the Mesh should be drawn, can be any of the {@link PIXI.mesh.Mesh.DRAW_MODES} consts
	     *
	     * @member {number}
	     * @see PIXI.mesh.Mesh.DRAW_MODES
	     */
	    _this.drawMode = drawMode || Mesh.DRAW_MODES.TRIANGLE_MESH;
	
	    // run texture setter;
	    _this.texture = texture;
	
	    /**
	     * The default shader that is used if a mesh doesn't have a more specific one.
	     *
	     * @member {PIXI.Shader}
	     */
	    _this.shader = null;
	
	    /**
	     * The tint applied to the mesh. This is a [r,g,b] value. A value of [1,1,1] will remove any
	     * tint effect.
	     *
	     * @member {number}
	     * @memberof PIXI.mesh.Mesh#
	     */
	    _this.tintRgb = new Float32Array([1, 1, 1]);
	
	    /**
	     * A map of renderer IDs to webgl render data
	     *
	     * @private
	     * @member {object<number, object>}
	     */
	    _this._glDatas = {};
	    return _this;
	  }
	
	  /**
	   * Renders the object using the WebGL renderer
	   *
	   * @private
	   * @param {PIXI.WebGLRenderer} renderer - a reference to the WebGL renderer
	   */
	
	
	  Mesh.prototype._renderWebGL = function _renderWebGL(renderer) {
	    renderer.setObjectRenderer(renderer.plugins.mesh);
	    renderer.plugins.mesh.render(this);
	  };
	
	  /**
	   * Renders the object using the Canvas renderer
	   *
	   * @private
	   * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.
	   */
	
	
	  Mesh.prototype._renderCanvas = function _renderCanvas(renderer) {
	    renderer.plugins.mesh.render(this);
	  };
	
	  /**
	   * When the texture is updated, this event will fire to update the scale and frame
	   *
	   * @private
	   */
	
	
	  Mesh.prototype._onTextureUpdate = function _onTextureUpdate() {}
	  /* empty */
	
	
	  /**
	   * Returns the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.
	   *
	   */
	  ;
	
	  Mesh.prototype._calculateBounds = function _calculateBounds() {
	    // TODO - we can cache local bounds and use them if they are dirty (like graphics)
	    this._bounds.addVertices(this.transform, this.vertices, 0, this.vertices.length);
	  };
	
	  /**
	   * Tests if a point is inside this mesh. Works only for TRIANGLE_MESH
	   *
	   * @param {PIXI.Point} point - the point to test
	   * @return {boolean} the result of the test
	   */
	
	
	  Mesh.prototype.containsPoint = function containsPoint(point) {
	    if (!this.getBounds().contains(point.x, point.y)) {
	      return false;
	    }
	
	    this.worldTransform.applyInverse(point, tempPoint);
	
	    var vertices = this.vertices;
	    var points = tempPolygon.points;
	    var indices = this.indices;
	    var len = this.indices.length;
	    var step = this.drawMode === Mesh.DRAW_MODES.TRIANGLES ? 3 : 1;
	
	    for (var i = 0; i + 2 < len; i += step) {
	      var ind0 = indices[i] * 2;
	      var ind1 = indices[i + 1] * 2;
	      var ind2 = indices[i + 2] * 2;
	
	      points[0] = vertices[ind0];
	      points[1] = vertices[ind0 + 1];
	      points[2] = vertices[ind1];
	      points[3] = vertices[ind1 + 1];
	      points[4] = vertices[ind2];
	      points[5] = vertices[ind2 + 1];
	
	      if (tempPolygon.contains(tempPoint.x, tempPoint.y)) {
	        return true;
	      }
	    }
	
	    return false;
	  };
	
	  /**
	   * The texture that the mesh uses.
	   *
	   * @member {PIXI.Texture}
	   * @memberof PIXI.mesh.Mesh#
	   */
	
	
	  _createClass(Mesh, [{
	    key: 'texture',
	    get: function get() {
	      return this._texture;
	    }
	
	    /**
	     * Sets the texture the mesh uses.
	     *
	     * @param {Texture} value - The value to set.
	     */
	    ,
	    set: function set(value) {
	      if (this._texture === value) {
	        return;
	      }
	
	      this._texture = value;
	
	      if (value) {
	        // wait for the texture to load
	        if (value.baseTexture.hasLoaded) {
	          this._onTextureUpdate();
	        } else {
	          value.once('update', this._onTextureUpdate, this);
	        }
	      }
	    }
	
	    /**
	     * The tint applied to the mesh. This is a hex value. A value of 0xFFFFFF will remove any tint effect.
	     *
	     * @member {number}
	     * @memberof PIXI.mesh.Mesh#
	     * @default 0xFFFFFF
	     */
	
	  }, {
	    key: 'tint',
	    get: function get() {
	      return core.utils.rgb2hex(this.tintRgb);
	    }
	
	    /**
	     * Sets the tint the mesh uses.
	     *
	     * @param {number} value - The value to set.
	     */
	    ,
	    set: function set(value) {
	      this.tintRgb = core.utils.hex2rgb(value, this.tintRgb);
	    }
	  }]);
	
	  return Mesh;
	}(core.Container);
	
	/**
	 * Different drawing buffer modes supported
	 *
	 * @static
	 * @constant
	 * @type {object}
	 * @property {number} TRIANGLE_MESH
	 * @property {number} TRIANGLES
	 */
	
	
	exports.default = Mesh;
	Mesh.DRAW_MODES = {
	  TRIANGLE_MESH: 0,
	  TRIANGLES: 1
	};
	//# sourceMappingURL=Mesh.js.map

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _pixiGlCore = __webpack_require__(24);
	
	var _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);
	
	var _Mesh = __webpack_require__(120);
	
	var _Mesh2 = _interopRequireDefault(_Mesh);
	
	var _path = __webpack_require__(86);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * WebGL renderer plugin for tiling sprites
	 */
	var MeshRenderer = function (_core$ObjectRenderer) {
	    _inherits(MeshRenderer, _core$ObjectRenderer);
	
	    /**
	     * constructor for renderer
	     *
	     * @param {WebGLRenderer} renderer The renderer this tiling awesomeness works for.
	     */
	    function MeshRenderer(renderer) {
	        _classCallCheck(this, MeshRenderer);
	
	        var _this = _possibleConstructorReturn(this, _core$ObjectRenderer.call(this, renderer));
	
	        _this.shader = null;
	        return _this;
	    }
	
	    /**
	     * Sets up the renderer context and necessary buffers.
	     *
	     * @private
	     */
	
	
	    MeshRenderer.prototype.onContextChange = function onContextChange() {
	        var gl = this.renderer.gl;
	
	        this.shader = new core.Shader(gl, 'attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 translationMatrix;\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n}\n', 'varying vec2 vTextureCoord;\nuniform float alpha;\nuniform vec3 tint;\n\nuniform sampler2D uSampler;\n\nvoid main(void)\n{\n    gl_FragColor = texture2D(uSampler, vTextureCoord) * vec4(tint * alpha, alpha);\n}\n');
	    };
	
	    /**
	     * renders mesh
	     *
	     * @param {PIXI.mesh.Mesh} mesh mesh instance
	     */
	
	
	    MeshRenderer.prototype.render = function render(mesh) {
	        var renderer = this.renderer;
	        var gl = renderer.gl;
	        var texture = mesh._texture;
	
	        if (!texture.valid) {
	            return;
	        }
	
	        var glData = mesh._glDatas[renderer.CONTEXT_UID];
	
	        if (!glData) {
	            renderer.bindVao(null);
	
	            glData = {
	                shader: this.shader,
	                vertexBuffer: _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl, mesh.vertices, gl.STREAM_DRAW),
	                uvBuffer: _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl, mesh.uvs, gl.STREAM_DRAW),
	                indexBuffer: _pixiGlCore2.default.GLBuffer.createIndexBuffer(gl, mesh.indices, gl.STATIC_DRAW),
	                // build the vao object that will render..
	                vao: null,
	                dirty: mesh.dirty,
	                indexDirty: mesh.indexDirty
	            };
	
	            // build the vao object that will render..
	            glData.vao = new _pixiGlCore2.default.VertexArrayObject(gl).addIndex(glData.indexBuffer).addAttribute(glData.vertexBuffer, glData.shader.attributes.aVertexPosition, gl.FLOAT, false, 2 * 4, 0).addAttribute(glData.uvBuffer, glData.shader.attributes.aTextureCoord, gl.FLOAT, false, 2 * 4, 0);
	
	            mesh._glDatas[renderer.CONTEXT_UID] = glData;
	        }
	
	        if (mesh.dirty !== glData.dirty) {
	            glData.dirty = mesh.dirty;
	            glData.uvBuffer.upload(mesh.uvs);
	        }
	
	        if (mesh.indexDirty !== glData.indexDirty) {
	            glData.indexDirty = mesh.indexDirty;
	            glData.indexBuffer.upload(mesh.indices);
	        }
	
	        glData.vertexBuffer.upload(mesh.vertices);
	
	        renderer.bindShader(glData.shader);
	
	        glData.shader.uniforms.uSampler = renderer.bindTexture(texture);
	
	        renderer.state.setBlendMode(mesh.blendMode);
	
	        glData.shader.uniforms.translationMatrix = mesh.worldTransform.toArray(true);
	        glData.shader.uniforms.alpha = mesh.worldAlpha;
	        glData.shader.uniforms.tint = mesh.tintRgb;
	
	        var drawMode = mesh.drawMode === _Mesh2.default.DRAW_MODES.TRIANGLE_MESH ? gl.TRIANGLE_STRIP : gl.TRIANGLES;
	
	        renderer.bindVao(glData.vao);
	        glData.vao.draw(drawMode, mesh.indices.length, 0);
	    };
	
	    return MeshRenderer;
	}(core.ObjectRenderer);
	
	exports.default = MeshRenderer;
	
	
	core.WebGLRenderer.registerPlugin('mesh', MeshRenderer);
	//# sourceMappingURL=MeshRenderer.js.map

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _Mesh = __webpack_require__(120);
	
	var _Mesh2 = _interopRequireDefault(_Mesh);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Renderer dedicated to meshes.
	 *
	 * @class
	 * @private
	 * @memberof PIXI
	 */
	var MeshSpriteRenderer = function () {
	    /**
	     * @param {PIXI.CanvasRenderer} renderer - The renderer this downport works for
	     */
	    function MeshSpriteRenderer(renderer) {
	        _classCallCheck(this, MeshSpriteRenderer);
	
	        this.renderer = renderer;
	    }
	
	    /**
	     * Renders the Mesh
	     *
	     * @param {PIXI.mesh.Mesh} mesh - the Mesh to render
	     */
	
	
	    MeshSpriteRenderer.prototype.render = function render(mesh) {
	        var renderer = this.renderer;
	        var context = renderer.context;
	
	        var transform = mesh.worldTransform;
	        var res = renderer.resolution;
	
	        if (renderer.roundPixels) {
	            context.setTransform(transform.a * res, transform.b * res, transform.c * res, transform.d * res, transform.tx * res | 0, transform.ty * res | 0);
	        } else {
	            context.setTransform(transform.a * res, transform.b * res, transform.c * res, transform.d * res, transform.tx * res, transform.ty * res);
	        }
	
	        renderer.setBlendMode(mesh.blendMode);
	
	        if (mesh.drawMode === _Mesh2.default.DRAW_MODES.TRIANGLE_MESH) {
	            this._renderTriangleMesh(mesh);
	        } else {
	            this._renderTriangles(mesh);
	        }
	    };
	
	    /**
	     * Draws the object in Triangle Mesh mode
	     *
	     * @private
	     * @param {PIXI.mesh.Mesh} mesh - the Mesh to render
	     */
	
	
	    MeshSpriteRenderer.prototype._renderTriangleMesh = function _renderTriangleMesh(mesh) {
	        // draw triangles!!
	        var length = mesh.vertices.length / 2;
	
	        for (var i = 0; i < length - 2; i++) {
	            // draw some triangles!
	            var index = i * 2;
	
	            this._renderDrawTriangle(mesh, index, index + 2, index + 4);
	        }
	    };
	
	    /**
	     * Draws the object in triangle mode using canvas
	     *
	     * @private
	     * @param {PIXI.mesh.Mesh} mesh - the current mesh
	     */
	
	
	    MeshSpriteRenderer.prototype._renderTriangles = function _renderTriangles(mesh) {
	        // draw triangles!!
	        var indices = mesh.indices;
	        var length = indices.length;
	
	        for (var i = 0; i < length; i += 3) {
	            // draw some triangles!
	            var index0 = indices[i] * 2;
	            var index1 = indices[i + 1] * 2;
	            var index2 = indices[i + 2] * 2;
	
	            this._renderDrawTriangle(mesh, index0, index1, index2);
	        }
	    };
	
	    /**
	     * Draws one of the triangles that from the Mesh
	     *
	     * @private
	     * @param {PIXI.mesh.Mesh} mesh - the current mesh
	     * @param {number} index0 - the index of the first vertex
	     * @param {number} index1 - the index of the second vertex
	     * @param {number} index2 - the index of the third vertex
	     */
	
	
	    MeshSpriteRenderer.prototype._renderDrawTriangle = function _renderDrawTriangle(mesh, index0, index1, index2) {
	        var context = this.renderer.context;
	        var uvs = mesh.uvs;
	        var vertices = mesh.vertices;
	        var texture = mesh._texture;
	
	        if (!texture.valid) {
	            return;
	        }
	
	        var base = texture.baseTexture;
	        var textureSource = base.source;
	        var textureWidth = base.width;
	        var textureHeight = base.height;
	
	        var u0 = uvs[index0] * base.width;
	        var u1 = uvs[index1] * base.width;
	        var u2 = uvs[index2] * base.width;
	        var v0 = uvs[index0 + 1] * base.height;
	        var v1 = uvs[index1 + 1] * base.height;
	        var v2 = uvs[index2 + 1] * base.height;
	
	        var x0 = vertices[index0];
	        var x1 = vertices[index1];
	        var x2 = vertices[index2];
	        var y0 = vertices[index0 + 1];
	        var y1 = vertices[index1 + 1];
	        var y2 = vertices[index2 + 1];
	
	        if (mesh.canvasPadding > 0) {
	            var paddingX = mesh.canvasPadding / mesh.worldTransform.a;
	            var paddingY = mesh.canvasPadding / mesh.worldTransform.d;
	            var centerX = (x0 + x1 + x2) / 3;
	            var centerY = (y0 + y1 + y2) / 3;
	
	            var normX = x0 - centerX;
	            var normY = y0 - centerY;
	
	            var dist = Math.sqrt(normX * normX + normY * normY);
	
	            x0 = centerX + normX / dist * (dist + paddingX);
	            y0 = centerY + normY / dist * (dist + paddingY);
	
	            //
	
	            normX = x1 - centerX;
	            normY = y1 - centerY;
	
	            dist = Math.sqrt(normX * normX + normY * normY);
	            x1 = centerX + normX / dist * (dist + paddingX);
	            y1 = centerY + normY / dist * (dist + paddingY);
	
	            normX = x2 - centerX;
	            normY = y2 - centerY;
	
	            dist = Math.sqrt(normX * normX + normY * normY);
	            x2 = centerX + normX / dist * (dist + paddingX);
	            y2 = centerY + normY / dist * (dist + paddingY);
	        }
	
	        context.save();
	        context.beginPath();
	
	        context.moveTo(x0, y0);
	        context.lineTo(x1, y1);
	        context.lineTo(x2, y2);
	
	        context.closePath();
	
	        context.clip();
	
	        // Compute matrix transform
	        var delta = u0 * v1 + v0 * u2 + u1 * v2 - v1 * u2 - v0 * u1 - u0 * v2;
	        var deltaA = x0 * v1 + v0 * x2 + x1 * v2 - v1 * x2 - v0 * x1 - x0 * v2;
	        var deltaB = u0 * x1 + x0 * u2 + u1 * x2 - x1 * u2 - x0 * u1 - u0 * x2;
	        var deltaC = u0 * v1 * x2 + v0 * x1 * u2 + x0 * u1 * v2 - x0 * v1 * u2 - v0 * u1 * x2 - u0 * x1 * v2;
	        var deltaD = y0 * v1 + v0 * y2 + y1 * v2 - v1 * y2 - v0 * y1 - y0 * v2;
	        var deltaE = u0 * y1 + y0 * u2 + u1 * y2 - y1 * u2 - y0 * u1 - u0 * y2;
	        var deltaF = u0 * v1 * y2 + v0 * y1 * u2 + y0 * u1 * v2 - y0 * v1 * u2 - v0 * u1 * y2 - u0 * y1 * v2;
	
	        context.transform(deltaA / delta, deltaD / delta, deltaB / delta, deltaE / delta, deltaC / delta, deltaF / delta);
	
	        context.drawImage(textureSource, 0, 0, textureWidth * base.resolution, textureHeight * base.resolution, 0, 0, textureWidth, textureHeight);
	
	        context.restore();
	    };
	
	    /**
	     * Renders a flat Mesh
	     *
	     * @private
	     * @param {PIXI.mesh.Mesh} mesh - The Mesh to render
	     */
	
	
	    MeshSpriteRenderer.prototype.renderMeshFlat = function renderMeshFlat(mesh) {
	        var context = this.renderer.context;
	        var vertices = mesh.vertices;
	        var length = vertices.length / 2;
	
	        // this.count++;
	
	        context.beginPath();
	
	        for (var i = 1; i < length - 2; ++i) {
	            // draw some triangles!
	            var index = i * 2;
	
	            var x0 = vertices[index];
	            var y0 = vertices[index + 1];
	
	            var x1 = vertices[index + 2];
	            var y1 = vertices[index + 3];
	
	            var x2 = vertices[index + 4];
	            var y2 = vertices[index + 5];
	
	            context.moveTo(x0, y0);
	            context.lineTo(x1, y1);
	            context.lineTo(x2, y2);
	        }
	
	        context.fillStyle = '#FF0000';
	        context.fill();
	        context.closePath();
	    };
	
	    /**
	     * destroy the the renderer.
	     *
	     */
	
	
	    MeshSpriteRenderer.prototype.destroy = function destroy() {
	        this.renderer = null;
	    };
	
	    return MeshSpriteRenderer;
	}();
	
	exports.default = MeshSpriteRenderer;
	
	
	core.CanvasRenderer.registerPlugin('mesh', MeshSpriteRenderer);
	//# sourceMappingURL=CanvasMeshRenderer.js.map

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _Mesh2 = __webpack_require__(120);
	
	var _Mesh3 = _interopRequireDefault(_Mesh2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The Plane allows you to draw a texture across several points and them manipulate these points
	 *
	 *```js
	 * for (let i = 0; i < 20; i++) {
	 *     points.push(new PIXI.Point(i * 50, 0));
	 * };
	 * let Plane = new PIXI.Plane(PIXI.Texture.fromImage("snake.png"), points);
	 *  ```
	 *
	 * @class
	 * @extends PIXI.mesh.Mesh
	 * @memberof PIXI.mesh
	 *
	 */
	var Plane = function (_Mesh) {
	    _inherits(Plane, _Mesh);
	
	    /**
	     * @param {PIXI.Texture} texture - The texture to use on the Plane.
	     * @param {number} verticesX - The number of vertices in the x-axis
	     * @param {number} verticesY - The number of vertices in the y-axis
	     */
	    function Plane(texture, verticesX, verticesY) {
	        _classCallCheck(this, Plane);
	
	        /**
	         * Tracker for if the Plane is ready to be drawn. Needed because Mesh ctor can
	         * call _onTextureUpdated which could call refresh too early.
	         *
	         * @member {boolean}
	         * @private
	         */
	        var _this = _possibleConstructorReturn(this, _Mesh.call(this, texture));
	
	        _this._ready = true;
	
	        _this.verticesX = verticesX || 10;
	        _this.verticesY = verticesY || 10;
	
	        _this.drawMode = _Mesh3.default.DRAW_MODES.TRIANGLES;
	        _this.refresh();
	        return _this;
	    }
	
	    /**
	     * Refreshes
	     *
	     */
	
	
	    Plane.prototype.refresh = function refresh() {
	        var total = this.verticesX * this.verticesY;
	        var verts = [];
	        var colors = [];
	        var uvs = [];
	        var indices = [];
	        var texture = this.texture;
	
	        var segmentsX = this.verticesX - 1;
	        var segmentsY = this.verticesY - 1;
	
	        var sizeX = texture.width / segmentsX;
	        var sizeY = texture.height / segmentsY;
	
	        for (var i = 0; i < total; i++) {
	            if (texture._uvs) {
	                var x = i % this.verticesX;
	                var y = i / this.verticesX | 0;
	
	                verts.push(x * sizeX, y * sizeY);
	
	                // this works for rectangular textures.
	                uvs.push(texture._uvs.x0 + (texture._uvs.x1 - texture._uvs.x0) * (x / (this.verticesX - 1)), texture._uvs.y0 + (texture._uvs.y3 - texture._uvs.y0) * (y / (this.verticesY - 1)));
	            } else {
	                uvs.push(0);
	            }
	        }
	
	        //  cons
	
	        var totalSub = segmentsX * segmentsY;
	
	        for (var _i = 0; _i < totalSub; _i++) {
	            var xpos = _i % segmentsX;
	            var ypos = _i / segmentsX | 0;
	
	            var value = ypos * this.verticesX + xpos;
	            var value2 = ypos * this.verticesX + xpos + 1;
	            var value3 = (ypos + 1) * this.verticesX + xpos;
	            var value4 = (ypos + 1) * this.verticesX + xpos + 1;
	
	            indices.push(value, value2, value3);
	            indices.push(value2, value4, value3);
	        }
	
	        // console.log(indices)
	        this.vertices = new Float32Array(verts);
	        this.uvs = new Float32Array(uvs);
	        this.colors = new Float32Array(colors);
	        this.indices = new Uint16Array(indices);
	
	        this.indexDirty = true;
	    };
	
	    /**
	     * Clear texture UVs when new texture is set
	     *
	     * @private
	     */
	
	
	    Plane.prototype._onTextureUpdate = function _onTextureUpdate() {
	        _Mesh3.default.prototype._onTextureUpdate.call(this);
	
	        // wait for the Plane ctor to finish before calling refresh
	        if (this._ready) {
	            this.refresh();
	        }
	    };
	
	    return Plane;
	}(_Mesh3.default);
	
	exports.default = Plane;
	//# sourceMappingURL=Plane.js.map

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Plane2 = __webpack_require__(123);
	
	var _Plane3 = _interopRequireDefault(_Plane2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var DEFAULT_BORDER_SIZE = 10;
	
	/**
	 * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful
	 * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically
	 *
	 *```js
	 * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.fromImage('BoxWithRoundedCorners.png'), 15, 15, 15, 15);
	 *  ```
	 * <pre>
	 *      A                          B
	 *    +---+----------------------+---+
	 *  C | 1 |          2           | 3 |
	 *    +---+----------------------+---+
	 *    |   |                      |   |
	 *    | 4 |          5           | 6 |
	 *    |   |                      |   |
	 *    +---+----------------------+---+
	 *  D | 7 |          8           | 9 |
	 *    +---+----------------------+---+
	
	 *  When changing this objects width and/or height:
	 *     areas 1 3 7 and 9 will remain unscaled.
	 *     areas 2 and 8 will be stretched horizontally
	 *     areas 4 and 6 will be stretched vertically
	 *     area 5 will be stretched both horizontally and vertically
	 * </pre>
	 *
	 * @class
	 * @extends PIXI.mesh.Plane
	 * @memberof PIXI.mesh
	 *
	 */
	
	var NineSlicePlane = function (_Plane) {
	    _inherits(NineSlicePlane, _Plane);
	
	    /**
	     * @param {PIXI.Texture} texture - The texture to use on the NineSlicePlane.
	     * @param {int} [leftWidth=10] size of the left vertical bar (A)
	     * @param {int} [topHeight=10] size of the top horizontal bar (C)
	     * @param {int} [rightWidth=10] size of the right vertical bar (B)
	     * @param {int} [bottomHeight=10] size of the bottom horizontal bar (D)
	     */
	    function NineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight) {
	        _classCallCheck(this, NineSlicePlane);
	
	        var _this = _possibleConstructorReturn(this, _Plane.call(this, texture, 4, 4));
	
	        var uvs = _this.uvs;
	
	        // right and bottom uv's are always 1
	        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;
	        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;
	
	        _this._origWidth = texture.width;
	        _this._origHeight = texture.height;
	        _this._uvw = 1 / _this._origWidth;
	        _this._uvh = 1 / _this._origHeight;
	
	        /**
	         * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane
	         *
	         * @member {number}
	         * @memberof PIXI.NineSlicePlane#
	         * @override
	         */
	        _this.width = texture.width;
	
	        /**
	         * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane
	         *
	         * @member {number}
	         * @memberof PIXI.NineSlicePlane#
	         * @override
	         */
	        _this.height = texture.height;
	
	        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _this._uvw * leftWidth;
	        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _this._uvw * rightWidth;
	        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _this._uvh * topHeight;
	        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _this._uvh * bottomHeight;
	
	        /**
	         * The width of the left column (a)
	         *
	         * @member {number}
	         */
	        _this.leftWidth = typeof leftWidth !== 'undefined' ? leftWidth : DEFAULT_BORDER_SIZE;
	
	        /**
	         * The width of the right column (b)
	         *
	         * @member {number}
	         */
	        _this.rightWidth = typeof rightWidth !== 'undefined' ? rightWidth : DEFAULT_BORDER_SIZE;
	
	        /**
	         * The height of the top row (c)
	         *
	         * @member {number}
	         */
	        _this.topHeight = typeof topHeight !== 'undefined' ? topHeight : DEFAULT_BORDER_SIZE;
	
	        /**
	         * The height of the bottom row (d)
	         *
	         * @member {number}
	         */
	        _this.bottomHeight = typeof bottomHeight !== 'undefined' ? bottomHeight : DEFAULT_BORDER_SIZE;
	        return _this;
	    }
	
	    /**
	     * Updates the horizontal vertices.
	     *
	     */
	
	
	    NineSlicePlane.prototype.updateHorizontalVertices = function updateHorizontalVertices() {
	        var vertices = this.vertices;
	
	        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight;
	        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - this._bottomHeight;
	        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;
	    };
	
	    /**
	     * Updates the vertical vertices.
	     *
	     */
	
	
	    NineSlicePlane.prototype.updateVerticalVertices = function updateVerticalVertices() {
	        var vertices = this.vertices;
	
	        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth;
	        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - this._rightWidth;
	        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;
	    };
	
	    /**
	     * Renders the object using the Canvas renderer
	     *
	     * @private
	     * @param {PIXI.CanvasRenderer} renderer - The canvas renderer to render with.
	     */
	
	
	    NineSlicePlane.prototype._renderCanvas = function _renderCanvas(renderer) {
	        var context = renderer.context;
	
	        context.globalAlpha = this.worldAlpha;
	
	        var transform = this.worldTransform;
	        var res = renderer.resolution;
	
	        if (renderer.roundPixels) {
	            context.setTransform(transform.a * res, transform.b * res, transform.c * res, transform.d * res, transform.tx * res | 0, transform.ty * res | 0);
	        } else {
	            context.setTransform(transform.a * res, transform.b * res, transform.c * res, transform.d * res, transform.tx * res, transform.ty * res);
	        }
	
	        var base = this._texture.baseTexture;
	        var textureSource = base.source;
	        var w = base.width;
	        var h = base.height;
	
	        this.drawSegment(context, textureSource, w, h, 0, 1, 10, 11);
	        this.drawSegment(context, textureSource, w, h, 2, 3, 12, 13);
	        this.drawSegment(context, textureSource, w, h, 4, 5, 14, 15);
	        this.drawSegment(context, textureSource, w, h, 8, 9, 18, 19);
	        this.drawSegment(context, textureSource, w, h, 10, 11, 20, 21);
	        this.drawSegment(context, textureSource, w, h, 12, 13, 22, 23);
	        this.drawSegment(context, textureSource, w, h, 16, 17, 26, 27);
	        this.drawSegment(context, textureSource, w, h, 18, 19, 28, 29);
	        this.drawSegment(context, textureSource, w, h, 20, 21, 30, 31);
	    };
	
	    /**
	     * Renders one segment of the plane.
	     * to mimic the exact drawing behavior of stretching the image like WebGL does, we need to make sure
	     * that the source area is at least 1 pixel in size, otherwise nothing gets drawn when a slice size of 0 is used.
	     *
	     * @private
	     * @param {CanvasRenderingContext2D} context - The context to draw with.
	     * @param {CanvasImageSource} textureSource - The source to draw.
	     * @param {number} w - width of the texture
	     * @param {number} h - height of the texture
	     * @param {number} x1 - x index 1
	     * @param {number} y1 - y index 1
	     * @param {number} x2 - x index 2
	     * @param {number} y2 - y index 2
	     */
	
	
	    NineSlicePlane.prototype.drawSegment = function drawSegment(context, textureSource, w, h, x1, y1, x2, y2) {
	        // otherwise you get weird results when using slices of that are 0 wide or high.
	        var uvs = this.uvs;
	        var vertices = this.vertices;
	
	        var sw = (uvs[x2] - uvs[x1]) * w;
	        var sh = (uvs[y2] - uvs[y1]) * h;
	        var dw = vertices[x2] - vertices[x1];
	        var dh = vertices[y2] - vertices[y1];
	
	        // make sure the source is at least 1 pixel wide and high, otherwise nothing will be drawn.
	        if (sw < 1) {
	            sw = 1;
	        }
	
	        if (sh < 1) {
	            sh = 1;
	        }
	
	        // make sure destination is at least 1 pixel wide and high, otherwise you get
	        // lines when rendering close to original size.
	        if (dw < 1) {
	            dw = 1;
	        }
	
	        if (dh < 1) {
	            dh = 1;
	        }
	
	        context.drawImage(textureSource, uvs[x1] * w, uvs[y1] * h, sw, sh, vertices[x1], vertices[y1], dw, dh);
	    };
	
	    /**
	     * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane
	     *
	     * @member {number}
	     * @memberof PIXI.NineSlicePlane#
	     */
	
	
	    _createClass(NineSlicePlane, [{
	        key: 'width',
	        get: function get() {
	            return this._width;
	        }
	
	        /**
	         * Sets the width.
	         *
	         * @param {number} value - the value to set to.
	         */
	        ,
	        set: function set(value) {
	            this._width = value;
	            this.updateVerticalVertices();
	        }
	
	        /**
	         * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane
	         *
	         * @member {number}
	         * @memberof PIXI.NineSlicePlane#
	         */
	
	    }, {
	        key: 'height',
	        get: function get() {
	            return this._height;
	        }
	
	        /**
	         * Sets the height.
	         *
	         * @param {number} value - the value to set to.
	         */
	        ,
	        set: function set(value) {
	            this._height = value;
	            this.updateHorizontalVertices();
	        }
	
	        /**
	         * The width of the left column
	         *
	         * @member {number}
	         */
	
	    }, {
	        key: 'leftWidth',
	        get: function get() {
	            return this._leftWidth;
	        }
	
	        /**
	         * Sets the width of the left column.
	         *
	         * @param {number} value - the value to set to.
	         */
	        ,
	        set: function set(value) {
	            this._leftWidth = value;
	
	            var uvs = this.uvs;
	            var vertices = this.vertices;
	
	            uvs[2] = uvs[10] = uvs[18] = uvs[26] = this._uvw * value;
	            vertices[2] = vertices[10] = vertices[18] = vertices[26] = value;
	
	            this.dirty = true;
	        }
	
	        /**
	         * The width of the right column
	         *
	         * @member {number}
	         */
	
	    }, {
	        key: 'rightWidth',
	        get: function get() {
	            return this._rightWidth;
	        }
	
	        /**
	         * Sets the width of the right column.
	         *
	         * @param {number} value - the value to set to.
	         */
	        ,
	        set: function set(value) {
	            this._rightWidth = value;
	
	            var uvs = this.uvs;
	            var vertices = this.vertices;
	
	            uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - this._uvw * value;
	            vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - value;
	
	            this.dirty = true;
	        }
	
	        /**
	         * The height of the top row
	         *
	         * @member {number}
	         */
	
	    }, {
	        key: 'topHeight',
	        get: function get() {
	            return this._topHeight;
	        }
	
	        /**
	         * Sets the height of the top row.
	         *
	         * @param {number} value - the value to set to.
	         */
	        ,
	        set: function set(value) {
	            this._topHeight = value;
	
	            var uvs = this.uvs;
	            var vertices = this.vertices;
	
	            uvs[9] = uvs[11] = uvs[13] = uvs[15] = this._uvh * value;
	            vertices[9] = vertices[11] = vertices[13] = vertices[15] = value;
	
	            this.dirty = true;
	        }
	
	        /**
	         * The height of the bottom row
	         *
	         * @member {number}
	         */
	
	    }, {
	        key: 'bottomHeight',
	        get: function get() {
	            return this._bottomHeight;
	        }
	
	        /**
	         * Sets the height of the bottom row.
	         *
	         * @param {number} value - the value to set to.
	         */
	        ,
	        set: function set(value) {
	            this._bottomHeight = value;
	
	            var uvs = this.uvs;
	            var vertices = this.vertices;
	
	            uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - this._uvh * value;
	            vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - value;
	
	            this.dirty = true;
	        }
	    }]);
	
	    return NineSlicePlane;
	}(_Plane3.default);
	
	exports.default = NineSlicePlane;
	//# sourceMappingURL=NineSlicePlane.js.map

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _Mesh2 = __webpack_require__(120);
	
	var _Mesh3 = _interopRequireDefault(_Mesh2);
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The rope allows you to draw a texture across several points and them manipulate these points
	 *
	 *```js
	 * for (let i = 0; i < 20; i++) {
	 *     points.push(new PIXI.Point(i * 50, 0));
	 * };
	 * let rope = new PIXI.Rope(PIXI.Texture.fromImage("snake.png"), points);
	 *  ```
	 *
	 * @class
	 * @extends PIXI.mesh.Mesh
	 * @memberof PIXI.mesh
	 *
	 */
	var Rope = function (_Mesh) {
	    _inherits(Rope, _Mesh);
	
	    /**
	     * @param {PIXI.Texture} texture - The texture to use on the rope.
	     * @param {PIXI.Point[]} points - An array of {@link PIXI.Point} objects to construct this rope.
	     */
	    function Rope(texture, points) {
	        _classCallCheck(this, Rope);
	
	        /*
	         * @member {PIXI.Point[]} An array of points that determine the rope
	         */
	        var _this = _possibleConstructorReturn(this, _Mesh.call(this, texture));
	
	        _this.points = points;
	
	        /*
	         * @member {Float32Array} An array of vertices used to construct this rope.
	         */
	        _this.vertices = new Float32Array(points.length * 4);
	
	        /*
	         * @member {Float32Array} The WebGL Uvs of the rope.
	         */
	        _this.uvs = new Float32Array(points.length * 4);
	
	        /*
	         * @member {Float32Array} An array containing the color components
	         */
	        _this.colors = new Float32Array(points.length * 2);
	
	        /*
	         * @member {Uint16Array} An array containing the indices of the vertices
	         */
	        _this.indices = new Uint16Array(points.length * 2);
	
	        /**
	         * Tracker for if the rope is ready to be drawn. Needed because Mesh ctor can
	         * call _onTextureUpdated which could call refresh too early.
	         *
	         * @member {boolean}
	         * @private
	         */
	        _this._ready = true;
	
	        _this.refresh();
	        return _this;
	    }
	
	    /**
	     * Refreshes
	     *
	     */
	
	
	    Rope.prototype.refresh = function refresh() {
	        var points = this.points;
	
	        // if too little points, or texture hasn't got UVs set yet just move on.
	        if (points.length < 1 || !this._texture._uvs) {
	            return;
	        }
	
	        // if the number of points has changed we will need to recreate the arraybuffers
	        if (this.vertices.length / 4 !== points.length) {
	            this.vertices = new Float32Array(points.length * 4);
	            this.uvs = new Float32Array(points.length * 4);
	            this.colors = new Float32Array(points.length * 2);
	            this.indices = new Uint16Array(points.length * 2);
	        }
	
	        var uvs = this.uvs;
	
	        var indices = this.indices;
	        var colors = this.colors;
	
	        var textureUvs = this._texture._uvs;
	        var offset = new core.Point(textureUvs.x0, textureUvs.y0);
	        var factor = new core.Point(textureUvs.x2 - textureUvs.x0, textureUvs.y2 - textureUvs.y0);
	
	        uvs[0] = 0 + offset.x;
	        uvs[1] = 0 + offset.y;
	        uvs[2] = 0 + offset.x;
	        uvs[3] = Number(factor.y) + offset.y;
	
	        colors[0] = 1;
	        colors[1] = 1;
	
	        indices[0] = 0;
	        indices[1] = 1;
	
	        var total = points.length;
	
	        for (var i = 1; i < total; i++) {
	            // time to do some smart drawing!
	            var index = i * 4;
	            var amount = i / (total - 1);
	
	            uvs[index] = amount * factor.x + offset.x;
	            uvs[index + 1] = 0 + offset.y;
	
	            uvs[index + 2] = amount * factor.x + offset.x;
	            uvs[index + 3] = Number(factor.y) + offset.y;
	
	            index = i * 2;
	            colors[index] = 1;
	            colors[index + 1] = 1;
	
	            index = i * 2;
	            indices[index] = index;
	            indices[index + 1] = index + 1;
	        }
	
	        // ensure that the changes are uploaded
	        this.dirty++;
	        this.indexDirty++;
	    };
	
	    /**
	     * Clear texture UVs when new texture is set
	     *
	     * @private
	     */
	
	
	    Rope.prototype._onTextureUpdate = function _onTextureUpdate() {
	        _Mesh.prototype._onTextureUpdate.call(this);
	
	        // wait for the Rope ctor to finish before calling refresh
	        if (this._ready) {
	            this.refresh();
	        }
	    };
	
	    /**
	     * Updates the object transform for rendering
	     *
	     * @private
	     */
	
	
	    Rope.prototype.updateTransform = function updateTransform() {
	        var points = this.points;
	
	        if (points.length < 1) {
	            return;
	        }
	
	        var lastPoint = points[0];
	        var nextPoint = void 0;
	        var perpX = 0;
	        var perpY = 0;
	
	        // this.count -= 0.2;
	
	        var vertices = this.vertices;
	        var total = points.length;
	
	        for (var i = 0; i < total; i++) {
	            var point = points[i];
	            var index = i * 4;
	
	            if (i < points.length - 1) {
	                nextPoint = points[i + 1];
	            } else {
	                nextPoint = point;
	            }
	
	            perpY = -(nextPoint.x - lastPoint.x);
	            perpX = nextPoint.y - lastPoint.y;
	
	            var ratio = (1 - i / (total - 1)) * 10;
	
	            if (ratio > 1) {
	                ratio = 1;
	            }
	
	            var perpLength = Math.sqrt(perpX * perpX + perpY * perpY);
	            var num = this._texture.height / 2; // (20 + Math.abs(Math.sin((i + this.count) * 0.3) * 50) )* ratio;
	
	            perpX /= perpLength;
	            perpY /= perpLength;
	
	            perpX *= num;
	            perpY *= num;
	
	            vertices[index] = point.x + perpX;
	            vertices[index + 1] = point.y + perpY;
	            vertices[index + 2] = point.x - perpX;
	            vertices[index + 3] = point.y - perpY;
	
	            lastPoint = point;
	        }
	
	        this.containerUpdateTransform();
	    };
	
	    return Rope;
	}(_Mesh3.default);
	
	exports.default = Rope;
	//# sourceMappingURL=Rope.js.map

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _ParticleContainer = __webpack_require__(127);
	
	Object.defineProperty(exports, 'ParticleContainer', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_ParticleContainer).default;
	  }
	});
	
	var _ParticleRenderer = __webpack_require__(128);
	
	Object.defineProperty(exports, 'ParticleRenderer', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_ParticleRenderer).default;
	  }
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	//# sourceMappingURL=index.js.map

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The ParticleContainer class is a really fast version of the Container built solely for speed,
	 * so use when you need a lot of sprites or particles. The tradeoff of the ParticleContainer is that advanced
	 * functionality will not work. ParticleContainer implements only the basic object transform (position, scale, rotation).
	 * Any other functionality like tinting, masking, etc will not work on sprites in this batch.
	 *
	 * It's extremely easy to use :
	 *
	 * ```js
	 * let container = new ParticleContainer();
	 *
	 * for (let i = 0; i < 100; ++i)
	 * {
	 *     let sprite = new PIXI.Sprite.fromImage("myImage.png");
	 *     container.addChild(sprite);
	 * }
	 * ```
	 *
	 * And here you have a hundred sprites that will be renderer at the speed of light.
	 *
	 * @class
	 * @extends PIXI.Container
	 * @memberof PIXI.particles
	 */
	var ParticleContainer = function (_core$Container) {
	    _inherits(ParticleContainer, _core$Container);
	
	    /**
	     * @param {number} [maxSize=15000] - The maximum number of particles that can be renderer by the container.
	     * @param {object} [properties] - The properties of children that should be uploaded to the gpu and applied.
	     * @param {boolean} [properties.scale=false] - When true, scale be uploaded and applied.
	     * @param {boolean} [properties.position=true] - When true, position be uploaded and applied.
	     * @param {boolean} [properties.rotation=false] - When true, rotation be uploaded and applied.
	     * @param {boolean} [properties.uvs=false] - When true, uvs be uploaded and applied.
	     * @param {boolean} [properties.alpha=false] - When true, alpha be uploaded and applied.
	     * @param {number} [batchSize=15000] - Number of particles per batch.
	     */
	    function ParticleContainer() {
	        var maxSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1500;
	        var properties = arguments[1];
	        var batchSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 16384;
	
	        _classCallCheck(this, ParticleContainer);
	
	        // Making sure the batch size is valid
	        // 65535 is max vertex index in the index buffer (see ParticleRenderer)
	        // so max number of particles is 65536 / 4 = 16384
	        var _this = _possibleConstructorReturn(this, _core$Container.call(this));
	
	        var maxBatchSize = 16384;
	
	        if (batchSize > maxBatchSize) {
	            batchSize = maxBatchSize;
	        }
	
	        if (batchSize > maxSize) {
	            batchSize = maxSize;
	        }
	
	        /**
	         * Set properties to be dynamic (true) / static (false)
	         *
	         * @member {boolean[]}
	         * @private
	         */
	        _this._properties = [false, true, false, false, false];
	
	        /**
	         * @member {number}
	         * @private
	         */
	        _this._maxSize = maxSize;
	
	        /**
	         * @member {number}
	         * @private
	         */
	        _this._batchSize = batchSize;
	
	        /**
	         * @member {object<number, WebGLBuffer>}
	         * @private
	         */
	        _this._glBuffers = {};
	
	        /**
	         * @member {number}
	         * @private
	         */
	        _this._bufferToUpdate = 0;
	
	        /**
	         * @member {boolean}
	         *
	         */
	        _this.interactiveChildren = false;
	
	        /**
	         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL`
	         * to reset the blend mode.
	         *
	         * @member {number}
	         * @default PIXI.BLEND_MODES.NORMAL
	         * @see PIXI.BLEND_MODES
	         */
	        _this.blendMode = core.BLEND_MODES.NORMAL;
	
	        /**
	         * Used for canvas renderering. If true then the elements will be positioned at the
	         * nearest pixel. This provides a nice speed boost.
	         *
	         * @member {boolean}
	         * @default true;
	         */
	        _this.roundPixels = true;
	
	        /**
	         * The texture used to render the children.
	         *
	         * @readonly
	         * @member {BaseTexture}
	         */
	        _this.baseTexture = null;
	
	        _this.setProperties(properties);
	        return _this;
	    }
	
	    /**
	     * Sets the private properties array to dynamic / static based on the passed properties object
	     *
	     * @param {object} properties - The properties to be uploaded
	     */
	
	
	    ParticleContainer.prototype.setProperties = function setProperties(properties) {
	        if (properties) {
	            this._properties[0] = 'scale' in properties ? !!properties.scale : this._properties[0];
	            this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];
	            this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];
	            this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];
	            this._properties[4] = 'alpha' in properties ? !!properties.alpha : this._properties[4];
	        }
	    };
	
	    /**
	     * Updates the object transform for rendering
	     *
	     * @private
	     */
	
	
	    ParticleContainer.prototype.updateTransform = function updateTransform() {
	        // TODO don't need to!
	        this.displayObjectUpdateTransform();
	        //  PIXI.Container.prototype.updateTransform.call( this );
	    };
	
	    /**
	     * Renders the container using the WebGL renderer
	     *
	     * @private
	     * @param {PIXI.WebGLRenderer} renderer - The webgl renderer
	     */
	
	
	    ParticleContainer.prototype.renderWebGL = function renderWebGL(renderer) {
	        var _this2 = this;
	
	        if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable) {
	            return;
	        }
	
	        if (!this.baseTexture) {
	            this.baseTexture = this.children[0]._texture.baseTexture;
	            if (!this.baseTexture.hasLoaded) {
	                this.baseTexture.once('update', function () {
	                    return _this2.onChildrenChange(0);
	                });
	            }
	        }
	
	        renderer.setObjectRenderer(renderer.plugins.particle);
	        renderer.plugins.particle.render(this);
	    };
	
	    /**
	     * Set the flag that static data should be updated to true
	     *
	     * @private
	     * @param {number} smallestChildIndex - The smallest child index
	     */
	
	
	    ParticleContainer.prototype.onChildrenChange = function onChildrenChange(smallestChildIndex) {
	        var bufferIndex = Math.floor(smallestChildIndex / this._batchSize);
	
	        if (bufferIndex < this._bufferToUpdate) {
	            this._bufferToUpdate = bufferIndex;
	        }
	    };
	
	    /**
	     * Renders the object using the Canvas renderer
	     *
	     * @private
	     * @param {PIXI.CanvasRenderer} renderer - The canvas renderer
	     */
	
	
	    ParticleContainer.prototype.renderCanvas = function renderCanvas(renderer) {
	        if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable) {
	            return;
	        }
	
	        var context = renderer.context;
	        var transform = this.worldTransform;
	        var isRotated = true;
	
	        var positionX = 0;
	        var positionY = 0;
	
	        var finalWidth = 0;
	        var finalHeight = 0;
	
	        var compositeOperation = renderer.blendModes[this.blendMode];
	
	        if (compositeOperation !== context.globalCompositeOperation) {
	            context.globalCompositeOperation = compositeOperation;
	        }
	
	        context.globalAlpha = this.worldAlpha;
	
	        this.displayObjectUpdateTransform();
	
	        for (var i = 0; i < this.children.length; ++i) {
	            var child = this.children[i];
	
	            if (!child.visible) {
	                continue;
	            }
	
	            var frame = child.texture.frame;
	
	            context.globalAlpha = this.worldAlpha * child.alpha;
	
	            if (child.rotation % (Math.PI * 2) === 0) {
	                // this is the fastest  way to optimise! - if rotation is 0 then we can avoid any kind of setTransform call
	                if (isRotated) {
	                    context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx * renderer.resolution, transform.ty * renderer.resolution);
	
	                    isRotated = false;
	                }
	
	                positionX = child.anchor.x * (-frame.width * child.scale.x) + child.position.x + 0.5;
	                positionY = child.anchor.y * (-frame.height * child.scale.y) + child.position.y + 0.5;
	
	                finalWidth = frame.width * child.scale.x;
	                finalHeight = frame.height * child.scale.y;
	            } else {
	                if (!isRotated) {
	                    isRotated = true;
	                }
	
	                child.displayObjectUpdateTransform();
	
	                var childTransform = child.worldTransform;
	
	                if (renderer.roundPixels) {
	                    context.setTransform(childTransform.a, childTransform.b, childTransform.c, childTransform.d, childTransform.tx * renderer.resolution | 0, childTransform.ty * renderer.resolution | 0);
	                } else {
	                    context.setTransform(childTransform.a, childTransform.b, childTransform.c, childTransform.d, childTransform.tx * renderer.resolution, childTransform.ty * renderer.resolution);
	                }
	
	                positionX = child.anchor.x * -frame.width + 0.5;
	                positionY = child.anchor.y * -frame.height + 0.5;
	
	                finalWidth = frame.width;
	                finalHeight = frame.height;
	            }
	
	            var resolution = child.texture.baseTexture.resolution;
	
	            context.drawImage(child.texture.baseTexture.source, frame.x * resolution, frame.y * resolution, frame.width * resolution, frame.height * resolution, positionX * resolution, positionY * resolution, finalWidth * resolution, finalHeight * resolution);
	        }
	    };
	
	    /**
	     * Destroys the container
	     *
	     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options
	     *  have been set to that value
	     * @param {boolean} [options.children=false] - if set to true, all the children will have their
	     *  destroy method called as well. 'options' will be passed on to those calls.
	     */
	
	
	    ParticleContainer.prototype.destroy = function destroy(options) {
	        _core$Container.prototype.destroy.call(this, options);
	
	        if (this._buffers) {
	            for (var i = 0; i < this._buffers.length; ++i) {
	                this._buffers[i].destroy();
	            }
	        }
	
	        this._properties = null;
	        this._buffers = null;
	    };
	
	    return ParticleContainer;
	}(core.Container);
	
	exports.default = ParticleContainer;
	//# sourceMappingURL=ParticleContainer.js.map

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _ParticleShader = __webpack_require__(129);
	
	var _ParticleShader2 = _interopRequireDefault(_ParticleShader);
	
	var _ParticleBuffer = __webpack_require__(130);
	
	var _ParticleBuffer2 = _interopRequireDefault(_ParticleBuffer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @author Mat Groves
	 *
	 * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/
	 * for creating the original pixi version!
	 * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now
	 * share 4 bytes on the vertex buffer
	 *
	 * Heavily inspired by LibGDX's ParticleRenderer:
	 * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleRenderer.java
	 */
	
	/**
	 *
	 * @class
	 * @private
	 * @memberof PIXI
	 */
	var ParticleRenderer = function (_core$ObjectRenderer) {
	    _inherits(ParticleRenderer, _core$ObjectRenderer);
	
	    /**
	     * @param {PIXI.WebGLRenderer} renderer - The renderer this sprite batch works for.
	     */
	    function ParticleRenderer(renderer) {
	        _classCallCheck(this, ParticleRenderer);
	
	        // 65535 is max vertex index in the index buffer (see ParticleRenderer)
	        // so max number of particles is 65536 / 4 = 16384
	        // and max number of element in the index buffer is 16384 * 6 = 98304
	        // Creating a full index buffer, overhead is 98304 * 2 = 196Ko
	        // let numIndices = 98304;
	
	        /**
	         * The default shader that is used if a sprite doesn't have a more specific one.
	         *
	         * @member {PIXI.Shader}
	         */
	        var _this = _possibleConstructorReturn(this, _core$ObjectRenderer.call(this, renderer));
	
	        _this.shader = null;
	
	        _this.indexBuffer = null;
	
	        _this.properties = null;
	
	        _this.tempMatrix = new core.Matrix();
	
	        _this.CONTEXT_UID = 0;
	        return _this;
	    }
	
	    /**
	     * When there is a WebGL context change
	     *
	     * @private
	     */
	
	
	    ParticleRenderer.prototype.onContextChange = function onContextChange() {
	        var gl = this.renderer.gl;
	
	        this.CONTEXT_UID = this.renderer.CONTEXT_UID;
	
	        // setup default shader
	        this.shader = new _ParticleShader2.default(gl);
	
	        this.properties = [
	        // verticesData
	        {
	            attribute: this.shader.attributes.aVertexPosition,
	            size: 2,
	            uploadFunction: this.uploadVertices,
	            offset: 0
	        },
	        // positionData
	        {
	            attribute: this.shader.attributes.aPositionCoord,
	            size: 2,
	            uploadFunction: this.uploadPosition,
	            offset: 0
	        },
	        // rotationData
	        {
	            attribute: this.shader.attributes.aRotation,
	            size: 1,
	            uploadFunction: this.uploadRotation,
	            offset: 0
	        },
	        // uvsData
	        {
	            attribute: this.shader.attributes.aTextureCoord,
	            size: 2,
	            uploadFunction: this.uploadUvs,
	            offset: 0
	        },
	        // alphaData
	        {
	            attribute: this.shader.attributes.aColor,
	            size: 1,
	            uploadFunction: this.uploadAlpha,
	            offset: 0
	        }];
	    };
	
	    /**
	     * Starts a new particle batch.
	     *
	     */
	
	
	    ParticleRenderer.prototype.start = function start() {
	        this.renderer.bindShader(this.shader);
	    };
	
	    /**
	     * Renders the particle container object.
	     *
	     * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer
	     */
	
	
	    ParticleRenderer.prototype.render = function render(container) {
	        var children = container.children;
	        var maxSize = container._maxSize;
	        var batchSize = container._batchSize;
	        var renderer = this.renderer;
	        var totalChildren = children.length;
	
	        if (totalChildren === 0) {
	            return;
	        } else if (totalChildren > maxSize) {
	            totalChildren = maxSize;
	        }
	
	        var buffers = container._glBuffers[renderer.CONTEXT_UID];
	
	        if (!buffers) {
	            buffers = container._glBuffers[renderer.CONTEXT_UID] = this.generateBuffers(container);
	        }
	
	        // if the uvs have not updated then no point rendering just yet!
	        this.renderer.setBlendMode(container.blendMode);
	
	        var gl = renderer.gl;
	
	        var m = container.worldTransform.copy(this.tempMatrix);
	
	        m.prepend(renderer._activeRenderTarget.projectionMatrix);
	
	        this.shader.uniforms.projectionMatrix = m.toArray(true);
	        this.shader.uniforms.uAlpha = container.worldAlpha;
	
	        // make sure the texture is bound..
	        var baseTexture = children[0]._texture.baseTexture;
	
	        this.shader.uniforms.uSampler = renderer.bindTexture(baseTexture);
	
	        // now lets upload and render the buffers..
	        for (var i = 0, j = 0; i < totalChildren; i += batchSize, j += 1) {
	            var amount = totalChildren - i;
	
	            if (amount > batchSize) {
	                amount = batchSize;
	            }
	
	            var buffer = buffers[j];
	
	            // we always upload the dynamic
	            buffer.uploadDynamic(children, i, amount);
	
	            // we only upload the static content when we have to!
	            if (container._bufferToUpdate === j) {
	                buffer.uploadStatic(children, i, amount);
	                container._bufferToUpdate = j + 1;
	            }
	
	            // bind the buffer
	            renderer.bindVao(buffer.vao);
	            buffer.vao.draw(gl.TRIANGLES, amount * 6);
	        }
	    };
	
	    /**
	     * Creates one particle buffer for each child in the container we want to render and updates internal properties
	     *
	     * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer
	     * @return {PIXI.ParticleBuffer[]} The buffers
	     */
	
	
	    ParticleRenderer.prototype.generateBuffers = function generateBuffers(container) {
	        var gl = this.renderer.gl;
	        var buffers = [];
	        var size = container._maxSize;
	        var batchSize = container._batchSize;
	        var dynamicPropertyFlags = container._properties;
	
	        for (var i = 0; i < size; i += batchSize) {
	            buffers.push(new _ParticleBuffer2.default(gl, this.properties, dynamicPropertyFlags, batchSize));
	        }
	
	        return buffers;
	    };
	
	    /**
	     * Uploads the verticies.
	     *
	     * @param {PIXI.DisplayObject[]} children - the array of display objects to render
	     * @param {number} startIndex - the index to start from in the children array
	     * @param {number} amount - the amount of children that will have their vertices uploaded
	     * @param {number[]} array - The vertices to upload.
	     * @param {number} stride - Stride to use for iteration.
	     * @param {number} offset - Offset to start at.
	     */
	
	
	    ParticleRenderer.prototype.uploadVertices = function uploadVertices(children, startIndex, amount, array, stride, offset) {
	        var w0 = 0;
	        var w1 = 0;
	        var h0 = 0;
	        var h1 = 0;
	
	        for (var i = 0; i < amount; ++i) {
	            var sprite = children[startIndex + i];
	            var texture = sprite._texture;
	            var sx = sprite.scale.x;
	            var sy = sprite.scale.y;
	            var trim = texture.trim;
	            var orig = texture.orig;
	
	            if (trim) {
	                // if the sprite is trimmed and is not a tilingsprite then we need to add the
	                // extra space before transforming the sprite coords..
	                w1 = trim.x - sprite.anchor.x * orig.width;
	                w0 = w1 + trim.width;
	
	                h1 = trim.y - sprite.anchor.y * orig.height;
	                h0 = h1 + trim.height;
	            } else {
	                w0 = orig.width * (1 - sprite.anchor.x);
	                w1 = orig.width * -sprite.anchor.x;
	
	                h0 = orig.height * (1 - sprite.anchor.y);
	                h1 = orig.height * -sprite.anchor.y;
	            }
	
	            array[offset] = w1 * sx;
	            array[offset + 1] = h1 * sy;
	
	            array[offset + stride] = w0 * sx;
	            array[offset + stride + 1] = h1 * sy;
	
	            array[offset + stride * 2] = w0 * sx;
	            array[offset + stride * 2 + 1] = h0 * sy;
	
	            array[offset + stride * 3] = w1 * sx;
	            array[offset + stride * 3 + 1] = h0 * sy;
	
	            offset += stride * 4;
	        }
	    };
	
	    /**
	     *
	     * @param {PIXI.DisplayObject[]} children - the array of display objects to render
	     * @param {number} startIndex - the index to start from in the children array
	     * @param {number} amount - the amount of children that will have their positions uploaded
	     * @param {number[]} array - The vertices to upload.
	     * @param {number} stride - Stride to use for iteration.
	     * @param {number} offset - Offset to start at.
	     */
	
	
	    ParticleRenderer.prototype.uploadPosition = function uploadPosition(children, startIndex, amount, array, stride, offset) {
	        for (var i = 0; i < amount; i++) {
	            var spritePosition = children[startIndex + i].position;
	
	            array[offset] = spritePosition.x;
	            array[offset + 1] = spritePosition.y;
	
	            array[offset + stride] = spritePosition.x;
	            array[offset + stride + 1] = spritePosition.y;
	
	            array[offset + stride * 2] = spritePosition.x;
	            array[offset + stride * 2 + 1] = spritePosition.y;
	
	            array[offset + stride * 3] = spritePosition.x;
	            array[offset + stride * 3 + 1] = spritePosition.y;
	
	            offset += stride * 4;
	        }
	    };
	
	    /**
	     *
	     * @param {PIXI.DisplayObject[]} children - the array of display objects to render
	     * @param {number} startIndex - the index to start from in the children array
	     * @param {number} amount - the amount of children that will have their rotation uploaded
	     * @param {number[]} array - The vertices to upload.
	     * @param {number} stride - Stride to use for iteration.
	     * @param {number} offset - Offset to start at.
	     */
	
	
	    ParticleRenderer.prototype.uploadRotation = function uploadRotation(children, startIndex, amount, array, stride, offset) {
	        for (var i = 0; i < amount; i++) {
	            var spriteRotation = children[startIndex + i].rotation;
	
	            array[offset] = spriteRotation;
	            array[offset + stride] = spriteRotation;
	            array[offset + stride * 2] = spriteRotation;
	            array[offset + stride * 3] = spriteRotation;
	
	            offset += stride * 4;
	        }
	    };
	
	    /**
	     *
	     * @param {PIXI.DisplayObject[]} children - the array of display objects to render
	     * @param {number} startIndex - the index to start from in the children array
	     * @param {number} amount - the amount of children that will have their rotation uploaded
	     * @param {number[]} array - The vertices to upload.
	     * @param {number} stride - Stride to use for iteration.
	     * @param {number} offset - Offset to start at.
	     */
	
	
	    ParticleRenderer.prototype.uploadUvs = function uploadUvs(children, startIndex, amount, array, stride, offset) {
	        for (var i = 0; i < amount; ++i) {
	            var textureUvs = children[startIndex + i]._texture._uvs;
	
	            if (textureUvs) {
	                array[offset] = textureUvs.x0;
	                array[offset + 1] = textureUvs.y0;
	
	                array[offset + stride] = textureUvs.x1;
	                array[offset + stride + 1] = textureUvs.y1;
	
	                array[offset + stride * 2] = textureUvs.x2;
	                array[offset + stride * 2 + 1] = textureUvs.y2;
	
	                array[offset + stride * 3] = textureUvs.x3;
	                array[offset + stride * 3 + 1] = textureUvs.y3;
	
	                offset += stride * 4;
	            } else {
	                // TODO you know this can be easier!
	                array[offset] = 0;
	                array[offset + 1] = 0;
	
	                array[offset + stride] = 0;
	                array[offset + stride + 1] = 0;
	
	                array[offset + stride * 2] = 0;
	                array[offset + stride * 2 + 1] = 0;
	
	                array[offset + stride * 3] = 0;
	                array[offset + stride * 3 + 1] = 0;
	
	                offset += stride * 4;
	            }
	        }
	    };
	
	    /**
	     *
	     * @param {PIXI.DisplayObject[]} children - the array of display objects to render
	     * @param {number} startIndex - the index to start from in the children array
	     * @param {number} amount - the amount of children that will have their rotation uploaded
	     * @param {number[]} array - The vertices to upload.
	     * @param {number} stride - Stride to use for iteration.
	     * @param {number} offset - Offset to start at.
	     */
	
	
	    ParticleRenderer.prototype.uploadAlpha = function uploadAlpha(children, startIndex, amount, array, stride, offset) {
	        for (var i = 0; i < amount; i++) {
	            var spriteAlpha = children[startIndex + i].alpha;
	
	            array[offset] = spriteAlpha;
	            array[offset + stride] = spriteAlpha;
	            array[offset + stride * 2] = spriteAlpha;
	            array[offset + stride * 3] = spriteAlpha;
	
	            offset += stride * 4;
	        }
	    };
	
	    /**
	     * Destroys the ParticleRenderer.
	     *
	     */
	
	
	    ParticleRenderer.prototype.destroy = function destroy() {
	        if (this.renderer.gl) {
	            this.renderer.gl.deleteBuffer(this.indexBuffer);
	        }
	
	        _core$ObjectRenderer.prototype.destroy.call(this);
	
	        this.shader.destroy();
	
	        this.indices = null;
	        this.tempMatrix = null;
	    };
	
	    return ParticleRenderer;
	}(core.ObjectRenderer);
	
	exports.default = ParticleRenderer;
	
	
	core.WebGLRenderer.registerPlugin('particle', ParticleRenderer);
	//# sourceMappingURL=ParticleRenderer.js.map

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _Shader2 = __webpack_require__(93);
	
	var _Shader3 = _interopRequireDefault(_Shader2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class
	 * @extends PIXI.Shader
	 * @memberof PIXI
	 */
	var ParticleShader = function (_Shader) {
	    _inherits(ParticleShader, _Shader);
	
	    /**
	     * @param {PIXI.Shader} gl - The webgl shader manager this shader works for.
	     */
	    function ParticleShader(gl) {
	        _classCallCheck(this, ParticleShader);
	
	        return _possibleConstructorReturn(this, _Shader.call(this, gl,
	        // vertex shader
	        ['attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'attribute float aColor;', 'attribute vec2 aPositionCoord;', 'attribute vec2 aScale;', 'attribute float aRotation;', 'uniform mat3 projectionMatrix;', 'varying vec2 vTextureCoord;', 'varying float vColor;', 'void main(void){', '   vec2 v = aVertexPosition;', '   v.x = (aVertexPosition.x) * cos(aRotation) - (aVertexPosition.y) * sin(aRotation);', '   v.y = (aVertexPosition.x) * sin(aRotation) + (aVertexPosition.y) * cos(aRotation);', '   v = v + aPositionCoord;', '   gl_Position = vec4((projectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);', '   vTextureCoord = aTextureCoord;', '   vColor = aColor;', '}'].join('\n'),
	        // hello
	        ['varying vec2 vTextureCoord;', 'varying float vColor;', 'uniform sampler2D uSampler;', 'uniform float uAlpha;', 'void main(void){', '  vec4 color = texture2D(uSampler, vTextureCoord) * vColor * uAlpha;', '  if (color.a == 0.0) discard;', '  gl_FragColor = color;', '}'].join('\n')));
	    }
	
	    return ParticleShader;
	}(_Shader3.default);
	
	exports.default = ParticleShader;
	//# sourceMappingURL=ParticleShader.js.map

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _pixiGlCore = __webpack_require__(24);
	
	var _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);
	
	var _createIndicesForQuads = __webpack_require__(92);
	
	var _createIndicesForQuads2 = _interopRequireDefault(_createIndicesForQuads);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @author Mat Groves
	 *
	 * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/
	 * for creating the original pixi version!
	 * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that
	 * they now share 4 bytes on the vertex buffer
	 *
	 * Heavily inspired by LibGDX's ParticleBuffer:
	 * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java
	 */
	
	/**
	 * The particle buffer manages the static and dynamic buffers for a particle container.
	 *
	 * @class
	 * @private
	 * @memberof PIXI
	 */
	var ParticleBuffer = function () {
	    /**
	     * @param {WebGLRenderingContext} gl - The rendering context.
	     * @param {object} properties - The properties to upload.
	     * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.
	     * @param {number} size - The size of the batch.
	     */
	    function ParticleBuffer(gl, properties, dynamicPropertyFlags, size) {
	        _classCallCheck(this, ParticleBuffer);
	
	        /**
	         * The current WebGL drawing context.
	         *
	         * @member {WebGLRenderingContext}
	         */
	        this.gl = gl;
	
	        /**
	         * Size of a single vertex.
	         *
	         * @member {number}
	         */
	        this.vertSize = 2;
	
	        /**
	         * Size of a single vertex in bytes.
	         *
	         * @member {number}
	         */
	        this.vertByteSize = this.vertSize * 4;
	
	        /**
	         * The number of particles the buffer can hold
	         *
	         * @member {number}
	         */
	        this.size = size;
	
	        /**
	         * A list of the properties that are dynamic.
	         *
	         * @member {object[]}
	         */
	        this.dynamicProperties = [];
	
	        /**
	         * A list of the properties that are static.
	         *
	         * @member {object[]}
	         */
	        this.staticProperties = [];
	
	        for (var i = 0; i < properties.length; ++i) {
	            var property = properties[i];
	
	            // Make copy of properties object so that when we edit the offset it doesn't
	            // change all other instances of the object literal
	            property = {
	                attribute: property.attribute,
	                size: property.size,
	                uploadFunction: property.uploadFunction,
	                offset: property.offset
	            };
	
	            if (dynamicPropertyFlags[i]) {
	                this.dynamicProperties.push(property);
	            } else {
	                this.staticProperties.push(property);
	            }
	        }
	
	        this.staticStride = 0;
	        this.staticBuffer = null;
	        this.staticData = null;
	
	        this.dynamicStride = 0;
	        this.dynamicBuffer = null;
	        this.dynamicData = null;
	
	        this.initBuffers();
	    }
	
	    /**
	     * Sets up the renderer context and necessary buffers.
	     *
	     * @private
	     */
	
	
	    ParticleBuffer.prototype.initBuffers = function initBuffers() {
	        var gl = this.gl;
	        var dynamicOffset = 0;
	
	        /**
	         * Holds the indices of the geometry (quads) to draw
	         *
	         * @member {Uint16Array}
	         */
	        this.indices = (0, _createIndicesForQuads2.default)(this.size);
	        this.indexBuffer = _pixiGlCore2.default.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);
	
	        this.dynamicStride = 0;
	
	        for (var i = 0; i < this.dynamicProperties.length; ++i) {
	            var property = this.dynamicProperties[i];
	
	            property.offset = dynamicOffset;
	            dynamicOffset += property.size;
	            this.dynamicStride += property.size;
	        }
	
	        this.dynamicData = new Float32Array(this.size * this.dynamicStride * 4);
	        this.dynamicBuffer = _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl, this.dynamicData, gl.STREAM_DRAW);
	
	        // static //
	        var staticOffset = 0;
	
	        this.staticStride = 0;
	
	        for (var _i = 0; _i < this.staticProperties.length; ++_i) {
	            var _property = this.staticProperties[_i];
	
	            _property.offset = staticOffset;
	            staticOffset += _property.size;
	            this.staticStride += _property.size;
	        }
	
	        this.staticData = new Float32Array(this.size * this.staticStride * 4);
	        this.staticBuffer = _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl, this.staticData, gl.STATIC_DRAW);
	
	        this.vao = new _pixiGlCore2.default.VertexArrayObject(gl).addIndex(this.indexBuffer);
	
	        for (var _i2 = 0; _i2 < this.dynamicProperties.length; ++_i2) {
	            var _property2 = this.dynamicProperties[_i2];
	
	            this.vao.addAttribute(this.dynamicBuffer, _property2.attribute, gl.FLOAT, false, this.dynamicStride * 4, _property2.offset * 4);
	        }
	
	        for (var _i3 = 0; _i3 < this.staticProperties.length; ++_i3) {
	            var _property3 = this.staticProperties[_i3];
	
	            this.vao.addAttribute(this.staticBuffer, _property3.attribute, gl.FLOAT, false, this.staticStride * 4, _property3.offset * 4);
	        }
	    };
	
	    /**
	     * Uploads the dynamic properties.
	     *
	     * @param {PIXI.DisplayObject[]} children - The children to upload.
	     * @param {number} startIndex - The index to start at.
	     * @param {number} amount - The number to upload.
	     */
	
	
	    ParticleBuffer.prototype.uploadDynamic = function uploadDynamic(children, startIndex, amount) {
	        for (var i = 0; i < this.dynamicProperties.length; i++) {
	            var property = this.dynamicProperties[i];
	
	            property.uploadFunction(children, startIndex, amount, this.dynamicData, this.dynamicStride, property.offset);
	        }
	
	        this.dynamicBuffer.upload();
	    };
	
	    /**
	     * Uploads the static properties.
	     *
	     * @param {PIXI.DisplayObject[]} children - The children to upload.
	     * @param {number} startIndex - The index to start at.
	     * @param {number} amount - The number to upload.
	     */
	
	
	    ParticleBuffer.prototype.uploadStatic = function uploadStatic(children, startIndex, amount) {
	        for (var i = 0; i < this.staticProperties.length; i++) {
	            var property = this.staticProperties[i];
	
	            property.uploadFunction(children, startIndex, amount, this.staticData, this.staticStride, property.offset);
	        }
	
	        this.staticBuffer.upload();
	    };
	
	    /**
	     * Destroys the ParticleBuffer.
	     *
	     */
	
	
	    ParticleBuffer.prototype.destroy = function destroy() {
	        this.dynamicProperties = null;
	        this.dynamicData = null;
	        this.dynamicBuffer.destroy();
	
	        this.staticProperties = null;
	        this.staticData = null;
	        this.staticBuffer.destroy();
	    };
	
	    return ParticleBuffer;
	}();
	
	exports.default = ParticleBuffer;
	//# sourceMappingURL=ParticleBuffer.js.map

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.BitmapText = exports.TilingSpriteRenderer = exports.TilingSprite = exports.AnimatedSprite = exports.TextureTransform = undefined;
	
	var _TextureTransform = __webpack_require__(132);
	
	Object.defineProperty(exports, 'TextureTransform', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_TextureTransform).default;
	  }
	});
	
	var _AnimatedSprite = __webpack_require__(133);
	
	Object.defineProperty(exports, 'AnimatedSprite', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_AnimatedSprite).default;
	  }
	});
	
	var _TilingSprite = __webpack_require__(134);
	
	Object.defineProperty(exports, 'TilingSprite', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_TilingSprite).default;
	  }
	});
	
	var _TilingSpriteRenderer = __webpack_require__(135);
	
	Object.defineProperty(exports, 'TilingSpriteRenderer', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_TilingSpriteRenderer).default;
	  }
	});
	
	var _BitmapText = __webpack_require__(136);
	
	Object.defineProperty(exports, 'BitmapText', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_BitmapText).default;
	  }
	});
	
	__webpack_require__(137);
	
	__webpack_require__(138);
	
	__webpack_require__(139);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// imported for side effect of extending the prototype only, contains no exports
	//# sourceMappingURL=index.js.map

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Matrix = __webpack_require__(17);
	
	var _Matrix2 = _interopRequireDefault(_Matrix);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var tempMat = new _Matrix2.default();
	
	/**
	 * class controls uv transform and frame clamp for texture
	 */
	
	var TextureTransform = function () {
	    /**
	     *
	     * @param {PIXI.Texture} texture observed texture
	     * @param {number} [clampMargin] Changes frame clamping, 0.5 by default. Use -0.5 for extra border.
	     * @constructor
	     */
	    function TextureTransform(texture, clampMargin) {
	        _classCallCheck(this, TextureTransform);
	
	        this._texture = texture;
	
	        this.mapCoord = new _Matrix2.default();
	
	        this.uClampFrame = new Float32Array(4);
	
	        this.uClampOffset = new Float32Array(2);
	
	        this._lastTextureID = -1;
	
	        /**
	         * Changes frame clamping
	         * Works with TilingSprite and Mesh
	         * Change to 1.5 if you tex ture has repeated right and bottom lines, that leads to smoother borders
	         *
	         * @default 0
	         * @member {number}
	         */
	        this.clampOffset = 0;
	
	        /**
	         * Changes frame clamping
	         * Works with TilingSprite and Mesh
	         * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas
	         *
	         * @default 0.5
	         * @member {number}
	         */
	        this.clampMargin = typeof clampMargin === 'undefined' ? 0.5 : clampMargin;
	    }
	
	    /**
	     * texture property
	     * @member {PIXI.Texture}
	     * @memberof PIXI.TextureTransform
	     */
	
	
	    /**
	     * updates matrices if texture was changed
	     * @param {boolean} forceUpdate if true, matrices will be updated any case
	     */
	    TextureTransform.prototype.update = function update(forceUpdate) {
	        var tex = this.texture;
	
	        if (!tex || !tex.valid) {
	            return;
	        }
	
	        if (!forceUpdate && this._lastTextureID === this.texture._updateID) {
	            return;
	        }
	
	        this._lastTextureID = this.texture._updateID;
	
	        var uvs = this.texture._uvs;
	
	        this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);
	
	        var orig = tex.orig;
	        var trim = tex.trim;
	
	        if (trim) {
	            tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height, -trim.x / trim.width, -trim.y / trim.height);
	            this.mapCoord.append(tempMat);
	        }
	
	        var texBase = tex.baseTexture;
	        var frame = this.uClampFrame;
	        var margin = this.clampMargin / texBase.resolution;
	        var offset = this.clampOffset;
	
	        frame[0] = (tex._frame.x + margin + offset) / texBase.width;
	        frame[1] = (tex._frame.y + margin + offset) / texBase.height;
	        frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;
	        frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;
	        this.uClampOffset[0] = offset / texBase.realWidth;
	        this.uClampOffset[1] = offset / texBase.realHeight;
	    };
	
	    _createClass(TextureTransform, [{
	        key: 'texture',
	        get: function get() {
	            return this._texture;
	        }
	
	        /**
	         * sets texture value
	         * @param {PIXI.Texture} value texture to be set
	         */
	        ,
	        set: function set(value) {
	            this._texture = value;
	            this._lastTextureID = -1;
	        }
	    }]);
	
	    return TextureTransform;
	}();
	
	exports.default = TextureTransform;
	//# sourceMappingURL=TextureTransform.js.map

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @typedef FrameObject
	 * @type {object}
	 * @property {PIXI.Texture} texture - The {@link PIXI.Texture} of the frame
	 * @property {number} time - the duration of the frame in ms
	 */
	
	/**
	 * An AnimatedSprite is a simple way to display an animation depicted by a list of textures.
	 *
	 * ```js
	 * let alienImages = ["image_sequence_01.png","image_sequence_02.png","image_sequence_03.png","image_sequence_04.png"];
	 * let textureArray = [];
	 *
	 * for (let i=0; i < 4; i++)
	 * {
	 *      let texture = PIXI.Texture.fromImage(alienImages[i]);
	 *      textureArray.push(texture);
	 * };
	 *
	 * let mc = new PIXI.AnimatedSprite(textureArray);
	 * ```
	 *
	 * @class
	 * @extends PIXI.Sprite
	 * @memberof PIXI.extras
	 */
	var AnimatedSprite = function (_core$Sprite) {
	    _inherits(AnimatedSprite, _core$Sprite);
	
	    /**
	     * @param {PIXI.Texture[]|FrameObject[]} textures - an array of {@link PIXI.Texture} or frame
	     *  objects that make up the animation
	     */
	    function AnimatedSprite(textures) {
	        _classCallCheck(this, AnimatedSprite);
	
	        /**
	         * @private
	         */
	        var _this = _possibleConstructorReturn(this, _core$Sprite.call(this, textures[0] instanceof core.Texture ? textures[0] : textures[0].texture));
	
	        _this._textures = null;
	
	        /**
	         * @private
	         */
	        _this._durations = null;
	
	        _this.textures = textures;
	
	        /**
	         * The speed that the AnimatedSprite will play at. Higher is faster, lower is slower
	         *
	         * @member {number}
	         * @default 1
	         */
	        _this.animationSpeed = 1;
	
	        /**
	         * Whether or not the animate sprite repeats after playing.
	         *
	         * @member {boolean}
	         * @default true
	         */
	        _this.loop = true;
	
	        /**
	         * Function to call when a AnimatedSprite finishes playing
	         *
	         * @method
	         * @memberof PIXI.extras.AnimatedSprite#
	         */
	        _this.onComplete = null;
	
	        /**
	         * Function to call when a AnimatedSprite changes which texture is being rendered
	         *
	         * @method
	         * @memberof PIXI.extras.AnimatedSprite#
	         */
	        _this.onFrameChange = null;
	
	        /**
	         * Elapsed time since animation has been started, used internally to display current texture
	         *
	         * @member {number}
	         * @private
	         */
	        _this._currentTime = 0;
	
	        /**
	         * Indicates if the AnimatedSprite is currently playing
	         *
	         * @member {boolean}
	         * @readonly
	         */
	        _this.playing = false;
	        return _this;
	    }
	
	    /**
	     * Stops the AnimatedSprite
	     *
	     */
	
	
	    AnimatedSprite.prototype.stop = function stop() {
	        if (!this.playing) {
	            return;
	        }
	
	        this.playing = false;
	        core.ticker.shared.remove(this.update, this);
	    };
	
	    /**
	     * Plays the AnimatedSprite
	     *
	     */
	
	
	    AnimatedSprite.prototype.play = function play() {
	        if (this.playing) {
	            return;
	        }
	
	        this.playing = true;
	        core.ticker.shared.add(this.update, this);
	    };
	
	    /**
	     * Stops the AnimatedSprite and goes to a specific frame
	     *
	     * @param {number} frameNumber - frame index to stop at
	     */
	
	
	    AnimatedSprite.prototype.gotoAndStop = function gotoAndStop(frameNumber) {
	        this.stop();
	
	        var previousFrame = this.currentFrame;
	
	        this._currentTime = frameNumber;
	
	        if (previousFrame !== this.currentFrame) {
	            this.updateTexture();
	        }
	    };
	
	    /**
	     * Goes to a specific frame and begins playing the AnimatedSprite
	     *
	     * @param {number} frameNumber - frame index to start at
	     */
	
	
	    AnimatedSprite.prototype.gotoAndPlay = function gotoAndPlay(frameNumber) {
	        var previousFrame = this.currentFrame;
	
	        this._currentTime = frameNumber;
	
	        if (previousFrame !== this.currentFrame) {
	            this.updateTexture();
	        }
	
	        this.play();
	    };
	
	    /**
	     * Updates the object transform for rendering.
	     *
	     * @private
	     * @param {number} deltaTime - Time since last tick.
	     */
	
	
	    AnimatedSprite.prototype.update = function update(deltaTime) {
	        var elapsed = this.animationSpeed * deltaTime;
	        var previousFrame = this.currentFrame;
	
	        if (this._durations !== null) {
	            var lag = this._currentTime % 1 * this._durations[this.currentFrame];
	
	            lag += elapsed / 60 * 1000;
	
	            while (lag < 0) {
	                this._currentTime--;
	                lag += this._durations[this.currentFrame];
	            }
	
	            var sign = Math.sign(this.animationSpeed * deltaTime);
	
	            this._currentTime = Math.floor(this._currentTime);
	
	            while (lag >= this._durations[this.currentFrame]) {
	                lag -= this._durations[this.currentFrame] * sign;
	                this._currentTime += sign;
	            }
	
	            this._currentTime += lag / this._durations[this.currentFrame];
	        } else {
	            this._currentTime += elapsed;
	        }
	
	        if (this._currentTime < 0 && !this.loop) {
	            this.gotoAndStop(0);
	
	            if (this.onComplete) {
	                this.onComplete();
	            }
	        } else if (this._currentTime >= this._textures.length && !this.loop) {
	            this.gotoAndStop(this._textures.length - 1);
	
	            if (this.onComplete) {
	                this.onComplete();
	            }
	        } else if (previousFrame !== this.currentFrame) {
	            this.updateTexture();
	        }
	    };
	
	    /**
	     * Updates the displayed texture to match the current frame index
	     *
	     * @private
	     */
	
	
	    AnimatedSprite.prototype.updateTexture = function updateTexture() {
	        this._texture = this._textures[this.currentFrame];
	        this._textureID = -1;
	
	        if (this.onFrameChange) {
	            this.onFrameChange(this.currentFrame);
	        }
	    };
	
	    /**
	     * Stops the AnimatedSprite and destroys it
	     *
	     */
	
	
	    AnimatedSprite.prototype.destroy = function destroy() {
	        this.stop();
	        _core$Sprite.prototype.destroy.call(this);
	    };
	
	    /**
	     * A short hand way of creating a movieclip from an array of frame ids
	     *
	     * @static
	     * @param {string[]} frames - The array of frames ids the movieclip will use as its texture frames
	     * @return {AnimatedSprite} The new animated sprite with the specified frames.
	     */
	
	
	    AnimatedSprite.fromFrames = function fromFrames(frames) {
	        var textures = [];
	
	        for (var i = 0; i < frames.length; ++i) {
	            textures.push(core.Texture.fromFrame(frames[i]));
	        }
	
	        return new AnimatedSprite(textures);
	    };
	
	    /**
	     * A short hand way of creating a movieclip from an array of image ids
	     *
	     * @static
	     * @param {string[]} images - the array of image urls the movieclip will use as its texture frames
	     * @return {AnimatedSprite} The new animate sprite with the specified images as frames.
	     */
	
	
	    AnimatedSprite.fromImages = function fromImages(images) {
	        var textures = [];
	
	        for (var i = 0; i < images.length; ++i) {
	            textures.push(core.Texture.fromImage(images[i]));
	        }
	
	        return new AnimatedSprite(textures);
	    };
	
	    /**
	     * totalFrames is the total number of frames in the AnimatedSprite. This is the same as number of textures
	     * assigned to the AnimatedSprite.
	     *
	     * @readonly
	     * @member {number}
	     * @memberof PIXI.extras.AnimatedSprite#
	     * @default 0
	     */
	
	
	    _createClass(AnimatedSprite, [{
	        key: 'totalFrames',
	        get: function get() {
	            return this._textures.length;
	        }
	
	        /**
	         * The array of textures used for this AnimatedSprite
	         *
	         * @member {PIXI.Texture[]}
	         * @memberof PIXI.extras.AnimatedSprite#
	         */
	
	    }, {
	        key: 'textures',
	        get: function get() {
	            return this._textures;
	        }
	
	        /**
	         * Sets the textures.
	         *
	         * @param {PIXI.Texture[]} value - The texture to set.
	         */
	        ,
	        set: function set(value) {
	            if (value[0] instanceof core.Texture) {
	                this._textures = value;
	                this._durations = null;
	            } else {
	                this._textures = [];
	                this._durations = [];
	
	                for (var i = 0; i < value.length; i++) {
	                    this._textures.push(value[i].texture);
	                    this._durations.push(value[i].time);
	                }
	            }
	        }
	
	        /**
	        * The AnimatedSprites current frame index
	        *
	        * @member {number}
	        * @memberof PIXI.extras.AnimatedSprite#
	        * @readonly
	        */
	
	    }, {
	        key: 'currentFrame',
	        get: function get() {
	            var currentFrame = Math.floor(this._currentTime) % this._textures.length;
	
	            if (currentFrame < 0) {
	                currentFrame += this._textures.length;
	            }
	
	            return currentFrame;
	        }
	    }]);
	
	    return AnimatedSprite;
	}(core.Sprite);
	
	exports.default = AnimatedSprite;
	//# sourceMappingURL=AnimatedSprite.js.map

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _CanvasTinter = __webpack_require__(77);
	
	var _CanvasTinter2 = _interopRequireDefault(_CanvasTinter);
	
	var _TextureTransform = __webpack_require__(132);
	
	var _TextureTransform2 = _interopRequireDefault(_TextureTransform);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var tempPoint = new core.Point();
	
	/**
	 * A tiling sprite is a fast way of rendering a tiling image
	 *
	 * @class
	 * @extends PIXI.Sprite
	 * @memberof PIXI.extras
	 */
	
	var TilingSprite = function (_core$Sprite) {
	    _inherits(TilingSprite, _core$Sprite);
	
	    /**
	     * @param {PIXI.Texture} texture - the texture of the tiling sprite
	     * @param {number} [width=100] - the width of the tiling sprite
	     * @param {number} [height=100] - the height of the tiling sprite
	     */
	    function TilingSprite(texture) {
	        var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
	        var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
	
	        _classCallCheck(this, TilingSprite);
	
	        /**
	         * Tile transform
	         *
	         * @member {PIXI.TransformStatic}
	         */
	        var _this = _possibleConstructorReturn(this, _core$Sprite.call(this, texture));
	
	        _this.tileTransform = new core.TransformStatic();
	
	        // /// private
	
	        /**
	         * The with of the tiling sprite
	         *
	         * @member {number}
	         * @private
	         */
	        _this._width = width;
	
	        /**
	         * The height of the tiling sprite
	         *
	         * @member {number}
	         * @private
	         */
	        _this._height = height;
	
	        /**
	         * Canvas pattern
	         *
	         * @type {CanvasPattern}
	         * @private
	         */
	        _this._canvasPattern = null;
	
	        /**
	         * transform that is applied to UV to get the texture coords
	         *
	         * @member {PIXI.extras.TextureTransform}
	         */
	        _this.uvTransform = texture.transform || new _TextureTransform2.default(texture);
	        return _this;
	    }
	    /**
	     * Changes frame clamping in corresponding textureTransform, shortcut
	     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas
	     *
	     * @default 0.5
	     * @member {number}
	     * @memberof PIXI.TilingSprite
	     */
	
	
	    /**
	     * @private
	     */
	    TilingSprite.prototype._onTextureUpdate = function _onTextureUpdate() {
	        if (this.uvTransform) {
	            this.uvTransform.texture = this._texture;
	        }
	    };
	
	    /**
	     * Renders the object using the WebGL renderer
	     *
	     * @private
	     * @param {PIXI.WebGLRenderer} renderer - The renderer
	     */
	
	
	    TilingSprite.prototype._renderWebGL = function _renderWebGL(renderer) {
	        // tweak our texture temporarily..
	        var texture = this._texture;
	
	        if (!texture || !texture.valid) {
	            return;
	        }
	
	        this.tileTransform.updateLocalTransform();
	        this.uvTransform.update();
	
	        renderer.setObjectRenderer(renderer.plugins.tilingSprite);
	        renderer.plugins.tilingSprite.render(this);
	    };
	
	    /**
	     * Renders the object using the Canvas renderer
	     *
	     * @private
	     * @param {PIXI.CanvasRenderer} renderer - a reference to the canvas renderer
	     */
	
	
	    TilingSprite.prototype._renderCanvas = function _renderCanvas(renderer) {
	        var texture = this._texture;
	
	        if (!texture.baseTexture.hasLoaded) {
	            return;
	        }
	
	        var context = renderer.context;
	        var transform = this.worldTransform;
	        var resolution = renderer.resolution;
	        var baseTexture = texture.baseTexture;
	        var baseTextureResolution = texture.baseTexture.resolution;
	        var modX = this.tilePosition.x / this.tileScale.x % texture._frame.width;
	        var modY = this.tilePosition.y / this.tileScale.y % texture._frame.height;
	
	        // create a nice shiny pattern!
	        // TODO this needs to be refreshed if texture changes..
	        if (!this._canvasPattern) {
	            // cut an object from a spritesheet..
	            var tempCanvas = new core.CanvasRenderTarget(texture._frame.width, texture._frame.height, baseTextureResolution);
	
	            // Tint the tiling sprite
	            if (this.tint !== 0xFFFFFF) {
	                if (this.cachedTint !== this.tint) {
	                    this.cachedTint = this.tint;
	
	                    this.tintedTexture = _CanvasTinter2.default.getTintedTexture(this, this.tint);
	                }
	                tempCanvas.context.drawImage(this.tintedTexture, 0, 0);
	            } else {
	                tempCanvas.context.drawImage(baseTexture.source, -texture._frame.x, -texture._frame.y);
	            }
	            this._canvasPattern = tempCanvas.context.createPattern(tempCanvas.canvas, 'repeat');
	        }
	
	        // set context state..
	        context.globalAlpha = this.worldAlpha;
	        context.setTransform(transform.a * resolution, transform.b * resolution, transform.c * resolution, transform.d * resolution, transform.tx * resolution, transform.ty * resolution);
	
	        // TODO - this should be rolled into the setTransform above..
	        context.scale(this.tileScale.x / baseTextureResolution, this.tileScale.y / baseTextureResolution);
	
	        context.translate(modX + this.anchor.x * -this._width, modY + this.anchor.y * -this._height);
	
	        renderer.setBlendMode(this.blendMode);
	
	        // fill the pattern!
	        context.fillStyle = this._canvasPattern;
	        context.fillRect(-modX, -modY, this._width / this.tileScale.x * baseTextureResolution, this._height / this.tileScale.y * baseTextureResolution);
	    };
	
	    /**
	     * Updates the bounds of the tiling sprite.
	     *
	     * @private
	     */
	
	
	    TilingSprite.prototype._calculateBounds = function _calculateBounds() {
	        var minX = this._width * -this._anchor._x;
	        var minY = this._height * -this._anchor._y;
	        var maxX = this._width * (1 - this._anchor._x);
	        var maxY = this._height * (1 - this._anchor._y);
	
	        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);
	    };
	
	    /**
	     * Gets the local bounds of the sprite object.
	     *
	     * @param {PIXI.Rectangle} rect - The output rectangle.
	     * @return {PIXI.Rectangle} The bounds.
	     */
	
	
	    TilingSprite.prototype.getLocalBounds = function getLocalBounds(rect) {
	        // we can do a fast local bounds if the sprite has no children!
	        if (this.children.length === 0) {
	            this._bounds.minX = this._width * -this._anchor._x;
	            this._bounds.minY = this._height * -this._anchor._y;
	            this._bounds.maxX = this._width * (1 - this._anchor._x);
	            this._bounds.maxY = this._height * (1 - this._anchor._x);
	
	            if (!rect) {
	                if (!this._localBoundsRect) {
	                    this._localBoundsRect = new core.Rectangle();
	                }
	
	                rect = this._localBoundsRect;
	            }
	
	            return this._bounds.getRectangle(rect);
	        }
	
	        return _core$Sprite.prototype.getLocalBounds.call(this, rect);
	    };
	
	    /**
	     * Checks if a point is inside this tiling sprite.
	     *
	     * @param {PIXI.Point} point - the point to check
	     * @return {boolean} Whether or not the sprite contains the point.
	     */
	
	
	    TilingSprite.prototype.containsPoint = function containsPoint(point) {
	        this.worldTransform.applyInverse(point, tempPoint);
	
	        var width = this._width;
	        var height = this._height;
	        var x1 = -width * this.anchor._x;
	
	        if (tempPoint.x > x1 && tempPoint.x < x1 + width) {
	            var y1 = -height * this.anchor._y;
	
	            if (tempPoint.y > y1 && tempPoint.y < y1 + height) {
	                return true;
	            }
	        }
	
	        return false;
	    };
	
	    /**
	     * Destroys this tiling sprite
	     *
	     */
	
	
	    TilingSprite.prototype.destroy = function destroy() {
	        _core$Sprite.prototype.destroy.call(this);
	
	        this.tileTransform = null;
	        this.uvTransform = null;
	    };
	
	    /**
	     * Helper function that creates a new tiling sprite based on the source you provide.
	     * The source can be - frame id, image url, video url, canvas element, video element, base texture
	     *
	     * @static
	     * @param {number|string|PIXI.BaseTexture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from
	     * @param {number} width - the width of the tiling sprite
	     * @param {number} height - the height of the tiling sprite
	     * @return {PIXI.Texture} The newly created texture
	     */
	
	
	    TilingSprite.from = function from(source, width, height) {
	        return new TilingSprite(core.Texture.from(source), width, height);
	    };
	
	    /**
	     * Helper function that creates a tiling sprite that will use a texture from the TextureCache based on the frameId
	     * The frame ids are created when a Texture packer file has been loaded
	     *
	     * @static
	     * @param {string} frameId - The frame Id of the texture in the cache
	     * @param {number} width - the width of the tiling sprite
	     * @param {number} height - the height of the tiling sprite
	     * @return {PIXI.extras.TilingSprite} A new TilingSprite using a texture from the texture cache matching the frameId
	     */
	
	
	    TilingSprite.fromFrame = function fromFrame(frameId, width, height) {
	        var texture = core.utils.TextureCache[frameId];
	
	        if (!texture) {
	            throw new Error('The frameId "' + frameId + '" does not exist in the texture cache ' + this);
	        }
	
	        return new TilingSprite(texture, width, height);
	    };
	
	    /**
	     * Helper function that creates a sprite that will contain a texture based on an image url
	     * If the image is not in the texture cache it will be loaded
	     *
	     * @static
	     * @param {string} imageId - The image url of the texture
	     * @param {number} width - the width of the tiling sprite
	     * @param {number} height - the height of the tiling sprite
	     * @param {boolean} [crossorigin] - if you want to specify the cross-origin parameter
	     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - if you want to specify the scale mode,
	     *  see {@link PIXI.SCALE_MODES} for possible values
	     * @return {PIXI.extras.TilingSprite} A new TilingSprite using a texture from the texture cache matching the image id
	     */
	
	
	    TilingSprite.fromImage = function fromImage(imageId, width, height, crossorigin, scaleMode) {
	        return new TilingSprite(core.Texture.fromImage(imageId, crossorigin, scaleMode), width, height);
	    };
	
	    /**
	     * The width of the sprite, setting this will actually modify the scale to achieve the value set
	     *
	     * @member {number}
	     * @memberof PIXI.extras.TilingSprite#
	     */
	
	
	    _createClass(TilingSprite, [{
	        key: 'clampMargin',
	        get: function get() {
	            return this.uvTransform.clampMargin;
	        }
	
	        /**
	         * setter for clampMargin
	         *
	         * @param {number} value assigned value
	         */
	        ,
	        set: function set(value) {
	            this.uvTransform.clampMargin = value;
	            this.uvTransform.update(true);
	        }
	
	        /**
	         * The scaling of the image that is being tiled
	         *
	         * @member {PIXI.ObservablePoint}
	         * @memberof PIXI.DisplayObject#
	         */
	
	    }, {
	        key: 'tileScale',
	        get: function get() {
	            return this.tileTransform.scale;
	        }
	
	        /**
	         * Copies the point to the scale of the tiled image.
	         *
	         * @param {PIXI.Point|PIXI.ObservablePoint} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this.tileTransform.scale.copy(value);
	        }
	
	        /**
	         * The offset of the image that is being tiled
	         *
	         * @member {PIXI.ObservablePoint}
	         * @memberof PIXI.TilingSprite#
	         */
	
	    }, {
	        key: 'tilePosition',
	        get: function get() {
	            return this.tileTransform.position;
	        }
	
	        /**
	         * Copies the point to the position of the tiled image.
	         *
	         * @param {PIXI.Point|PIXI.ObservablePoint} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this.tileTransform.position.copy(value);
	        }
	    }, {
	        key: 'width',
	        get: function get() {
	            return this._width;
	        }
	
	        /**
	         * Sets the width.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this._width = value;
	        }
	
	        /**
	         * The height of the TilingSprite, setting this will actually modify the scale to achieve the value set
	         *
	         * @member {number}
	         * @memberof PIXI.extras.TilingSprite#
	         */
	
	    }, {
	        key: 'height',
	        get: function get() {
	            return this._height;
	        }
	
	        /**
	         * Sets the width.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this._height = value;
	        }
	    }]);
	
	    return TilingSprite;
	}(core.Sprite);
	
	exports.default = TilingSprite;
	//# sourceMappingURL=TilingSprite.js.map

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _const = __webpack_require__(12);
	
	var _path = __webpack_require__(86);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var tempMat = new core.Matrix();
	var tempArray = new Float32Array(4);
	
	/**
	 * WebGL renderer plugin for tiling sprites
	 */
	
	var TilingSpriteRenderer = function (_core$ObjectRenderer) {
	    _inherits(TilingSpriteRenderer, _core$ObjectRenderer);
	
	    /**
	     * constructor for renderer
	     *
	     * @param {WebGLRenderer} renderer The renderer this tiling awesomeness works for.
	     */
	    function TilingSpriteRenderer(renderer) {
	        _classCallCheck(this, TilingSpriteRenderer);
	
	        var _this = _possibleConstructorReturn(this, _core$ObjectRenderer.call(this, renderer));
	
	        _this.shader = null;
	        _this.simpleShader = null;
	        _this.quad = null;
	        return _this;
	    }
	
	    /**
	     * Sets up the renderer context and necessary buffers.
	     *
	     * @private
	     */
	
	
	    TilingSpriteRenderer.prototype.onContextChange = function onContextChange() {
	        var gl = this.renderer.gl;
	
	        this.shader = new core.Shader(gl, 'attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform mat3 uTransform;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\n}\n', 'varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform vec4 uColor;\nuniform mat3 uMapCoord;\nuniform vec4 uClampFrame;\nuniform vec2 uClampOffset;\n\nvoid main(void)\n{\n    vec2 coord = mod(vTextureCoord - uClampOffset, vec2(1.0, 1.0)) + uClampOffset;\n    coord = (uMapCoord * vec3(coord, 1.0)).xy;\n    coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n\n    vec4 sample = texture2D(uSampler, coord);\n    vec4 color = vec4(uColor.rgb * uColor.a, uColor.a);\n\n    gl_FragColor = sample * color ;\n}\n');
	        this.simpleShader = new core.Shader(gl, 'attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform mat3 uTransform;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\n}\n', 'varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform vec4 uColor;\n\nvoid main(void)\n{\n    vec4 sample = texture2D(uSampler, vTextureCoord);\n    vec4 color = vec4(uColor.rgb * uColor.a, uColor.a);\n    gl_FragColor = sample * color;\n}\n');
	
	        this.renderer.bindVao(null);
	        this.quad = new core.Quad(gl, this.renderer.state.attribState);
	        this.quad.initVao(this.shader);
	    };
	
	    /**
	     *
	     * @param {PIXI.extras.TilingSprite} ts tilingSprite to be rendered
	     */
	
	
	    TilingSpriteRenderer.prototype.render = function render(ts) {
	        var renderer = this.renderer;
	        var quad = this.quad;
	
	        renderer.bindVao(quad.vao);
	
	        var vertices = quad.vertices;
	
	        vertices[0] = vertices[6] = ts._width * -ts.anchor.x;
	        vertices[1] = vertices[3] = ts._height * -ts.anchor.y;
	
	        vertices[2] = vertices[4] = ts._width * (1.0 - ts.anchor.x);
	        vertices[5] = vertices[7] = ts._height * (1.0 - ts.anchor.y);
	
	        vertices = quad.uvs;
	
	        vertices[0] = vertices[6] = -ts.anchor.x;
	        vertices[1] = vertices[3] = -ts.anchor.y;
	
	        vertices[2] = vertices[4] = 1.0 - ts.anchor.x;
	        vertices[5] = vertices[7] = 1.0 - ts.anchor.y;
	
	        quad.upload();
	
	        var tex = ts._texture;
	        var baseTex = tex.baseTexture;
	        var lt = ts.tileTransform.localTransform;
	        var uv = ts.uvTransform;
	        var isSimple = baseTex.isPowerOfTwo && tex.frame.width === baseTex.width && tex.frame.height === baseTex.height;
	
	        // auto, force repeat wrapMode for big tiling textures
	        if (isSimple) {
	            if (!baseTex._glTextures[renderer.CONTEXT_UID]) {
	                if (baseTex.wrapMode === _const.WRAP_MODES.CLAMP) {
	                    baseTex.wrapMode = _const.WRAP_MODES.REPEAT;
	                }
	            } else {
	                isSimple = baseTex.wrapMode !== _const.WRAP_MODES.CLAMP;
	            }
	        }
	
	        var shader = isSimple ? this.simpleShader : this.shader;
	
	        renderer.bindShader(shader);
	
	        var w = tex.width;
	        var h = tex.height;
	        var W = ts._width;
	        var H = ts._height;
	
	        tempMat.set(lt.a * w / W, lt.b * w / H, lt.c * h / W, lt.d * h / H, lt.tx / W, lt.ty / H);
	
	        // that part is the same as above:
	        // tempMat.identity();
	        // tempMat.scale(tex.width, tex.height);
	        // tempMat.prepend(lt);
	        // tempMat.scale(1.0 / ts._width, 1.0 / ts._height);
	
	        tempMat.invert();
	        if (isSimple) {
	            tempMat.append(uv.mapCoord);
	        } else {
	            shader.uniforms.uMapCoord = uv.mapCoord.toArray(true);
	            shader.uniforms.uClampFrame = uv.uClampFrame;
	            shader.uniforms.uClampOffset = uv.uClampOffset;
	        }
	
	        shader.uniforms.uTransform = tempMat.toArray(true);
	
	        var color = tempArray;
	
	        core.utils.hex2rgb(ts.tint, color);
	        color[3] = ts.worldAlpha;
	        shader.uniforms.uColor = color;
	        shader.uniforms.translationMatrix = ts.transform.worldTransform.toArray(true);
	
	        shader.uniforms.uSampler = renderer.bindTexture(tex);
	
	        renderer.setBlendMode(ts.blendMode);
	
	        quad.vao.draw(this.renderer.gl.TRIANGLES, 6, 0);
	    };
	
	    return TilingSpriteRenderer;
	}(core.ObjectRenderer);
	
	exports.default = TilingSpriteRenderer;
	
	
	core.WebGLRenderer.registerPlugin('tilingSprite', TilingSpriteRenderer);
	//# sourceMappingURL=TilingSpriteRenderer.js.map

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _ObservablePoint = __webpack_require__(16);
	
	var _ObservablePoint2 = _interopRequireDefault(_ObservablePoint);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * A BitmapText object will create a line or multiple lines of text using bitmap font. To
	 * split a line you can use '\n', '\r' or '\r\n' in your string. You can generate the fnt files using:
	 *
	 * A BitmapText can only be created when the font is loaded
	 *
	 * ```js
	 * // in this case the font is in a file called 'desyrel.fnt'
	 * let bitmapText = new PIXI.extras.BitmapText("text using a fancy font!", {font: "35px Desyrel", align: "right"});
	 * ```
	 *
	 * http://www.angelcode.com/products/bmfont/ for windows or
	 * http://www.bmglyph.com/ for mac.
	 *
	 * @class
	 * @extends PIXI.Container
	 * @memberof PIXI.extras
	 */
	var BitmapText = function (_core$Container) {
	    _inherits(BitmapText, _core$Container);
	
	    /**
	     * @param {string} text - The copy that you would like the text to display
	     * @param {object} style - The style parameters
	     * @param {string|object} style.font - The font descriptor for the object, can be passed as a string of form
	     *      "24px FontName" or "FontName" or as an object with explicit name/size properties.
	     * @param {string} [style.font.name] - The bitmap font id
	     * @param {number} [style.font.size] - The size of the font in pixels, e.g. 24
	     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'), does not affect
	     *      single line text
	     * @param {number} [style.tint=0xFFFFFF] - The tint color
	     */
	    function BitmapText(text) {
	        var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	        _classCallCheck(this, BitmapText);
	
	        /**
	         * The width of the overall text, different from fontSize,
	         * which is defined in the style object
	         *
	         * @member {number}
	         * @readonly
	         */
	        var _this = _possibleConstructorReturn(this, _core$Container.call(this));
	
	        _this.textWidth = 0;
	
	        /**
	         * The height of the overall text, different from fontSize,
	         * which is defined in the style object
	         *
	         * @member {number}
	         * @readonly
	         */
	        _this.textHeight = 0;
	
	        /**
	         * Private tracker for the letter sprite pool.
	         *
	         * @member {PIXI.Sprite[]}
	         * @private
	         */
	        _this._glyphs = [];
	
	        /**
	         * Private tracker for the current style.
	         *
	         * @member {object}
	         * @private
	         */
	        _this._font = {
	            tint: style.tint !== undefined ? style.tint : 0xFFFFFF,
	            align: style.align || 'left',
	            name: null,
	            size: 0
	        };
	
	        /**
	         * Private tracker for the current font.
	         *
	         * @member {object}
	         * @private
	         */
	        _this.font = style.font; // run font setter
	
	        /**
	         * Private tracker for the current text.
	         *
	         * @member {string}
	         * @private
	         */
	        _this._text = text;
	
	        /**
	         * The max width of this bitmap text in pixels. If the text provided is longer than the
	         * value provided, line breaks will be automatically inserted in the last whitespace.
	         * Disable by setting value to 0
	         *
	         * @member {number}
	         */
	        _this.maxWidth = 0;
	
	        /**
	         * The max line height. This is useful when trying to use the total height of the Text,
	         * ie: when trying to vertically align.
	         *
	         * @member {number}
	         */
	        _this.maxLineHeight = 0;
	
	        /**
	         * Text anchor. read-only
	         *
	         * @member {PIXI.ObservablePoint}
	         * @private
	         */
	        _this._anchor = new _ObservablePoint2.default(function () {
	            _this.dirty = true;
	        }, _this, 0, 0);
	
	        /**
	         * The dirty state of this object.
	         *
	         * @member {boolean}
	         */
	        _this.dirty = false;
	
	        _this.updateText();
	        return _this;
	    }
	
	    /**
	     * Renders text and updates it when needed
	     *
	     * @private
	     */
	
	
	    BitmapText.prototype.updateText = function updateText() {
	        var data = BitmapText.fonts[this._font.name];
	        var scale = this._font.size / data.size;
	        var pos = new core.Point();
	        var chars = [];
	        var lineWidths = [];
	
	        var prevCharCode = null;
	        var lastLineWidth = 0;
	        var maxLineWidth = 0;
	        var line = 0;
	        var lastSpace = -1;
	        var lastSpaceWidth = 0;
	        var maxLineHeight = 0;
	
	        for (var i = 0; i < this.text.length; i++) {
	            var charCode = this.text.charCodeAt(i);
	
	            if (/(\s)/.test(this.text.charAt(i))) {
	                lastSpace = i;
	                lastSpaceWidth = lastLineWidth;
	            }
	
	            if (/(?:\r\n|\r|\n)/.test(this.text.charAt(i))) {
	                lineWidths.push(lastLineWidth);
	                maxLineWidth = Math.max(maxLineWidth, lastLineWidth);
	                line++;
	
	                pos.x = 0;
	                pos.y += data.lineHeight;
	                prevCharCode = null;
	                continue;
	            }
	
	            if (lastSpace !== -1 && this.maxWidth > 0 && pos.x * scale > this.maxWidth) {
	                core.utils.removeItems(chars, lastSpace, i - lastSpace);
	                i = lastSpace;
	                lastSpace = -1;
	
	                lineWidths.push(lastSpaceWidth);
	                maxLineWidth = Math.max(maxLineWidth, lastSpaceWidth);
	                line++;
	
	                pos.x = 0;
	                pos.y += data.lineHeight;
	                prevCharCode = null;
	                continue;
	            }
	
	            var charData = data.chars[charCode];
	
	            if (!charData) {
	                continue;
	            }
	
	            if (prevCharCode && charData.kerning[prevCharCode]) {
	                pos.x += charData.kerning[prevCharCode];
	            }
	
	            chars.push({
	                texture: charData.texture,
	                line: line,
	                charCode: charCode,
	                position: new core.Point(pos.x + charData.xOffset, pos.y + charData.yOffset)
	            });
	            lastLineWidth = pos.x + (charData.texture.width + charData.xOffset);
	            pos.x += charData.xAdvance;
	            maxLineHeight = Math.max(maxLineHeight, charData.yOffset + charData.texture.height);
	            prevCharCode = charCode;
	        }
	
	        lineWidths.push(lastLineWidth);
	        maxLineWidth = Math.max(maxLineWidth, lastLineWidth);
	
	        var lineAlignOffsets = [];
	
	        for (var _i = 0; _i <= line; _i++) {
	            var alignOffset = 0;
	
	            if (this._font.align === 'right') {
	                alignOffset = maxLineWidth - lineWidths[_i];
	            } else if (this._font.align === 'center') {
	                alignOffset = (maxLineWidth - lineWidths[_i]) / 2;
	            }
	
	            lineAlignOffsets.push(alignOffset);
	        }
	
	        var lenChars = chars.length;
	        var tint = this.tint;
	
	        for (var _i2 = 0; _i2 < lenChars; _i2++) {
	            var c = this._glyphs[_i2]; // get the next glyph sprite
	
	            if (c) {
	                c.texture = chars[_i2].texture;
	            } else {
	                c = new core.Sprite(chars[_i2].texture);
	                this._glyphs.push(c);
	            }
	
	            c.position.x = (chars[_i2].position.x + lineAlignOffsets[chars[_i2].line]) * scale;
	            c.position.y = chars[_i2].position.y * scale;
	            c.scale.x = c.scale.y = scale;
	            c.tint = tint;
	
	            if (!c.parent) {
	                this.addChild(c);
	            }
	        }
	
	        // remove unnecessary children.
	        for (var _i3 = lenChars; _i3 < this._glyphs.length; ++_i3) {
	            this.removeChild(this._glyphs[_i3]);
	        }
	
	        this.textWidth = maxLineWidth * scale;
	        this.textHeight = (pos.y + data.lineHeight) * scale;
	
	        // apply anchor
	        if (this.anchor.x !== 0 || this.anchor.y !== 0) {
	            for (var _i4 = 0; _i4 < lenChars; _i4++) {
	                this._glyphs[_i4].x -= this.textWidth * this.anchor.x;
	                this._glyphs[_i4].y -= this.textHeight * this.anchor.y;
	            }
	        }
	        this.maxLineHeight = maxLineHeight * scale;
	    };
	
	    /**
	     * Updates the transform of this object
	     *
	     * @private
	     */
	
	
	    BitmapText.prototype.updateTransform = function updateTransform() {
	        this.validate();
	        this.containerUpdateTransform();
	    };
	
	    /**
	     * Validates text before calling parent's getLocalBounds
	     *
	     * @return {PIXI.Rectangle} The rectangular bounding area
	     */
	
	
	    BitmapText.prototype.getLocalBounds = function getLocalBounds() {
	        this.validate();
	
	        return _core$Container.prototype.getLocalBounds.call(this);
	    };
	
	    /**
	     * Updates text when needed
	     *
	     * @private
	     */
	
	
	    BitmapText.prototype.validate = function validate() {
	        if (this.dirty) {
	            this.updateText();
	            this.dirty = false;
	        }
	    };
	
	    /**
	     * The tint of the BitmapText object
	     *
	     * @member {number}
	     * @memberof PIXI.extras.BitmapText#
	     */
	
	
	    _createClass(BitmapText, [{
	        key: 'tint',
	        get: function get() {
	            return this._font.tint;
	        }
	
	        /**
	         * Sets the tint.
	         *
	         * @param {number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this._font.tint = typeof value === 'number' && value >= 0 ? value : 0xFFFFFF;
	
	            this.dirty = true;
	        }
	
	        /**
	         * The alignment of the BitmapText object
	         *
	         * @member {string}
	         * @default 'left'
	         * @memberof PIXI.extras.BitmapText#
	         */
	
	    }, {
	        key: 'align',
	        get: function get() {
	            return this._font.align;
	        }
	
	        /**
	         * Sets the alignment
	         *
	         * @param {string} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            this._font.align = value || 'left';
	
	            this.dirty = true;
	        }
	
	        /**
	         * The anchor sets the origin point of the text.
	         * The default is 0,0 this means the text's origin is the top left
	         * Setting the anchor to 0.5,0.5 means the text's origin is centered
	         * Setting the anchor to 1,1 would mean the text's origin point will be the bottom right corner
	         *
	         * @member {PIXI.Point | number}
	         * @memberof PIXI.extras.BitmapText#
	         */
	
	    }, {
	        key: 'anchor',
	        get: function get() {
	            return this._anchor;
	        }
	
	        /**
	         * Sets the anchor.
	         *
	         * @param {PIXI.Point|number} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            if (typeof value === 'number') {
	                this._anchor.set(value);
	            } else {
	                this._anchor.copy(value);
	            }
	        }
	
	        /**
	         * The font descriptor of the BitmapText object
	         *
	         * @member {string|object}
	         * @memberof PIXI.extras.BitmapText#
	         */
	
	    }, {
	        key: 'font',
	        get: function get() {
	            return this._font;
	        }
	
	        /**
	         * Sets the font.
	         *
	         * @param {string|object} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            if (!value) {
	                return;
	            }
	
	            if (typeof value === 'string') {
	                value = value.split(' ');
	
	                this._font.name = value.length === 1 ? value[0] : value.slice(1).join(' ');
	                this._font.size = value.length >= 2 ? parseInt(value[0], 10) : BitmapText.fonts[this._font.name].size;
	            } else {
	                this._font.name = value.name;
	                this._font.size = typeof value.size === 'number' ? value.size : parseInt(value.size, 10);
	            }
	
	            this.dirty = true;
	        }
	
	        /**
	         * The text of the BitmapText object
	         *
	         * @member {string}
	         * @memberof PIXI.extras.BitmapText#
	         */
	
	    }, {
	        key: 'text',
	        get: function get() {
	            return this._text;
	        }
	
	        /**
	         * Sets the text.
	         *
	         * @param {string} value - The value to set to.
	         */
	        ,
	        set: function set(value) {
	            value = value.toString() || ' ';
	            if (this._text === value) {
	                return;
	            }
	            this._text = value;
	            this.dirty = true;
	        }
	    }]);
	
	    return BitmapText;
	}(core.Container);
	
	exports.default = BitmapText;
	
	
	BitmapText.fonts = {};
	//# sourceMappingURL=BitmapText.js.map

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var DisplayObject = core.DisplayObject;
	var _tempMatrix = new core.Matrix();
	
	DisplayObject.prototype._cacheAsBitmap = false;
	DisplayObject.prototype._cacheData = false;
	
	// figured theres no point adding ALL the extra variables to prototype.
	// this model can hold the information needed. This can also be generated on demand as
	// most objects are not cached as bitmaps.
	/**
	 * @class
	 * @ignore
	 */
	
	var CacheData =
	/**
	 *
	 */
	function CacheData() {
	    _classCallCheck(this, CacheData);
	
	    this.originalRenderWebGL = null;
	    this.originalRenderCanvas = null;
	    this.originalCalculateBounds = null;
	    this.originalGetLocalBounds = null;
	
	    this.originalUpdateTransform = null;
	    this.originalHitTest = null;
	    this.originalDestroy = null;
	    this.originalMask = null;
	    this.originalFilterArea = null;
	    this.sprite = null;
	};
	
	Object.defineProperties(DisplayObject.prototype, {
	    /**
	     * Set this to true if you want this display object to be cached as a bitmap.
	     * This basically takes a snap shot of the display object as it is at that moment. It can
	     * provide a performance benefit for complex static displayObjects.
	     * To remove simply set this property to 'false'
	     *
	     * @member {boolean}
	     * @memberof PIXI.DisplayObject#
	     */
	    cacheAsBitmap: {
	        get: function get() {
	            return this._cacheAsBitmap;
	        },
	        set: function set(value) {
	            if (this._cacheAsBitmap === value) {
	                return;
	            }
	
	            this._cacheAsBitmap = value;
	
	            var data = void 0;
	
	            if (value) {
	                if (!this._cacheData) {
	                    this._cacheData = new CacheData();
	                }
	
	                data = this._cacheData;
	
	                data.originalRenderWebGL = this.renderWebGL;
	                data.originalRenderCanvas = this.renderCanvas;
	
	                data.originalUpdateTransform = this.updateTransform;
	                data.originalCalculateBounds = this._calculateBounds;
	                data.originalGetLocalBounds = this.getLocalBounds;
	
	                data.originalDestroy = this.destroy;
	
	                data.originalContainsPoint = this.containsPoint;
	
	                data.originalMask = this._mask;
	                data.originalFilterArea = this.filterArea;
	
	                this.renderWebGL = this._renderCachedWebGL;
	                this.renderCanvas = this._renderCachedCanvas;
	
	                this.destroy = this._cacheAsBitmapDestroy;
	            } else {
	                data = this._cacheData;
	
	                if (data.sprite) {
	                    this._destroyCachedDisplayObject();
	                }
	
	                this.renderWebGL = data.originalRenderWebGL;
	                this.renderCanvas = data.originalRenderCanvas;
	                this._calculateBounds = data.originalCalculateBounds;
	                this.getLocalBounds = data.originalGetLocalBounds;
	
	                this.destroy = data.originalDestroy;
	
	                this.updateTransform = data.originalUpdateTransform;
	                this.containsPoint = data.originalContainsPoint;
	
	                this._mask = data.originalMask;
	                this.filterArea = data.originalFilterArea;
	            }
	        }
	    }
	});
	
	/**
	 * Renders a cached version of the sprite with WebGL
	 *
	 * @private
	 * @memberof PIXI.DisplayObject#
	 * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer
	 */
	DisplayObject.prototype._renderCachedWebGL = function _renderCachedWebGL(renderer) {
	    if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {
	        return;
	    }
	
	    this._initCachedDisplayObject(renderer);
	
	    this._cacheData.sprite._transformID = -1;
	    this._cacheData.sprite.worldAlpha = this.worldAlpha;
	    this._cacheData.sprite._renderWebGL(renderer);
	};
	
	/**
	 * Prepares the WebGL renderer to cache the sprite
	 *
	 * @private
	 * @memberof PIXI.DisplayObject#
	 * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer
	 */
	DisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer) {
	    if (this._cacheData && this._cacheData.sprite) {
	        return;
	    }
	
	    // make sure alpha is set to 1 otherwise it will get rendered as invisible!
	    var cacheAlpha = this.alpha;
	
	    this.alpha = 1;
	
	    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)
	    renderer.currentRenderer.flush();
	    // this.filters= [];
	
	    // next we find the dimensions of the untransformed object
	    // this function also calls updatetransform on all its children as part of the measuring.
	    // This means we don't need to update the transform again in this function
	    // TODO pass an object to clone too? saves having to create a new one each time!
	    var bounds = this.getLocalBounds().clone();
	
	    // add some padding!
	    if (this._filters) {
	        var padding = this._filters[0].padding;
	
	        bounds.pad(padding);
	    }
	
	    // for now we cache the current renderTarget that the webGL renderer is currently using.
	    // this could be more elegent..
	    var cachedRenderTarget = renderer._activeRenderTarget;
	    // We also store the filter stack - I will definitely look to change how this works a little later down the line.
	    var stack = renderer.filterManager.filterStack;
	
	    // this renderTexture will be used to store the cached DisplayObject
	
	    var renderTexture = core.RenderTexture.create(bounds.width | 0, bounds.height | 0);
	
	    // need to set //
	    var m = _tempMatrix;
	
	    m.tx = -bounds.x;
	    m.ty = -bounds.y;
	
	    // reset
	    this.transform.worldTransform.identity();
	
	    // set all properties to there original so we can render to a texture
	    this.renderWebGL = this._cacheData.originalRenderWebGL;
	
	    renderer.render(this, renderTexture, true, m, true);
	    // now restore the state be setting the new properties
	
	    renderer.bindRenderTarget(cachedRenderTarget);
	
	    renderer.filterManager.filterStack = stack;
	
	    this.renderWebGL = this._renderCachedWebGL;
	    this.updateTransform = this.displayObjectUpdateTransform;
	
	    this._mask = null;
	    this.filterArea = null;
	
	    // create our cached sprite
	    var cachedSprite = new core.Sprite(renderTexture);
	
	    cachedSprite.transform.worldTransform = this.transform.worldTransform;
	    cachedSprite.anchor.x = -(bounds.x / bounds.width);
	    cachedSprite.anchor.y = -(bounds.y / bounds.height);
	    cachedSprite.alpha = cacheAlpha;
	    cachedSprite._bounds = this._bounds;
	
	    // easy bounds..
	    this._calculateBounds = this._calculateCachedBounds;
	    this.getLocalBounds = this._getCachedLocalBounds;
	
	    this._cacheData.sprite = cachedSprite;
	
	    this.transform._parentID = -1;
	    // restore the transform of the cached sprite to avoid the nasty flicker..
	    this.updateTransform();
	
	    // map the hit test..
	    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);
	};
	
	/**
	 * Renders a cached version of the sprite with canvas
	 *
	 * @private
	 * @memberof PIXI.DisplayObject#
	 * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer
	 */
	DisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer) {
	    if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {
	        return;
	    }
	
	    this._initCachedDisplayObjectCanvas(renderer);
	
	    this._cacheData.sprite.worldAlpha = this.worldAlpha;
	
	    this._cacheData.sprite.renderCanvas(renderer);
	};
	
	// TODO this can be the same as the webGL verison.. will need to do a little tweaking first though..
	/**
	 * Prepares the Canvas renderer to cache the sprite
	 *
	 * @private
	 * @memberof PIXI.DisplayObject#
	 * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer
	 */
	DisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer) {
	    if (this._cacheData && this._cacheData.sprite) {
	        return;
	    }
	
	    // get bounds actually transforms the object for us already!
	    var bounds = this.getLocalBounds();
	
	    var cacheAlpha = this.alpha;
	
	    this.alpha = 1;
	
	    var cachedRenderTarget = renderer.context;
	
	    var renderTexture = core.RenderTexture.create(bounds.width | 0, bounds.height | 0);
	
	    // need to set //
	    var m = _tempMatrix;
	
	    this.transform.worldTransform.copy(m);
	    m.invert();
	
	    m.tx -= bounds.x;
	    m.ty -= bounds.y;
	
	    // m.append(this.transform.worldTransform.)
	    // set all properties to there original so we can render to a texture
	    this.renderCanvas = this._cacheData.originalRenderCanvas;
	
	    // renderTexture.render(this, m, true);
	    renderer.render(this, renderTexture, true, m, false);
	
	    // now restore the state be setting the new properties
	    renderer.context = cachedRenderTarget;
	
	    this.renderCanvas = this._renderCachedCanvas;
	    this._calculateBounds = this._calculateCachedBounds;
	
	    this._mask = null;
	    this.filterArea = null;
	
	    // create our cached sprite
	    var cachedSprite = new core.Sprite(renderTexture);
	
	    cachedSprite.transform.worldTransform = this.transform.worldTransform;
	    cachedSprite.anchor.x = -(bounds.x / bounds.width);
	    cachedSprite.anchor.y = -(bounds.y / bounds.height);
	    cachedSprite._bounds = this._bounds;
	    cachedSprite.alpha = cacheAlpha;
	
	    this.updateTransform();
	    this.updateTransform = this.displayObjectUpdateTransform;
	
	    this._cacheData.sprite = cachedSprite;
	
	    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);
	};
	
	/**
	 * Calculates the bounds of the cached sprite
	 *
	 * @private
	 */
	DisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds() {
	    this._cacheData.sprite._calculateBounds();
	};
	
	/**
	 * Gets the bounds of the cached sprite.
	 *
	 * @private
	 * @return {Rectangle} The local bounds.
	 */
	DisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds() {
	    return this._cacheData.sprite.getLocalBounds();
	};
	
	/**
	 * Destroys the cached sprite.
	 *
	 * @private
	 */
	DisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject() {
	    this._cacheData.sprite._texture.destroy(true);
	    this._cacheData.sprite = null;
	};
	
	/**
	 * Destroys the cached object.
	 *
	 * @private
	 */
	DisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy() {
	    this.cacheAsBitmap = false;
	    this.destroy();
	};
	//# sourceMappingURL=cacheAsBitmap.js.map

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	/**
	 * The instance name of the object.
	 *
	 * @memberof PIXI.DisplayObject#
	 * @member {string}
	 */
	core.DisplayObject.prototype.name = null;
	
	/**
	 * Returns the display object in the container
	 *
	 * @memberof PIXI.Container#
	 * @param {string} name - instance name
	 * @return {PIXI.DisplayObject} The child with the specified name.
	 */
	core.Container.prototype.getChildByName = function getChildByName(name) {
	    for (var i = 0; i < this.children.length; i++) {
	        if (this.children[i].name === name) {
	            return this.children[i];
	        }
	    }
	
	    return null;
	};
	//# sourceMappingURL=getChildByName.js.map

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	/**
	 * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.
	 *
	 * @memberof PIXI.DisplayObject#
	 * @param {Point} point - the point to write the global value to. If null a new point will be returned
	 * @param {boolean} skipUpdate - setting to true will stop the transforms of the scene graph from
	 *  being updated. This means the calculation returned MAY be out of date BUT will give you a
	 *  nice performance boost
	 * @return {Point} The updated point
	 */
	core.DisplayObject.prototype.getGlobalPosition = function getGlobalPosition() {
	    var point = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new core.Point();
	    var skipUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	    if (this.parent) {
	        this.parent.toGlobal(this.position, point, skipUpdate);
	    } else {
	        point.x = this.position.x;
	        point.y = this.position.y;
	    }
	
	    return point;
	};
	//# sourceMappingURL=getGlobalPosition.js.map

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _FXAAFilter = __webpack_require__(141);
	
	Object.defineProperty(exports, 'FXAAFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_FXAAFilter).default;
	  }
	});
	
	var _NoiseFilter = __webpack_require__(142);
	
	Object.defineProperty(exports, 'NoiseFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_NoiseFilter).default;
	  }
	});
	
	var _DisplacementFilter = __webpack_require__(143);
	
	Object.defineProperty(exports, 'DisplacementFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_DisplacementFilter).default;
	  }
	});
	
	var _BlurFilter = __webpack_require__(144);
	
	Object.defineProperty(exports, 'BlurFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_BlurFilter).default;
	  }
	});
	
	var _BlurXFilter = __webpack_require__(145);
	
	Object.defineProperty(exports, 'BlurXFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_BlurXFilter).default;
	  }
	});
	
	var _BlurYFilter = __webpack_require__(149);
	
	Object.defineProperty(exports, 'BlurYFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_BlurYFilter).default;
	  }
	});
	
	var _ColorMatrixFilter = __webpack_require__(150);
	
	Object.defineProperty(exports, 'ColorMatrixFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_ColorMatrixFilter).default;
	  }
	});
	
	var _VoidFilter = __webpack_require__(151);
	
	Object.defineProperty(exports, 'VoidFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_VoidFilter).default;
	  }
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	//# sourceMappingURL=index.js.map

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _path = __webpack_require__(86);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 *
	 * Basic FXAA implementation based on the code on geeks3d.com with the
	 * modification that the texture2DLod stuff was removed since it's
	 * unsupported by WebGL.
	 *
	 * @see https://github.com/mitsuhiko/webgl-meincraft
	 *
	 * @class
	 * @extends PIXI.Filter
	 * @memberof PIXI.filters
	 *
	 */
	var FXAAFilter = function (_core$Filter) {
	    _inherits(FXAAFilter, _core$Filter);
	
	    /**
	     *
	     */
	    function FXAAFilter() {
	        _classCallCheck(this, FXAAFilter);
	
	        // TODO - needs work
	        return _possibleConstructorReturn(this, _core$Filter.call(this,
	        // vertex shader
	        '\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\nuniform vec4 filterArea;\n\nvarying vec2 vTextureCoord;\n\nvec2 mapCoord( vec2 coord )\n{\n    coord *= filterArea.xy;\n    coord += filterArea.zw;\n\n    return coord;\n}\n\nvec2 unmapCoord( vec2 coord )\n{\n    coord -= filterArea.zw;\n    coord /= filterArea.xy;\n\n    return coord;\n}\n\nvoid texcoords(vec2 fragCoord, vec2 resolution,\n               out vec2 v_rgbNW, out vec2 v_rgbNE,\n               out vec2 v_rgbSW, out vec2 v_rgbSE,\n               out vec2 v_rgbM) {\n    vec2 inverseVP = 1.0 / resolution.xy;\n    v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n    v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n    v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n    v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n    v_rgbM = vec2(fragCoord * inverseVP);\n}\n\nvoid main(void) {\n\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n   vTextureCoord = aTextureCoord;\n\n   vec2 fragCoord = vTextureCoord * filterArea.xy;\n\n   texcoords(fragCoord, filterArea.xy, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}',
	        // fragment shader
	        'varying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec4 filterArea;\n\n/**\n Basic FXAA implementation based on the code on geeks3d.com with the\n modification that the texture2DLod stuff was removed since it\'s\n unsupported by WebGL.\n \n --\n \n From:\n https://github.com/mitsuhiko/webgl-meincraft\n \n Copyright (c) 2011 by Armin Ronacher.\n \n Some rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n \n * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n \n * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following\n disclaimer in the documentation and/or other materials provided\n with the distribution.\n \n * The names of the contributors may not be used to endorse or\n promote products derived from this software without specific\n prior written permission.\n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n#ifndef FXAA_REDUCE_MIN\n#define FXAA_REDUCE_MIN   (1.0/ 128.0)\n#endif\n#ifndef FXAA_REDUCE_MUL\n#define FXAA_REDUCE_MUL   (1.0 / 8.0)\n#endif\n#ifndef FXAA_SPAN_MAX\n#define FXAA_SPAN_MAX     8.0\n#endif\n\n//optimized version for mobile, where dependent\n//texture reads can be a bottleneck\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,\n          vec2 v_rgbNW, vec2 v_rgbNE,\n          vec2 v_rgbSW, vec2 v_rgbSE,\n          vec2 v_rgbM) {\n    vec4 color;\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\n    vec4 texColor = texture2D(tex, v_rgbM);\n    vec3 rgbM  = texColor.xyz;\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n    \n    mediump vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    \n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    \n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                  dir * rcpDirMin)) * inverseVP;\n    \n    vec3 rgbA = 0.5 * (\n                       texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\n                       texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n                                     texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\n                                     texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\n    \n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\n        color = vec4(rgbA, texColor.a);\n    else\n        color = vec4(rgbB, texColor.a);\n    return color;\n}\n\nvoid main() {\n\n      vec2 fragCoord = vTextureCoord * filterArea.xy;\n\n      vec4 color;\n\n    color = fxaa(uSampler, fragCoord, filterArea.xy, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n\n      gl_FragColor = color;\n}\n'));
	    }
	
	    return FXAAFilter;
	}(core.Filter);
	
	exports.default = FXAAFilter;
	//# sourceMappingURL=FXAAFilter.js.map

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _path = __webpack_require__(86);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @author Vico @vicocotea
	 * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js
	 */
	
	/**
	 * A Noise effect filter.
	 *
	 * @class
	 * @extends PIXI.Filter
	 * @memberof PIXI.filters
	 */
	var NoiseFilter = function (_core$Filter) {
	  _inherits(NoiseFilter, _core$Filter);
	
	  /**
	   *
	   */
	  function NoiseFilter() {
	    _classCallCheck(this, NoiseFilter);
	
	    var _this = _possibleConstructorReturn(this, _core$Filter.call(this,
	    // vertex shader
	    'attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}',
	    // fragment shader
	    'precision highp float;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\n\nuniform float noise;\nuniform sampler2D uSampler;\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid main()\n{\n    vec4 color = texture2D(uSampler, vTextureCoord);\n\n    float diff = (rand(gl_FragCoord.xy) - 0.5) * noise;\n\n    color.r += diff;\n    color.g += diff;\n    color.b += diff;\n\n    gl_FragColor = color;\n}\n'));
	
	    _this.noise = 0.5;
	    return _this;
	  }
	
	  /**
	   * The amount of noise to apply.
	   *
	   * @member {number}
	   * @memberof PIXI.filters.NoiseFilter#
	   * @default 0.5
	   */
	
	
	  _createClass(NoiseFilter, [{
	    key: 'noise',
	    get: function get() {
	      return this.uniforms.noise;
	    }
	
	    /**
	     * Sets the amount of noise to apply.
	     *
	     * @param {number} value - The value to set to.
	     */
	    ,
	    set: function set(value) {
	      this.uniforms.noise = value;
	    }
	  }]);
	
	  return NoiseFilter;
	}(core.Filter);
	
	exports.default = NoiseFilter;
	//# sourceMappingURL=NoiseFilter.js.map

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _path = __webpack_require__(86);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The DisplacementFilter class uses the pixel values from the specified texture
	 * (called the displacement map) to perform a displacement of an object. You can
	 * use this filter to apply all manor of crazy warping effects. Currently the r
	 * property of the texture is used to offset the x and the g property of the texture
	 * is used to offset the y.
	 *
	 * @class
	 * @extends PIXI.Filter
	 * @memberof PIXI.filters
	 */
	var DisplacementFilter = function (_core$Filter) {
	    _inherits(DisplacementFilter, _core$Filter);
	
	    /**
	     * @param {PIXI.Sprite} sprite - The sprite used for the displacement map. (make sure its added to the scene!)
	     * @param {number} scale - The scale of the displacement
	     */
	    function DisplacementFilter(sprite, scale) {
	        _classCallCheck(this, DisplacementFilter);
	
	        var maskMatrix = new core.Matrix();
	
	        sprite.renderable = false;
	
	        var _this = _possibleConstructorReturn(this, _core$Filter.call(this,
	        // vertex shader
	        'attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 filterMatrix;\n\nvarying vec2 vTextureCoord;\nvarying vec2 vFilterCoord;\n\nvoid main(void)\n{\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n   vFilterCoord = ( filterMatrix * vec3( aTextureCoord, 1.0)  ).xy;\n   vTextureCoord = aTextureCoord;\n}',
	        // fragment shader
	        'varying vec2 vFilterCoord;\nvarying vec2 vTextureCoord;\n\nuniform vec2 scale;\n\nuniform sampler2D uSampler;\nuniform sampler2D mapSampler;\n\nuniform vec4 filterClamp;\n\nvoid main(void)\n{\n   vec4 map =  texture2D(mapSampler, vFilterCoord);\n\n   map -= 0.5;\n   map.xy *= scale;\n\n   gl_FragColor = texture2D(uSampler, clamp(vec2(vTextureCoord.x + map.x, vTextureCoord.y + map.y), filterClamp.xy, filterClamp.zw));\n}\n'));
	
	        _this.maskSprite = sprite;
	        _this.maskMatrix = maskMatrix;
	
	        _this.uniforms.mapSampler = sprite.texture;
	        _this.uniforms.filterMatrix = maskMatrix.toArray(true);
	        _this.uniforms.scale = { x: 1, y: 1 };
	
	        if (scale === null || scale === undefined) {
	            scale = 20;
	        }
	
	        _this.scale = new core.Point(scale, scale);
	        return _this;
	    }
	
	    /**
	     * Applies the filter.
	     *
	     * @param {PIXI.FilterManager} filterManager - The manager.
	     * @param {PIXI.RenderTarget} input - The input target.
	     * @param {PIXI.RenderTarget} output - The output target.
	     */
	
	
	    DisplacementFilter.prototype.apply = function apply(filterManager, input, output) {
	        var ratio = 1 / output.destinationFrame.width * (output.size.width / input.size.width);
	
	        this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite);
	        this.uniforms.scale.x = this.scale.x * ratio;
	        this.uniforms.scale.y = this.scale.y * ratio;
	
	        // draw the filter...
	        filterManager.applyFilter(this, input, output);
	    };
	
	    /**
	     * The texture used for the displacement map. Must be power of 2 sized texture.
	     *
	     * @member {PIXI.Texture}
	     * @memberof PIXI.filters.DisplacementFilter#
	     */
	
	
	    _createClass(DisplacementFilter, [{
	        key: 'map',
	        get: function get() {
	            return this.uniforms.mapSampler;
	        }
	
	        /**
	         * Sets the texture to use for the displacement.
	         *
	         * @param {PIXI.Texture} value - The texture to set to.
	         */
	        ,
	        set: function set(value) {
	            this.uniforms.mapSampler = value;
	        }
	    }]);
	
	    return DisplacementFilter;
	}(core.Filter);
	
	exports.default = DisplacementFilter;
	//# sourceMappingURL=DisplacementFilter.js.map

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _BlurXFilter = __webpack_require__(145);
	
	var _BlurXFilter2 = _interopRequireDefault(_BlurXFilter);
	
	var _BlurYFilter = __webpack_require__(149);
	
	var _BlurYFilter2 = _interopRequireDefault(_BlurYFilter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The BlurFilter applies a Gaussian blur to an object.
	 * The strength of the blur can be set for x- and y-axis separately.
	 *
	 * @class
	 * @extends PIXI.Filter
	 * @memberof PIXI.filters
	 */
	var BlurFilter = function (_core$Filter) {
	  _inherits(BlurFilter, _core$Filter);
	
	  /**
	   * @param {number} strength - The strength of the blur filter.
	   * @param {number} quality - The quality of the blur filter.
	   * @param {number} resolution - The reoslution of the blur filter.
	   */
	  function BlurFilter(strength, quality, resolution) {
	    _classCallCheck(this, BlurFilter);
	
	    var _this = _possibleConstructorReturn(this, _core$Filter.call(this));
	
	    _this.blurXFilter = new _BlurXFilter2.default();
	    _this.blurYFilter = new _BlurYFilter2.default();
	    _this.resolution = 1;
	
	    _this.padding = 0;
	    _this.resolution = resolution || 1;
	    _this.quality = quality || 4;
	    _this.blur = strength || 8;
	    return _this;
	  }
	
	  /**
	   * Applies the filter.
	   *
	   * @param {PIXI.FilterManager} filterManager - The manager.
	   * @param {PIXI.RenderTarget} input - The input target.
	   * @param {PIXI.RenderTarget} output - The output target.
	   */
	
	
	  BlurFilter.prototype.apply = function apply(filterManager, input, output) {
	    var renderTarget = filterManager.getRenderTarget(true);
	
	    this.blurXFilter.apply(filterManager, input, renderTarget, true);
	    this.blurYFilter.apply(filterManager, renderTarget, output, false);
	
	    filterManager.returnRenderTarget(renderTarget);
	  };
	
	  /**
	   * Sets the strength of both the blurX and blurY properties simultaneously
	   *
	   * @member {number}
	   * @memberOf PIXI.filters.BlurFilter#
	   * @default 2
	   */
	
	
	  _createClass(BlurFilter, [{
	    key: 'blur',
	    get: function get() {
	      return this.blurXFilter.blur;
	    }
	
	    /**
	     * Sets the strength of the blur.
	     *
	     * @param {number} value - The value to set.
	     */
	    ,
	    set: function set(value) {
	      this.blurXFilter.blur = this.blurYFilter.blur = value;
	      this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;
	    }
	
	    /**
	     * Sets the number of passes for blur. More passes means higher quaility bluring.
	     *
	     * @member {number}
	     * @memberof PIXI.filters.BlurYFilter#
	     * @default 1
	     */
	
	  }, {
	    key: 'quality',
	    get: function get() {
	      return this.blurXFilter.quality;
	    }
	
	    /**
	     * Sets the quality of the blur.
	     *
	     * @param {number} value - The value to set.
	     */
	    ,
	    set: function set(value) {
	      this.blurXFilter.quality = this.blurYFilter.quality = value;
	    }
	
	    /**
	     * Sets the strength of the blurX property
	     *
	     * @member {number}
	     * @memberOf PIXI.filters.BlurFilter#
	     * @default 2
	     */
	
	  }, {
	    key: 'blurX',
	    get: function get() {
	      return this.blurXFilter.blur;
	    }
	
	    /**
	     * Sets the strength of the blurX.
	     *
	     * @param {number} value - The value to set.
	     */
	    ,
	    set: function set(value) {
	      this.blurXFilter.blur = value;
	      this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;
	    }
	
	    /**
	     * Sets the strength of the blurY property
	     *
	     * @member {number}
	     * @memberOf PIXI.filters.BlurFilter#
	     * @default 2
	     */
	
	  }, {
	    key: 'blurY',
	    get: function get() {
	      return this.blurYFilter.blur;
	    }
	
	    /**
	     * Sets the strength of the blurY.
	     *
	     * @param {number} value - The value to set.
	     */
	    ,
	    set: function set(value) {
	      this.blurYFilter.blur = value;
	      this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;
	    }
	  }]);
	
	  return BlurFilter;
	}(core.Filter);
	
	exports.default = BlurFilter;
	//# sourceMappingURL=BlurFilter.js.map

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _generateBlurVertSource = __webpack_require__(146);
	
	var _generateBlurVertSource2 = _interopRequireDefault(_generateBlurVertSource);
	
	var _generateBlurFragSource = __webpack_require__(147);
	
	var _generateBlurFragSource2 = _interopRequireDefault(_generateBlurFragSource);
	
	var _getMaxBlurKernelSize = __webpack_require__(148);
	
	var _getMaxBlurKernelSize2 = _interopRequireDefault(_getMaxBlurKernelSize);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The BlurXFilter applies a horizontal Gaussian blur to an object.
	 *
	 * @class
	 * @extends PIXI.Filter
	 * @memberof PIXI.filters
	 */
	var BlurXFilter = function (_core$Filter) {
	    _inherits(BlurXFilter, _core$Filter);
	
	    /**
	     * @param {number} strength - The strength of the blur filter.
	     * @param {number} quality - The quality of the blur filter.
	     * @param {number} resolution - The reoslution of the blur filter.
	     */
	    function BlurXFilter(strength, quality, resolution) {
	        _classCallCheck(this, BlurXFilter);
	
	        var vertSrc = (0, _generateBlurVertSource2.default)(5, true);
	        var fragSrc = (0, _generateBlurFragSource2.default)(5);
	
	        var _this = _possibleConstructorReturn(this, _core$Filter.call(this,
	        // vertex shader
	        vertSrc,
	        // fragment shader
	        fragSrc));
	
	        _this.resolution = resolution || 1;
	
	        _this._quality = 0;
	
	        _this.quality = quality || 4;
	        _this.strength = strength || 8;
	
	        _this.firstRun = true;
	        return _this;
	    }
	
	    /**
	     * Applies the filter.
	     *
	     * @param {PIXI.FilterManager} filterManager - The manager.
	     * @param {PIXI.RenderTarget} input - The input target.
	     * @param {PIXI.RenderTarget} output - The output target.
	     * @param {boolean} clear - Should the output be cleared before rendering?
	     */
	
	
	    BlurXFilter.prototype.apply = function apply(filterManager, input, output, clear) {
	        if (this.firstRun) {
	            var gl = filterManager.renderer.gl;
	            var kernelSize = (0, _getMaxBlurKernelSize2.default)(gl);
	
	            this.vertexSrc = (0, _generateBlurVertSource2.default)(kernelSize, true);
	            this.fragmentSrc = (0, _generateBlurFragSource2.default)(kernelSize);
	
	            this.firstRun = false;
	        }
	
	        this.uniforms.strength = 1 / output.size.width * (output.size.width / input.size.width);
	
	        // screen space!
	        this.uniforms.strength *= this.strength;
	        this.uniforms.strength /= this.passes; // / this.passes//Math.pow(1, this.passes);
	
	        if (this.passes === 1) {
	            filterManager.applyFilter(this, input, output, clear);
	        } else {
	            var renderTarget = filterManager.getRenderTarget(true);
	            var flip = input;
	            var flop = renderTarget;
	
	            for (var i = 0; i < this.passes - 1; i++) {
	                filterManager.applyFilter(this, flip, flop, true);
	
	                var temp = flop;
	
	                flop = flip;
	                flip = temp;
	            }
	
	            filterManager.applyFilter(this, flip, output, clear);
	
	            filterManager.returnRenderTarget(renderTarget);
	        }
	    };
	
	    /**
	     * Sets the strength of both the blur.
	     *
	     * @member {number}
	     * @memberof PIXI.filters.BlurXFilter#
	     * @default 16
	     */
	
	
	    _createClass(BlurXFilter, [{
	        key: 'blur',
	        get: function get() {
	            return this.strength;
	        }
	
	        /**
	         * Sets the strength of the blur.
	         *
	         * @param {number} value - The value to set.
	         */
	        ,
	        set: function set(value) {
	            this.padding = Math.abs(value) * 2;
	            this.strength = value;
	        }
	
	        /**
	        * Sets the quality of the blur by modifying the number of passes. More passes means higher
	        * quaility bluring but the lower the performance.
	        *
	        * @member {number}
	        * @memberof PIXI.filters.BlurXFilter#
	        * @default 4
	        */
	
	    }, {
	        key: 'quality',
	        get: function get() {
	            return this._quality;
	        }
	
	        /**
	         * Sets the quality of the blur.
	         *
	         * @param {number} value - The value to set.
	         */
	        ,
	        set: function set(value) {
	            this._quality = value;
	            this.passes = value;
	        }
	    }]);
	
	    return BlurXFilter;
	}(core.Filter);
	
	exports.default = BlurXFilter;
	//# sourceMappingURL=BlurXFilter.js.map

/***/ },
/* 146 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = generateVertBlurSource;
	var vertTemplate = ['attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'uniform float strength;', 'uniform mat3 projectionMatrix;', 'varying vec2 vBlurTexCoords[%size%];', 'void main(void)', '{', 'gl_Position = vec4((projectionMatrix * vec3((aVertexPosition), 1.0)).xy, 0.0, 1.0);', '%blur%', '}'].join('\n');
	
	function generateVertBlurSource(kernelSize, x) {
	    var halfLength = Math.ceil(kernelSize / 2);
	
	    var vertSource = vertTemplate;
	
	    var blurLoop = '';
	    var template = void 0;
	    // let value;
	
	    if (x) {
	        template = 'vBlurTexCoords[%index%] = aTextureCoord + vec2(%sampleIndex% * strength, 0.0);';
	    } else {
	        template = 'vBlurTexCoords[%index%] = aTextureCoord + vec2(0.0, %sampleIndex% * strength);';
	    }
	
	    for (var i = 0; i < kernelSize; i++) {
	        var blur = template.replace('%index%', i);
	
	        // value = i;
	
	        // if(i >= halfLength)
	        // {
	        //     value = kernelSize - i - 1;
	        // }
	
	        blur = blur.replace('%sampleIndex%', i - (halfLength - 1) + '.0');
	
	        blurLoop += blur;
	        blurLoop += '\n';
	    }
	
	    vertSource = vertSource.replace('%blur%', blurLoop);
	    vertSource = vertSource.replace('%size%', kernelSize);
	
	    return vertSource;
	}
	//# sourceMappingURL=generateBlurVertSource.js.map

/***/ },
/* 147 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = generateFragBlurSource;
	var GAUSSIAN_VALUES = {
	    5: [0.153388, 0.221461, 0.250301],
	    7: [0.071303, 0.131514, 0.189879, 0.214607],
	    9: [0.028532, 0.067234, 0.124009, 0.179044, 0.20236],
	    11: [0.0093, 0.028002, 0.065984, 0.121703, 0.175713, 0.198596],
	    13: [0.002406, 0.009255, 0.027867, 0.065666, 0.121117, 0.174868, 0.197641],
	    15: [0.000489, 0.002403, 0.009246, 0.02784, 0.065602, 0.120999, 0.174697, 0.197448]
	};
	
	var fragTemplate = ['varying vec2 vBlurTexCoords[%size%];', 'uniform sampler2D uSampler;', 'void main(void)', '{', '    gl_FragColor = vec4(0.0);', '    %blur%', '}'].join('\n');
	
	function generateFragBlurSource(kernelSize) {
	    var kernel = GAUSSIAN_VALUES[kernelSize];
	    var halfLength = kernel.length;
	
	    var fragSource = fragTemplate;
	
	    var blurLoop = '';
	    var template = 'gl_FragColor += texture2D(uSampler, vBlurTexCoords[%index%]) * %value%;';
	    var value = void 0;
	
	    for (var i = 0; i < kernelSize; i++) {
	        var blur = template.replace('%index%', i);
	
	        value = i;
	
	        if (i >= halfLength) {
	            value = kernelSize - i - 1;
	        }
	
	        blur = blur.replace('%value%', kernel[value]);
	
	        blurLoop += blur;
	        blurLoop += '\n';
	    }
	
	    fragSource = fragSource.replace('%blur%', blurLoop);
	    fragSource = fragSource.replace('%size%', kernelSize);
	
	    return fragSource;
	}
	//# sourceMappingURL=generateBlurFragSource.js.map

/***/ },
/* 148 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = getMaxKernelSize;
	function getMaxKernelSize(gl) {
	    var maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);
	    var kernelSize = 15;
	
	    while (kernelSize > maxVaryings) {
	        kernelSize -= 2;
	    }
	
	    return kernelSize;
	}
	//# sourceMappingURL=getMaxBlurKernelSize.js.map

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _generateBlurVertSource = __webpack_require__(146);
	
	var _generateBlurVertSource2 = _interopRequireDefault(_generateBlurVertSource);
	
	var _generateBlurFragSource = __webpack_require__(147);
	
	var _generateBlurFragSource2 = _interopRequireDefault(_generateBlurFragSource);
	
	var _getMaxBlurKernelSize = __webpack_require__(148);
	
	var _getMaxBlurKernelSize2 = _interopRequireDefault(_getMaxBlurKernelSize);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The BlurYFilter applies a horizontal Gaussian blur to an object.
	 *
	 * @class
	 * @extends PIXI.Filter
	 * @memberof PIXI.filters
	 */
	var BlurYFilter = function (_core$Filter) {
	    _inherits(BlurYFilter, _core$Filter);
	
	    /**
	     * @param {number} strength - The strength of the blur filter.
	     * @param {number} quality - The quality of the blur filter.
	     * @param {number} resolution - The reoslution of the blur filter.
	     */
	    function BlurYFilter(strength, quality, resolution) {
	        _classCallCheck(this, BlurYFilter);
	
	        var vertSrc = (0, _generateBlurVertSource2.default)(5, false);
	        var fragSrc = (0, _generateBlurFragSource2.default)(5);
	
	        var _this = _possibleConstructorReturn(this, _core$Filter.call(this,
	        // vertex shader
	        vertSrc,
	        // fragment shader
	        fragSrc));
	
	        _this.resolution = resolution || 1;
	
	        _this._quality = 0;
	
	        _this.quality = quality || 4;
	        _this.strength = strength || 8;
	
	        _this.firstRun = true;
	        return _this;
	    }
	
	    /**
	     * Applies the filter.
	     *
	     * @param {PIXI.FilterManager} filterManager - The manager.
	     * @param {PIXI.RenderTarget} input - The input target.
	     * @param {PIXI.RenderTarget} output - The output target.
	     * @param {boolean} clear - Should the output be cleared before rendering?
	     */
	
	
	    BlurYFilter.prototype.apply = function apply(filterManager, input, output, clear) {
	        if (this.firstRun) {
	            var gl = filterManager.renderer.gl;
	            var kernelSize = (0, _getMaxBlurKernelSize2.default)(gl);
	
	            this.vertexSrc = (0, _generateBlurVertSource2.default)(kernelSize, false);
	            this.fragmentSrc = (0, _generateBlurFragSource2.default)(kernelSize);
	
	            this.firstRun = false;
	        }
	
	        this.uniforms.strength = 1 / output.size.height * (output.size.height / input.size.height);
	
	        this.uniforms.strength *= this.strength;
	        this.uniforms.strength /= this.passes;
	
	        if (this.passes === 1) {
	            filterManager.applyFilter(this, input, output, clear);
	        } else {
	            var renderTarget = filterManager.getRenderTarget(true);
	            var flip = input;
	            var flop = renderTarget;
	
	            for (var i = 0; i < this.passes - 1; i++) {
	                filterManager.applyFilter(this, flip, flop, true);
	
	                var temp = flop;
	
	                flop = flip;
	                flip = temp;
	            }
	
	            filterManager.applyFilter(this, flip, output, clear);
	
	            filterManager.returnRenderTarget(renderTarget);
	        }
	    };
	
	    /**
	     * Sets the strength of both the blur.
	     *
	     * @member {number}
	     * @memberof PIXI.filters.BlurYFilter#
	     * @default 2
	     */
	
	
	    _createClass(BlurYFilter, [{
	        key: 'blur',
	        get: function get() {
	            return this.strength;
	        }
	
	        /**
	         * Sets the strength of the blur.
	         *
	         * @param {number} value - The value to set.
	         */
	        ,
	        set: function set(value) {
	            this.padding = Math.abs(value) * 2;
	            this.strength = value;
	        }
	
	        /**
	         * Sets the quality of the blur by modifying the number of passes. More passes means higher
	         * quaility bluring but the lower the performance.
	         *
	         * @member {number}
	         * @memberof PIXI.filters.BlurXFilter#
	         * @default 4
	         */
	
	    }, {
	        key: 'quality',
	        get: function get() {
	            return this._quality;
	        }
	
	        /**
	         * Sets the quality of the blur.
	         *
	         * @param {number} value - The value to set.
	         */
	        ,
	        set: function set(value) {
	            this._quality = value;
	            this.passes = value;
	        }
	    }]);
	
	    return BlurYFilter;
	}(core.Filter);
	
	exports.default = BlurYFilter;
	//# sourceMappingURL=BlurYFilter.js.map

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _path = __webpack_require__(86);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The ColorMatrixFilter class lets you apply a 5x4 matrix transformation on the RGBA
	 * color and alpha values of every pixel on your displayObject to produce a result
	 * with a new set of RGBA color and alpha values. It's pretty powerful!
	 *
	 * ```js
	 *  let colorMatrix = new PIXI.ColorMatrixFilter();
	 *  container.filters = [colorMatrix];
	 *  colorMatrix.contrast(2);
	 * ```
	 * @author Cl√©ment Chenebault <clement@goodboydigital.com>
	 * @class
	 * @extends PIXI.Filter
	 * @memberof PIXI.filters
	 */
	var ColorMatrixFilter = function (_core$Filter) {
	    _inherits(ColorMatrixFilter, _core$Filter);
	
	    /**
	     *
	     */
	    function ColorMatrixFilter() {
	        _classCallCheck(this, ColorMatrixFilter);
	
	        var _this = _possibleConstructorReturn(this, _core$Filter.call(this,
	        // vertex shader
	        'attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}',
	        // fragment shader
	        'varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform float m[20];\n\nvoid main(void)\n{\n\n    vec4 c = texture2D(uSampler, vTextureCoord);\n\n    gl_FragColor.r = (m[0] * c.r);\n        gl_FragColor.r += (m[1] * c.g);\n        gl_FragColor.r += (m[2] * c.b);\n        gl_FragColor.r += (m[3] * c.a);\n        gl_FragColor.r += m[4] * c.a;\n\n    gl_FragColor.g = (m[5] * c.r);\n        gl_FragColor.g += (m[6] * c.g);\n        gl_FragColor.g += (m[7] * c.b);\n        gl_FragColor.g += (m[8] * c.a);\n        gl_FragColor.g += m[9] * c.a;\n\n     gl_FragColor.b = (m[10] * c.r);\n        gl_FragColor.b += (m[11] * c.g);\n        gl_FragColor.b += (m[12] * c.b);\n        gl_FragColor.b += (m[13] * c.a);\n        gl_FragColor.b += m[14] * c.a;\n\n     gl_FragColor.a = (m[15] * c.r);\n        gl_FragColor.a += (m[16] * c.g);\n        gl_FragColor.a += (m[17] * c.b);\n        gl_FragColor.a += (m[18] * c.a);\n        gl_FragColor.a += m[19] * c.a;\n\n//    gl_FragColor = vec4(m[0]);\n}\n'));
	
	        _this.uniforms.m = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
	        return _this;
	    }
	
	    /**
	     * Transforms current matrix and set the new one
	     *
	     * @param {number[]} matrix - 5x4 matrix
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype._loadMatrix = function _loadMatrix(matrix) {
	        var multiply = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	        var newMatrix = matrix;
	
	        if (multiply) {
	            this._multiply(newMatrix, this.uniforms.m, matrix);
	            newMatrix = this._colorMatrix(newMatrix);
	        }
	
	        // set the new matrix
	        this.uniforms.m = newMatrix;
	    };
	
	    /**
	     * Multiplies two mat5's
	     *
	     * @private
	     * @param {number[]} out - 5x4 matrix the receiving matrix
	     * @param {number[]} a - 5x4 matrix the first operand
	     * @param {number[]} b - 5x4 matrix the second operand
	     * @returns {number[]} 5x4 matrix
	     */
	
	
	    ColorMatrixFilter.prototype._multiply = function _multiply(out, a, b) {
	        // Red Channel
	        out[0] = a[0] * b[0] + a[1] * b[5] + a[2] * b[10] + a[3] * b[15];
	        out[1] = a[0] * b[1] + a[1] * b[6] + a[2] * b[11] + a[3] * b[16];
	        out[2] = a[0] * b[2] + a[1] * b[7] + a[2] * b[12] + a[3] * b[17];
	        out[3] = a[0] * b[3] + a[1] * b[8] + a[2] * b[13] + a[3] * b[18];
	        out[4] = a[0] * b[4] + a[1] * b[9] + a[2] * b[14] + a[3] * b[19];
	
	        // Green Channel
	        out[5] = a[5] * b[0] + a[6] * b[5] + a[7] * b[10] + a[8] * b[15];
	        out[6] = a[5] * b[1] + a[6] * b[6] + a[7] * b[11] + a[8] * b[16];
	        out[7] = a[5] * b[2] + a[6] * b[7] + a[7] * b[12] + a[8] * b[17];
	        out[8] = a[5] * b[3] + a[6] * b[8] + a[7] * b[13] + a[8] * b[18];
	        out[9] = a[5] * b[4] + a[6] * b[9] + a[7] * b[14] + a[8] * b[19];
	
	        // Blue Channel
	        out[10] = a[10] * b[0] + a[11] * b[5] + a[12] * b[10] + a[13] * b[15];
	        out[11] = a[10] * b[1] + a[11] * b[6] + a[12] * b[11] + a[13] * b[16];
	        out[12] = a[10] * b[2] + a[11] * b[7] + a[12] * b[12] + a[13] * b[17];
	        out[13] = a[10] * b[3] + a[11] * b[8] + a[12] * b[13] + a[13] * b[18];
	        out[14] = a[10] * b[4] + a[11] * b[9] + a[12] * b[14] + a[13] * b[19];
	
	        // Alpha Channel
	        out[15] = a[15] * b[0] + a[16] * b[5] + a[17] * b[10] + a[18] * b[15];
	        out[16] = a[15] * b[1] + a[16] * b[6] + a[17] * b[11] + a[18] * b[16];
	        out[17] = a[15] * b[2] + a[16] * b[7] + a[17] * b[12] + a[18] * b[17];
	        out[18] = a[15] * b[3] + a[16] * b[8] + a[17] * b[13] + a[18] * b[18];
	        out[19] = a[15] * b[4] + a[16] * b[9] + a[17] * b[14] + a[18] * b[19];
	
	        return out;
	    };
	
	    /**
	     * Create a Float32 Array and normalize the offset component to 0-1
	     *
	     * @private
	     * @param {number[]} matrix - 5x4 matrix
	     * @return {number[]} 5x4 matrix with all values between 0-1
	     */
	
	
	    ColorMatrixFilter.prototype._colorMatrix = function _colorMatrix(matrix) {
	        // Create a Float32 Array and normalize the offset component to 0-1
	        var m = new Float32Array(matrix);
	
	        m[4] /= 255;
	        m[9] /= 255;
	        m[14] /= 255;
	        m[19] /= 255;
	
	        return m;
	    };
	
	    /**
	     * Adjusts brightness
	     *
	     * @param {number} b - value of the brigthness (0-1, where 0 is black)
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.brightness = function brightness(b, multiply) {
	        var matrix = [b, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Set the matrices in grey scales
	     *
	     * @param {number} scale - value of the grey (0-1, where 0 is black)
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.greyscale = function greyscale(scale, multiply) {
	        var matrix = [scale, scale, scale, 0, 0, scale, scale, scale, 0, 0, scale, scale, scale, 0, 0, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Set the black and white matrice.
	     *
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.blackAndWhite = function blackAndWhite(multiply) {
	        var matrix = [0.3, 0.6, 0.1, 0, 0, 0.3, 0.6, 0.1, 0, 0, 0.3, 0.6, 0.1, 0, 0, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Set the hue property of the color
	     *
	     * @param {number} rotation - in degrees
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.hue = function hue(rotation, multiply) {
	        rotation = (rotation || 0) / 180 * Math.PI;
	
	        var cosR = Math.cos(rotation);
	        var sinR = Math.sin(rotation);
	        var sqrt = Math.sqrt;
	
	        /* a good approximation for hue rotation
	         This matrix is far better than the versions with magic luminance constants
	         formerly used here, but also used in the starling framework (flash) and known from this
	         old part of the internet: quasimondo.com/archives/000565.php
	          This new matrix is based on rgb cube rotation in space. Look here for a more descriptive
	         implementation as a shader not a general matrix:
	         https://github.com/evanw/glfx.js/blob/58841c23919bd59787effc0333a4897b43835412/src/filters/adjust/huesaturation.js
	          This is the source for the code:
	         see http://stackoverflow.com/questions/8507885/shift-hue-of-an-rgb-color/8510751#8510751
	         */
	
	        var w = 1 / 3;
	        var sqrW = sqrt(w); // weight is
	
	        var a00 = cosR + (1.0 - cosR) * w;
	        var a01 = w * (1.0 - cosR) - sqrW * sinR;
	        var a02 = w * (1.0 - cosR) + sqrW * sinR;
	
	        var a10 = w * (1.0 - cosR) + sqrW * sinR;
	        var a11 = cosR + w * (1.0 - cosR);
	        var a12 = w * (1.0 - cosR) - sqrW * sinR;
	
	        var a20 = w * (1.0 - cosR) - sqrW * sinR;
	        var a21 = w * (1.0 - cosR) + sqrW * sinR;
	        var a22 = cosR + w * (1.0 - cosR);
	
	        var matrix = [a00, a01, a02, 0, 0, a10, a11, a12, 0, 0, a20, a21, a22, 0, 0, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Set the contrast matrix, increase the separation between dark and bright
	     * Increase contrast : shadows darker and highlights brighter
	     * Decrease contrast : bring the shadows up and the highlights down
	     *
	     * @param {number} amount - value of the contrast (0-1)
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.contrast = function contrast(amount, multiply) {
	        var v = (amount || 0) + 1;
	        var o = -128 * (v - 1);
	
	        var matrix = [v, 0, 0, 0, o, 0, v, 0, 0, o, 0, 0, v, 0, o, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Set the saturation matrix, increase the separation between colors
	     * Increase saturation : increase contrast, brightness, and sharpness
	     *
	     * @param {number} amount - The saturation amount (0-1)
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.saturate = function saturate() {
	        var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	        var multiply = arguments[1];
	
	        var x = amount * 2 / 3 + 1;
	        var y = (x - 1) * -0.5;
	
	        var matrix = [x, y, y, 0, 0, y, x, y, 0, 0, y, y, x, 0, 0, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Desaturate image (remove color)
	     *
	     * Call the saturate function
	     *
	     */
	
	
	    ColorMatrixFilter.prototype.desaturate = function desaturate() // eslint-disable-line no-unused-vars
	    {
	        this.saturate(-1);
	    };
	
	    /**
	     * Negative image (inverse of classic rgb matrix)
	     *
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.negative = function negative(multiply) {
	        var matrix = [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Sepia image
	     *
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.sepia = function sepia(multiply) {
	        var matrix = [0.393, 0.7689999, 0.18899999, 0, 0, 0.349, 0.6859999, 0.16799999, 0, 0, 0.272, 0.5339999, 0.13099999, 0, 0, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Color motion picture process invented in 1916 (thanks Dominic Szablewski)
	     *
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.technicolor = function technicolor(multiply) {
	        var matrix = [1.9125277891456083, -0.8545344976951645, -0.09155508482755585, 0, 11.793603434377337, -0.3087833385928097, 1.7658908555458428, -0.10601743074722245, 0, -70.35205161461398, -0.231103377548616, -0.7501899197440212, 1.847597816108189, 0, 30.950940869491138, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Polaroid filter
	     *
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.polaroid = function polaroid(multiply) {
	        var matrix = [1.438, -0.062, -0.062, 0, 0, -0.122, 1.378, -0.122, 0, 0, -0.016, -0.016, 1.483, 0, 0, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Filter who transforms : Red -> Blue and Blue -> Red
	     *
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.toBGR = function toBGR(multiply) {
	        var matrix = [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Color reversal film introduced by Eastman Kodak in 1935. (thanks Dominic Szablewski)
	     *
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.kodachrome = function kodachrome(multiply) {
	        var matrix = [1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502, -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203, -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Brown delicious browni filter (thanks Dominic Szablewski)
	     *
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.browni = function browni(multiply) {
	        var matrix = [0.5997023498159715, 0.34553243048391263, -0.2708298674538042, 0, 47.43192855600873, -0.037703249837783157, 0.8609577587992641, 0.15059552388459913, 0, -36.96841498319127, 0.24113635128153335, -0.07441037908422492, 0.44972182064877153, 0, -7.562075277591283, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Vintage filter (thanks Dominic Szablewski)
	     *
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.vintage = function vintage(multiply) {
	        var matrix = [0.6279345635605994, 0.3202183420819367, -0.03965408211312453, 0, 9.651285835294123, 0.02578397704808868, 0.6441188644374771, 0.03259127616149294, 0, 7.462829176470591, 0.0466055556782719, -0.0851232987247891, 0.5241648018700465, 0, 5.159190588235296, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * We don't know exactly what it does, kind of gradient map, but funny to play with!
	     *
	     * @param {number} desaturation - Tone values.
	     * @param {number} toned - Tone values.
	     * @param {string} lightColor - Tone values, example: `0xFFE580`
	     * @param {string} darkColor - Tone values, example: `0xFFE580`
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.colorTone = function colorTone(desaturation, toned, lightColor, darkColor, multiply) {
	        desaturation = desaturation || 0.2;
	        toned = toned || 0.15;
	        lightColor = lightColor || 0xFFE580;
	        darkColor = darkColor || 0x338000;
	
	        var lR = (lightColor >> 16 & 0xFF) / 255;
	        var lG = (lightColor >> 8 & 0xFF) / 255;
	        var lB = (lightColor & 0xFF) / 255;
	
	        var dR = (darkColor >> 16 & 0xFF) / 255;
	        var dG = (darkColor >> 8 & 0xFF) / 255;
	        var dB = (darkColor & 0xFF) / 255;
	
	        var matrix = [0.3, 0.59, 0.11, 0, 0, lR, lG, lB, desaturation, 0, dR, dG, dB, toned, 0, lR - dR, lG - dG, lB - dB, 0, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Night effect
	     *
	     * @param {number} intensity - The intensity of the night effect.
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.night = function night(intensity, multiply) {
	        intensity = intensity || 0.1;
	        var matrix = [intensity * -2.0, -intensity, 0, 0, 0, -intensity, 0, intensity, 0, 0, 0, intensity, intensity * 2.0, 0, 0, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Predator effect
	     *
	     * Erase the current matrix by setting a new indepent one
	     *
	     * @param {number} amount - how much the predator feels his future victim
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.predator = function predator(amount, multiply) {
	        var matrix = [
	        // row 1
	        11.224130630493164 * amount, -4.794486999511719 * amount, -2.8746118545532227 * amount, 0 * amount, 0.40342438220977783 * amount,
	        // row 2
	        -3.6330697536468506 * amount, 9.193157196044922 * amount, -2.951810836791992 * amount, 0 * amount, -1.316135048866272 * amount,
	        // row 3
	        -3.2184197902679443 * amount, -4.2375030517578125 * amount, 7.476448059082031 * amount, 0 * amount, 0.8044459223747253 * amount,
	        // row 4
	        0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * LSD effect
	     *
	     * Multiply the current matrix
	     *
	     * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,
	     *  just set the current matrix with @param matrix
	     */
	
	
	    ColorMatrixFilter.prototype.lsd = function lsd(multiply) {
	        var matrix = [2, -0.4, 0.5, 0, 0, -0.5, 2, -0.4, 0, 0, -0.4, -0.5, 3, 0, 0, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, multiply);
	    };
	
	    /**
	     * Erase the current matrix by setting the default one
	     *
	     */
	
	
	    ColorMatrixFilter.prototype.reset = function reset() {
	        var matrix = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
	
	        this._loadMatrix(matrix, false);
	    };
	
	    /**
	     * The matrix of the color matrix filter
	     *
	     * @member {number[]}
	     * @memberof PIXI.filters.ColorMatrixFilter#
	     * @default [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]
	     */
	
	
	    _createClass(ColorMatrixFilter, [{
	        key: 'matrix',
	        get: function get() {
	            return this.uniforms.m;
	        }
	
	        /**
	         * Sets the matrix directly.
	         *
	         * @param {number[]} value - the value to set to.
	         */
	        ,
	        set: function set(value) {
	            this.uniforms.m = value;
	        }
	    }]);
	
	    return ColorMatrixFilter;
	}(core.Filter);
	
	// Americanized alias
	
	
	exports.default = ColorMatrixFilter;
	ColorMatrixFilter.prototype.grayscale = ColorMatrixFilter.prototype.greyscale;
	//# sourceMappingURL=ColorMatrixFilter.js.map

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _path = __webpack_require__(86);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Does nothing. Very handy.
	 *
	 * @class
	 * @extends PIXI.Filter
	 * @memberof PIXI.filters
	 */
	var VoidFilter = function (_core$Filter) {
	    _inherits(VoidFilter, _core$Filter);
	
	    /**
	     *
	     */
	    function VoidFilter() {
	        _classCallCheck(this, VoidFilter);
	
	        var _this = _possibleConstructorReturn(this, _core$Filter.call(this,
	        // vertex shader
	        'attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}',
	        // fragment shader
	        'varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void)\n{\n   gl_FragColor = texture2D(uSampler, vTextureCoord);\n}\n'));
	
	        _this.glShaderKey = 'void';
	        return _this;
	    }
	
	    return VoidFilter;
	}(core.Filter);
	
	exports.default = VoidFilter;
	//# sourceMappingURL=VoidFilter.js.map

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _WebGLPrepare = __webpack_require__(153);
	
	Object.defineProperty(exports, 'webgl', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_WebGLPrepare).default;
	  }
	});
	
	var _CanvasPrepare = __webpack_require__(156);
	
	Object.defineProperty(exports, 'canvas', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_CanvasPrepare).default;
	  }
	});
	
	var _BasePrepare = __webpack_require__(154);
	
	Object.defineProperty(exports, 'BasePrepare', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_BasePrepare).default;
	  }
	});
	
	var _CountLimiter = __webpack_require__(155);
	
	Object.defineProperty(exports, 'CountLimiter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_CountLimiter).default;
	  }
	});
	
	var _TimeLimiter = __webpack_require__(157);
	
	Object.defineProperty(exports, 'TimeLimiter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_TimeLimiter).default;
	  }
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	//# sourceMappingURL=index.js.map

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _BasePrepare2 = __webpack_require__(154);
	
	var _BasePrepare3 = _interopRequireDefault(_BasePrepare2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The prepare manager provides functionality to upload content to the GPU.
	 *
	 * @class
	 * @memberof PIXI
	 */
	var WebGLPrepare = function (_BasePrepare) {
	    _inherits(WebGLPrepare, _BasePrepare);
	
	    /**
	     * @param {PIXI.WebGLRenderer} renderer - A reference to the current renderer
	     */
	    function WebGLPrepare(renderer) {
	        _classCallCheck(this, WebGLPrepare);
	
	        var _this = _possibleConstructorReturn(this, _BasePrepare.call(this, renderer));
	
	        _this.uploadHookHelper = _this.renderer;
	
	        // Add textures and graphics to upload
	        _this.register(findBaseTextures, uploadBaseTextures).register(findGraphics, uploadGraphics);
	        return _this;
	    }
	
	    return WebGLPrepare;
	}(_BasePrepare3.default);
	
	/**
	 * Built-in hook to upload PIXI.Texture objects to the GPU.
	 *
	 * @private
	 * @param {PIXI.WebGLRenderer} renderer - instance of the webgl renderer
	 * @param {PIXI.DisplayObject} item - Item to check
	 * @return {boolean} If item was uploaded.
	 */
	
	
	exports.default = WebGLPrepare;
	function uploadBaseTextures(renderer, item) {
	    if (item instanceof core.BaseTexture) {
	        // if the texture already has a GL texture, then the texture has been prepared or rendered
	        // before now. If the texture changed, then the changer should be calling texture.update() which
	        // reuploads the texture without need for preparing it again
	        if (!item._glTextures[renderer.CONTEXT_UID]) {
	            renderer.textureManager.updateTexture(item);
	        }
	
	        return true;
	    }
	
	    return false;
	}
	
	/**
	 * Built-in hook to upload PIXI.Graphics to the GPU.
	 *
	 * @private
	 * @param {PIXI.WebGLRenderer} renderer - instance of the webgl renderer
	 * @param {PIXI.DisplayObject} item - Item to check
	 * @return {boolean} If item was uploaded.
	 */
	function uploadGraphics(renderer, item) {
	    if (item instanceof core.Graphics) {
	        // if the item is not dirty and already has webgl data, then it got prepared or rendered
	        // before now and we shouldn't waste time updating it again
	        if (item.dirty || item.clearDirty || !item._webGL[renderer.plugins.graphics.CONTEXT_UID]) {
	            renderer.plugins.graphics.updateGraphics(item);
	        }
	
	        return true;
	    }
	
	    return false;
	}
	
	/**
	 * Built-in hook to find textures from Sprites.
	 *
	 * @private
	 * @param {PIXI.DisplayObject} item - Display object to check
	 * @param {Array<*>} queue - Collection of items to upload
	 * @return {boolean} if a PIXI.Texture object was found.
	 */
	function findBaseTextures(item, queue) {
	    // Objects with textures, like Sprites/Text
	    if (item instanceof core.BaseTexture) {
	        if (queue.indexOf(item) === -1) {
	            queue.push(item);
	        }
	
	        return true;
	    } else if (item._texture && item._texture instanceof core.Texture) {
	        var texture = item._texture.baseTexture;
	
	        if (queue.indexOf(texture) === -1) {
	            queue.push(texture);
	        }
	
	        return true;
	    }
	
	    return false;
	}
	
	/**
	 * Built-in hook to find graphics.
	 *
	 * @private
	 * @param {PIXI.DisplayObject} item - Display object to check
	 * @param {Array<*>} queue - Collection of items to upload
	 * @return {boolean} if a PIXI.Graphics object was found.
	 */
	function findGraphics(item, queue) {
	    if (item instanceof core.Graphics) {
	        queue.push(item);
	
	        return true;
	    }
	
	    return false;
	}
	
	core.WebGLRenderer.registerPlugin('prepare', WebGLPrepare);
	//# sourceMappingURL=WebGLPrepare.js.map

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _CountLimiter = __webpack_require__(155);
	
	var _CountLimiter2 = _interopRequireDefault(_CountLimiter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SharedTicker = core.ticker.shared;
	
	var DEFAULT_UPLOADS_PER_FRAME = 4;
	
	/**
	 * The prepare manager provides functionality to upload content to the GPU. BasePrepare handles
	 * basic queuing functionality and is extended by {@link PIXI.prepare.WebGLPrepare} and {@link PIXI.prepare.CanvasPrepare}
	 * to provide preparation capabilities specific to their respective renderers.
	 *
	 * @abstract
	 * @class
	 * @memberof PIXI
	 */
	
	var BasePrepare = function () {
	    /**
	     * @param {PIXI.SystemRenderer} renderer - A reference to the current renderer
	     */
	    function BasePrepare(renderer) {
	        var _this = this;
	
	        _classCallCheck(this, BasePrepare);
	
	        /**
	         * The limiter to be used to control how quickly items are prepared.
	         * @type {PIXI.prepare.CountLimiter|PIXI.prepare.TimeLimiter}
	         */
	        this.limiter = new _CountLimiter2.default(DEFAULT_UPLOADS_PER_FRAME);
	
	        /**
	         * Reference to the renderer.
	         * @type {PIXI.SystemRenderer}
	         * @protected
	         */
	        this.renderer = renderer;
	
	        /**
	         * The only real difference between CanvasPrepare and WebGLPrepare is what they pass
	         * to upload hooks. That different parameter is stored here.
	         * @type {PIXI.prepare.CanvasPrepare|PIXI.WebGLRenderer}
	         * @protected
	         */
	        this.uploadHookHelper = null;
	
	        /**
	         * Collection of items to uploads at once.
	         * @type {Array<*>}
	         * @private
	         */
	        this.queue = [];
	
	        /**
	         * Collection of additional hooks for finding assets.
	         * @type {Array<Function>}
	         * @private
	         */
	        this.addHooks = [];
	
	        /**
	         * Collection of additional hooks for processing assets.
	         * @type {Array<Function>}
	         * @private
	         */
	        this.uploadHooks = [];
	
	        /**
	         * Callback to call after completed.
	         * @type {Array<Function>}
	         * @private
	         */
	        this.completes = [];
	
	        /**
	         * If prepare is ticking (running).
	         * @type {boolean}
	         * @private
	         */
	        this.ticking = false;
	
	        /**
	         * 'bound' call for prepareItems().
	         * @type {Function}
	         * @private
	         */
	        this.delayedTick = function () {
	            // unlikely, but in case we were destroyed between tick() and delayedTick()
	            if (!_this.queue) {
	                return;
	            }
	            _this.prepareItems();
	        };
	
	        this.register(findText, drawText);
	        this.register(findTextStyle, calculateTextStyle);
	    }
	
	    /**
	     * Upload all the textures and graphics to the GPU.
	     *
	     * @param {Function|PIXI.DisplayObject|PIXI.Container} item - Either
	     *        the container or display object to search for items to upload or
	     *        the callback function, if items have been added using `prepare.add`.
	     * @param {Function} [done] - Optional callback when all queued uploads have completed
	     */
	
	
	    BasePrepare.prototype.upload = function upload(item, done) {
	        if (typeof item === 'function') {
	            done = item;
	            item = null;
	        }
	
	        // If a display object, search for items
	        // that we could upload
	        if (item) {
	            this.add(item);
	        }
	
	        // Get the items for upload from the display
	        if (this.queue.length) {
	            if (done) {
	                this.completes.push(done);
	            }
	
	            if (!this.ticking) {
	                this.ticking = true;
	                SharedTicker.addOnce(this.tick, this);
	            }
	        } else if (done) {
	            done();
	        }
	    };
	
	    /**
	     * Handle tick update
	     *
	     * @private
	     */
	
	
	    BasePrepare.prototype.tick = function tick() {
	        setTimeout(this.delayedTick, 0);
	    };
	
	    /**
	     * Actually prepare items. This is handled outside of the tick because it will take a while
	     * and we do NOT want to block the current animation frame from rendering.
	     *
	     * @private
	     */
	
	
	    BasePrepare.prototype.prepareItems = function prepareItems() {
	        this.limiter.beginFrame();
	        // Upload the graphics
	        while (this.queue.length && this.limiter.allowedToUpload()) {
	            var item = this.queue[0];
	            var uploaded = false;
	
	            for (var i = 0, len = this.uploadHooks.length; i < len; i++) {
	                if (this.uploadHooks[i](this.uploadHookHelper, item)) {
	                    this.queue.shift();
	                    uploaded = true;
	                    break;
	                }
	            }
	
	            if (!uploaded) {
	                this.queue.shift();
	            }
	        }
	
	        // We're finished
	        if (!this.queue.length) {
	            this.ticking = false;
	
	            var completes = this.completes.slice(0);
	
	            this.completes.length = 0;
	
	            for (var _i = 0, _len = completes.length; _i < _len; _i++) {
	                completes[_i]();
	            }
	        } else {
	            // if we are not finished, on the next rAF do this again
	            SharedTicker.addOnce(this.tick, this);
	        }
	    };
	
	    /**
	     * Adds hooks for finding and uploading items.
	     *
	     * @param {Function} [addHook] - Function call that takes two parameters: `item:*, queue:Array`
	              function must return `true` if it was able to add item to the queue.
	     * @param {Function} [uploadHook] - Function call that takes two parameters: `prepare:CanvasPrepare, item:*` and
	     *        function must return `true` if it was able to handle upload of item.
	     * @return {PIXI.CanvasPrepare} Instance of plugin for chaining.
	     */
	
	
	    BasePrepare.prototype.register = function register(addHook, uploadHook) {
	        if (addHook) {
	            this.addHooks.push(addHook);
	        }
	
	        if (uploadHook) {
	            this.uploadHooks.push(uploadHook);
	        }
	
	        return this;
	    };
	
	    /**
	     * Manually add an item to the uploading queue.
	     *
	     * @param {PIXI.DisplayObject|PIXI.Container|*} item - Object to add to the queue
	     * @return {PIXI.CanvasPrepare} Instance of plugin for chaining.
	     */
	
	
	    BasePrepare.prototype.add = function add(item) {
	        // Add additional hooks for finding elements on special
	        // types of objects that
	        for (var i = 0, len = this.addHooks.length; i < len; i++) {
	            if (this.addHooks[i](item, this.queue)) {
	                break;
	            }
	        }
	
	        // Get childen recursively
	        if (item instanceof core.Container) {
	            for (var _i2 = item.children.length - 1; _i2 >= 0; _i2--) {
	                this.add(item.children[_i2]);
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Destroys the plugin, don't use after this.
	     *
	     */
	
	
	    BasePrepare.prototype.destroy = function destroy() {
	        if (this.ticking) {
	            SharedTicker.remove(this.tick, this);
	        }
	        this.ticking = false;
	        this.addHooks = null;
	        this.uploadHooks = null;
	        this.renderer = null;
	        this.completes = null;
	        this.queue = null;
	        this.limiter = null;
	        this.uploadHookHelper = null;
	    };
	
	    return BasePrepare;
	}();
	
	/**
	 * Built-in hook to draw PIXI.Text to its texture.
	 *
	 * @private
	 * @param {PIXI.WebGLRenderer|PIXI.CanvasPrepare} helper - Not used by this upload handler
	 * @param {PIXI.DisplayObject} item - Item to check
	 * @return {boolean} If item was uploaded.
	 */
	
	
	exports.default = BasePrepare;
	function drawText(helper, item) {
	    if (item instanceof core.Text) {
	        // updating text will return early if it is not dirty
	        item.updateText(true);
	
	        return true;
	    }
	
	    return false;
	}
	
	/**
	 * Built-in hook to calculate a text style for a PIXI.Text object.
	 *
	 * @private
	 * @param {PIXI.WebGLRenderer|PIXI.CanvasPrepare} helper - Not used by this upload handler
	 * @param {PIXI.DisplayObject} item - Item to check
	 * @return {boolean} If item was uploaded.
	 */
	function calculateTextStyle(helper, item) {
	    if (item instanceof core.TextStyle) {
	        var font = core.Text.getFontStyle(item);
	
	        if (!core.Text.fontPropertiesCache[font]) {
	            core.Text.calculateFontProperties(font);
	        }
	
	        return true;
	    }
	
	    return false;
	}
	
	/**
	 * Built-in hook to find Text objects.
	 *
	 * @private
	 * @param {PIXI.DisplayObject} item - Display object to check
	 * @param {Array<*>} queue - Collection of items to upload
	 * @return {boolean} if a PIXI.Text object was found.
	 */
	function findText(item, queue) {
	    if (item instanceof core.Text) {
	        // push the text style to prepare it - this can be really expensive
	        if (queue.indexOf(item.style) === -1) {
	            queue.push(item.style);
	        }
	        // also push the text object so that we can render it (to canvas/texture) if needed
	        if (queue.indexOf(item) === -1) {
	            queue.push(item);
	        }
	        // also push the Text's texture for upload to GPU
	        var texture = item._texture.baseTexture;
	
	        if (queue.indexOf(texture) === -1) {
	            queue.push(texture);
	        }
	
	        return true;
	    }
	
	    return false;
	}
	
	/**
	 * Built-in hook to find TextStyle objects.
	 *
	 * @private
	 * @param {PIXI.TextStyle} item - Display object to check
	 * @param {Array<*>} queue - Collection of items to upload
	 * @return {boolean} if a PIXI.TextStyle object was found.
	 */
	function findTextStyle(item, queue) {
	    if (item instanceof core.TextStyle) {
	        if (queue.indexOf(item) === -1) {
	            queue.push(item);
	        }
	
	        return true;
	    }
	
	    return false;
	}
	//# sourceMappingURL=BasePrepare.js.map

/***/ },
/* 155 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * CountLimiter limits the number of items handled by a {@link PIXI.prepare.BasePrepare} to a specified
	 * number of items per frame.
	 *
	 * @class
	 * @memberof PIXI
	 */
	var CountLimiter = function () {
	  /**
	   * @param {number} maxItemsPerFrame - The maximum number of items that can be prepared each frame.
	   */
	  function CountLimiter(maxItemsPerFrame) {
	    _classCallCheck(this, CountLimiter);
	
	    /**
	     * The maximum number of items that can be prepared each frame.
	     * @private
	     */
	    this.maxItemsPerFrame = maxItemsPerFrame;
	    /**
	     * The number of items that can be prepared in the current frame.
	     * @type {number}
	     * @private
	     */
	    this.itemsLeft = 0;
	  }
	
	  /**
	   * Resets any counting properties to start fresh on a new frame.
	   */
	
	
	  CountLimiter.prototype.beginFrame = function beginFrame() {
	    this.itemsLeft = this.maxItemsPerFrame;
	  };
	
	  /**
	   * Checks to see if another item can be uploaded. This should only be called once per item.
	   * @return {boolean} If the item is allowed to be uploaded.
	   */
	
	
	  CountLimiter.prototype.allowedToUpload = function allowedToUpload() {
	    return this.itemsLeft-- > 0;
	  };
	
	  return CountLimiter;
	}();
	
	exports.default = CountLimiter;
	//# sourceMappingURL=CountLimiter.js.map

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _BasePrepare2 = __webpack_require__(154);
	
	var _BasePrepare3 = _interopRequireDefault(_BasePrepare2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var CANVAS_START_SIZE = 16;
	
	/**
	 * The prepare manager provides functionality to upload content to the GPU
	 * This cannot be done directly for Canvas like in WebGL, but the effect can be achieved by drawing
	 * textures to an offline canvas.
	 * This draw call will force the texture to be moved onto the GPU.
	 *
	 * @class
	 * @memberof PIXI
	 */
	
	var CanvasPrepare = function (_BasePrepare) {
	    _inherits(CanvasPrepare, _BasePrepare);
	
	    /**
	     * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer
	     */
	    function CanvasPrepare(renderer) {
	        _classCallCheck(this, CanvasPrepare);
	
	        var _this = _possibleConstructorReturn(this, _BasePrepare.call(this, renderer));
	
	        _this.uploadHookHelper = _this;
	
	        /**
	        * An offline canvas to render textures to
	        * @type {HTMLCanvasElement}
	        * @private
	        */
	        _this.canvas = document.createElement('canvas');
	        _this.canvas.width = CANVAS_START_SIZE;
	        _this.canvas.height = CANVAS_START_SIZE;
	
	        /**
	         * The context to the canvas
	        * @type {CanvasRenderingContext2D}
	        * @private
	        */
	        _this.ctx = _this.canvas.getContext('2d');
	
	        // Add textures to upload
	        _this.register(findBaseTextures, uploadBaseTextures);
	        return _this;
	    }
	
	    /**
	     * Destroys the plugin, don't use after this.
	     *
	     */
	
	
	    CanvasPrepare.prototype.destroy = function destroy() {
	        _BasePrepare.prototype.destroy.call(this);
	        this.ctx = null;
	        this.canvas = null;
	    };
	
	    return CanvasPrepare;
	}(_BasePrepare3.default);
	
	/**
	 * Built-in hook to upload PIXI.Texture objects to the GPU.
	 *
	 * @private
	 * @param {*} prepare - Instance of CanvasPrepare
	 * @param {*} item - Item to check
	 * @return {boolean} If item was uploaded.
	 */
	
	
	exports.default = CanvasPrepare;
	function uploadBaseTextures(prepare, item) {
	    if (item instanceof core.BaseTexture) {
	        var image = item.source;
	
	        // Sometimes images (like atlas images) report a size of zero, causing errors on windows phone.
	        // So if the width or height is equal to zero then use the canvas size
	        // Otherwise use whatever is smaller, the image dimensions or the canvas dimensions.
	        var imageWidth = image.width === 0 ? prepare.canvas.width : Math.min(prepare.canvas.width, image.width);
	        var imageHeight = image.height === 0 ? prepare.canvas.height : Math.min(prepare.canvas.height, image.height);
	
	        // Only a small subsections is required to be drawn to have the whole texture uploaded to the GPU
	        // A smaller draw can be faster.
	        prepare.ctx.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, prepare.canvas.width, prepare.canvas.height);
	
	        return true;
	    }
	
	    return false;
	}
	
	/**
	 * Built-in hook to find textures from Sprites.
	 *
	 * @private
	 * @param {PIXI.DisplayObject} item  -Display object to check
	 * @param {Array<*>} queue - Collection of items to upload
	 * @return {boolean} if a PIXI.Texture object was found.
	 */
	function findBaseTextures(item, queue) {
	    // Objects with textures, like Sprites/Text
	    if (item instanceof core.BaseTexture) {
	        if (queue.indexOf(item) === -1) {
	            queue.push(item);
	        }
	
	        return true;
	    } else if (item._texture && item._texture instanceof core.Texture) {
	        var texture = item._texture.baseTexture;
	
	        if (queue.indexOf(texture) === -1) {
	            queue.push(texture);
	        }
	
	        return true;
	    }
	
	    return false;
	}
	
	core.CanvasRenderer.registerPlugin('prepare', CanvasPrepare);
	//# sourceMappingURL=CanvasPrepare.js.map

/***/ },
/* 157 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified
	 * number of milliseconds per frame.
	 *
	 * @class
	 * @memberof PIXI
	 */
	var TimeLimiter = function () {
	  /**
	   * @param {number} maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame.
	   */
	  function TimeLimiter(maxMilliseconds) {
	    _classCallCheck(this, TimeLimiter);
	
	    /**
	     * The maximum milliseconds that can be spent preparing items each frame.
	     * @private
	     */
	    this.maxMilliseconds = maxMilliseconds;
	    /**
	     * The start time of the current frame.
	     * @type {number}
	     * @private
	     */
	    this.frameStart = 0;
	  }
	
	  /**
	   * Resets any counting properties to start fresh on a new frame.
	   */
	
	
	  TimeLimiter.prototype.beginFrame = function beginFrame() {
	    this.frameStart = Date.now();
	  };
	
	  /**
	   * Checks to see if another item can be uploaded. This should only be called once per item.
	   * @return {boolean} If the item is allowed to be uploaded.
	   */
	
	
	  TimeLimiter.prototype.allowedToUpload = function allowedToUpload() {
	    return Date.now() - this.frameStart < this.maxMilliseconds;
	  };
	
	  return TimeLimiter;
	}();
	
	exports.default = TimeLimiter;
	//# sourceMappingURL=TimeLimiter.js.map

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(159);
	
	__webpack_require__(161);
	
	__webpack_require__(162);
	
	if (!window.ArrayBuffer) {
	    window.ArrayBuffer = Array;
	}
	
	if (!window.Float32Array) {
	    window.Float32Array = Array;
	}
	
	if (!window.Uint32Array) {
	    window.Uint32Array = Array;
	}
	
	if (!window.Uint16Array) {
	    window.Uint16Array = Array;
	}
	//# sourceMappingURL=index.js.map

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _objectAssign = __webpack_require__(160);
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	if (!Object.assign) {
	    Object.assign = _objectAssign2.default;
	} // References:
	// https://github.com/sindresorhus/object-assign
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
	//# sourceMappingURL=Object.assign.js.map

/***/ },
/* 160 */
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ },
/* 161 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	// References:
	// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
	// https://gist.github.com/1579671
	// http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision
	// https://gist.github.com/timhall/4078614
	// https://github.com/Financial-Times/polyfill-service/tree/master/polyfills/requestAnimationFrame
	
	// Expected to be used with Browserfiy
	// Browserify automatically detects the use of `global` and passes the
	// correct reference of `global`, `self`, and finally `window`
	
	var ONE_FRAME_TIME = 16;
	
	// Date.now
	if (!(Date.now && Date.prototype.getTime)) {
	    Date.now = function now() {
	        return new Date().getTime();
	    };
	}
	
	// performance.now
	if (!(global.performance && global.performance.now)) {
	    (function () {
	        var startTime = Date.now();
	
	        if (!global.performance) {
	            global.performance = {};
	        }
	
	        global.performance.now = function () {
	            return Date.now() - startTime;
	        };
	    })();
	}
	
	// requestAnimationFrame
	var lastTime = Date.now();
	var vendors = ['ms', 'moz', 'webkit', 'o'];
	
	for (var x = 0; x < vendors.length && !global.requestAnimationFrame; ++x) {
	    var p = vendors[x];
	
	    global.requestAnimationFrame = global[p + 'RequestAnimationFrame'];
	    global.cancelAnimationFrame = global[p + 'CancelAnimationFrame'] || global[p + 'CancelRequestAnimationFrame'];
	}
	
	if (!global.requestAnimationFrame) {
	    global.requestAnimationFrame = function (callback) {
	        if (typeof callback !== 'function') {
	            throw new TypeError(callback + 'is not a function');
	        }
	
	        var currentTime = Date.now();
	        var delay = ONE_FRAME_TIME + lastTime - currentTime;
	
	        if (delay < 0) {
	            delay = 0;
	        }
	
	        lastTime = currentTime;
	
	        return setTimeout(function () {
	            lastTime = Date.now();
	            callback(performance.now());
	        }, delay);
	    };
	}
	
	if (!global.cancelAnimationFrame) {
	    global.cancelAnimationFrame = function (id) {
	        return clearTimeout(id);
	    };
	}
	//# sourceMappingURL=requestAnimationFrame.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 162 */
/***/ function(module, exports) {

	"use strict";
	
	// References:
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign
	
	if (!Math.sign) {
	    Math.sign = function mathSign(x) {
	        x = Number(x);
	
	        if (x === 0 || isNaN(x)) {
	            return x;
	        }
	
	        return x > 0 ? 1 : -1;
	    };
	}
	//# sourceMappingURL=Math.sign.js.map

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _accessibleTarget = __webpack_require__(164);
	
	Object.defineProperty(exports, 'accessibleTarget', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_accessibleTarget).default;
	  }
	});
	
	var _AccessibilityManager = __webpack_require__(165);
	
	Object.defineProperty(exports, 'AccessibilityManager', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_AccessibilityManager).default;
	  }
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	//# sourceMappingURL=index.js.map

/***/ },
/* 164 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	/**
	 * Default property values of accessible objects
	 * used by {@link PIXI.accessibility.AccessibilityManager}.
	 *
	 * @mixin
	 * @name accessibleTarget
	 * @memberof PIXI
	 * @example
	 *      function MyObject() {}
	 *
	 *      Object.assign(
	 *          MyObject.prototype,
	 *          PIXI.accessibility.accessibleTarget
	 *      );
	 */
	exports.default = {
	  /**
	   *  Flag for if the object is accessible. If true AccessibilityManager will overlay a
	   *   shadow div with attributes set
	   *
	   * @member {boolean}
	   */
	  accessible: false,
	
	  /**
	   * Sets the title attribute of the shadow div
	   * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
	   *
	   * @member {string}
	   */
	  accessibleTitle: null,
	
	  /**
	   * Sets the aria-label attribute of the shadow div
	   *
	   * @member {string}
	   */
	  accessibleHint: null,
	
	  /**
	   * @todo Needs docs.
	   */
	  tabIndex: 0,
	
	  /**
	   * @todo Needs docs.
	   */
	  _accessibleActive: false,
	
	  /**
	   * @todo Needs docs.
	   */
	  _accessibleDiv: false
	};
	//# sourceMappingURL=accessibleTarget.js.map

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _ismobilejs = __webpack_require__(45);
	
	var _ismobilejs2 = _interopRequireDefault(_ismobilejs);
	
	var _accessibleTarget = __webpack_require__(164);
	
	var _accessibleTarget2 = _interopRequireDefault(_accessibleTarget);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// add some extra variables to the container..
	Object.assign(core.DisplayObject.prototype, _accessibleTarget2.default);
	
	var KEY_CODE_TAB = 9;
	
	var DIV_TOUCH_SIZE = 100;
	var DIV_TOUCH_POS_X = 0;
	var DIV_TOUCH_POS_Y = 0;
	var DIV_TOUCH_ZINDEX = 2;
	
	var DIV_HOOK_SIZE = 1;
	var DIV_HOOK_POS_X = -1000;
	var DIV_HOOK_POS_Y = -1000;
	var DIV_HOOK_ZINDEX = 2;
	
	/**
	 * The Accessibility manager reacreates the ability to tab and and have content read by screen
	 * readers. This is very important as it can possibly help people with disabilities access pixi
	 * content.
	 *
	 * Much like interaction any DisplayObject can be made accessible. This manager will map the
	 * events as if the mouse was being used, minimizing the efferot required to implement.
	 *
	 * @class
	 * @memberof PIXI
	 */
	
	var AccessibilityManager = function () {
	    /**
	     * @param {PIXI.CanvasRenderer|PIXI.WebGLRenderer} renderer - A reference to the current renderer
	     */
	    function AccessibilityManager(renderer) {
	        _classCallCheck(this, AccessibilityManager);
	
	        if ((_ismobilejs2.default.tablet || _ismobilejs2.default.phone) && !navigator.isCocoonJS) {
	            this.createTouchHook();
	        }
	
	        // first we create a div that will sit over the pixi element. This is where the div overlays will go.
	        var div = document.createElement('div');
	
	        div.style.width = DIV_TOUCH_SIZE + 'px';
	        div.style.height = DIV_TOUCH_SIZE + 'px';
	        div.style.position = 'absolute';
	        div.style.top = DIV_TOUCH_POS_X + 'px';
	        div.style.left = DIV_TOUCH_POS_Y + 'px';
	        div.style.zIndex = DIV_TOUCH_ZINDEX;
	
	        /**
	         * This is the dom element that will sit over the pixi element. This is where the div overlays will go.
	         *
	         * @type {HTMLElement}
	         * @private
	         */
	        this.div = div;
	
	        /**
	         * A simple pool for storing divs.
	         *
	         * @type {*}
	         * @private
	         */
	        this.pool = [];
	
	        /**
	         * This is a tick used to check if an object is no longer being rendered.
	         *
	         * @type {Number}
	         * @private
	         */
	        this.renderId = 0;
	
	        /**
	         * Setting this to true will visually show the divs
	         *
	         * @type {boolean}
	         */
	        this.debug = false;
	
	        /**
	         * The renderer this accessibility manager works for.
	         *
	         * @member {PIXI.SystemRenderer}
	         */
	        this.renderer = renderer;
	
	        /**
	         * The array of currently active accessible items.
	         *
	         * @member {Array<*>}
	         * @private
	         */
	        this.children = [];
	
	        /**
	         * pre-bind the functions
	         *
	         * @private
	         */
	        this._onKeyDown = this._onKeyDown.bind(this);
	        this._onMouseMove = this._onMouseMove.bind(this);
	
	        /**
	         * stores the state of the manager. If there are no accessible objects or the mouse is moving the will be false.
	         *
	         * @member {Array<*>}
	         * @private
	         */
	        this.isActive = false;
	        this.isMobileAccessabillity = false;
	
	        // let listen for tab.. once pressed we can fire up and show the accessibility layer
	        window.addEventListener('keydown', this._onKeyDown, false);
	    }
	
	    /**
	     * Creates the touch hooks.
	     *
	     */
	
	
	    AccessibilityManager.prototype.createTouchHook = function createTouchHook() {
	        var _this = this;
	
	        var hookDiv = document.createElement('button');
	
	        hookDiv.style.width = DIV_HOOK_SIZE + 'px';
	        hookDiv.style.height = DIV_HOOK_SIZE + 'px';
	        hookDiv.style.position = 'absolute';
	        hookDiv.style.top = DIV_HOOK_POS_X + 'px';
	        hookDiv.style.left = DIV_HOOK_POS_Y + 'px';
	        hookDiv.style.zIndex = DIV_HOOK_ZINDEX;
	        hookDiv.style.backgroundColor = '#FF0000';
	        hookDiv.title = 'HOOK DIV';
	
	        hookDiv.addEventListener('focus', function () {
	            _this.isMobileAccessabillity = true;
	            _this.activate();
	            document.body.removeChild(hookDiv);
	        });
	
	        document.body.appendChild(hookDiv);
	    };
	
	    /**
	     * Activating will cause the Accessibility layer to be shown. This is called when a user
	     * preses the tab key
	     *
	     * @private
	     */
	
	
	    AccessibilityManager.prototype.activate = function activate() {
	        if (this.isActive) {
	            return;
	        }
	
	        this.isActive = true;
	
	        window.document.addEventListener('mousemove', this._onMouseMove, true);
	        window.removeEventListener('keydown', this._onKeyDown, false);
	
	        this.renderer.on('postrender', this.update, this);
	
	        if (this.renderer.view.parentNode) {
	            this.renderer.view.parentNode.appendChild(this.div);
	        }
	    };
	
	    /**
	     * Deactivating will cause the Accessibility layer to be hidden. This is called when a user moves
	     * the mouse
	     *
	     * @private
	     */
	
	
	    AccessibilityManager.prototype.deactivate = function deactivate() {
	        if (!this.isActive || this.isMobileAccessabillity) {
	            return;
	        }
	
	        this.isActive = false;
	
	        window.document.removeEventListener('mousemove', this._onMouseMove);
	        window.addEventListener('keydown', this._onKeyDown, false);
	
	        this.renderer.off('postrender', this.update);
	
	        if (this.div.parentNode) {
	            this.div.parentNode.removeChild(this.div);
	        }
	    };
	
	    /**
	     * This recursive function will run throught he scene graph and add any new accessible objects to the DOM layer.
	     *
	     * @private
	     * @param {PIXI.Container} displayObject - The DisplayObject to check.
	     */
	
	
	    AccessibilityManager.prototype.updateAccessibleObjects = function updateAccessibleObjects(displayObject) {
	        if (!displayObject.visible) {
	            return;
	        }
	
	        if (displayObject.accessible && displayObject.interactive) {
	            if (!displayObject._accessibleActive) {
	                this.addChild(displayObject);
	            }
	
	            displayObject.renderId = this.renderId;
	        }
	
	        var children = displayObject.children;
	
	        for (var i = children.length - 1; i >= 0; i--) {
	            this.updateAccessibleObjects(children[i]);
	        }
	    };
	
	    /**
	     * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.
	     *
	     * @private
	     */
	
	
	    AccessibilityManager.prototype.update = function update() {
	        if (!this.renderer.renderingToScreen) {
	            return;
	        }
	
	        // update children...
	        this.updateAccessibleObjects(this.renderer._lastObjectRendered);
	
	        var rect = this.renderer.view.getBoundingClientRect();
	        var sx = rect.width / this.renderer.width;
	        var sy = rect.height / this.renderer.height;
	
	        var div = this.div;
	
	        div.style.left = rect.left + 'px';
	        div.style.top = rect.top + 'px';
	        div.style.width = this.renderer.width + 'px';
	        div.style.height = this.renderer.height + 'px';
	
	        for (var i = 0; i < this.children.length; i++) {
	            var child = this.children[i];
	
	            if (child.renderId !== this.renderId) {
	                child._accessibleActive = false;
	
	                core.utils.removeItems(this.children, i, 1);
	                this.div.removeChild(child._accessibleDiv);
	                this.pool.push(child._accessibleDiv);
	                child._accessibleDiv = null;
	
	                i--;
	
	                if (this.children.length === 0) {
	                    this.deactivate();
	                }
	            } else {
	                // map div to display..
	                div = child._accessibleDiv;
	                var hitArea = child.hitArea;
	                var wt = child.worldTransform;
	
	                if (child.hitArea) {
	                    div.style.left = (wt.tx + hitArea.x * wt.a) * sx + 'px';
	                    div.style.top = (wt.ty + hitArea.y * wt.d) * sy + 'px';
	
	                    div.style.width = hitArea.width * wt.a * sx + 'px';
	                    div.style.height = hitArea.height * wt.d * sy + 'px';
	                } else {
	                    hitArea = child.getBounds();
	
	                    this.capHitArea(hitArea);
	
	                    div.style.left = hitArea.x * sx + 'px';
	                    div.style.top = hitArea.y * sy + 'px';
	
	                    div.style.width = hitArea.width * sx + 'px';
	                    div.style.height = hitArea.height * sy + 'px';
	                }
	            }
	        }
	
	        // increment the render id..
	        this.renderId++;
	    };
	
	    /**
	     * TODO: docs.
	     *
	     * @param {Rectangle} hitArea - TODO docs
	     */
	
	
	    AccessibilityManager.prototype.capHitArea = function capHitArea(hitArea) {
	        if (hitArea.x < 0) {
	            hitArea.width += hitArea.x;
	            hitArea.x = 0;
	        }
	
	        if (hitArea.y < 0) {
	            hitArea.height += hitArea.y;
	            hitArea.y = 0;
	        }
	
	        if (hitArea.x + hitArea.width > this.renderer.width) {
	            hitArea.width = this.renderer.width - hitArea.x;
	        }
	
	        if (hitArea.y + hitArea.height > this.renderer.height) {
	            hitArea.height = this.renderer.height - hitArea.y;
	        }
	    };
	
	    /**
	     * Adds a DisplayObject to the accessibility manager
	     *
	     * @private
	     * @param {DisplayObject} displayObject - The child to make accessible.
	     */
	
	
	    AccessibilityManager.prototype.addChild = function addChild(displayObject) {
	        //    this.activate();
	
	        var div = this.pool.pop();
	
	        if (!div) {
	            div = document.createElement('button');
	
	            div.style.width = DIV_TOUCH_SIZE + 'px';
	            div.style.height = DIV_TOUCH_SIZE + 'px';
	            div.style.backgroundColor = this.debug ? 'rgba(255,0,0,0.5)' : 'transparent';
	            div.style.position = 'absolute';
	            div.style.zIndex = DIV_TOUCH_ZINDEX;
	            div.style.borderStyle = 'none';
	
	            div.addEventListener('click', this._onClick.bind(this));
	            div.addEventListener('focus', this._onFocus.bind(this));
	            div.addEventListener('focusout', this._onFocusOut.bind(this));
	        }
	
	        if (displayObject.accessibleTitle) {
	            div.title = displayObject.accessibleTitle;
	        } else if (!displayObject.accessibleTitle && !displayObject.accessibleHint) {
	            div.title = 'displayObject ' + this.tabIndex;
	        }
	
	        if (displayObject.accessibleHint) {
	            div.setAttribute('aria-label', displayObject.accessibleHint);
	        }
	
	        //
	
	        displayObject._accessibleActive = true;
	        displayObject._accessibleDiv = div;
	        div.displayObject = displayObject;
	
	        this.children.push(displayObject);
	        this.div.appendChild(displayObject._accessibleDiv);
	        displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;
	    };
	
	    /**
	     * Maps the div button press to pixi's InteractionManager (click)
	     *
	     * @private
	     * @param {MouseEvent} e - The click event.
	     */
	
	
	    AccessibilityManager.prototype._onClick = function _onClick(e) {
	        var interactionManager = this.renderer.plugins.interaction;
	
	        interactionManager.dispatchEvent(e.target.displayObject, 'click', interactionManager.eventData);
	    };
	
	    /**
	     * Maps the div focus events to pixis InteractionManager (mouseover)
	     *
	     * @private
	     * @param {FocusEvent} e - The focus event.
	     */
	
	
	    AccessibilityManager.prototype._onFocus = function _onFocus(e) {
	        var interactionManager = this.renderer.plugins.interaction;
	
	        interactionManager.dispatchEvent(e.target.displayObject, 'mouseover', interactionManager.eventData);
	    };
	
	    /**
	     * Maps the div focus events to pixis InteractionManager (mouseout)
	     *
	     * @private
	     * @param {FocusEvent} e - The focusout event.
	     */
	
	
	    AccessibilityManager.prototype._onFocusOut = function _onFocusOut(e) {
	        var interactionManager = this.renderer.plugins.interaction;
	
	        interactionManager.dispatchEvent(e.target.displayObject, 'mouseout', interactionManager.eventData);
	    };
	
	    /**
	     * Is called when a key is pressed
	     *
	     * @private
	     * @param {KeyboardEvent} e - The keydown event.
	     */
	
	
	    AccessibilityManager.prototype._onKeyDown = function _onKeyDown(e) {
	        if (e.keyCode !== KEY_CODE_TAB) {
	            return;
	        }
	
	        this.activate();
	    };
	
	    /**
	     * Is called when the mouse moves across the renderer element
	     *
	     * @private
	     */
	
	
	    AccessibilityManager.prototype._onMouseMove = function _onMouseMove() {
	        this.deactivate();
	    };
	
	    /**
	     * Destroys the accessibility manager
	     *
	     */
	
	
	    AccessibilityManager.prototype.destroy = function destroy() {
	        this.div = null;
	
	        for (var i = 0; i < this.children.length; i++) {
	            this.children[i].div = null;
	        }
	
	        window.document.removeEventListener('mousemove', this._onMouseMove);
	        window.removeEventListener('keydown', this._onKeyDown);
	
	        this.pool = null;
	        this.children = null;
	        this.renderer = null;
	    };
	
	    return AccessibilityManager;
	}();
	
	exports.default = AccessibilityManager;
	
	
	core.WebGLRenderer.registerPlugin('accessibility', AccessibilityManager);
	core.CanvasRenderer.registerPlugin('accessibility', AccessibilityManager);
	//# sourceMappingURL=AccessibilityManager.js.map

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _WebGLExtract = __webpack_require__(167);
	
	Object.defineProperty(exports, 'webgl', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_WebGLExtract).default;
	  }
	});
	
	var _CanvasExtract = __webpack_require__(168);
	
	Object.defineProperty(exports, 'canvas', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_CanvasExtract).default;
	  }
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	//# sourceMappingURL=index.js.map

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var TEMP_RECT = new core.Rectangle();
	var BYTES_PER_PIXEL = 4;
	
	/**
	 * The extract manager provides functionality to export content from the renderers.
	 *
	 * @class
	 * @memberof PIXI
	 */
	
	var WebGLExtract = function () {
	    /**
	     * @param {PIXI.WebGLRenderer} renderer - A reference to the current renderer
	     */
	    function WebGLExtract(renderer) {
	        _classCallCheck(this, WebGLExtract);
	
	        this.renderer = renderer;
	        /**
	         * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture
	         *
	         * @member {PIXI.WebGLExtract} extract
	         * @memberof PIXI.WebGLRenderer#
	         * @see PIXI.WebGLExtract
	         */
	        renderer.extract = this;
	    }
	
	    /**
	     * Will return a HTML Image of the target
	     *
	     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture
	     *  to convert. If left empty will use use the main renderer
	     * @return {HTMLImageElement} HTML Image of the target
	     */
	
	
	    WebGLExtract.prototype.image = function image(target) {
	        var image = new Image();
	
	        image.src = this.base64(target);
	
	        return image;
	    };
	
	    /**
	     * Will return a a base64 encoded string of this target. It works by calling
	     *  `WebGLExtract.getCanvas` and then running toDataURL on that.
	     *
	     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture
	     *  to convert. If left empty will use use the main renderer
	     * @return {string} A base64 encoded string of the texture.
	     */
	
	
	    WebGLExtract.prototype.base64 = function base64(target) {
	        return this.canvas(target).toDataURL();
	    };
	
	    /**
	     * Creates a Canvas element, renders this target to it and then returns it.
	     *
	     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture
	     *  to convert. If left empty will use use the main renderer
	     * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.
	     */
	
	
	    WebGLExtract.prototype.canvas = function canvas(target) {
	        var renderer = this.renderer;
	        var textureBuffer = void 0;
	        var resolution = void 0;
	        var frame = void 0;
	        var flipY = false;
	        var renderTexture = void 0;
	
	        if (target) {
	            if (target instanceof core.RenderTexture) {
	                renderTexture = target;
	            } else {
	                renderTexture = this.renderer.generateTexture(target);
	            }
	        }
	
	        if (renderTexture) {
	            textureBuffer = renderTexture.baseTexture._glRenderTargets[this.renderer.CONTEXT_UID];
	            resolution = textureBuffer.resolution;
	            frame = renderTexture.frame;
	            flipY = false;
	        } else {
	            textureBuffer = this.renderer.rootRenderTarget;
	            resolution = textureBuffer.resolution;
	            flipY = true;
	
	            frame = TEMP_RECT;
	            frame.width = textureBuffer.size.width;
	            frame.height = textureBuffer.size.height;
	        }
	
	        var width = frame.width * resolution;
	        var height = frame.height * resolution;
	
	        var canvasBuffer = new core.CanvasRenderTarget(width, height);
	
	        if (textureBuffer) {
	            // bind the buffer
	            renderer.bindRenderTarget(textureBuffer);
	
	            // set up an array of pixels
	            var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);
	
	            // read pixels to the array
	            var gl = renderer.gl;
	
	            gl.readPixels(frame.x * resolution, frame.y * resolution, width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels);
	
	            // add the pixels to the canvas
	            var canvasData = canvasBuffer.context.getImageData(0, 0, width, height);
	
	            canvasData.data.set(webglPixels);
	
	            canvasBuffer.context.putImageData(canvasData, 0, 0);
	
	            // pulling pixels
	            if (flipY) {
	                canvasBuffer.context.scale(1, -1);
	                canvasBuffer.context.drawImage(canvasBuffer.canvas, 0, -height);
	            }
	        }
	
	        // send the canvas back..
	        return canvasBuffer.canvas;
	    };
	
	    /**
	     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA
	     * order, with integer values between 0 and 255 (included).
	     *
	     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture
	     *  to convert. If left empty will use use the main renderer
	     * @return {Uint8ClampedArray} One-dimensional array containing the pixel data of the entire texture
	     */
	
	
	    WebGLExtract.prototype.pixels = function pixels(target) {
	        var renderer = this.renderer;
	        var textureBuffer = void 0;
	        var resolution = void 0;
	        var frame = void 0;
	        var renderTexture = void 0;
	
	        if (target) {
	            if (target instanceof core.RenderTexture) {
	                renderTexture = target;
	            } else {
	                renderTexture = this.renderer.generateTexture(target);
	            }
	        }
	
	        if (renderTexture) {
	            textureBuffer = renderTexture.baseTexture._glRenderTargets[this.renderer.CONTEXT_UID];
	            resolution = textureBuffer.resolution;
	            frame = renderTexture.frame;
	        } else {
	            textureBuffer = this.renderer.rootRenderTarget;
	            resolution = textureBuffer.resolution;
	
	            frame = TEMP_RECT;
	            frame.width = textureBuffer.size.width;
	            frame.height = textureBuffer.size.height;
	        }
	
	        var width = frame.width * resolution;
	        var height = frame.height * resolution;
	
	        var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);
	
	        if (textureBuffer) {
	            // bind the buffer
	            renderer.bindRenderTarget(textureBuffer);
	            // read pixels to the array
	            var gl = renderer.gl;
	
	            gl.readPixels(frame.x * resolution, frame.y * resolution, width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels);
	        }
	
	        return webglPixels;
	    };
	
	    /**
	     * Destroys the extract
	     *
	     */
	
	
	    WebGLExtract.prototype.destroy = function destroy() {
	        this.renderer.extract = null;
	        this.renderer = null;
	    };
	
	    return WebGLExtract;
	}();
	
	exports.default = WebGLExtract;
	
	
	core.WebGLRenderer.registerPlugin('extract', WebGLExtract);
	//# sourceMappingURL=WebGLExtract.js.map

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var TEMP_RECT = new core.Rectangle();
	
	/**
	 * The extract manager provides functionality to export content from the renderers.
	 *
	 * @class
	 * @memberof PIXI
	 */
	
	var CanvasExtract = function () {
	    /**
	     * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer
	     */
	    function CanvasExtract(renderer) {
	        _classCallCheck(this, CanvasExtract);
	
	        this.renderer = renderer;
	        /**
	         * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture
	         *
	         * @member {PIXI.CanvasExtract} extract
	         * @memberof PIXI.CanvasRenderer#
	         * @see PIXI.CanvasExtract
	         */
	        renderer.extract = this;
	    }
	
	    /**
	     * Will return a HTML Image of the target
	     *
	     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture
	     *  to convert. If left empty will use use the main renderer
	     * @return {HTMLImageElement} HTML Image of the target
	     */
	
	
	    CanvasExtract.prototype.image = function image(target) {
	        var image = new Image();
	
	        image.src = this.base64(target);
	
	        return image;
	    };
	
	    /**
	     * Will return a a base64 encoded string of this target. It works by calling
	     *  `CanvasExtract.getCanvas` and then running toDataURL on that.
	     *
	     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture
	     *  to convert. If left empty will use use the main renderer
	     * @return {string} A base64 encoded string of the texture.
	     */
	
	
	    CanvasExtract.prototype.base64 = function base64(target) {
	        return this.canvas(target).toDataURL();
	    };
	
	    /**
	     * Creates a Canvas element, renders this target to it and then returns it.
	     *
	     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture
	     *  to convert. If left empty will use use the main renderer
	     * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.
	     */
	
	
	    CanvasExtract.prototype.canvas = function canvas(target) {
	        var renderer = this.renderer;
	        var context = void 0;
	        var resolution = void 0;
	        var frame = void 0;
	        var renderTexture = void 0;
	
	        if (target) {
	            if (target instanceof core.RenderTexture) {
	                renderTexture = target;
	            } else {
	                renderTexture = renderer.generateTexture(target);
	            }
	        }
	
	        if (renderTexture) {
	            context = renderTexture.baseTexture._canvasRenderTarget.context;
	            resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;
	            frame = renderTexture.frame;
	        } else {
	            context = renderer.rootContext;
	
	            frame = TEMP_RECT;
	            frame.width = this.renderer.width;
	            frame.height = this.renderer.height;
	        }
	
	        var width = frame.width * resolution;
	        var height = frame.height * resolution;
	
	        var canvasBuffer = new core.CanvasRenderTarget(width, height);
	        var canvasData = context.getImageData(frame.x * resolution, frame.y * resolution, width, height);
	
	        canvasBuffer.context.putImageData(canvasData, 0, 0);
	
	        // send the canvas back..
	        return canvasBuffer.canvas;
	    };
	
	    /**
	     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA
	     * order, with integer values between 0 and 255 (included).
	     *
	     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture
	     *  to convert. If left empty will use use the main renderer
	     * @return {Uint8ClampedArray} One-dimensional array containing the pixel data of the entire texture
	     */
	
	
	    CanvasExtract.prototype.pixels = function pixels(target) {
	        var renderer = this.renderer;
	        var context = void 0;
	        var resolution = void 0;
	        var frame = void 0;
	        var renderTexture = void 0;
	
	        if (target) {
	            if (target instanceof core.RenderTexture) {
	                renderTexture = target;
	            } else {
	                renderTexture = renderer.generateTexture(target);
	            }
	        }
	
	        if (renderTexture) {
	            context = renderTexture.baseTexture._canvasRenderTarget.context;
	            resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;
	            frame = renderTexture.frame;
	        } else {
	            context = renderer.rootContext;
	
	            frame = TEMP_RECT;
	            frame.width = renderer.width;
	            frame.height = renderer.height;
	        }
	
	        return context.getImageData(0, 0, frame.width * resolution, frame.height * resolution).data;
	    };
	
	    /**
	     * Destroys the extract
	     *
	     */
	
	
	    CanvasExtract.prototype.destroy = function destroy() {
	        this.renderer.extract = null;
	        this.renderer = null;
	    };
	
	    return CanvasExtract;
	}();
	
	exports.default = CanvasExtract;
	
	
	core.CanvasRenderer.registerPlugin('extract', CanvasExtract);
	//# sourceMappingURL=CanvasExtract.js.map

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _InteractionData = __webpack_require__(170);
	
	Object.defineProperty(exports, 'InteractionData', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_InteractionData).default;
	  }
	});
	
	var _InteractionManager = __webpack_require__(171);
	
	Object.defineProperty(exports, 'InteractionManager', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_InteractionManager).default;
	  }
	});
	
	var _interactiveTarget = __webpack_require__(173);
	
	Object.defineProperty(exports, 'interactiveTarget', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_interactiveTarget).default;
	  }
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	//# sourceMappingURL=index.js.map

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Holds all information related to an Interaction event
	 *
	 * @class
	 * @memberof PIXI.interaction
	 */
	var InteractionData = function () {
	  /**
	   *
	   */
	  function InteractionData() {
	    _classCallCheck(this, InteractionData);
	
	    /**
	     * This point stores the global coords of where the touch/mouse event happened
	     *
	     * @member {PIXI.Point}
	     */
	    this.global = new core.Point();
	
	    /**
	     * The target Sprite that was interacted with
	     *
	     * @member {PIXI.Sprite}
	     */
	    this.target = null;
	
	    /**
	     * When passed to an event handler, this will be the original DOM Event that was captured
	     *
	     * @member {Event}
	     */
	    this.originalEvent = null;
	  }
	
	  /**
	   * This will return the local coordinates of the specified displayObject for this InteractionData
	   *
	   * @param {PIXI.DisplayObject} displayObject - The DisplayObject that you would like the local
	   *  coords off
	   * @param {PIXI.Point} [point] - A Point object in which to store the value, optional (otherwise
	   *  will create a new point)
	   * @param {PIXI.Point} [globalPos] - A Point object containing your custom global coords, optional
	   *  (otherwise will use the current global coords)
	   * @return {PIXI.Point} A point containing the coordinates of the InteractionData position relative
	   *  to the DisplayObject
	   */
	
	
	  InteractionData.prototype.getLocalPosition = function getLocalPosition(displayObject, point, globalPos) {
	    return displayObject.worldTransform.applyInverse(globalPos || this.global, point);
	  };
	
	  return InteractionData;
	}();
	
	exports.default = InteractionData;
	//# sourceMappingURL=InteractionData.js.map

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	var _InteractionData = __webpack_require__(170);
	
	var _InteractionData2 = _interopRequireDefault(_InteractionData);
	
	var _InteractionEvent = __webpack_require__(172);
	
	var _InteractionEvent2 = _interopRequireDefault(_InteractionEvent);
	
	var _eventemitter = __webpack_require__(42);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _interactiveTarget = __webpack_require__(173);
	
	var _interactiveTarget2 = _interopRequireDefault(_interactiveTarget);
	
	var _ismobilejs = __webpack_require__(45);
	
	var _ismobilejs2 = _interopRequireDefault(_ismobilejs);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	// Mix interactiveTarget into core.DisplayObject.prototype
	Object.assign(core.DisplayObject.prototype, _interactiveTarget2.default);
	
	/**
	 * The interaction manager deals with mouse and touch events. Any DisplayObject can be interactive
	 * if its interactive parameter is set to true
	 * This manager also supports multitouch.
	 *
	 * @class
	 * @extends EventEmitter
	 * @memberof PIXI.interaction
	 */
	
	var InteractionManager = function (_EventEmitter) {
	    _inherits(InteractionManager, _EventEmitter);
	
	    /**
	     * @param {PIXI.CanvasRenderer|PIXI.WebGLRenderer} renderer - A reference to the current renderer
	     * @param {object} [options] - The options for the manager.
	     * @param {boolean} [options.autoPreventDefault=true] - Should the manager automatically prevent default browser actions.
	     * @param {number} [options.interactionFrequency=10] - Frequency increases the interaction events will be checked.
	     */
	    function InteractionManager(renderer, options) {
	        _classCallCheck(this, InteractionManager);
	
	        var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));
	
	        options = options || {};
	
	        /**
	         * The renderer this interaction manager works for.
	         *
	         * @member {PIXI.SystemRenderer}
	         */
	        _this.renderer = renderer;
	
	        /**
	         * Should default browser actions automatically be prevented.
	         * Does not apply to pointer events for backwards compatibility
	         * preventDefault on pointer events stops mouse events from firing
	         * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.
	         *
	         * @member {boolean}
	         * @default true
	         */
	        _this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;
	
	        /**
	         * As this frequency increases the interaction events will be checked more often.
	         *
	         * @member {number}
	         * @default 10
	         */
	        _this.interactionFrequency = options.interactionFrequency || 10;
	
	        /**
	         * The mouse data
	         *
	         * @member {PIXI.interaction.InteractionData}
	         */
	        _this.mouse = new _InteractionData2.default();
	
	        // setting the mouse to start off far off screen will mean that mouse over does
	        //  not get called before we even move the mouse.
	        _this.mouse.global.set(-999999);
	
	        /**
	         * The pointer data
	         *
	         * @member {PIXI.interaction.InteractionData}
	         */
	        _this.pointer = new _InteractionData2.default();
	
	        // setting the pointer to start off far off screen will mean that pointer over does
	        //  not get called before we even move the pointer.
	        _this.pointer.global.set(-999999);
	
	        /**
	         * An event data object to handle all the event tracking/dispatching
	         *
	         * @member {object}
	         */
	        _this.eventData = new _InteractionEvent2.default();
	
	        /**
	         * Tiny little interactiveData pool !
	         *
	         * @member {PIXI.interaction.InteractionData[]}
	         */
	        _this.interactiveDataPool = [];
	
	        /**
	         * The DOM element to bind to.
	         *
	         * @private
	         * @member {HTMLElement}
	         */
	        _this.interactionDOMElement = null;
	
	        /**
	         * This property determins if mousemove and touchmove events are fired only when the cursror
	         * is over the object.
	         * Setting to true will make things work more in line with how the DOM verison works.
	         * Setting to false can make things easier for things like dragging
	         * It is currently set to false as this is how pixi used to work. This will be set to true in
	         * future versions of pixi.
	         *
	         * @private
	         * @member {boolean}
	         */
	        _this.moveWhenInside = false;
	
	        /**
	         * Have events been attached to the dom element?
	         *
	         * @private
	         * @member {boolean}
	         */
	        _this.eventsAdded = false;
	
	        /**
	         * Is the mouse hovering over the renderer?
	         *
	         * @private
	         * @member {boolean}
	         */
	        _this.mouseOverRenderer = false;
	
	        /**
	         * Does the device support touch events
	         * https://www.w3.org/TR/touch-events/
	         *
	         * @readonly
	         * @member {boolean}
	         */
	        _this.supportsTouchEvents = 'ontouchstart' in window;
	
	        /**
	         * Does the device support pointer events
	         * https://www.w3.org/Submission/pointer-events/
	         *
	         * @readonly
	         * @member {boolean}
	         */
	        _this.supportsPointerEvents = !!window.PointerEvent;
	
	        /**
	         * Are touch events being 'normalized' and converted into pointer events if pointer events are not supported
	         * For example, on a touch screen mobile device, a touchstart would also be emitted as a pointerdown
	         *
	         * @private
	         * @readonly
	         * @member {boolean}
	         */
	        _this.normalizeTouchEvents = !_this.supportsPointerEvents && _this.supportsTouchEvents;
	
	        /**
	         * Are mouse events being 'normalized' and converted into pointer events if pointer events are not supported
	         * For example, on a desktop pc, a mousedown would also be emitted as a pointerdown
	         *
	         * @private
	         * @readonly
	         * @member {boolean}
	         */
	        _this.normalizeMouseEvents = !_this.supportsPointerEvents && !_ismobilejs2.default.any;
	
	        // this will make it so that you don't have to call bind all the time
	
	        /**
	         * @private
	         * @member {Function}
	         */
	        _this.onMouseUp = _this.onMouseUp.bind(_this);
	        _this.processMouseUp = _this.processMouseUp.bind(_this);
	
	        /**
	         * @private
	         * @member {Function}
	         */
	        _this.onMouseDown = _this.onMouseDown.bind(_this);
	        _this.processMouseDown = _this.processMouseDown.bind(_this);
	
	        /**
	         * @private
	         * @member {Function}
	         */
	        _this.onMouseMove = _this.onMouseMove.bind(_this);
	        _this.processMouseMove = _this.processMouseMove.bind(_this);
	
	        /**
	         * @private
	         * @member {Function}
	         */
	        _this.onMouseOut = _this.onMouseOut.bind(_this);
	        _this.processMouseOverOut = _this.processMouseOverOut.bind(_this);
	
	        /**
	        * @private
	        * @member {Function}
	        */
	        _this.onMouseOver = _this.onMouseOver.bind(_this);
	
	        /**
	         * @private
	         * @member {Function}
	         */
	        _this.onPointerUp = _this.onPointerUp.bind(_this);
	        _this.processPointerUp = _this.processPointerUp.bind(_this);
	
	        /**
	         * @private
	         * @member {Function}
	         */
	        _this.onPointerDown = _this.onPointerDown.bind(_this);
	        _this.processPointerDown = _this.processPointerDown.bind(_this);
	
	        /**
	         * @private
	         * @member {Function}
	         */
	        _this.onPointerMove = _this.onPointerMove.bind(_this);
	        _this.processPointerMove = _this.processPointerMove.bind(_this);
	
	        /**
	         * @private
	         * @member {Function}
	         */
	        _this.onPointerOut = _this.onPointerOut.bind(_this);
	        _this.processPointerOverOut = _this.processPointerOverOut.bind(_this);
	
	        /**
	         * @private
	         * @member {Function}
	         */
	        _this.onPointerOver = _this.onPointerOver.bind(_this);
	
	        /**
	         * @private
	         * @member {Function}
	         */
	        _this.onTouchStart = _this.onTouchStart.bind(_this);
	        _this.processTouchStart = _this.processTouchStart.bind(_this);
	
	        /**
	         * @private
	         * @member {Function}
	         */
	        _this.onTouchEnd = _this.onTouchEnd.bind(_this);
	        _this.processTouchEnd = _this.processTouchEnd.bind(_this);
	
	        /**
	         * @private
	         * @member {Function}
	         */
	        _this.onTouchMove = _this.onTouchMove.bind(_this);
	        _this.processTouchMove = _this.processTouchMove.bind(_this);
	
	        /**
	         * Every update cursor will be reset to this value, if some element wont override it in
	         * its hitTest.
	         *
	         * @member {string}
	         * @default 'inherit'
	         */
	        _this.defaultCursorStyle = 'inherit';
	
	        /**
	         * The css style of the cursor that is being used.
	         *
	         * @member {string}
	         */
	        _this.currentCursorStyle = 'inherit';
	
	        /**
	         * Internal cached let.
	         *
	         * @private
	         * @member {PIXI.Point}
	         */
	        _this._tempPoint = new core.Point();
	
	        /**
	         * The current resolution / device pixel ratio.
	         *
	         * @member {number}
	         * @default 1
	         */
	        _this.resolution = 1;
	
	        _this.setTargetElement(_this.renderer.view, _this.renderer.resolution);
	
	        /**
	         * Fired when a pointer device button (usually a mouse button) is pressed on the display
	         * object.
	         *
	         * @event mousedown
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed
	         * on the display object.
	         *
	         * @event rightdown
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device button (usually a mouse button) is released over the display
	         * object.
	         *
	         * @event mouseup
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device secondary button (usually a mouse right-button) is released
	         * over the display object.
	         *
	         * @event rightup
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device button (usually a mouse button) is pressed and released on
	         * the display object.
	         *
	         * @event click
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed
	         * and released on the display object.
	         *
	         * @event rightclick
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device button (usually a mouse button) is released outside the
	         * display object that initially registered a
	         * [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown}.
	         *
	         * @event mouseupoutside
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device secondary button (usually a mouse right-button) is released
	         * outside the display object that initially registered a
	         * [rightdown]{@link PIXI.interaction.InteractionManager#event:rightdown}.
	         *
	         * @event rightupoutside
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device (usually a mouse) is moved while over the display object
	         *
	         * @event mousemove
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device (usually a mouse) is moved onto the display object
	         *
	         * @event mouseover
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device (usually a mouse) is moved off the display object
	         *
	         * @event mouseout
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device button is pressed on the display object.
	         *
	         * @event pointerdown
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device button is released over the display object.
	         *
	         * @event pointerup
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device button is pressed and released on the display object.
	         *
	         * @event pointertap
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device button is released outside the display object that initially
	         * registered a [pointerdown]{@link PIXI.interaction.InteractionManager#event:pointerdown}.
	         *
	         * @event pointerupoutside
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device is moved while over the display object
	         *
	         * @event pointermove
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device is moved onto the display object
	         *
	         * @event pointerover
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a pointer device is moved off the display object
	         *
	         * @event pointerout
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a touch point is placed on the display object.
	         *
	         * @event touchstart
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a touch point is removed from the display object.
	         *
	         * @event touchend
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a touch point is placed and removed from the display object.
	         *
	         * @event tap
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a touch point is removed outside of the display object that initially
	         * registered a [touchstart]{@link PIXI.interaction.InteractionManager#event:touchstart}.
	         *
	         * @event touchendoutside
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	
	        /**
	         * Fired when a touch point is moved along the display object.
	         *
	         * @event touchmove
	         * @memberof PIXI.interaction.InteractionManager#
	         */
	        return _this;
	    }
	
	    /**
	     * Sets the DOM element which will receive mouse/touch events. This is useful for when you have
	     * other DOM elements on top of the renderers Canvas element. With this you'll be bale to deletegate
	     * another DOM element to receive those events.
	     *
	     * @param {HTMLCanvasElement} element - the DOM element which will receive mouse and touch events.
	     * @param {number} [resolution=1] - The resolution / device pixel ratio of the new element (relative to the canvas).
	     * @private
	     */
	
	
	    InteractionManager.prototype.setTargetElement = function setTargetElement(element) {
	        var resolution = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	
	        this.removeEvents();
	
	        this.interactionDOMElement = element;
	
	        this.resolution = resolution;
	
	        this.addEvents();
	    };
	
	    /**
	     * Registers all the DOM events
	     *
	     * @private
	     */
	
	
	    InteractionManager.prototype.addEvents = function addEvents() {
	        if (!this.interactionDOMElement) {
	            return;
	        }
	
	        core.ticker.shared.add(this.update, this);
	
	        if (window.navigator.msPointerEnabled) {
	            this.interactionDOMElement.style['-ms-content-zooming'] = 'none';
	            this.interactionDOMElement.style['-ms-touch-action'] = 'none';
	        } else if (this.supportsPointerEvents) {
	            this.interactionDOMElement.style['touch-action'] = 'none';
	        }
	
	        /**
	         * These events are added first, so that if pointer events are normalised, they are fired
	         * in the same order as non-normalised events. ie. pointer event 1st, mouse / touch 2nd
	         */
	        if (this.supportsPointerEvents) {
	            window.document.addEventListener('pointermove', this.onPointerMove, true);
	            this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, true);
	            this.interactionDOMElement.addEventListener('pointerout', this.onPointerOut, true);
	            this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, true);
	            window.addEventListener('pointerup', this.onPointerUp, true);
	        } else {
	            /**
	             * If pointer events aren't available on a device, this will turn either the touch or
	             * mouse events into pointer events. This allows a developer to just listen for emitted
	             * pointer events on interactive sprites
	             */
	            if (this.normalizeTouchEvents) {
	                this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, true);
	                this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, true);
	                this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, true);
	            }
	
	            if (this.normalizeMouseEvents) {
	                window.document.addEventListener('mousemove', this.onPointerMove, true);
	                this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, true);
	                this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, true);
	                this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, true);
	                window.addEventListener('mouseup', this.onPointerUp, true);
	            }
	        }
	
	        window.document.addEventListener('mousemove', this.onMouseMove, true);
	        this.interactionDOMElement.addEventListener('mousedown', this.onMouseDown, true);
	        this.interactionDOMElement.addEventListener('mouseout', this.onMouseOut, true);
	        this.interactionDOMElement.addEventListener('mouseover', this.onMouseOver, true);
	        window.addEventListener('mouseup', this.onMouseUp, true);
	
	        if (this.supportsTouchEvents) {
	            this.interactionDOMElement.addEventListener('touchstart', this.onTouchStart, true);
	            this.interactionDOMElement.addEventListener('touchend', this.onTouchEnd, true);
	            this.interactionDOMElement.addEventListener('touchmove', this.onTouchMove, true);
	        }
	
	        this.eventsAdded = true;
	    };
	
	    /**
	     * Removes all the DOM events that were previously registered
	     *
	     * @private
	     */
	
	
	    InteractionManager.prototype.removeEvents = function removeEvents() {
	        if (!this.interactionDOMElement) {
	            return;
	        }
	
	        core.ticker.shared.remove(this.update, this);
	
	        if (window.navigator.msPointerEnabled) {
	            this.interactionDOMElement.style['-ms-content-zooming'] = '';
	            this.interactionDOMElement.style['-ms-touch-action'] = '';
	        } else if (this.supportsPointerEvents) {
	            this.interactionDOMElement.style['touch-action'] = '';
	        }
	
	        if (this.supportsPointerEvents) {
	            window.document.removeEventListener('pointermove', this.onPointerMove, true);
	            this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, true);
	            this.interactionDOMElement.removeEventListener('pointerout', this.onPointerOut, true);
	            this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, true);
	            window.removeEventListener('pointerup', this.onPointerUp, true);
	        } else {
	            /**
	             * If pointer events aren't available on a device, this will turn either the touch or
	             * mouse events into pointer events. This allows a developer to just listen for emitted
	             * pointer events on interactive sprites
	             */
	            if (this.normalizeTouchEvents) {
	                this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, true);
	                this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, true);
	                this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, true);
	            }
	
	            if (this.normalizeMouseEvents) {
	                window.document.removeEventListener('mousemove', this.onPointerMove, true);
	                this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, true);
	                this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, true);
	                this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, true);
	                window.removeEventListener('mouseup', this.onPointerUp, true);
	            }
	        }
	
	        window.document.removeEventListener('mousemove', this.onMouseMove, true);
	        this.interactionDOMElement.removeEventListener('mousedown', this.onMouseDown, true);
	        this.interactionDOMElement.removeEventListener('mouseout', this.onMouseOut, true);
	        this.interactionDOMElement.removeEventListener('mouseover', this.onMouseOver, true);
	        window.removeEventListener('mouseup', this.onMouseUp, true);
	
	        if (this.supportsTouchEvents) {
	            this.interactionDOMElement.removeEventListener('touchstart', this.onTouchStart, true);
	            this.interactionDOMElement.removeEventListener('touchend', this.onTouchEnd, true);
	            this.interactionDOMElement.removeEventListener('touchmove', this.onTouchMove, true);
	        }
	
	        this.interactionDOMElement = null;
	
	        this.eventsAdded = false;
	    };
	
	    /**
	     * Updates the state of interactive objects.
	     * Invoked by a throttled ticker update from {@link PIXI.ticker.shared}.
	     *
	     * @param {number} deltaTime - time delta since last tick
	     */
	
	
	    InteractionManager.prototype.update = function update(deltaTime) {
	        this._deltaTime += deltaTime;
	
	        if (this._deltaTime < this.interactionFrequency) {
	            return;
	        }
	
	        this._deltaTime = 0;
	
	        if (!this.interactionDOMElement) {
	            return;
	        }
	
	        // if the user move the mouse this check has already been dfone using the mouse move!
	        if (this.didMove) {
	            this.didMove = false;
	
	            return;
	        }
	
	        this.cursor = this.defaultCursorStyle;
	
	        // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,
	        // but there was a scenario of a display object moving under a static mouse cursor.
	        // In this case, mouseover and mouseevents would not pass the flag test in dispatchEvent function
	        this.eventData._reset();
	
	        this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseOverOut, true);
	
	        if (this.currentCursorStyle !== this.cursor) {
	            this.currentCursorStyle = this.cursor;
	            this.interactionDOMElement.style.cursor = this.cursor;
	        }
	
	        // TODO
	    };
	
	    /**
	     * Dispatches an event on the display object that was interacted with
	     *
	     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the display object in question
	     * @param {string} eventString - the name of the event (e.g, mousedown)
	     * @param {object} eventData - the event data object
	     * @private
	     */
	
	
	    InteractionManager.prototype.dispatchEvent = function dispatchEvent(displayObject, eventString, eventData) {
	        if (!eventData.stopped) {
	            eventData.currentTarget = displayObject;
	            eventData.type = eventString;
	
	            displayObject.emit(eventString, eventData);
	
	            if (displayObject[eventString]) {
	                displayObject[eventString](eventData);
	            }
	        }
	    };
	
	    /**
	     * Maps x and y coords from a DOM object and maps them correctly to the pixi view. The
	     * resulting value is stored in the point. This takes into account the fact that the DOM
	     * element could be scaled and positioned anywhere on the screen.
	     *
	     * @param  {PIXI.Point} point - the point that the result will be stored in
	     * @param  {number} x - the x coord of the position to map
	     * @param  {number} y - the y coord of the position to map
	     */
	
	
	    InteractionManager.prototype.mapPositionToPoint = function mapPositionToPoint(point, x, y) {
	        var rect = void 0;
	
	        // IE 11 fix
	        if (!this.interactionDOMElement.parentElement) {
	            rect = { x: 0, y: 0, width: 0, height: 0 };
	        } else {
	            rect = this.interactionDOMElement.getBoundingClientRect();
	        }
	
	        point.x = (x - rect.left) * (this.interactionDOMElement.width / rect.width) / this.resolution;
	        point.y = (y - rect.top) * (this.interactionDOMElement.height / rect.height) / this.resolution;
	    };
	
	    /**
	     * This function is provides a neat way of crawling through the scene graph and running a
	     * specified function on all interactive objects it finds. It will also take care of hit
	     * testing the interactive objects and passes the hit across in the function.
	     *
	     * @param {PIXI.Point} point - the point that is tested for collision
	     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the displayObject
	     *  that will be hit test (recursively crawls its children)
	     * @param {Function} [func] - the function that will be called on each interactive object. The
	     *  displayObject and hit will be passed to the function
	     * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point
	     * @param {boolean} [interactive] - Whether the displayObject is interactive
	     * @return {boolean} returns true if the displayObject hit the point
	     */
	
	
	    InteractionManager.prototype.processInteractive = function processInteractive(point, displayObject, func, hitTest, interactive) {
	        if (!displayObject || !displayObject.visible) {
	            return false;
	        }
	
	        // Took a little while to rework this function correctly! But now it is done and nice and optimised. ^_^
	        //
	        // This function will now loop through all objects and then only hit test the objects it HAS
	        // to, not all of them. MUCH faster..
	        // An object will be hit test if the following is true:
	        //
	        // 1: It is interactive.
	        // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.
	        //
	        // As another little optimisation once an interactive object has been hit we can carry on
	        // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests
	        // A final optimisation is that an object is not hit test directly if a child has already been hit.
	
	        interactive = displayObject.interactive || interactive;
	
	        var hit = false;
	        var interactiveParent = interactive;
	
	        // if the displayobject has a hitArea, then it does not need to hitTest children.
	        if (displayObject.hitArea) {
	            interactiveParent = false;
	        }
	
	        // it has a mask! Then lets hit test that before continuing..
	        if (hitTest && displayObject._mask) {
	            if (!displayObject._mask.containsPoint(point)) {
	                hitTest = false;
	            }
	        }
	
	        // it has a filterArea! Same as mask but easier, its a rectangle
	        if (hitTest && displayObject.filterArea) {
	            if (!displayObject.filterArea.contains(point.x, point.y)) {
	                hitTest = false;
	            }
	        }
	
	        // ** FREE TIP **! If an object is not interactive or has no buttons in it
	        // (such as a game scene!) set interactiveChildren to false for that displayObject.
	        // This will allow pixi to completely ignore and bypass checking the displayObjects children.
	        if (displayObject.interactiveChildren && displayObject.children) {
	            var children = displayObject.children;
	
	            for (var i = children.length - 1; i >= 0; i--) {
	                var child = children[i];
	
	                // time to get recursive.. if this function will return if something is hit..
	                if (this.processInteractive(point, child, func, hitTest, interactiveParent)) {
	                    // its a good idea to check if a child has lost its parent.
	                    // this means it has been removed whilst looping so its best
	                    if (!child.parent) {
	                        continue;
	                    }
	
	                    hit = true;
	
	                    // we no longer need to hit test any more objects in this container as we we
	                    // now know the parent has been hit
	                    interactiveParent = false;
	
	                    // If the child is interactive , that means that the object hit was actually
	                    // interactive and not just the child of an interactive object.
	                    // This means we no longer need to hit test anything else. We still need to run
	                    // through all objects, but we don't need to perform any hit tests.
	
	                    // {
	                    hitTest = false;
	                    // }
	
	                    // we can break now as we have hit an object.
	                }
	            }
	        }
	
	        // no point running this if the item is not interactive or does not have an interactive parent.
	        if (interactive) {
	            // if we are hit testing (as in we have no hit any objects yet)
	            // We also don't need to worry about hit testing if once of the displayObjects children
	            // has already been hit!
	            if (hitTest && !hit) {
	                if (displayObject.hitArea) {
	                    displayObject.worldTransform.applyInverse(point, this._tempPoint);
	                    hit = displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y);
	                } else if (displayObject.containsPoint) {
	                    hit = displayObject.containsPoint(point);
	                }
	            }
	
	            if (displayObject.interactive) {
	                if (hit && !this.eventData.target) {
	                    this.eventData.target = displayObject;
	                    this.mouse.target = displayObject;
	                    this.pointer.target = displayObject;
	                }
	
	                func(displayObject, hit);
	            }
	        }
	
	        return hit;
	    };
	
	    /**
	     * Is called when the mouse button is pressed down on the renderer element
	     *
	     * @private
	     * @param {MouseEvent} event - The DOM event of a mouse button being pressed down
	     */
	
	
	    InteractionManager.prototype.onMouseDown = function onMouseDown(event) {
	        this.mouse.originalEvent = event;
	        this.eventData.data = this.mouse;
	        this.eventData._reset();
	
	        // Update internal mouse reference
	        this.mapPositionToPoint(this.mouse.global, event.clientX, event.clientY);
	
	        if (this.autoPreventDefault) {
	            this.mouse.originalEvent.preventDefault();
	        }
	
	        this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseDown, true);
	
	        var isRightButton = event.button === 2 || event.which === 3;
	
	        this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);
	    };
	
	    /**
	     * Processes the result of the mouse down check and dispatches the event if need be
	     *
	     * @private
	     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	
	    InteractionManager.prototype.processMouseDown = function processMouseDown(displayObject, hit) {
	        var e = this.mouse.originalEvent;
	
	        var isRightButton = e.button === 2 || e.which === 3;
	
	        if (hit) {
	            displayObject[isRightButton ? '_isRightDown' : '_isLeftDown'] = true;
	            this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', this.eventData);
	        }
	    };
	
	    /**
	     * Is called when the mouse button is released on the renderer element
	     *
	     * @private
	     * @param {MouseEvent} event - The DOM event of a mouse button being released
	     */
	
	
	    InteractionManager.prototype.onMouseUp = function onMouseUp(event) {
	        this.mouse.originalEvent = event;
	        this.eventData.data = this.mouse;
	        this.eventData._reset();
	
	        // Update internal mouse reference
	        this.mapPositionToPoint(this.mouse.global, event.clientX, event.clientY);
	
	        this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseUp, true);
	
	        var isRightButton = event.button === 2 || event.which === 3;
	
	        this.emit(isRightButton ? 'rightup' : 'mouseup', this.eventData);
	    };
	
	    /**
	     * Processes the result of the mouse up check and dispatches the event if need be
	     *
	     * @private
	     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	
	    InteractionManager.prototype.processMouseUp = function processMouseUp(displayObject, hit) {
	        var e = this.mouse.originalEvent;
	
	        var isRightButton = e.button === 2 || e.which === 3;
	        var isDown = isRightButton ? '_isRightDown' : '_isLeftDown';
	
	        if (hit) {
	            this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', this.eventData);
	
	            if (displayObject[isDown]) {
	                displayObject[isDown] = false;
	                this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', this.eventData);
	            }
	        } else if (displayObject[isDown]) {
	            displayObject[isDown] = false;
	            this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', this.eventData);
	        }
	    };
	
	    /**
	     * Is called when the mouse moves across the renderer element
	     *
	     * @private
	     * @param {MouseEvent} event - The DOM event of the mouse moving
	     */
	
	
	    InteractionManager.prototype.onMouseMove = function onMouseMove(event) {
	        this.mouse.originalEvent = event;
	        this.eventData.data = this.mouse;
	        this.eventData._reset();
	
	        this.mapPositionToPoint(this.mouse.global, event.clientX, event.clientY);
	
	        this.didMove = true;
	
	        this.cursor = this.defaultCursorStyle;
	
	        this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseMove, true);
	
	        this.emit('mousemove', this.eventData);
	
	        if (this.currentCursorStyle !== this.cursor) {
	            this.currentCursorStyle = this.cursor;
	            this.interactionDOMElement.style.cursor = this.cursor;
	        }
	
	        // TODO BUG for parents interactive object (border order issue)
	    };
	
	    /**
	     * Processes the result of the mouse move check and dispatches the event if need be
	     *
	     * @private
	     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	
	    InteractionManager.prototype.processMouseMove = function processMouseMove(displayObject, hit) {
	        this.processMouseOverOut(displayObject, hit);
	
	        // only display on mouse over
	        if (!this.moveWhenInside || hit) {
	            this.dispatchEvent(displayObject, 'mousemove', this.eventData);
	        }
	    };
	
	    /**
	     * Is called when the mouse is moved out of the renderer element
	     *
	     * @private
	     * @param {MouseEvent} event - The DOM event of the mouse being moved out
	     */
	
	
	    InteractionManager.prototype.onMouseOut = function onMouseOut(event) {
	        this.mouseOverRenderer = false;
	
	        this.mouse.originalEvent = event;
	        this.eventData.data = this.mouse;
	        this.eventData._reset();
	
	        // Update internal mouse reference
	        this.mapPositionToPoint(this.mouse.global, event.clientX, event.clientY);
	
	        this.interactionDOMElement.style.cursor = this.defaultCursorStyle;
	
	        // TODO optimize by not check EVERY TIME! maybe half as often? //
	        this.mapPositionToPoint(this.mouse.global, event.clientX, event.clientY);
	
	        this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseOverOut, false);
	
	        this.emit('mouseout', this.eventData);
	    };
	
	    /**
	     * Processes the result of the mouse over/out check and dispatches the event if need be
	     *
	     * @private
	     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	
	    InteractionManager.prototype.processMouseOverOut = function processMouseOverOut(displayObject, hit) {
	        if (hit && this.mouseOverRenderer) {
	            if (!displayObject._mouseOver) {
	                displayObject._mouseOver = true;
	                this.dispatchEvent(displayObject, 'mouseover', this.eventData);
	            }
	
	            if (displayObject.buttonMode) {
	                this.cursor = displayObject.defaultCursor;
	            }
	        } else if (displayObject._mouseOver) {
	            displayObject._mouseOver = false;
	            this.dispatchEvent(displayObject, 'mouseout', this.eventData);
	        }
	    };
	
	    /**
	     * Is called when the mouse enters the renderer element area
	     *
	     * @private
	     * @param {MouseEvent} event - The DOM event of the mouse moving into the renderer view
	     */
	
	
	    InteractionManager.prototype.onMouseOver = function onMouseOver(event) {
	        this.mouseOverRenderer = true;
	
	        this.mouse.originalEvent = event;
	        this.eventData.data = this.mouse;
	        this.eventData._reset();
	
	        this.emit('mouseover', this.eventData);
	    };
	
	    /**
	     * Is called when the pointer button is pressed down on the renderer element
	     *
	     * @private
	     * @param {PointerEvent} event - The DOM event of a pointer button being pressed down
	     */
	
	
	    InteractionManager.prototype.onPointerDown = function onPointerDown(event) {
	        this.normalizeToPointerData(event);
	        this.pointer.originalEvent = event;
	        this.eventData.data = this.pointer;
	        this.eventData._reset();
	
	        // Update internal pointer reference
	        this.mapPositionToPoint(this.pointer.global, event.clientX, event.clientY);
	
	        /**
	         * No need to prevent default on natural pointer events, as there are no side effects
	         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,
	         * so still need to be prevented.
	         */
	        if (this.autoPreventDefault && (this.normalizeMouseEvents || this.normalizeTouchEvents)) {
	            this.pointer.originalEvent.preventDefault();
	        }
	
	        this.processInteractive(this.pointer.global, this.renderer._lastObjectRendered, this.processPointerDown, true);
	
	        this.emit('pointerdown', this.eventData);
	    };
	
	    /**
	     * Processes the result of the pointer down check and dispatches the event if need be
	     *
	     * @private
	     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	
	    InteractionManager.prototype.processPointerDown = function processPointerDown(displayObject, hit) {
	        if (hit) {
	            displayObject._pointerDown = true;
	            this.dispatchEvent(displayObject, 'pointerdown', this.eventData);
	        }
	    };
	
	    /**
	     * Is called when the pointer button is released on the renderer element
	     *
	     * @private
	     * @param {PointerEvent} event - The DOM event of a pointer button being released
	     */
	
	
	    InteractionManager.prototype.onPointerUp = function onPointerUp(event) {
	        this.normalizeToPointerData(event);
	        this.pointer.originalEvent = event;
	        this.eventData.data = this.pointer;
	        this.eventData._reset();
	
	        // Update internal pointer reference
	        this.mapPositionToPoint(this.pointer.global, event.clientX, event.clientY);
	
	        this.processInteractive(this.pointer.global, this.renderer._lastObjectRendered, this.processPointerUp, true);
	
	        this.emit('pointerup', this.eventData);
	    };
	
	    /**
	     * Processes the result of the pointer up check and dispatches the event if need be
	     *
	     * @private
	     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	
	    InteractionManager.prototype.processPointerUp = function processPointerUp(displayObject, hit) {
	        if (hit) {
	            this.dispatchEvent(displayObject, 'pointerup', this.eventData);
	
	            if (displayObject._pointerDown) {
	                displayObject._pointerDown = false;
	                this.dispatchEvent(displayObject, 'pointertap', this.eventData);
	            }
	        } else if (displayObject._pointerDown) {
	            displayObject._pointerDown = false;
	            this.dispatchEvent(displayObject, 'pointerupoutside', this.eventData);
	        }
	    };
	
	    /**
	     * Is called when the pointer moves across the renderer element
	     *
	     * @private
	     * @param {PointerEvent} event - The DOM event of a pointer moving
	     */
	
	
	    InteractionManager.prototype.onPointerMove = function onPointerMove(event) {
	        this.normalizeToPointerData(event);
	        this.pointer.originalEvent = event;
	        this.eventData.data = this.pointer;
	        this.eventData._reset();
	
	        this.mapPositionToPoint(this.pointer.global, event.clientX, event.clientY);
	
	        this.processInteractive(this.pointer.global, this.renderer._lastObjectRendered, this.processPointerMove, true);
	
	        this.emit('pointermove', this.eventData);
	    };
	
	    /**
	     * Processes the result of the pointer move check and dispatches the event if need be
	     *
	     * @private
	     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	
	    InteractionManager.prototype.processPointerMove = function processPointerMove(displayObject, hit) {
	        if (!this.pointer.originalEvent.changedTouches) {
	            this.processPointerOverOut(displayObject, hit);
	        }
	
	        if (!this.moveWhenInside || hit) {
	            this.dispatchEvent(displayObject, 'pointermove', this.eventData);
	        }
	    };
	
	    /**
	     * Is called when the pointer is moved out of the renderer element
	     *
	     * @private
	     * @param {PointerEvent} event - The DOM event of a pointer being moved out
	     */
	
	
	    InteractionManager.prototype.onPointerOut = function onPointerOut(event) {
	        this.normalizeToPointerData(event);
	        this.pointer.originalEvent = event;
	        this.eventData.data = this.pointer;
	        this.eventData._reset();
	
	        // Update internal pointer reference
	        this.mapPositionToPoint(this.pointer.global, event.clientX, event.clientY);
	
	        this.processInteractive(this.pointer.global, this.renderer._lastObjectRendered, this.processPointerOverOut, false);
	
	        this.emit('pointerout', this.eventData);
	    };
	
	    /**
	     * Processes the result of the pointer over/out check and dispatches the event if need be
	     *
	     * @private
	     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	
	    InteractionManager.prototype.processPointerOverOut = function processPointerOverOut(displayObject, hit) {
	        if (hit && this.mouseOverRenderer) {
	            if (!displayObject._pointerOver) {
	                displayObject._pointerOver = true;
	                this.dispatchEvent(displayObject, 'pointerover', this.eventData);
	            }
	        } else if (displayObject._pointerOver) {
	            displayObject._pointerOver = false;
	            this.dispatchEvent(displayObject, 'pointerout', this.eventData);
	        }
	    };
	
	    /**
	     * Is called when the pointer is moved into the renderer element
	     *
	     * @private
	     * @param {PointerEvent} event - The DOM event of a pointer button being moved into the renderer view
	     */
	
	
	    InteractionManager.prototype.onPointerOver = function onPointerOver(event) {
	        this.pointer.originalEvent = event;
	        this.eventData.data = this.pointer;
	        this.eventData._reset();
	
	        this.emit('pointerover', this.eventData);
	    };
	
	    /**
	     * Is called when a touch is started on the renderer element
	     *
	     * @private
	     * @param {TouchEvent} event - The DOM event of a touch starting on the renderer view
	     */
	
	
	    InteractionManager.prototype.onTouchStart = function onTouchStart(event) {
	        if (this.autoPreventDefault) {
	            event.preventDefault();
	        }
	
	        var changedTouches = event.changedTouches;
	        var cLength = changedTouches.length;
	
	        for (var i = 0; i < cLength; i++) {
	            var touch = changedTouches[i];
	            var touchData = this.getTouchData(touch);
	
	            touchData.originalEvent = event;
	
	            this.eventData.data = touchData;
	            this.eventData._reset();
	
	            this.processInteractive(touchData.global, this.renderer._lastObjectRendered, this.processTouchStart, true);
	
	            this.emit('touchstart', this.eventData);
	
	            this.returnTouchData(touchData);
	        }
	    };
	
	    /**
	     * Processes the result of a touch check and dispatches the event if need be
	     *
	     * @private
	     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	
	    InteractionManager.prototype.processTouchStart = function processTouchStart(displayObject, hit) {
	        if (hit) {
	            displayObject._touchDown = true;
	            this.dispatchEvent(displayObject, 'touchstart', this.eventData);
	        }
	    };
	
	    /**
	     * Is called when a touch ends on the renderer element
	     *
	     * @private
	     * @param {TouchEvent} event - The DOM event of a touch ending on the renderer view
	     */
	
	
	    InteractionManager.prototype.onTouchEnd = function onTouchEnd(event) {
	        if (this.autoPreventDefault) {
	            event.preventDefault();
	        }
	
	        var changedTouches = event.changedTouches;
	        var cLength = changedTouches.length;
	
	        for (var i = 0; i < cLength; i++) {
	            var touchEvent = changedTouches[i];
	
	            var touchData = this.getTouchData(touchEvent);
	
	            touchData.originalEvent = event;
	
	            // TODO this should be passed along.. no set
	            this.eventData.data = touchData;
	            this.eventData._reset();
	
	            this.processInteractive(touchData.global, this.renderer._lastObjectRendered, this.processTouchEnd, true);
	
	            this.emit('touchend', this.eventData);
	
	            this.returnTouchData(touchData);
	        }
	    };
	
	    /**
	     * Processes the result of the end of a touch and dispatches the event if need be
	     *
	     * @private
	     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	
	    InteractionManager.prototype.processTouchEnd = function processTouchEnd(displayObject, hit) {
	        if (hit) {
	            this.dispatchEvent(displayObject, 'touchend', this.eventData);
	
	            if (displayObject._touchDown) {
	                displayObject._touchDown = false;
	                this.dispatchEvent(displayObject, 'tap', this.eventData);
	            }
	        } else if (displayObject._touchDown) {
	            displayObject._touchDown = false;
	            this.dispatchEvent(displayObject, 'touchendoutside', this.eventData);
	        }
	    };
	
	    /**
	     * Is called when a touch is moved across the renderer element
	     *
	     * @private
	     * @param {TouchEvent} event - The DOM event of a touch moving accross the renderer view
	     */
	
	
	    InteractionManager.prototype.onTouchMove = function onTouchMove(event) {
	        if (this.autoPreventDefault) {
	            event.preventDefault();
	        }
	
	        var changedTouches = event.changedTouches;
	        var cLength = changedTouches.length;
	
	        for (var i = 0; i < cLength; i++) {
	            var touchEvent = changedTouches[i];
	
	            var touchData = this.getTouchData(touchEvent);
	
	            touchData.originalEvent = event;
	
	            this.eventData.data = touchData;
	            this.eventData._reset();
	
	            this.processInteractive(touchData.global, this.renderer._lastObjectRendered, this.processTouchMove, this.moveWhenInside);
	
	            this.emit('touchmove', this.eventData);
	
	            this.returnTouchData(touchData);
	        }
	    };
	
	    /**
	     * Processes the result of a touch move check and dispatches the event if need be
	     *
	     * @private
	     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	
	    InteractionManager.prototype.processTouchMove = function processTouchMove(displayObject, hit) {
	        if (!this.moveWhenInside || hit) {
	            this.dispatchEvent(displayObject, 'touchmove', this.eventData);
	        }
	    };
	
	    /**
	     * Grabs an interaction data object from the internal pool
	     *
	     * @private
	     * @param {Touch} touch - The touch data we need to pair with an interactionData object
	     * @return {PIXI.interaction.InteractionData} The built data object.
	     */
	
	
	    InteractionManager.prototype.getTouchData = function getTouchData(touch) {
	        var touchData = this.interactiveDataPool.pop() || new _InteractionData2.default();
	
	        touchData.identifier = touch.identifier;
	        this.mapPositionToPoint(touchData.global, touch.clientX, touch.clientY);
	
	        if (navigator.isCocoonJS) {
	            touchData.global.x = touchData.global.x / this.resolution;
	            touchData.global.y = touchData.global.y / this.resolution;
	        }
	
	        touch.globalX = touchData.global.x;
	        touch.globalY = touchData.global.y;
	
	        return touchData;
	    };
	
	    /**
	     * Returns an interaction data object to the internal pool
	     *
	     * @private
	     * @param {PIXI.interaction.InteractionData} touchData - The touch data object we want to return to the pool
	     */
	
	
	    InteractionManager.prototype.returnTouchData = function returnTouchData(touchData) {
	        this.interactiveDataPool.push(touchData);
	    };
	
	    /**
	     * Ensures that the original event object contains all data that a regular pointer event would have
	     *
	     * @private
	     * @param {TouchEvent|MouseEvent} event - The original event data from a touch or mouse event
	     */
	
	
	    InteractionManager.prototype.normalizeToPointerData = function normalizeToPointerData(event) {
	        if (this.normalizeTouchEvents && event.changedTouches) {
	            if (typeof event.button === 'undefined') event.button = event.touches.length ? 1 : 0;
	            if (typeof event.buttons === 'undefined') event.buttons = event.touches.length ? 1 : 0;
	            if (typeof event.isPrimary === 'undefined') event.isPrimary = event.touches.length === 1;
	            if (typeof event.width === 'undefined') event.width = event.changedTouches[0].radiusX || 1;
	            if (typeof event.height === 'undefined') event.height = event.changedTouches[0].radiusY || 1;
	            if (typeof event.tiltX === 'undefined') event.tiltX = 0;
	            if (typeof event.tiltY === 'undefined') event.tiltY = 0;
	            if (typeof event.pointerType === 'undefined') event.pointerType = 'touch';
	            if (typeof event.pointerId === 'undefined') event.pointerId = event.changedTouches[0].identifier || 0;
	            if (typeof event.pressure === 'undefined') event.pressure = event.changedTouches[0].force || 0.5;
	            if (typeof event.rotation === 'undefined') event.rotation = event.changedTouches[0].rotationAngle || 0;
	
	            if (typeof event.clientX === 'undefined') event.clientX = event.changedTouches[0].clientX;
	            if (typeof event.clientY === 'undefined') event.clientY = event.changedTouches[0].clientY;
	            if (typeof event.pageX === 'undefined') event.pageX = event.changedTouches[0].pageX;
	            if (typeof event.pageY === 'undefined') event.pageY = event.changedTouches[0].pageY;
	            if (typeof event.screenX === 'undefined') event.screenX = event.changedTouches[0].screenX;
	            if (typeof event.screenY === 'undefined') event.screenY = event.changedTouches[0].screenY;
	            if (typeof event.layerX === 'undefined') event.layerX = event.offsetX = event.clientX;
	            if (typeof event.layerY === 'undefined') event.layerY = event.offsetY = event.clientY;
	        } else if (this.normalizeMouseEvents) {
	            if (typeof event.isPrimary === 'undefined') event.isPrimary = true;
	            if (typeof event.width === 'undefined') event.width = 1;
	            if (typeof event.height === 'undefined') event.height = 1;
	            if (typeof event.tiltX === 'undefined') event.tiltX = 0;
	            if (typeof event.tiltY === 'undefined') event.tiltY = 0;
	            if (typeof event.pointerType === 'undefined') event.pointerType = 'mouse';
	            if (typeof event.pointerId === 'undefined') event.pointerId = 1;
	            if (typeof event.pressure === 'undefined') event.pressure = 0.5;
	            if (typeof event.rotation === 'undefined') event.rotation = 0;
	        }
	    };
	
	    /**
	     * Destroys the interaction manager
	     *
	     */
	
	
	    InteractionManager.prototype.destroy = function destroy() {
	        this.removeEvents();
	
	        this.removeAllListeners();
	
	        this.renderer = null;
	
	        this.mouse = null;
	
	        this.eventData = null;
	
	        this.interactiveDataPool = null;
	
	        this.interactionDOMElement = null;
	
	        this.onMouseDown = null;
	        this.processMouseDown = null;
	
	        this.onMouseUp = null;
	        this.processMouseUp = null;
	
	        this.onMouseMove = null;
	        this.processMouseMove = null;
	
	        this.onMouseOut = null;
	        this.processMouseOverOut = null;
	
	        this.onMouseOver = null;
	
	        this.onPointerDown = null;
	        this.processPointerDown = null;
	
	        this.onPointerUp = null;
	        this.processPointerUp = null;
	
	        this.onPointerMove = null;
	        this.processPointerMove = null;
	
	        this.onPointerOut = null;
	        this.processPointerOverOut = null;
	
	        this.onPointerOver = null;
	
	        this.onTouchStart = null;
	        this.processTouchStart = null;
	
	        this.onTouchEnd = null;
	        this.processTouchEnd = null;
	
	        this.onTouchMove = null;
	        this.processTouchMove = null;
	
	        this._tempPoint = null;
	    };
	
	    return InteractionManager;
	}(_eventemitter2.default);
	
	exports.default = InteractionManager;
	
	
	core.WebGLRenderer.registerPlugin('interaction', InteractionManager);
	core.CanvasRenderer.registerPlugin('interaction', InteractionManager);
	//# sourceMappingURL=InteractionManager.js.map

/***/ },
/* 172 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Event class that mimics native DOM events.
	 *
	 * @class
	 * @memberof PIXI.interaction
	 */
	var InteractionEvent = function () {
	  /**
	   *
	   */
	  function InteractionEvent() {
	    _classCallCheck(this, InteractionEvent);
	
	    /**
	     * Which this event will continue propagating in the tree
	     *
	     * @member {boolean}
	     */
	    this.stopped = false;
	
	    /**
	     * The object to which event is dispatched.
	     *
	     * @member {PIXI.DisplayObject}
	     */
	    this.target = null;
	
	    /**
	     * The object whose event listener‚Äôs callback is currently being invoked.
	     *
	     * @member {PIXI.DisplayObject}
	     */
	    this.currentTarget = null;
	
	    /*
	     * Type of the event
	     *
	     * @member {string}
	     */
	    this.type = null;
	
	    /*
	     * InteractionData related to this event
	     *
	     * @member {PIXI.interaction.InteractionData}
	     */
	    this.data = null;
	  }
	
	  /**
	   * Prevents event from reaching any objects other than the current object.
	   *
	   */
	
	
	  InteractionEvent.prototype.stopPropagation = function stopPropagation() {
	    this.stopped = true;
	  };
	
	  /**
	   * Prevents event from reaching any objects other than the current object.
	   *
	   * @private
	   */
	
	
	  InteractionEvent.prototype._reset = function _reset() {
	    this.stopped = false;
	    this.currentTarget = null;
	    this.target = null;
	  };
	
	  return InteractionEvent;
	}();
	
	exports.default = InteractionEvent;
	//# sourceMappingURL=InteractionEvent.js.map

/***/ },
/* 173 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	/**
	 * Default property values of interactive objects
	 * Used by {@link PIXI.interaction.InteractionManager} to automatically give all DisplayObjects these properties
	 *
	 * @mixin
	 * @name interactiveTarget
	 * @memberof PIXI.interaction
	 * @example
	 *      function MyObject() {}
	 *
	 *      Object.assign(
	 *          MyObject.prototype,
	 *          PIXI.interaction.interactiveTarget
	 *      );
	 */
	exports.default = {
	  /**
	   * Determines if the displayObject be clicked/touched
	   *
	   * @inner {boolean}
	   */
	  interactive: false,
	
	  /**
	   * Determines if the children to the displayObject can be clicked/touched
	   * Setting this to false allows pixi to bypass a recursive hitTest function
	   *
	   * @inner {boolean}
	   */
	  interactiveChildren: true,
	
	  /**
	   * Interaction shape. Children will be hit first, then this shape will be checked.
	   * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.
	   *
	   * @inner {PIXI.Rectangle|PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.RoundedRectangle}
	   */
	  hitArea: null,
	
	  /**
	   * If enabled, the mouse cursor will change when hovered over the displayObject if it is interactive
	   *
	   * @inner {boolean}
	   */
	  buttonMode: false,
	
	  /**
	   * If buttonMode is enabled, this defines what CSS cursor property is used when the mouse cursor
	   * is hovered over the displayObject
	   *
	   * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor
	   *
	   * @inner {string}
	   */
	  defaultCursor: 'pointer',
	
	  // some internal checks..
	  /**
	   * Internal check to detect if the mouse cursor is hovered over the displayObject
	   *
	   * @inner {boolean}
	   * @private
	   */
	  _over: false,
	
	  /**
	   * Internal check to detect if the left mouse button is pressed on the displayObject
	   *
	   * @inner {boolean}
	   * @private
	   */
	  _isLeftDown: false,
	
	  /**
	   * Internal check to detect if the right mouse button is pressed on the displayObject
	   *
	   * @inner {boolean}
	   * @private
	   */
	  _isRightDown: false,
	
	  /**
	   * Internal check to detect if the pointer cursor is hovered over the displayObject
	   *
	   * @inner {boolean}
	   * @private
	   */
	  _pointerOver: false,
	
	  /**
	   * Internal check to detect if the pointer is down on the displayObject
	   *
	   * @inner {boolean}
	   * @private
	   */
	  _pointerDown: false,
	
	  /**
	   * Internal check to detect if a user has touched the displayObject
	   *
	   * @inner {boolean}
	   * @private
	   */
	  _touchDown: false
	};
	//# sourceMappingURL=interactiveTarget.js.map

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _loader = __webpack_require__(175);
	
	Object.defineProperty(exports, 'Loader', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_loader).default;
	  }
	});
	
	var _bitmapFontParser = __webpack_require__(186);
	
	Object.defineProperty(exports, 'bitmapFontParser', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_bitmapFontParser).default;
	  }
	});
	Object.defineProperty(exports, 'parseBitmapFontData', {
	  enumerable: true,
	  get: function get() {
	    return _bitmapFontParser.parse;
	  }
	});
	
	var _spritesheetParser = __webpack_require__(185);
	
	Object.defineProperty(exports, 'spritesheetParser', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_spritesheetParser).default;
	  }
	});
	
	var _textureParser = __webpack_require__(184);
	
	Object.defineProperty(exports, 'textureParser', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_textureParser).default;
	  }
	});
	
	var _resourceLoader = __webpack_require__(176);
	
	Object.defineProperty(exports, 'Resource', {
	  enumerable: true,
	  get: function get() {
	    return _resourceLoader.Resource;
	  }
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	//# sourceMappingURL=index.js.map

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _resourceLoader = __webpack_require__(176);
	
	var _resourceLoader2 = _interopRequireDefault(_resourceLoader);
	
	var _textureParser = __webpack_require__(184);
	
	var _textureParser2 = _interopRequireDefault(_textureParser);
	
	var _spritesheetParser = __webpack_require__(185);
	
	var _spritesheetParser2 = _interopRequireDefault(_spritesheetParser);
	
	var _bitmapFontParser = __webpack_require__(186);
	
	var _bitmapFontParser2 = _interopRequireDefault(_bitmapFontParser);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 *
	 * The new loader, extends Resource Loader by Chad Engler : https://github.com/englercj/resource-loader
	 *
	 * ```js
	 * let loader = PIXI.loader; // pixi exposes a premade instance for you to use.
	 * //or
	 * let loader = new PIXI.loaders.Loader(); // you can also create your own if you want
	 *
	 * loader.add('bunny',"data/bunny.png");
	 *
	 * loader.once('complete',onAssetsLoaded);
	 *
	 * loader.load();
	 * ```
	 *
	 * @see https://github.com/englercj/resource-loader
	 *
	 * @class
	 * @extends module:resource-loader.ResourceLoader
	 * @memberof PIXI.loaders
	 */
	var Loader = function (_ResourceLoader) {
	    _inherits(Loader, _ResourceLoader);
	
	    /**
	     * @param {string} [baseUrl=''] - The base url for all resources loaded by this loader.
	     * @param {number} [concurrency=10] - The number of resources to load concurrently.
	     */
	    function Loader(baseUrl, concurrency) {
	        _classCallCheck(this, Loader);
	
	        var _this = _possibleConstructorReturn(this, _ResourceLoader.call(this, baseUrl, concurrency));
	
	        for (var i = 0; i < Loader._pixiMiddleware.length; ++i) {
	            _this.use(Loader._pixiMiddleware[i]());
	        }
	        return _this;
	    }
	
	    /**
	     * Adds a default middleware to the pixi loader.
	     *
	     * @static
	     * @param {Function} fn - The middleware to add.
	     */
	
	
	    Loader.addPixiMiddleware = function addPixiMiddleware(fn) {
	        Loader._pixiMiddleware.push(fn);
	    };
	
	    return Loader;
	}(_resourceLoader2.default);
	
	exports.default = Loader;
	
	
	Loader._pixiMiddleware = [
	// parse any blob into more usable objects (e.g. Image)
	_resourceLoader2.default.middleware.parsing.blob,
	// parse any Image objects into textures
	_textureParser2.default,
	// parse any spritesheet data into multiple textures
	_spritesheetParser2.default,
	// parse bitmap font data into multiple textures
	_bitmapFontParser2.default];
	
	// Add custom extentions
	var Resource = _resourceLoader2.default.Resource;
	
	Resource.setExtensionXhrType('fnt', Resource.XHR_RESPONSE_TYPE.DOCUMENT);
	//# sourceMappingURL=loader.js.map

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint global-require: 0 */
	'use strict';
	
	module.exports = __webpack_require__(177);
	module.exports.Resource = __webpack_require__(180);
	module.exports.middleware = {
	    caching: {
	        memory: __webpack_require__(181)
	    },
	    parsing: {
	        blob: __webpack_require__(182)
	    }
	};
	
	module.exports.async = __webpack_require__(179);


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseUri        = __webpack_require__(178);
	var async           = __webpack_require__(179);
	var Resource        = __webpack_require__(180);
	var EventEmitter    = __webpack_require__(42);
	
	// some constants
	var DEFAULT_CONCURRENCY = 10;
	var MAX_PROGRESS = 100;
	
	/**
	 * Manages the state and loading of multiple resources to load.
	 *
	 * @class
	 * @param {string} [baseUrl=''] - The base url for all resources loaded by this loader.
	 * @param {number} [concurrency=10] - The number of resources to load concurrently.
	 */
	function Loader(baseUrl, concurrency) {
	    EventEmitter.call(this);
	
	    concurrency = concurrency || DEFAULT_CONCURRENCY;
	
	    /**
	     * The base url for all resources loaded by this loader.
	     *
	     * @member {string}
	     */
	    this.baseUrl = baseUrl || '';
	
	    /**
	     * The progress percent of the loader going through the queue.
	     *
	     * @member {number}
	     */
	    this.progress = 0;
	
	    /**
	     * Loading state of the loader, true if it is currently loading resources.
	     *
	     * @member {boolean}
	     */
	    this.loading = false;
	
	    /**
	     * The percentage of total progress that a single resource represents.
	     *
	     * @member {number}
	     */
	    this._progressChunk = 0;
	
	    /**
	     * The middleware to run before loading each resource.
	     *
	     * @member {function[]}
	     */
	    this._beforeMiddleware = [];
	
	    /**
	     * The middleware to run after loading each resource.
	     *
	     * @member {function[]}
	     */
	    this._afterMiddleware = [];
	
	    /**
	     * The `_loadResource` function bound with this object context.
	     *
	     * @private
	     * @member {function}
	     */
	    this._boundLoadResource = this._loadResource.bind(this);
	
	    /**
	     * The resource buffer that fills until `load` is called to start loading resources.
	     *
	     * @private
	     * @member {Resource[]}
	     */
	    this._buffer = [];
	
	    /**
	     * Used to track load completion.
	     *
	     * @private
	     * @member {number}
	     */
	    this._numToLoad = 0;
	
	    /**
	     * The resources waiting to be loaded.
	     *
	     * @private
	     * @member {Resource[]}
	     */
	    this._queue = async.queue(this._boundLoadResource, concurrency);
	
	    /**
	     * All the resources for this loader keyed by name.
	     *
	     * @member {object<string, Resource>}
	     */
	    this.resources = {};
	
	    /**
	     * Emitted once per loaded or errored resource.
	     *
	     * @event progress
	     * @memberof Loader#
	     */
	
	    /**
	     * Emitted once per errored resource.
	     *
	     * @event error
	     * @memberof Loader#
	     */
	
	    /**
	     * Emitted once per loaded resource.
	     *
	     * @event load
	     * @memberof Loader#
	     */
	
	    /**
	     * Emitted when the loader begins to process the queue.
	     *
	     * @event start
	     * @memberof Loader#
	     */
	
	    /**
	     * Emitted when the queued resources all load.
	     *
	     * @event complete
	     * @memberof Loader#
	     */
	}
	
	Loader.prototype = Object.create(EventEmitter.prototype);
	Loader.prototype.constructor = Loader;
	module.exports = Loader;
	
	/**
	 * Adds a resource (or multiple resources) to the loader queue.
	 *
	 * This function can take a wide variety of different parameters. The only thing that is always
	 * required the url to load. All the following will work:
	 *
	 * ```js
	 * loader
	 *     // normal param syntax
	 *     .add('key', 'http://...', function () {})
	 *     .add('http://...', function () {})
	 *     .add('http://...')
	 *
	 *     // object syntax
	 *     .add({
	 *         name: 'key2',
	 *         url: 'http://...'
	 *     }, function () {})
	 *     .add({
	 *         url: 'http://...'
	 *     }, function () {})
	 *     .add({
	 *         name: 'key3',
	 *         url: 'http://...'
	 *         onComplete: function () {}
	 *     })
	 *     .add({
	 *         url: 'https://...',
	 *         onComplete: function () {},
	 *         crossOrigin: true
	 *     })
	 *
	 *     // you can also pass an array of objects or urls or both
	 *     .add([
	 *         { name: 'key4', url: 'http://...', onComplete: function () {} },
	 *         { url: 'http://...', onComplete: function () {} },
	 *         'http://...'
	 *     ])
	 *
	 *     // and you can use both params and options
	 *     .add('key', 'http://...', { crossOrigin: true }, function () {})
	 *     .add('http://...', { crossOrigin: true }, function () {});
	 * ```
	 *
	 * @alias enqueue
	 * @param {string} [name] - The name of the resource to load, if not passed the url is used.
	 * @param {string} [url] - The url for this resource, relative to the baseUrl of this loader.
	 * @param {object} [options] - The options for the load.
	 * @param {boolean} [options.crossOrigin] - Is this request cross-origin? Default is to determine automatically.
	 * @param {Resource.XHR_LOAD_TYPE} [options.loadType=Resource.LOAD_TYPE.XHR] - How should this resource be loaded?
	 * @param {Resource.XHR_RESPONSE_TYPE} [options.xhrType=Resource.XHR_RESPONSE_TYPE.DEFAULT] - How should the data being
	 *      loaded be interpreted when using XHR?
	 * @param {function} [cb] - Function to call when this specific resource completes loading.
	 * @return {Loader} Returns itself.
	 */
	Loader.prototype.add = Loader.prototype.enqueue = function (name, url, options, cb) {
	    // special case of an array of objects or urls
	    if (Array.isArray(name)) {
	        for (var i = 0; i < name.length; ++i) {
	            this.add(name[i]);
	        }
	
	        return this;
	    }
	
	    // if an object is passed instead of params
	    if (typeof name === 'object') {
	        cb = url || name.callback || name.onComplete;
	        options = name;
	        url = name.url;
	        name = name.name || name.key || name.url;
	    }
	
	    // case where no name is passed shift all args over by one.
	    if (typeof url !== 'string') {
	        cb = options;
	        options = url;
	        url = name;
	    }
	
	    // now that we shifted make sure we have a proper url.
	    if (typeof url !== 'string') {
	        throw new Error('No url passed to add resource to loader.');
	    }
	
	    // options are optional so people might pass a function and no options
	    if (typeof options === 'function') {
	        cb = options;
	        options = null;
	    }
	
	    // check if resource already exists.
	    if (this.resources[name]) {
	        throw new Error('Resource with name "' + name + '" already exists.');
	    }
	
	    // add base url if this isn't an absolute url
	    url = this._prepareUrl(url);
	
	    // create the store the resource
	    this.resources[name] = new Resource(name, url, options);
	
	    if (typeof cb === 'function') {
	        this.resources[name].once('afterMiddleware', cb);
	    }
	
	    this._numToLoad++;
	
	    // if already loading add it to the worker queue
	    if (this._queue.started) {
	        this._queue.push(this.resources[name]);
	        this._progressChunk = (MAX_PROGRESS - this.progress) / (this._queue.length() + this._queue.running());
	    }
	    // otherwise buffer it to be added to the queue later
	    else {
	        this._buffer.push(this.resources[name]);
	        this._progressChunk = MAX_PROGRESS / this._buffer.length;
	    }
	
	    return this;
	};
	
	/**
	 * Sets up a middleware function that will run *before* the
	 * resource is loaded.
	 *
	 * @alias pre
	 * @method before
	 * @param {function} fn - The middleware function to register.
	 * @return {Loader} Returns itself.
	 */
	Loader.prototype.before = Loader.prototype.pre = function (fn) {
	    this._beforeMiddleware.push(fn);
	
	    return this;
	};
	
	/**
	 * Sets up a middleware function that will run *after* the
	 * resource is loaded.
	 *
	 * @alias use
	 * @method after
	 * @param {function} fn - The middleware function to register.
	 * @return {Loader} Returns itself.
	 */
	Loader.prototype.after = Loader.prototype.use = function (fn) {
	    this._afterMiddleware.push(fn);
	
	    return this;
	};
	
	/**
	 * Resets the queue of the loader to prepare for a new load.
	 *
	 * @return {Loader} Returns itself.
	 */
	Loader.prototype.reset = function () {
	    // this.baseUrl = baseUrl || '';
	
	    this.progress = 0;
	
	    this.loading = false;
	
	    this._progressChunk = 0;
	
	    // this._beforeMiddleware.length = 0;
	    // this._afterMiddleware.length = 0;
	
	    this._buffer.length = 0;
	
	    this._numToLoad = 0;
	
	    this._queue.kill();
	    this._queue.started = false;
	
	    // abort all resource loads
	    for (var k in this.resources) {
	        var res = this.resources[k];
	
	        res.off('complete', this._onLoad, this);
	
	        if (res.isLoading) {
	            res.abort();
	        }
	    }
	
	    this.resources = {};
	
	    return this;
	};
	
	/**
	 * Starts loading the queued resources.
	 *
	 * @fires start
	 * @param {function} [cb] - Optional callback that will be bound to the `complete` event.
	 * @return {Loader} Returns itself.
	 */
	Loader.prototype.load = function (cb) {
	    // register complete callback if they pass one
	    if (typeof cb === 'function') {
	        this.once('complete', cb);
	    }
	
	    // if the queue has already started we are done here
	    if (this._queue.started) {
	        return this;
	    }
	
	    // notify of start
	    this.emit('start', this);
	
	    // update loading state
	    this.loading = true;
	
	    // start the internal queue
	    for (var i = 0; i < this._buffer.length; ++i) {
	        this._queue.push(this._buffer[i]);
	    }
	
	    // empty the buffer
	    this._buffer.length = 0;
	
	    return this;
	};
	
	/**
	 * Prepares a url for usage based on the configuration of this object
	 *
	 * @private
	 * @param {string} url - The url to prepare.
	 * @return {string} The prepared url.
	 */
	Loader.prototype._prepareUrl = function (url) {
	    var parsedUrl = parseUri(url, { strictMode: true });
	
	    // absolute url, just use it as is.
	    if (parsedUrl.protocol || !parsedUrl.path || parsedUrl.path.indexOf('//') === 0) {
	        return url;
	    }
	
	    // if baseUrl doesn't end in slash and url doesn't start with slash, then add a slash inbetween
	    if (this.baseUrl.length
	        && this.baseUrl.lastIndexOf('/') !== this.baseUrl.length - 1
	        && url.charAt(0) !== '/'
	    ) {
	        return this.baseUrl + '/' + url;
	    }
	
	    return this.baseUrl + url;
	};
	
	/**
	 * Loads a single resource.
	 *
	 * @private
	 * @param {Resource} resource - The resource to load.
	 * @param {function} dequeue - The function to call when we need to dequeue this item.
	 */
	Loader.prototype._loadResource = function (resource, dequeue) {
	    var self = this;
	
	    resource._dequeue = dequeue;
	
	    // run before middleware
	    async.eachSeries(
	        this._beforeMiddleware,
	        function (fn, next) {
	            fn.call(self, resource, function () {
	                // if the before middleware marks the resource as complete,
	                // break and don't process any more before middleware
	                next(resource.isComplete ? {} : null);
	            });
	        },
	        function () {
	            // resource.on('progress', self.emit.bind(self, 'progress'));
	
	            if (resource.isComplete) {
	                self._onLoad(resource);
	            }
	            else {
	                resource.once('complete', self._onLoad, self);
	                resource.load();
	            }
	        }
	    );
	};
	
	/**
	 * Called once each resource has loaded.
	 *
	 * @fires complete
	 * @private
	 */
	Loader.prototype._onComplete = function () {
	    this.loading = false;
	
	    this.emit('complete', this, this.resources);
	};
	
	/**
	 * Called each time a resources is loaded.
	 *
	 * @fires progress
	 * @fires error
	 * @fires load
	 * @private
	 * @param {Resource} resource - The resource that was loaded
	 */
	Loader.prototype._onLoad = function (resource) {
	    var self = this;
	
	    // run middleware, this *must* happen before dequeue so sub-assets get added properly
	    async.eachSeries(
	        this._afterMiddleware,
	        function (fn, next) {
	            fn.call(self, resource, next);
	        },
	        function () {
	            resource.emit('afterMiddleware', resource);
	
	            self._numToLoad--;
	
	            self.progress += self._progressChunk;
	            self.emit('progress', self, resource);
	
	            if (resource.error) {
	                self.emit('error', resource.error, self, resource);
	            }
	            else {
	                self.emit('load', self, resource);
	            }
	
	            // do completion check
	            if (self._numToLoad === 0) {
	                self.progress = 100;
	                self._onComplete();
	            }
	        }
	    );
	
	    // remove this resource from the async queue
	    resource._dequeue();
	};
	
	Loader.LOAD_TYPE = Resource.LOAD_TYPE;
	Loader.XHR_RESPONSE_TYPE = Resource.XHR_RESPONSE_TYPE;


/***/ },
/* 178 */
/***/ function(module, exports) {

	'use strict'
	
	module.exports = function parseURI (str, opts) {
	  opts = opts || {}
	
	  var o = {
	    key: ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'],
	    q: {
	      name: 'queryKey',
	      parser: /(?:^|&)([^&=]*)=?([^&]*)/g
	    },
	    parser: {
	      strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
	      loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
	    }
	  }
	
	  var m = o.parser[opts.strictMode ? 'strict' : 'loose'].exec(str)
	  var uri = {}
	  var i = 14
	
	  while (i--) uri[o.key[i]] = m[i] || ''
	
	  uri[o.q.name] = {}
	  uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
	    if ($1) uri[o.q.name][$1] = $2
	  })
	
	  return uri
	}


/***/ },
/* 179 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Smaller version of the async library constructs.
	 *
	 */
	
	module.exports = {
	    eachSeries: asyncEachSeries,
	    queue: asyncQueue
	};
	
	function _noop() { /* empty */ }
	
	/**
	 * Iterates an array in series.
	 *
	 * @param {*[]} array - Array to iterate.
	 * @param {function} iterator - Function to call for each element.
	 * @param {function} callback - Function to call when done, or on error.
	 */
	function asyncEachSeries(array, iterator, callback) {
	    var i = 0;
	    var len = array.length;
	
	    (function next(err) {
	        if (err || i === len) {
	            if (callback) {
	                callback(err);
	            }
	
	            return;
	        }
	
	        iterator(array[i++], next);
	    })();
	}
	
	/**
	 * Ensures a function is only called once.
	 *
	 * @param {function} fn - The function to wrap.
	 * @return {function} The wrapping function.
	 */
	function onlyOnce(fn) {
	    return function onceWrapper() {
	        if (fn === null) {
	            throw new Error('Callback was already called.');
	        }
	
	        var callFn = fn;
	
	        fn = null;
	        callFn.apply(this, arguments);
	    };
	}
	
	/**
	 * Async queue implementation,
	 *
	 * @param {function} worker - The worker function to call for each task.
	 * @param {number} concurrency - How many workers to run in parrallel.
	 * @return {*} The async queue object.
	 */
	function asyncQueue(worker, concurrency) {
	    if (concurrency == null) { // eslint-disable-line no-eq-null,eqeqeq
	        concurrency = 1;
	    }
	    else if (concurrency === 0) {
	        throw new Error('Concurrency must not be zero');
	    }
	
	    var workers = 0;
	    var q = {
	        _tasks: [],
	        concurrency: concurrency,
	        saturated: _noop,
	        unsaturated: _noop,
	        buffer: concurrency / 4,
	        empty: _noop,
	        drain: _noop,
	        error: _noop,
	        started: false,
	        paused: false,
	        push: function (data, callback) {
	            _insert(data, false, callback);
	        },
	        kill: function () {
	            q.drain = _noop;
	            q._tasks = [];
	        },
	        unshift: function (data, callback) {
	            _insert(data, true, callback);
	        },
	        process: function () {
	            while (!q.paused && workers < q.concurrency && q._tasks.length) {
	                var task = q._tasks.shift();
	
	                if (q._tasks.length === 0) {
	                    q.empty();
	                }
	
	                workers += 1;
	
	                if (workers === q.concurrency) {
	                    q.saturated();
	                }
	
	                worker(task.data, onlyOnce(_next(task)));
	            }
	        },
	        length: function () {
	            return q._tasks.length;
	        },
	        running: function () {
	            return workers;
	        },
	        idle: function () {
	            return q._tasks.length + workers === 0;
	        },
	        pause: function () {
	            if (q.paused === true) {
	                return;
	            }
	
	            q.paused = true;
	        },
	        resume: function () {
	            if (q.paused === false) {
	                return;
	            }
	
	            q.paused = false;
	
	            // Need to call q.process once per concurrent
	            // worker to preserve full concurrency after pause
	            for (var w = 1; w <= q.concurrency; w++) {
	                q.process();
	            }
	        }
	    };
	
	    function _insert(data, insertAtFront, callback) {
	        if (callback != null && typeof callback !== 'function') { // eslint-disable-line no-eq-null,eqeqeq
	            throw new Error('task callback must be a function');
	        }
	
	        q.started = true;
	
	        if (data == null && q.idle()) { // eslint-disable-line no-eq-null,eqeqeq
	            // call drain immediately if there are no tasks
	            setTimeout(function () {
	                q.drain();
	            }, 1);
	
	            return;
	        }
	
	        var item = {
	            data: data,
	            callback: typeof callback === 'function' ? callback : _noop
	        };
	
	        if (insertAtFront) {
	            q._tasks.unshift(item);
	        }
	        else {
	            q._tasks.push(item);
	        }
	
	        setTimeout(function () {
	            q.process();
	        }, 1);
	    }
	
	    function _next(task) {
	        return function () {
	            workers -= 1;
	
	            task.callback.apply(task, arguments);
	
	            if (arguments[0] != null) { // eslint-disable-line no-eq-null,eqeqeq
	                q.error(arguments[0], task.data);
	            }
	
	            if (workers <= (q.concurrency - q.buffer)) {
	                q.unsaturated();
	            }
	
	            if (q.idle()) {
	                q.drain();
	            }
	
	            q.process();
	        };
	    }
	
	    return q;
	}


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var EventEmitter    = __webpack_require__(42);
	var parseUri        = __webpack_require__(178);
	
	// tests is CORS is supported in XHR, if not we need to use XDR
	var useXdr = !!(window.XDomainRequest && !('withCredentials' in (new XMLHttpRequest())));
	var tempAnchor = null;
	
	// some status constants
	var STATUS_NONE = 0;
	var STATUS_OK = 200;
	var STATUS_EMPTY = 204;
	
	/**
	 * Manages the state and loading of a single resource represented by
	 * a single URL.
	 *
	 * @class
	 * @param {string} name - The name of the resource to load.
	 * @param {string|string[]} url - The url for this resource, for audio/video loads you can pass an array of sources.
	 * @param {object} [options] - The options for the load.
	 * @param {string|boolean} [options.crossOrigin] - Is this request cross-origin? Default is to determine automatically.
	 * @param {Resource.LOAD_TYPE} [options.loadType=Resource.LOAD_TYPE.XHR] - How should this resource be loaded?
	 * @param {Resource.XHR_RESPONSE_TYPE} [options.xhrType=Resource.XHR_RESPONSE_TYPE.DEFAULT] - How should the data being
	 *      loaded be interpreted when using XHR?
	 * @param {object} [options.metadata] - Extra info for middleware.
	 */
	function Resource(name, url, options) {
	    EventEmitter.call(this);
	
	    options = options || {};
	
	    if (typeof name !== 'string' || typeof url !== 'string') {
	        throw new Error('Both name and url are required for constructing a resource.');
	    }
	
	    /**
	     * The name of this resource.
	     *
	     * @member {string}
	     * @readonly
	     */
	    this.name = name;
	
	    /**
	     * The url used to load this resource.
	     *
	     * @member {string}
	     * @readonly
	     */
	    this.url = url;
	
	    /**
	     * Stores whether or not this url is a data url.
	     *
	     * @member {boolean}
	     * @readonly
	     */
	    this.isDataUrl = this.url.indexOf('data:') === 0;
	
	    /**
	     * The data that was loaded by the resource.
	     *
	     * @member {any}
	     */
	    this.data = null;
	
	    /**
	     * Is this request cross-origin? If unset, determined automatically.
	     *
	     * @member {string}
	     */
	    this.crossOrigin = options.crossOrigin === true ? 'anonymous' : options.crossOrigin;
	
	    /**
	     * The method of loading to use for this resource.
	     *
	     * @member {Resource.LOAD_TYPE}
	     */
	    this.loadType = options.loadType || this._determineLoadType();
	
	    /**
	     * The type used to load the resource via XHR. If unset, determined automatically.
	     *
	     * @member {string}
	     */
	    this.xhrType = options.xhrType;
	
	    /**
	     * Extra info for middleware, and controlling specifics about how the resource loads.
	     *
	     * Note that if you pass in a `loadElement`, the Resource class takes ownership of it.
	     * Meaning it will modify it as it sees fit.
	     *
	     * @member {object}
	     * @property {HTMLImageElement|HTMLAudioElement|HTMLVideoElement} [loadElement=null] - The
	     *  element to use for loading, instead of creating one.
	     * @property {boolean} [skipSource=false] - Skips adding source(s) to the load element. This
	     *  is useful if you want to pass in a `loadElement` that you already added load sources
	     *  to.
	     */
	    this.metadata = options.metadata || {};
	
	    /**
	     * The error that occurred while loading (if any).
	     *
	     * @member {Error}
	     * @readonly
	     */
	    this.error = null;
	
	    /**
	     * The XHR object that was used to load this resource. This is only set
	     * when `loadType` is `Resource.LOAD_TYPE.XHR`.
	     *
	     * @member {XMLHttpRequest}
	     */
	    this.xhr = null;
	
	    /**
	     * Describes if this resource was loaded as json. Only valid after the resource
	     * has completely loaded.
	     *
	     * @member {boolean}
	     */
	    this.isJson = false;
	
	    /**
	     * Describes if this resource was loaded as xml. Only valid after the resource
	     * has completely loaded.
	     *
	     * @member {boolean}
	     */
	    this.isXml = false;
	
	    /**
	     * Describes if this resource was loaded as an image tag. Only valid after the resource
	     * has completely loaded.
	     *
	     * @member {boolean}
	     */
	    this.isImage = false;
	
	    /**
	     * Describes if this resource was loaded as an audio tag. Only valid after the resource
	     * has completely loaded.
	     *
	     * @member {boolean}
	     */
	    this.isAudio = false;
	
	    /**
	     * Describes if this resource was loaded as a video tag. Only valid after the resource
	     * has completely loaded.
	     *
	     * @member {boolean}
	     */
	    this.isVideo = false;
	
	    /**
	     * Describes if this resource has finished loading. Is true when the resource has completely
	     * loaded.
	     *
	     * @member {boolean}
	     */
	    this.isComplete = false;
	
	    /**
	     * Describes if this resource is currently loading. Is true when the resource starts loading,
	     * and is false again when complete.
	     *
	     * @member {boolean}
	     */
	    this.isLoading = false;
	
	    /**
	     * The `dequeue` method that will be used a storage place for the async queue dequeue method
	     * used privately by the loader.
	     *
	     * @private
	     * @member {function}
	     */
	    this._dequeue = null;
	
	    /**
	     * The `complete` function bound to this resource's context.
	     *
	     * @private
	     * @member {function}
	     */
	    this._boundComplete = this.complete.bind(this);
	
	    /**
	     * The `_onError` function bound to this resource's context.
	     *
	     * @private
	     * @member {function}
	     */
	    this._boundOnError = this._onError.bind(this);
	
	    /**
	     * The `_onProgress` function bound to this resource's context.
	     *
	     * @private
	     * @member {function}
	     */
	    this._boundOnProgress = this._onProgress.bind(this);
	
	    // xhr callbacks
	    this._boundXhrOnError = this._xhrOnError.bind(this);
	    this._boundXhrOnAbort = this._xhrOnAbort.bind(this);
	    this._boundXhrOnLoad = this._xhrOnLoad.bind(this);
	    this._boundXdrOnTimeout = this._xdrOnTimeout.bind(this);
	
	    /**
	     * Emitted when the resource beings to load.
	     *
	     * @event start
	     * @memberof Resource#
	     */
	
	    /**
	     * Emitted each time progress of this resource load updates.
	     * Not all resources types and loader systems can support this event
	     * so sometimes it may not be available. If the resource
	     * is being loaded on a modern browser, using XHR, and the remote server
	     * properly sets Content-Length headers, then this will be available.
	     *
	     * @event progress
	     * @memberof Resource#
	     */
	
	    /**
	     * Emitted once this resource has loaded, if there was an error it will
	     * be in the `error` property.
	     *
	     * @event complete
	     * @memberof Resource#
	     */
	}
	
	Resource.prototype = Object.create(EventEmitter.prototype);
	Resource.prototype.constructor = Resource;
	module.exports = Resource;
	
	/**
	 * Marks the resource as complete.
	 *
	 * @fires complete
	 */
	Resource.prototype.complete = function () {
	    // TODO: Clean this up in a wrapper or something...gross....
	    if (this.data && this.data.removeEventListener) {
	        this.data.removeEventListener('error', this._boundOnError, false);
	        this.data.removeEventListener('load', this._boundComplete, false);
	        this.data.removeEventListener('progress', this._boundOnProgress, false);
	        this.data.removeEventListener('canplaythrough', this._boundComplete, false);
	    }
	
	    if (this.xhr) {
	        if (this.xhr.removeEventListener) {
	            this.xhr.removeEventListener('error', this._boundXhrOnError, false);
	            this.xhr.removeEventListener('abort', this._boundXhrOnAbort, false);
	            this.xhr.removeEventListener('progress', this._boundOnProgress, false);
	            this.xhr.removeEventListener('load', this._boundXhrOnLoad, false);
	        }
	        else {
	            this.xhr.onerror = null;
	            this.xhr.ontimeout = null;
	            this.xhr.onprogress = null;
	            this.xhr.onload = null;
	        }
	    }
	
	    if (this.isComplete) {
	        throw new Error('Complete called again for an already completed resource.');
	    }
	
	    this.isComplete = true;
	    this.isLoading = false;
	
	    this.emit('complete', this);
	};
	
	/**
	 * Aborts the loading of this resource, with an optional message.
	 *
	 * @param {string} message - The message to use for the error
	 */
	Resource.prototype.abort = function (message) {
	    // abort can be called multiple times, ignore subsequent calls.
	    if (this.error) {
	        return;
	    }
	
	    // store error
	    this.error = new Error(message);
	
	    // abort the actual loading
	    if (this.xhr) {
	        this.xhr.abort();
	    }
	    else if (this.xdr) {
	        this.xdr.abort();
	    }
	    else if (this.data) {
	        // single source
	        if (typeof this.data.src !== 'undefined') {
	            this.data.src = '';
	        }
	        // multi-source
	        else {
	            while (this.data.firstChild) {
	                this.data.removeChild(this.data.firstChild);
	            }
	        }
	    }
	
	    // done now.
	    this.complete();
	};
	
	/**
	 * Kicks off loading of this resource. This method is asynchronous.
	 *
	 * @fires start
	 * @param {function} [cb] - Optional callback to call once the resource is loaded.
	 */
	Resource.prototype.load = function (cb) {
	    if (this.isLoading) {
	        return;
	    }
	
	    if (this.isComplete) {
	        if (cb) {
	            var self = this;
	
	            setTimeout(function () {
	                cb(self);
	            }, 1);
	        }
	
	        return;
	    }
	    else if (cb) {
	        this.once('complete', cb);
	    }
	
	    this.isLoading = true;
	
	    this.emit('start', this);
	
	    // if unset, determine the value
	    if (this.crossOrigin === false || typeof this.crossOrigin !== 'string') {
	        this.crossOrigin = this._determineCrossOrigin(this.url);
	    }
	
	    switch (this.loadType) {
	        case Resource.LOAD_TYPE.IMAGE:
	            this._loadElement('image');
	            break;
	
	        case Resource.LOAD_TYPE.AUDIO:
	            this._loadSourceElement('audio');
	            break;
	
	        case Resource.LOAD_TYPE.VIDEO:
	            this._loadSourceElement('video');
	            break;
	
	        case Resource.LOAD_TYPE.XHR:
	            /* falls through */
	        default:
	            if (useXdr && this.crossOrigin) {
	                this._loadXdr();
	            }
	            else {
	                this._loadXhr();
	            }
	            break;
	    }
	};
	
	/**
	 * Loads this resources using an element that has a single source,
	 * like an HTMLImageElement.
	 *
	 * @private
	 * @param {string} type - The type of element to use.
	 */
	Resource.prototype._loadElement = function (type) {
	    if (this.metadata.loadElement) {
	        this.data = this.metadata.loadElement;
	    }
	    else if (type === 'image' && typeof window.Image !== 'undefined') {
	        this.data = new Image();
	    }
	    else {
	        this.data = document.createElement(type);
	    }
	
	    if (this.crossOrigin) {
	        this.data.crossOrigin = this.crossOrigin;
	    }
	
	    if (!this.metadata.skipSource) {
	        this.data.src = this.url;
	    }
	
	    var typeName = 'is' + type[0].toUpperCase() + type.substring(1);
	
	    if (this[typeName] === false) {
	        this[typeName] = true;
	    }
	
	    this.data.addEventListener('error', this._boundOnError, false);
	    this.data.addEventListener('load', this._boundComplete, false);
	    this.data.addEventListener('progress', this._boundOnProgress, false);
	};
	
	/**
	 * Loads this resources using an element that has multiple sources,
	 * like an HTMLAudioElement or HTMLVideoElement.
	 *
	 * @private
	 * @param {string} type - The type of element to use.
	 */
	Resource.prototype._loadSourceElement = function (type) {
	    if (this.metadata.loadElement) {
	        this.data = this.metadata.loadElement;
	    }
	    else if (type === 'audio' && typeof window.Audio !== 'undefined') {
	        this.data = new Audio();
	    }
	    else {
	        this.data = document.createElement(type);
	    }
	
	    if (this.data === null) {
	        this.abort('Unsupported element ' + type);
	
	        return;
	    }
	
	    if (!this.metadata.skipSource) {
	        // support for CocoonJS Canvas+ runtime, lacks document.createElement('source')
	        if (navigator.isCocoonJS) {
	            this.data.src = Array.isArray(this.url) ? this.url[0] : this.url;
	        }
	        else if (Array.isArray(this.url)) {
	            for (var i = 0; i < this.url.length; ++i) {
	                this.data.appendChild(this._createSource(type, this.url[i]));
	            }
	        }
	        else {
	            this.data.appendChild(this._createSource(type, this.url));
	        }
	    }
	
	    this['is' + type[0].toUpperCase() + type.substring(1)] = true;
	
	    this.data.addEventListener('error', this._boundOnError, false);
	    this.data.addEventListener('load', this._boundComplete, false);
	    this.data.addEventListener('progress', this._boundOnProgress, false);
	    this.data.addEventListener('canplaythrough', this._boundComplete, false);
	
	    this.data.load();
	};
	
	/**
	 * Loads this resources using an XMLHttpRequest.
	 *
	 * @private
	 */
	Resource.prototype._loadXhr = function () {
	    // if unset, determine the value
	    if (typeof this.xhrType !== 'string') {
	        this.xhrType = this._determineXhrType();
	    }
	
	    var xhr = this.xhr = new XMLHttpRequest();
	
	    // set the request type and url
	    xhr.open('GET', this.url, true);
	
	    // load json as text and parse it ourselves. We do this because some browsers
	    // *cough* safari *cough* can't deal with it.
	    if (this.xhrType === Resource.XHR_RESPONSE_TYPE.JSON || this.xhrType === Resource.XHR_RESPONSE_TYPE.DOCUMENT) {
	        xhr.responseType = Resource.XHR_RESPONSE_TYPE.TEXT;
	    }
	    else {
	        xhr.responseType = this.xhrType;
	    }
	
	    xhr.addEventListener('error', this._boundXhrOnError, false);
	    xhr.addEventListener('abort', this._boundXhrOnAbort, false);
	    xhr.addEventListener('progress', this._boundOnProgress, false);
	    xhr.addEventListener('load', this._boundXhrOnLoad, false);
	
	    xhr.send();
	};
	
	/**
	 * Loads this resources using an XDomainRequest. This is here because we need to support IE9 (gross).
	 *
	 * @private
	 */
	Resource.prototype._loadXdr = function () {
	    // if unset, determine the value
	    if (typeof this.xhrType !== 'string') {
	        this.xhrType = this._determineXhrType();
	    }
	
	    var xdr = this.xhr = new XDomainRequest();
	
	    // XDomainRequest has a few quirks. Occasionally it will abort requests
	    // A way to avoid this is to make sure ALL callbacks are set even if not used
	    // More info here: http://stackoverflow.com/questions/15786966/xdomainrequest-aborts-post-on-ie-9
	    xdr.timeout = 5000;
	
	    xdr.onerror = this._boundXhrOnError;
	    xdr.ontimeout = this._boundXdrOnTimeout;
	    xdr.onprogress = this._boundOnProgress;
	    xdr.onload = this._boundXhrOnLoad;
	
	    xdr.open('GET', this.url, true);
	
	    // Note: The xdr.send() call is wrapped in a timeout to prevent an
	    // issue with the interface where some requests are lost if multiple
	    // XDomainRequests are being sent at the same time.
	    // Some info here: https://github.com/photonstorm/phaser/issues/1248
	    setTimeout(function () {
	        xdr.send();
	    }, 0);
	};
	
	/**
	 * Creates a source used in loading via an element.
	 *
	 * @private
	 * @param {string} type - The element type (video or audio).
	 * @param {string} url - The source URL to load from.
	 * @param {string} [mime] - The mime type of the video
	 * @return {HTMLSourceElement} The source element.
	 */
	Resource.prototype._createSource = function (type, url, mime) {
	    if (!mime) {
	        mime = type + '/' + url.substr(url.lastIndexOf('.') + 1);
	    }
	
	    var source = document.createElement('source');
	
	    source.src = url;
	    source.type = mime;
	
	    return source;
	};
	
	/**
	 * Called if a load errors out.
	 *
	 * @param {Event} event - The error event from the element that emits it.
	 * @private
	 */
	Resource.prototype._onError = function (event) {
	    this.abort('Failed to load element using ' + event.target.nodeName);
	};
	
	/**
	 * Called if a load progress event fires for xhr/xdr.
	 *
	 * @fires progress
	 * @private
	 * @param {XMLHttpRequestProgressEvent|Event} event - Progress event.
	 */
	Resource.prototype._onProgress = function (event) {
	    if (event && event.lengthComputable) {
	        this.emit('progress', this, event.loaded / event.total);
	    }
	};
	
	/**
	 * Called if an error event fires for xhr/xdr.
	 *
	 * @private
	 * @param {XMLHttpRequestErrorEvent|Event} event - Error event.
	 */
	Resource.prototype._xhrOnError = function () {
	    var xhr = this.xhr;
	
	    this.abort(reqType(xhr) + ' Request failed. Status: ' + xhr.status + ', text: "' + xhr.statusText + '"');
	};
	
	/**
	 * Called if an abort event fires for xhr.
	 *
	 * @private
	 * @param {XMLHttpRequestAbortEvent} event - Abort Event
	 */
	Resource.prototype._xhrOnAbort = function () {
	    this.abort(reqType(this.xhr) + ' Request was aborted by the user.');
	};
	
	/**
	 * Called if a timeout event fires for xdr.
	 *
	 * @private
	 * @param {Event} event - Timeout event.
	 */
	Resource.prototype._xdrOnTimeout = function () {
	    this.abort(reqType(this.xhr) + ' Request timed out.');
	};
	
	/**
	 * Called when data successfully loads from an xhr/xdr request.
	 *
	 * @private
	 * @param {XMLHttpRequestLoadEvent|Event} event - Load event
	 */
	Resource.prototype._xhrOnLoad = function () {
	    var xhr = this.xhr;
	    var status = typeof xhr.status === 'undefined' ? xhr.status : STATUS_OK; // XDR has no `.status`, assume 200.
	
	    // status can be 0 when using the file:// protocol, also check if a response was found
	    if (status === STATUS_OK || status === STATUS_EMPTY || (status === STATUS_NONE && xhr.responseText.length > 0)) {
	        // if text, just return it
	        if (this.xhrType === Resource.XHR_RESPONSE_TYPE.TEXT) {
	            this.data = xhr.responseText;
	        }
	        // if json, parse into json object
	        else if (this.xhrType === Resource.XHR_RESPONSE_TYPE.JSON) {
	            try {
	                this.data = JSON.parse(xhr.responseText);
	                this.isJson = true;
	            }
	            catch (e) {
	                this.abort('Error trying to parse loaded json:', e);
	
	                return;
	            }
	        }
	        // if xml, parse into an xml document or div element
	        else if (this.xhrType === Resource.XHR_RESPONSE_TYPE.DOCUMENT) {
	            try {
	                if (window.DOMParser) {
	                    var domparser = new DOMParser();
	
	                    this.data = domparser.parseFromString(xhr.responseText, 'text/xml');
	                }
	                else {
	                    var div = document.createElement('div');
	
	                    div.innerHTML = xhr.responseText;
	                    this.data = div;
	                }
	                this.isXml = true;
	            }
	            catch (e) {
	                this.abort('Error trying to parse loaded xml:', e);
	
	                return;
	            }
	        }
	        // other types just return the response
	        else {
	            this.data = xhr.response || xhr.responseText;
	        }
	    }
	    else {
	        this.abort('[' + xhr.status + ']' + xhr.statusText + ':' + xhr.responseURL);
	
	        return;
	    }
	
	    this.complete();
	};
	
	/**
	 * Sets the `crossOrigin` property for this resource based on if the url
	 * for this resource is cross-origin. If crossOrigin was manually set, this
	 * function does nothing.
	 *
	 * @private
	 * @param {string} url - The url to test.
	 * @param {object} [loc=window.location] - The location object to test against.
	 * @return {string} The crossOrigin value to use (or empty string for none).
	 */
	Resource.prototype._determineCrossOrigin = function (url, loc) {
	    // data: and javascript: urls are considered same-origin
	    if (url.indexOf('data:') === 0) {
	        return '';
	    }
	
	    // default is window.location
	    loc = loc || window.location;
	
	    if (!tempAnchor) {
	        tempAnchor = document.createElement('a');
	    }
	
	    // let the browser determine the full href for the url of this resource and then
	    // parse with the node url lib, we can't use the properties of the anchor element
	    // because they don't work in IE9 :(
	    tempAnchor.href = url;
	    url = parseUri(tempAnchor.href, { strictMode: true });
	
	    var samePort = (!url.port && loc.port === '') || (url.port === loc.port);
	    var protocol = url.protocol ? url.protocol + ':' : '';
	
	    // if cross origin
	    if (url.host !== loc.hostname || !samePort || protocol !== loc.protocol) {
	        return 'anonymous';
	    }
	
	    return '';
	};
	
	/**
	 * Determines the responseType of an XHR request based on the extension of the
	 * resource being loaded.
	 *
	 * @private
	 * @return {Resource.XHR_RESPONSE_TYPE} The responseType to use.
	 */
	Resource.prototype._determineXhrType = function () {
	    return Resource._xhrTypeMap[this._getExtension()] || Resource.XHR_RESPONSE_TYPE.TEXT;
	};
	
	Resource.prototype._determineLoadType = function () {
	    return Resource._loadTypeMap[this._getExtension()] || Resource.LOAD_TYPE.XHR;
	};
	
	Resource.prototype._getExtension = function () {
	    var url = this.url;
	    var ext = '';
	
	    if (this.isDataUrl) {
	        var slashIndex = url.indexOf('/');
	
	        ext = url.substring(slashIndex + 1, url.indexOf(';', slashIndex));
	    }
	    else {
	        var queryStart = url.indexOf('?');
	
	        if (queryStart !== -1) {
	            url = url.substring(0, queryStart);
	        }
	
	        ext = url.substring(url.lastIndexOf('.') + 1);
	    }
	
	    return ext.toLowerCase();
	};
	
	/**
	 * Determines the mime type of an XHR request based on the responseType of
	 * resource being loaded.
	 *
	 * @private
	 * @param {Resource.XHR_RESPONSE_TYPE} type - The type to get a mime type for.
	 * @return {string} The mime type to use.
	 */
	Resource.prototype._getMimeFromXhrType = function (type) {
	    switch (type) {
	        case Resource.XHR_RESPONSE_TYPE.BUFFER:
	            return 'application/octet-binary';
	
	        case Resource.XHR_RESPONSE_TYPE.BLOB:
	            return 'application/blob';
	
	        case Resource.XHR_RESPONSE_TYPE.DOCUMENT:
	            return 'application/xml';
	
	        case Resource.XHR_RESPONSE_TYPE.JSON:
	            return 'application/json';
	
	        case Resource.XHR_RESPONSE_TYPE.DEFAULT:
	        case Resource.XHR_RESPONSE_TYPE.TEXT:
	            /* falls through */
	        default:
	            return 'text/plain';
	
	    }
	};
	
	/**
	 * Quick helper to get string xhr type.
	 *
	 * @ignore
	 * @param {XMLHttpRequest|XDomainRequest} xhr - The request to check.
	 * @return {string} The type.
	 */
	function reqType(xhr) {
	    return xhr.toString().replace('object ', '');
	}
	
	/**
	 * The types of loading a resource can use.
	 *
	 * @static
	 * @readonly
	 * @enum {number}
	 */
	Resource.LOAD_TYPE = {
	    /** Uses XMLHttpRequest to load the resource. */
	    XHR:    1,
	    /** Uses an `Image` object to load the resource. */
	    IMAGE:  2,
	    /** Uses an `Audio` object to load the resource. */
	    AUDIO:  3,
	    /** Uses a `Video` object to load the resource. */
	    VIDEO:  4
	};
	
	/**
	 * The XHR ready states, used internally.
	 *
	 * @static
	 * @readonly
	 * @enum {string}
	 */
	Resource.XHR_RESPONSE_TYPE = {
	    /** defaults to text */
	    DEFAULT:    'text',
	    /** ArrayBuffer */
	    BUFFER:     'arraybuffer',
	    /** Blob */
	    BLOB:       'blob',
	    /** Document */
	    DOCUMENT:   'document',
	    /** Object */
	    JSON:       'json',
	    /** String */
	    TEXT:       'text'
	};
	
	Resource._loadTypeMap = {
	    gif:      Resource.LOAD_TYPE.IMAGE,
	    png:      Resource.LOAD_TYPE.IMAGE,
	    bmp:      Resource.LOAD_TYPE.IMAGE,
	    jpg:      Resource.LOAD_TYPE.IMAGE,
	    jpeg:     Resource.LOAD_TYPE.IMAGE,
	    tif:      Resource.LOAD_TYPE.IMAGE,
	    tiff:     Resource.LOAD_TYPE.IMAGE,
	    webp:     Resource.LOAD_TYPE.IMAGE,
	    tga:      Resource.LOAD_TYPE.IMAGE,
	    'svg+xml':  Resource.LOAD_TYPE.IMAGE
	};
	
	Resource._xhrTypeMap = {
	    // xml
	    xhtml:    Resource.XHR_RESPONSE_TYPE.DOCUMENT,
	    html:     Resource.XHR_RESPONSE_TYPE.DOCUMENT,
	    htm:      Resource.XHR_RESPONSE_TYPE.DOCUMENT,
	    xml:      Resource.XHR_RESPONSE_TYPE.DOCUMENT,
	    tmx:      Resource.XHR_RESPONSE_TYPE.DOCUMENT,
	    tsx:      Resource.XHR_RESPONSE_TYPE.DOCUMENT,
	    svg:      Resource.XHR_RESPONSE_TYPE.DOCUMENT,
	
	    // images
	    gif:      Resource.XHR_RESPONSE_TYPE.BLOB,
	    png:      Resource.XHR_RESPONSE_TYPE.BLOB,
	    bmp:      Resource.XHR_RESPONSE_TYPE.BLOB,
	    jpg:      Resource.XHR_RESPONSE_TYPE.BLOB,
	    jpeg:     Resource.XHR_RESPONSE_TYPE.BLOB,
	    tif:      Resource.XHR_RESPONSE_TYPE.BLOB,
	    tiff:     Resource.XHR_RESPONSE_TYPE.BLOB,
	    webp:     Resource.XHR_RESPONSE_TYPE.BLOB,
	    tga:      Resource.XHR_RESPONSE_TYPE.BLOB,
	
	    // json
	    json:     Resource.XHR_RESPONSE_TYPE.JSON,
	
	    // text
	    text:     Resource.XHR_RESPONSE_TYPE.TEXT,
	    txt:      Resource.XHR_RESPONSE_TYPE.TEXT
	};
	
	/**
	 * Sets the load type to be used for a specific extension.
	 *
	 * @static
	 * @param {string} extname - The extension to set the type for, e.g. "png" or "fnt"
	 * @param {Resource.LOAD_TYPE} loadType - The load type to set it to.
	 */
	Resource.setExtensionLoadType = function (extname, loadType) {
	    setExtMap(Resource._loadTypeMap, extname, loadType);
	};
	
	/**
	 * Sets the load type to be used for a specific extension.
	 *
	 * @static
	 * @param {string} extname - The extension to set the type for, e.g. "png" or "fnt"
	 * @param {Resource.XHR_RESPONSE_TYPE} xhrType - The xhr type to set it to.
	 */
	Resource.setExtensionXhrType = function (extname, xhrType) {
	    setExtMap(Resource._xhrTypeMap, extname, xhrType);
	};
	
	function setExtMap(map, extname, val) {
	    if (extname && extname.indexOf('.') === 0) {
	        extname = extname.substring(1);
	    }
	
	    if (!extname) {
	        return;
	    }
	
	    map[extname] = val;
	}


/***/ },
/* 181 */
/***/ function(module, exports) {

	'use strict';
	
	// a simple in-memory cache for resources
	var cache = {};
	
	module.exports = function () {
	    return function (resource, next) {
	        // if cached, then set data and complete the resource
	        if (cache[resource.url]) {
	            resource.data = cache[resource.url];
	            resource.complete(); // marks resource load complete and stops processing before middlewares
	        }
	        // if not cached, wait for complete and store it in the cache.
	        else {
	            resource.once('complete', function () {
	                cache[this.url] = this.data;
	            });
	        }
	
	        next();
	    };
	};


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Resource = __webpack_require__(180);
	var b64 = __webpack_require__(183);
	
	var Url = window.URL || window.webkitURL;
	
	// a middleware for transforming XHR loaded Blobs into more useful objects
	
	module.exports = function () {
	    return function (resource, next) {
	        if (!resource.data) {
	            next();
	
	            return;
	        }
	
	        // if this was an XHR load of a blob
	        if (resource.xhr && resource.xhrType === Resource.XHR_RESPONSE_TYPE.BLOB) {
	            // if there is no blob support we probably got a binary string back
	            if (!window.Blob || typeof resource.data === 'string') {
	                var type = resource.xhr.getResponseHeader('content-type');
	
	                // this is an image, convert the binary string into a data url
	                if (type && type.indexOf('image') === 0) {
	                    resource.data = new Image();
	                    resource.data.src = 'data:' + type + ';base64,' + b64.encodeBinary(resource.xhr.responseText);
	
	                    resource.isImage = true;
	
	                    // wait until the image loads and then callback
	                    resource.data.onload = function () {
	                        resource.data.onload = null;
	
	                        next();
	                    };
	
	                    // next will be called on load
	                    return;
	                }
	            }
	            // if content type says this is an image, then we should transform the blob into an Image object
	            else if (resource.data.type.indexOf('image') === 0) {
	                var src = Url.createObjectURL(resource.data);
	
	                resource.blob = resource.data;
	                resource.data = new Image();
	                resource.data.src = src;
	
	                resource.isImage = true;
	
	                // cleanup the no longer used blob after the image loads
	                resource.data.onload = function () {
	                    Url.revokeObjectURL(src);
	                    resource.data.onload = null;
	
	                    next();
	                };
	
	                // next will be called on load.
	                return;
	            }
	        }
	
	        next();
	    };
	};


/***/ },
/* 183 */
/***/ function(module, exports) {

	/* eslint no-magic-numbers: 0 */
	'use strict';
	
	module.exports = {
	    // private property
	    _keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
	
	    encodeBinary: function (input) {
	        var output = '';
	        var bytebuffer;
	        var encodedCharIndexes = new Array(4);
	        var inx = 0;
	        var jnx = 0;
	        var paddingBytes = 0;
	
	        while (inx < input.length) {
	            // Fill byte buffer array
	            bytebuffer = new Array(3);
	
	            for (jnx = 0; jnx < bytebuffer.length; jnx++) {
	                if (inx < input.length) {
	                    // throw away high-order byte, as documented at:
	                    // https://developer.mozilla.org/En/Using_XMLHttpRequest#Handling_binary_data
	                    bytebuffer[jnx] = input.charCodeAt(inx++) & 0xff;
	                }
	                else {
	                    bytebuffer[jnx] = 0;
	                }
	            }
	
	            // Get each encoded character, 6 bits at a time
	            // index 1: first 6 bits
	            encodedCharIndexes[0] = bytebuffer[0] >> 2;
	            // index 2: second 6 bits (2 least significant bits from input byte 1 + 4 most significant bits from byte 2)
	            encodedCharIndexes[1] = ((bytebuffer[0] & 0x3) << 4) | (bytebuffer[1] >> 4);
	            // index 3: third 6 bits (4 least significant bits from input byte 2 + 2 most significant bits from byte 3)
	            encodedCharIndexes[2] = ((bytebuffer[1] & 0x0f) << 2) | (bytebuffer[2] >> 6);
	            // index 3: forth 6 bits (6 least significant bits from input byte 3)
	            encodedCharIndexes[3] = bytebuffer[2] & 0x3f;
	
	            // Determine whether padding happened, and adjust accordingly
	            paddingBytes = inx - (input.length - 1);
	            switch (paddingBytes) {
	                case 2:
	                    // Set last 2 characters to padding char
	                    encodedCharIndexes[3] = 64;
	                    encodedCharIndexes[2] = 64;
	                    break;
	
	                case 1:
	                    // Set last character to padding char
	                    encodedCharIndexes[3] = 64;
	                    break;
	
	                default:
	                    break; // No padding - proceed
	            }
	
	            // Now we will grab each appropriate character out of our keystring
	            // based on our index array and append it to the output string
	            for (jnx = 0; jnx < encodedCharIndexes.length; jnx++) {
	                output += this._keyStr.charAt(encodedCharIndexes[jnx]);
	            }
	        }
	
	        return output;
	    }
	};


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	exports.default = function () {
	    return function textureParser(resource, next) {
	        // create a new texture if the data is an Image object
	        if (resource.data && resource.isImage) {
	            var baseTexture = new core.BaseTexture(resource.data, null, core.utils.getResolutionOfUrl(resource.url));
	
	            baseTexture.imageUrl = resource.url;
	            resource.texture = new core.Texture(baseTexture);
	
	            // lets also add the frame to pixi's global cache for fromFrame and fromImage fucntions
	            core.utils.BaseTextureCache[resource.name] = baseTexture;
	            core.utils.TextureCache[resource.name] = resource.texture;
	
	            // also add references by url if they are different.
	            if (resource.name !== resource.url) {
	                core.utils.BaseTextureCache[resource.url] = baseTexture;
	                core.utils.TextureCache[resource.url] = resource.texture;
	            }
	        }
	
	        next();
	    };
	};
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	//# sourceMappingURL=textureParser.js.map

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	exports.default = function () {
	    return function spritesheetParser(resource, next) {
	        var resourcePath = void 0;
	        var imageResourceName = resource.name + '_image';
	
	        // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists
	        if (!resource.data || !resource.isJson || !resource.data.frames || this.resources[imageResourceName]) {
	            next();
	
	            return;
	        }
	
	        var loadOptions = {
	            crossOrigin: resource.crossOrigin,
	            loadType: _resourceLoader.Resource.LOAD_TYPE.IMAGE,
	            metadata: resource.metadata.imageMetadata
	        };
	
	        // Prepend url path unless the resource image is a data url
	        if (resource.isDataUrl) {
	            resourcePath = resource.data.meta.image;
	        } else {
	            resourcePath = _path2.default.dirname(resource.url.replace(this.baseUrl, '')) + '/' + resource.data.meta.image;
	        }
	
	        // load the image for this sheet
	        this.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res) {
	            resource.textures = {};
	
	            var frames = resource.data.frames;
	            var frameKeys = Object.keys(frames);
	            var baseTexture = res.texture.baseTexture;
	            var resolution = core.utils.getResolutionOfUrl(resource.url);
	            var scale = resource.data.meta.scale;
	
	            // for now (to keep things compatible) resolution overrides scale
	            // Support scale field on spritesheet
	            if (resolution === 1 && scale !== undefined && scale !== 1) {
	                baseTexture.resolution = resolution = scale;
	                baseTexture.update();
	            }
	
	            var batchIndex = 0;
	
	            function processFrames(initialFrameIndex, maxFrames) {
	                var frameIndex = initialFrameIndex;
	
	                while (frameIndex - initialFrameIndex < maxFrames && frameIndex < frameKeys.length) {
	                    var i = frameKeys[frameIndex];
	                    var rect = frames[i].frame;
	
	                    if (rect) {
	                        var frame = null;
	                        var trim = null;
	                        var orig = new core.Rectangle(0, 0, frames[i].sourceSize.w / resolution, frames[i].sourceSize.h / resolution);
	
	                        if (frames[i].rotated) {
	                            frame = new core.Rectangle(rect.x / resolution, rect.y / resolution, rect.h / resolution, rect.w / resolution);
	                        } else {
	                            frame = new core.Rectangle(rect.x / resolution, rect.y / resolution, rect.w / resolution, rect.h / resolution);
	                        }
	
	                        //  Check to see if the sprite is trimmed
	                        if (frames[i].trimmed) {
	                            trim = new core.Rectangle(frames[i].spriteSourceSize.x / resolution, frames[i].spriteSourceSize.y / resolution, rect.w / resolution, rect.h / resolution);
	                        }
	
	                        resource.textures[i] = new core.Texture(baseTexture, frame, orig, trim, frames[i].rotated ? 2 : 0);
	
	                        // lets also add the frame to pixi's global cache for fromFrame and fromImage functions
	                        core.utils.TextureCache[i] = resource.textures[i];
	                    }
	
	                    frameIndex++;
	                }
	            }
	
	            function shouldProcessNextBatch() {
	                return batchIndex * BATCH_SIZE < frameKeys.length;
	            }
	
	            function processNextBatch(done) {
	                processFrames(batchIndex * BATCH_SIZE, BATCH_SIZE);
	                batchIndex++;
	                setTimeout(done, 0);
	            }
	
	            function iteration() {
	                processNextBatch(function () {
	                    if (shouldProcessNextBatch()) {
	                        iteration();
	                    } else {
	                        next();
	                    }
	                });
	            }
	
	            if (frameKeys.length <= BATCH_SIZE) {
	                processFrames(0, BATCH_SIZE);
	                next();
	            } else {
	                iteration();
	            }
	        });
	    };
	};
	
	var _resourceLoader = __webpack_require__(176);
	
	var _path = __webpack_require__(86);
	
	var _path2 = _interopRequireDefault(_path);
	
	var _core = __webpack_require__(11);
	
	var core = _interopRequireWildcard(_core);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var BATCH_SIZE = 1000;
	//# sourceMappingURL=spritesheetParser.js.map

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.parse = parse;
	
	exports.default = function () {
	    return function bitmapFontParser(resource, next) {
	        // skip if no data or not xml data
	        if (!resource.data || !resource.isXml) {
	            next();
	
	            return;
	        }
	
	        // skip if not bitmap font data, using some silly duck-typing
	        if (resource.data.getElementsByTagName('page').length === 0 || resource.data.getElementsByTagName('info').length === 0 || resource.data.getElementsByTagName('info')[0].getAttribute('face') === null) {
	            next();
	
	            return;
	        }
	
	        var xmlUrl = !resource.isDataUrl ? path.dirname(resource.url) : '';
	
	        if (resource.isDataUrl) {
	            if (xmlUrl === '.') {
	                xmlUrl = '';
	            }
	
	            if (this.baseUrl && xmlUrl) {
	                // if baseurl has a trailing slash then add one to xmlUrl so the replace works below
	                if (this.baseUrl.charAt(this.baseUrl.length - 1) === '/') {
	                    xmlUrl += '/';
	                }
	
	                // remove baseUrl from xmlUrl
	                xmlUrl = xmlUrl.replace(this.baseUrl, '');
	            }
	        }
	
	        // if there is an xmlUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.
	        if (xmlUrl && xmlUrl.charAt(xmlUrl.length - 1) !== '/') {
	            xmlUrl += '/';
	        }
	
	        var textureUrl = xmlUrl + resource.data.getElementsByTagName('page')[0].getAttribute('file');
	
	        if (_core.utils.TextureCache[textureUrl]) {
	            // reuse existing texture
	            parse(resource, _core.utils.TextureCache[textureUrl]);
	            next();
	        } else {
	            var loadOptions = {
	                crossOrigin: resource.crossOrigin,
	                loadType: _resourceLoader.Resource.LOAD_TYPE.IMAGE,
	                metadata: resource.metadata.imageMetadata
	            };
	
	            // load the texture for the font
	            this.add(resource.name + '_image', textureUrl, loadOptions, function (res) {
	                parse(resource, res.texture);
	                next();
	            });
	        }
	    };
	};
	
	var _path = __webpack_require__(86);
	
	var path = _interopRequireWildcard(_path);
	
	var _core = __webpack_require__(11);
	
	var _resourceLoader = __webpack_require__(176);
	
	var _extras = __webpack_require__(131);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function parse(resource, texture) {
	    var data = {};
	    var info = resource.data.getElementsByTagName('info')[0];
	    var common = resource.data.getElementsByTagName('common')[0];
	
	    data.font = info.getAttribute('face');
	    data.size = parseInt(info.getAttribute('size'), 10);
	    data.lineHeight = parseInt(common.getAttribute('lineHeight'), 10);
	    data.chars = {};
	
	    // parse letters
	    var letters = resource.data.getElementsByTagName('char');
	
	    for (var i = 0; i < letters.length; i++) {
	        var charCode = parseInt(letters[i].getAttribute('id'), 10);
	
	        var textureRect = new _core.Rectangle(parseInt(letters[i].getAttribute('x'), 10) + texture.frame.x, parseInt(letters[i].getAttribute('y'), 10) + texture.frame.y, parseInt(letters[i].getAttribute('width'), 10), parseInt(letters[i].getAttribute('height'), 10));
	
	        data.chars[charCode] = {
	            xOffset: parseInt(letters[i].getAttribute('xoffset'), 10),
	            yOffset: parseInt(letters[i].getAttribute('yoffset'), 10),
	            xAdvance: parseInt(letters[i].getAttribute('xadvance'), 10),
	            kerning: {},
	            texture: new _core.Texture(texture.baseTexture, textureRect)
	
	        };
	    }
	
	    // parse kernings
	    var kernings = resource.data.getElementsByTagName('kerning');
	
	    for (var _i = 0; _i < kernings.length; _i++) {
	        var first = parseInt(kernings[_i].getAttribute('first'), 10);
	        var second = parseInt(kernings[_i].getAttribute('second'), 10);
	        var amount = parseInt(kernings[_i].getAttribute('amount'), 10);
	
	        if (data.chars[second]) {
	            data.chars[second].kerning[first] = amount;
	        }
	    }
	
	    resource.bitmapFont = data;
	
	    // I'm leaving this as a temporary fix so we can test the bitmap fonts in v3
	    // but it's very likely to change
	    _extras.BitmapText.fonts[data.font] = data;
	}
	//# sourceMappingURL=bitmapFontParser.js.map

/***/ },
/* 187 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * @static
	 * @method arrayFind
	 */
	function arrayFind() {
	  if (!Array.prototype.find) {
	    Array.prototype.find = function (predicate) {
	      if (this === null) {
	        throw new TypeError('Array.prototype.find called on null or undefined');
	      }
	      if (typeof predicate !== 'function') {
	        throw new TypeError('predicate must be a function');
	      }
	      var list = Object(this);
	      var length = list.length >>> 0;
	      var thisArg = arguments[1];
	      var value = void 0;
	
	      for (var i = 0; i < length; i++) {
	        value = list[i];
	        if (predicate.call(thisArg, value, i, list)) {
	          return value;
	        }
	      }
	      return undefined;
	    };
	  }
	}
	
	/**
	 * Object.assign IE11 polyfill. Credits to Mozillas folk:
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
	 *
	 * @method objectAssign
	 * @static
	 */
	function objectAssign() {
	  if (typeof Object.assign != 'function') {
	    // eslint-disable-line eqeqeq
	    (function () {
	      Object.assign = function (target) {
	        if (target === undefined || target === null) {
	          throw new TypeError('Cannot convert undefined or null to object');
	        }
	
	        var output = Object(target);
	        for (var index = 1; index < arguments.length; index++) {
	          var source = arguments[index];
	          if (source !== undefined && source !== null) {
	            for (var nextKey in source) {
	              if (source.hasOwnProperty(nextKey)) {
	                output[nextKey] = source[nextKey];
	              }
	            }
	          }
	        }
	        return output;
	      };
	    })();
	  }
	}
	// purely for internet explorer. Though I think this issue is only in EI11,not in edge?
	function es6String() {
	  /*! https://mths.be/repeat v0.2.0 by @mathias */
	  if (!String.prototype.repeat) {
	    (function () {
	      'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
	
	      var result = void 0;
	
	      var defineProperty = function () {
	        // IE 8 only supports `Object.defineProperty` on DOM elements
	        try {
	          var object = {};
	          var _defineProperty = Object.defineProperty;
	          result = _defineProperty(object, object, object) && _defineProperty;
	        } catch (error) {
	          return result;
	        }
	        return result;
	      }();
	      var repeat = function repeat(count) {
	        if (this == null) {
	          // eslint-disable-line eqeqeq
	          throw TypeError();
	        }
	        var string = String(this);
	        // `ToInteger`
	        var n = count ? Number(count) : 0;
	        if (n != n) {
	          // eslint-disable-line eqeqeq
	          n = 0;
	        }
	        // Account for out-of-bounds indices
	        if (n < 0 || n == Infinity) {
	          // eslint-disable-line eqeqeq
	          throw RangeError();
	        }
	        var result = '';
	        while (n) {
	          if (n % 2 == 1) {
	            // eslint-disable-line eqeqeq
	            result += string;
	          }
	          if (n > 1) {
	            string += string;
	          }
	          n >>= 1;
	        }
	        return result;
	      };
	      if (defineProperty) {
	        defineProperty(String.prototype, 'repeat', {
	          value: repeat,
	          configurable: true,
	          writable: true
	        });
	      } else {
	        String.prototype.repeat = repeat;
	      }
	    })();
	  }
	}
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf
	function setPrototypeOf() {
	  Object.setPrototypeOf = Object.setPrototypeOf || function (obj, proto) {
	    obj.__proto__ = proto;
	    return obj;
	  };
	}
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = {
	  arrayFind: arrayFind,
	  objectAssign: objectAssign,
	  es6String: es6String,
	  setPrototypeOf: setPrototypeOf
	};
	module.exports = exports['default'];

/***/ },
/* 188 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * @class utils.resize
	 * @return {Object}      toggleFullScreen, setToFullSize, getWindowSize
	 */
	
	/**
	 * @method toggleFullScreen
	 */
	function toggleFullScreen() {
	  var elem = document.body; // Make the body go full screen.
	  var isInFullScreen = document.fullScreenElement && document.fullScreenElement !== null || document.mozFullScreen || document.webkitIsFullScreen;
	
	  isInFullScreen ? cancelFullScreen(document) : requestFullScreen(elem);
	
	  return false;
	
	  /*-------------------------
	  --------- PRIVATE ---------
	  -------------------------*/
	  /* global ActiveXObject */
	  function cancelFullScreen(el) {
	    var requestMethod = el.cancelFullScreen || el.webkitCancelFullScreen || el.mozCancelFullScreen || el.exitFullscreen;
	    if (requestMethod) {
	      // cancel full screen.
	      requestMethod.call(el);
	    } else if (typeof window.ActiveXObject !== 'undefined') {
	      // Older IE.
	      var wscript = new ActiveXObject('WScript.Shell');
	      wscript !== null && wscript.SendKeys('{F11}');
	    }
	  }
	  function requestFullScreen(el) {
	    // Supports most browsers and their versions.
	    var requestMethod = el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen || el.msRequestFullScreen;
	
	    if (requestMethod) {
	      // Native full screen.
	      requestMethod.call(el);
	    } else if (typeof window.ActiveXObject !== 'undefined') {
	      // Older IE.
	      var wscript = new ActiveXObject('WScript.Shell');
	      wscript !== null && wscript.SendKeys('{F11}');
	    }
	    return false;
	  }
	}
	/**
	 * Sets canvas size to maximum width and height on the browser, not using fullscreen
	 *
	 * @method setToFullSize
	 * @param {HTMLElement} context        DOMElement Canvas context
	 */
	function setToFullSize(context) {
	  return function fullSize() {
	    var size = getWindowSize();
	
	    context.canvas.width = size.x;
	    context.canvas.height = size.y;
	  };
	}
	/**
	 * Get browser windows size
	 *
	 * @method getWindowSize
	 * @param {HTMLElement} context        DOMElement Canvas context
	 */
	function getWindowSize() {
	  return {
	    x: window.innerWidth,
	    y: window.innerHeight
	  };
	}
	/**
	 * Resizes the PIXI renderer to the current most wide and high element status. Basically
	 * canvas size === window size.
	 *
	 * @static
	 * @method resizeRenderer
	 * @param {PIXI.WebGLRenderer} renderer   The renderer for the map
	 * @param {Function} drawOnNextTick       Function that handles re-rendering canvas
	 */
	function resizePIXIRenderer(renderer, drawOnNextTick) {
	  var windowSize = getWindowSize();
	
	  renderer.autoResize = true; // eslint-disable-line no-param-reassign
	  renderer.resize(windowSize.x, windowSize.y);
	  drawOnNextTick();
	}
	
	/**
	 * Setup correct css for setting up fullsize (window size) canvas
	 *
	 * @param {Element} canvasElement
	 */
	function fullsizeCanvasCSS(canvasElement) {
	  canvasElement.style.position = 'absolute';
	  canvasElement.style.display = 'block';
	  canvasElement.style.left = '0px';
	  canvasElement.style.top = '0px';
	}
	
	exports.default = {
	  toggleFullScreen: toggleFullScreen,
	  setToFullSize: setToFullSize,
	  getWindowSize: getWindowSize,
	  resizePIXIRenderer: resizePIXIRenderer,
	  fullsizeCanvasCSS: fullsizeCanvasCSS
	};
	module.exports = exports['default'];

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _pixi = __webpack_require__(9);
	
	var PIXI = _interopRequireWildcard(_pixi);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function createSquare() {
	  var graphics = new PIXI.Graphics();
	
	  graphics.lineStyle(2, 0x0000FF, 1);
	  graphics.drawRect(50, 250, 100, 100);
	
	  return graphics;
	}
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = {
	  createSquare: createSquare
	};
	module.exports = exports['default'];

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _pixi = __webpack_require__(9);
	
	var PIXI = _interopRequireWildcard(_pixi);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	// const { PIXI } = window.flatworld_libraries;
	
	var constants = {
	  ZERO_COORDINATES: new PIXI.Point(0, 0),
	  VERSION: '0.6.3',
	  DEFAULT_SCALE_MODE: 0
	};
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = constants;
	module.exports = exports['default'];

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _index = __webpack_require__(2);
	
	/*-----------------------
	------- VARIABLES -------
	-----------------------*/
	var stateOfEvents = {};
	var activeEventListeners = {};
	var detectors = {};
	
	/*-----------------------
	-------- PUBLIC ---------
	-----------------------*/
	/**
	 * This keeps all the event listeners and detectors in one class. You add detectors / event listener types with addDetector and you add
	 * event listeners with on.
	 *
	 * @namespace flatworld
	 * @class eventListeners
	 */
	var eventListeners = function () {
	  /*---------------------------
	  ------------ API ------------
	  ---------------------------*/
	  return {
	    on: on,
	    off: off,
	    isOn: isOn,
	    setActivityState: setActivityState,
	    getActivityState: getActivityState,
	    setDetector: setDetector,
	    clearDetector: clearDetector
	  };
	
	  /*---------------------------
	  ----------- PUBLIC ----------
	  ---------------------------*/
	  /**
	   * Activates the eventListener.
	   *
	   * @method on
	   * @throws {Error}          General error, if detector for this event type has not been set.
	   * @param  {String}  type   REQUIRED. The type of event. This type has been created with setDetector.
	   * @param  {Boolean} cb     REQUIRED. Callback to do it's eventlistener magic.
	   */
	  function on() {
	    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	    var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	    if (!detectors[type] || !detectors[type].on) {
	      throw new Error('eventlisteners.on needs to have detector set with this event type!');
	    }
	
	    detectors[type].on(_createEventListenerWrapper('Map' + type, cb));
	    activeEventListeners[type] = activeEventListeners[type] || new Set();
	    activeEventListeners[type].add(cb);
	  }
	  /**
	   * Deactivates the eventListener. Callback is optional. If is not provided will remove all this types eventListeners
	   *
	   * @method off
	   * @param  {String}  type   REQUIRED. The type of event. This type has been created with setDetector.
	   * @param  {Boolean} cb     Callback to do it's eventlistener magic.
	   */
	  function off() {
	    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	    var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	    detectors[type].off(cb);
	    cb ? activeEventListeners[type].delete(cb) : delete activeEventListeners[type];
	  }
	  /**
	   * Activates the eventListener. Callback is optional. If is not provided will check if the eventlistener type has any listeners active.
	   *
	   * @method isOn
	   * @param  {String}  type   REQUIRED. The type of event. This type has been created with setDetector.
	   * @param  {Boolean} cb     Callback to do it's eventlistener magic.
	   */
	  function isOn() {
	    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	    var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	    return cb ? activeEventListeners[type].has(cb) : !!activeEventListeners[type].size;
	  }
	  /**
	   * Sets the state of the event. State is very important e.g. for fluent dragging and selecting. When we start to drag, we avoid
	   * selecting units and vice versa, when we keep an event state tracking through this.
	   *
	   * @method setActivityState
	   * @param {String} type        EventType
	   * @param {Boolean} newState   The new state value
	   */
	  function setActivityState(type, newState) {
	    stateOfEvents[type] = newState;
	  }
	  /**
	   * get activity state of the event
	   *
	   * @method getActivityState
	   * @param  {String} type   EventType
	   * @return {Boolean}
	   */
	  function getActivityState() {
	    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	
	    return stateOfEvents[type];
	  }
	  /**
	   * Set event detector. If there is already detector of this type, we overwrite it.
	   *
	   * @method setDetector
	   * @param {String}   type    Event type
	   * @param {Function} cbOn    Callback which sets activates the detector
	   * @param {Function} cbOff   Callback which sets deactivates the detector
	   */
	  function setDetector() {
	    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	    var cbOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
	    var cbOff = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};
	
	    detectors[type] = {};
	    detectors[type] = {
	      on: cbOn,
	      off: cbOff
	    };
	  }
	  /**
	   * Clear event detector. We also remove all possible eventlisteners set on this event type.
	   *
	   * @method clearDetector
	   * @param {String}   type  Event type
	   */
	  function clearDetector() {
	    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	
	    /* remove all event listeners before we empty the data */
	    activeEventListeners[type].forEach(function (cb) {
	      detectors[type].cbOff(cb);
	    });
	
	    /* remove all data / references to event listeners and detector */
	    delete activeEventListeners[type];
	    delete detectors[type];
	  }
	
	  /*-----------------------------
	  ----------- PRIVATE -----------
	  ------------------------------*/
	  /**
	   * This creates a wrapper for callback. The idea is to send map events from this wrapper for all events.
	   *
	   * @private
	   * @static
	   * @method _createEventListenerWrapper
	   * @param  {String}   type   Event type
	   * @param  {Function} cb     Event callback
	   */
	  function _createEventListenerWrapper(type, cb) {
	    /* NOTE! There can be more than one arguments in an event. E.g. Hamster.js */
	    return function () {
	      /**
	       * @event Event gets fired when the specific eventListener trigger. The name consists of "Map" + the given event type, like such:
	       * "MapDrag"
	       */
	      _index.mapEvents.publish(type);
	      cb.apply(undefined, arguments);
	    };
	  }
	}();
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = eventListeners;
	module.exports = exports['default'];

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _pixi = __webpack_require__(9);
	
	var PIXI = _interopRequireWildcard(_pixi);
	
	var _index = __webpack_require__(2);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/*---------------------
	------ VARIABLES ------
	----------------------*/
	var LAYER_TYPE_STATIC = 0;
	var LAYER_TYPE_MOVABLE = 1;
	var LAYER_TYPE_MINIMAP = 2;
	var _renderers = {};
	var protectedProperties = {};
	var _drawMapOnNextTick = false;
	var isMapReadyPromises = [];
	var _privateRenderers = void 0,
	    _zoomLayer = void 0,
	    _movableLayer = void 0,
	    _minimapLayer = void 0,
	    ParentLayerConstructor = void 0;
	
	/*---------------------
	--------- API ---------
	----------------------*/
	
	var Flatworld = function () {
	  /**
	   * Main class for the engine
	   *
	   * Initializes the whole structure and plugins and is used as primary API for all operations. This class is e.g. passed to every
	   * plugin that get initialized with their init-method.
	   *
	   * You use the class by instantiating it (new) and then finishing initialization with init-method. Please see examples below.
	   *
	   * The biggest part of creating the map, is the data structure. There is a clear data structure that you can see from the
	   * tests/data-folder, but the factory is responsible for creating the objects, so you can use your own factory implementation. So to
	   * understand more, please see e.g. {{#crossLink 'flatworld.factories.hexaFactory'}}{{/crossLink}}.
	   *
	   * The map consists of layer on top of each other. The example is best understood when thinking typical war strategy game. The
	   * structure is this:
	   * 1. ZoomLayer: Handles things like scaling / zooming the map
	   * 2. MovableLayer: Obviously handles movement of the map. Also is a good place to get map coordinates. Since getting global
	   * coordinates won't help you much, half of the time.
	   * 3. Different layers: like units, terrain, fog of war, UIs etc. Can also contains special layers like dynamically changed UIlayers.
	   * 4. possible subcontainers (used for optimized object selection and map movement). Can also contains special layers like dynamically
	   * changed UIlayers.
	   * 5. Individual objects, like units, terrains, cities etc...
	   *
	   * Plugins can be added with activatePlugins-method by sending them to the class. Plugins must always implement init-method, which
	   * receives Map instance. Plugins are not yet restricted what they can do and can add functionality without touching map or can modify
	   * objects or their prototypes through access to Map instance.
	   *
	   * @example
	   *     var map = new Map(divContainer, mapOptions );
	   *     promises = map.init( gameData.pluginsToActivate, mapData.startPoint );
	   *
	   * A note on the UI part of the map. The UI is not the primary UI interface for the map, but instead it is the UI that is used when
	   * interacting with the map and objects in it. So e.g. when user selects a unit on the map. How that unit is highlighted as selected
	   * and what kind of possible info-box we show to the user regarding that object, movement of units etc.
	   *
	   * @namespace flatworld
	   * @class Flatworld
	   * @constructor
	   * @requires PIXI.JS framework in global namespace
	   * @requires Canvas (webGL support recommended) HTML5-element supported.
	   * @requires Hammer for touch events
	   * @requires Hamster for mouse scroll events
	   *
	   * @param {HTMLElement} mapCanvas                       HTML element which will be container for the created canvas element.
	   * @param {Object} [props]                              Extra properties
	   * @param {Object} props.bounds                         Bounds of the viewport
	   * @param {Integer} props.bounds.width                  Bound width
	   * @param {Integer} props.bounds.height                 Bound height
	   * @param {Object} [props.mapSize]                      The total mapSize
	   * @param {Integer} props.mapSize.x                     x-axis
	   * @param {Integer} props.mapSize.y                     y-axis
	   * @param {Object} props.rendererOptions                Renderer options passed to PIXI.autoDetectRenderer
	   * @param {Object} props.subcontainers                  Subcontainers size in pixels. If given, will activate subcontainers. If not
	   * given or false, subcontainers are not used.
	   * @param {Integer} props.subcontainers.width           Subcontainer width
	   * @param {Integer} props.subcontainers.height          Subcontainer height
	   * @param {FPSCallback} [trackFPSCB]                    Callback function for tracking FPS in renderer. So this is used for debugging
	   * and optimizing.
	   *
	   * @return {Object}                                      New Map instance
	   */
	  function Flatworld() {
	    var mapCanvas = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	
	    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	        _ref$bounds = _ref.bounds,
	        bounds = _ref$bounds === undefined ? { width: 0, height: 0 } : _ref$bounds,
	        _ref$mapSize = _ref.mapSize,
	        mapSize = _ref$mapSize === undefined ? { x: 0, y: 0 } : _ref$mapSize,
	        _ref$rendererOptions = _ref.rendererOptions,
	        rendererOptions = _ref$rendererOptions === undefined ? { autoResize: true, antialias: false } : _ref$rendererOptions,
	        minimapCanvas = _ref.minimapCanvas,
	        _ref$subcontainers = _ref.subcontainers,
	        subcontainers = _ref$subcontainers === undefined ? {
	      width: 100,
	      height: 100,
	      maxDetectionOffset: 0 // maxDetectionOffset default set later
	    } : _ref$subcontainers,
	        _ref$trackFPSCB = _ref.trackFPSCB,
	        trackFPSCB = _ref$trackFPSCB === undefined ? false : _ref$trackFPSCB,
	        _ref$defaultScaleMode = _ref.defaultScaleMode,
	        defaultScaleMode = _ref$defaultScaleMode === undefined ? _index.constants.DEFAULT_SCALE_MODE : _ref$defaultScaleMode;
	
	    var mouseTextSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	    _classCallCheck(this, Flatworld);
	
	    if (!_index.utils.environment.isWebglSupported()) {
	      var error = new Error('Webgl is not supported');
	      _index.log.error(error);
	      throw error;
	    }
	    /* Check for the required parameters! */
	    if (!mapCanvas) {
	      var _error = new Error(this.constructor.name + ' needs canvas element!');
	      _index.log.error(_error);
	      throw _error;
	    }
	
	    /* If the constructor was passed mapCanvas as a string and not as an Element, we get the element */
	    if (typeof mapCanvas === 'string') {
	      mapCanvas = document.querySelector(mapCanvas);
	    }
	
	    /* Make sure the mapCanvas is empty. So there are no nasty surprises */
	    mapCanvas.innerHTML = '';
	    /* Add the given canvas Element to the options that are passed to PIXI renderer */
	    rendererOptions.view = mapCanvas;
	    /* Create PIXI renderer. Practically PIXI creates its own canvas and does its magic to it */
	    _renderers.main = new PIXI.WebGLRenderer(bounds.width, bounds.height, rendererOptions);
	    _renderers.main.getResponsibleLayer = function () {
	      return _zoomLayer;
	    };
	    /* Create PIXI renderer for minimap */
	    if (minimapCanvas) {
	      _renderers.minimap = minimapCanvas ? new PIXI.WebGLRenderer(0, 0, { view: minimapCanvas, autoResize: true }) : undefined;
	      _renderers.minimap.plugins.interaction.destroy();
	      _renderers.minimap.getResponsibleLayer = this.getMinimapLayer;
	    }
	    /* We handle all the events ourselves through addEventListeners-method on canvas, so destroy pixi native method */
	    _renderers.main.plugins.interaction.destroy();
	
	    /* This defines which MapLayer class we use to generate layers on the map. Under movableLayer. These are layers like: Units,
	     * terrain, fog of war, UIs etc. */
	    ParentLayerConstructor = _index.mapLayers.MapLayerParent;
	
	    /* These are the 2 topmost layers on the map:
	     * - zoomLayer: Keeps at the same coordinates always and is responsible for holding map
	     * scale value and possible
	     * objects that do not move with the map. ZoomLayer has only one child: _movableLayer
	     * - movableLayer: Moves the map, when the user commands. Can hold e.g. UI objects that move
	     * with the map. Like
	     * graphics that show which area or object is currently selected. */
	    _zoomLayer = new _index.mapLayers.MapLayer({ name: 'zoomLayer', coord: { x: 0, y: 0 } });
	    _movableLayer = new _index.mapLayers.MapLayer({ name: 'movableLayer', coord: { x: 0, y: 0 } });
	    _minimapLayer = new _index.mapLayers.MapLayer({ name: 'minimapLayer', coord: { x: 0, y: 0 } });
	    _zoomLayer.addChild(_movableLayer);
	
	    /* needed to make the canvas fullsize canvas with PIXI */
	    _index.utils.resize.fullsizeCanvasCSS(_renderers.main.view);
	    /* stop scrollbars of showing */
	    mapCanvas.style.overflow = 'hidden';
	
	    _index.utils.mouse.disableContextMenu(_renderers.main.view);
	
	    // Disable the selection of text by dragging, from the whole body element
	    !mouseTextSelection && _index.utils.mouse.toggleMouseTextSelection();
	
	    /* We cache the privateRenderers in array format to a module variable */
	    _privateRenderers = Object.keys(_renderers).map(function (idx) {
	      return _renderers[idx];
	    });
	
	    protectedProperties.zoomLayer = _zoomLayer;
	    protectedProperties.movableLayer = _movableLayer;
	
	    /* See PIXI.SCALE_MODES for */
	    this.defaultScaleMode = PIXI.settings.SCALE_MODE = defaultScaleMode;
	    /**
	     * canvas element that was generated and is being used by this new generated Map instance.
	     *
	     * @attribute canvas
	     * @type {HTMLElement}
	     * @required
	     **/
	    this.canvas = _renderers.main.view;
	    /**
	     * canvas element that was generated and is being used by this new generated Map instance.
	     *
	     * @attribute canvas
	     * @type {HTMLElement}
	     * @required
	     **/
	    this.minimapCanvas = _renderers.minimap ? _renderers.minimap.view : undefined;
	    /**
	     * @attribute mapSize
	     * @type {x: Number, y: Number}
	     * @optional
	     **/
	    this.mapSize = mapSize;
	    /**
	     * list of plugins that the map uses and are initialized
	     * @see Map.activatePlugins
	     *
	     * @attribute plugins
	     * @type {Set}
	     **/
	    this.plugins = new Set();
	    /**
	     * Subcontainers size that we want to generate, when layers use subcontainers.
	     *
	     * @attribute subcontainersConfig
	     * @type {{width: Integer, height: Int, maxDetectionOffset: Int}}
	     **/
	    // Set default
	    subcontainers.maxDetectionOffset = subcontainers.maxDetectionOffset || 100;
	    this.subcontainersConfig = subcontainers;
	    /**
	     * Callback function that gets the current FPS on the map and shows it in DOM
	     *
	     * @attribute trackFPSCB
	     * @type {Function}
	     **/
	    this.trackFPSCB = trackFPSCB;
	    /**
	     * ObjectManager instance. Responsible for retrieving the objects from the map, on desired
	     * occasions. Like when the player clicks
	     * the map to select some object. This uses subcontainers when present.
	     *
	     * @attribute objectManager
	     * @type {ObjectManager}
	     **/
	    this.objectManager = new _index.ObjectManager();
	    /**
	     * Set variable showing if the device supports touch or not.
	     *
	     * @attribute isTouch
	     * @type {Boolean}
	     **/
	    this.isSupportedTouch = _index.utils.environment.isTouchDevice();
	    /**
	     * The object or objects that are currently selected for details and actions / orders. This gets set by other modules, like plugins.
	     *
	     * @attribute currentlySelectedObjects
	     * @type {Array}
	     **/
	    this.currentlySelectedObjects = [];
	    /**
	     * Layer types. Can be extended, but the already defined types are supposed to be constants and not to be changed.
	     *
	     * @attribute layerTypes
	     * @type {Object}
	     */
	    this.layerTypes = {
	      staticType: {
	        id: LAYER_TYPE_STATIC
	      },
	      movableType: {
	        id: LAYER_TYPE_MOVABLE
	      },
	      minimapType: {
	        id: LAYER_TYPE_MINIMAP
	      }
	    };
	    /**
	     * Self explanatory
	     *
	     * @attribute VERSION
	     * @type {SEMVER}       http://semver.org/
	     */
	    this.VERSION = _index.constants.VERSION;
	
	    /**
	     * This holds callback functions executed before the actual map render is done
	     * @type {Objects}
	     */
	    this.preRenderers = {};
	
	    /**
	     * Holds all the objects on the map. This is an alternative data structure to make some
	     * operations easier. Basically it will be populated with the primaryLayers, this is done in
	     * init method. More details there.
	     */
	    this.allMapObjects = {};
	  }
	  /**
	   * This initializes the map and makes everything appear on the map and actually work. Also initializes the given plugins since
	   * normally the plugins have to be activated before the map is shown.
	   *
	   * @method init
	   * @param {String[]|Object[]} plugins                  Plugins to be activated for the map. Normally you should give the plugins here
	   * instead of separately passing them to activatePlugins method. You can provide the module strings or module objects.
	   * @param  {Object} coord                     Starting coordinates for the map.
	   * @param  {Integer} coord.x                  X coordinate.
	   * @param  {Integer} coord.y                  Y coordinate.
	   * @param {Function} tickCB                   callback function for tick. Tick callback is initiated in every frame. So map draws
	   * happen during ticks.
	   * @param {Object} options                    Extra options.
	   * @param {Boolean} options.fullsize          Do we set fullsize canvas or not at the beginning. Default: true
	   * @return {Array}                            Returns an array of Promises. If this is empty / zero. Then there is nothing to wait
	   * for, if it contains promises, you have to wait for them to finish for the plugins to work and map be ready.
	   **/
	
	
	  _createClass(Flatworld, [{
	    key: 'init',
	    value: function init() {
	      var plugins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	      var coord = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { x: 0, y: 0 };
	
	      var _this = this;
	
	      var tickCB = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : { fullsize: true };
	
	      if (!this.getPrimaryLayers().length) {
	        throw new Error('You should have layers created for the map, before initializing the map');
	      }
	
	      options.fullsize && this.toggleFullsize();
	
	      this.getAllObjects().forEach(function (o) {
	        if (o && o.initializeCoordinates) {
	          o.initializeCoordinates(_this);
	        }
	      });
	
	      /* Create data structures. Need to be done before activating plugins */
	      this.allMapObjects = this._createArrayStructure();
	
	      /* Sets the correct Map starting coordinates */
	      coord && Object.assign(_movableLayer, coord);
	
	      isMapReadyPromises = plugins.length && this.initPlugins(plugins);
	
	      /* We activate the default tick for the map, but if custom tick callback has been given, we activate it too */
	      this._defaultTick();
	      tickCB && this.customTickOn(tickCB);
	
	      return isMapReadyPromises || Promise.resolve();
	    }
	    /**
	     * This method will initialize the UI module. It requires constructed UI theme module as param
	     * @param {Object} UITheme This is the UI theme module created to work with UI module
	     */
	
	  }, {
	    key: 'initUI',
	    value: function initUI(UITheme) {
	      (0, _index.UI)(UITheme, this, protectedProperties);
	    }
	    /**
	     * Returns a promise that resolves after the map is fully initialized
	     *
	     * @method whenReady
	     * @return {Promise}        Promise that holds all the individual plugin loading promises
	     **/
	
	  }, {
	    key: 'whenReady',
	    value: function whenReady() {
	      return Promise.all(isMapReadyPromises);
	    }
	    /**
	     * The correct way to update / redraw the map. Check happens at every tick and thus in every frame.
	     *
	     * @method drawOnNextTick
	     **/
	
	  }, {
	    key: 'drawOnNextTick',
	    value: function drawOnNextTick() {
	      _drawMapOnNextTick = true;
	    }
	    /**
	     * The correct way to update / redraw the map. Check happens at every tick and thus in every frame.
	     *
	     * @method drawOnNextTick
	     **/
	
	  }, {
	    key: 'collectGarbage',
	    value: function collectGarbage() {
	      _privateRenderers.forEach(function (renderer) {
	        return renderer.textureGC.run();
	      });
	    }
	    /**
	     * Add an UI object to the wanted layer.
	     *
	     * @method addUIObject
	     * @param {Integer} layer           Type of the layer. this.layerTypes.STATIC.id or layerTypes.MOVABLE.id.
	     * @param {Object | Array} object   The object to be attached as UI object.
	     */
	
	  }, {
	    key: 'addUIObject',
	    value: function addUIObject(layerType, objects, UIName) {
	      var _this2 = this;
	
	      if (Array.isArray(objects)) {
	        objects.forEach(function (object) {
	          _this2._addObjectToUIlayer(layerType, object, UIName);
	        });
	      } else {
	        this._addObjectToUIlayer(layerType, objects, UIName);
	      }
	    }
	    /**
	     * Remove an UI object to the wanted layer.
	     *
	     * @method removeUIObject
	     * @param {Integer} layer       Type of the layer. layerTypes.STATIC of layerTypes.MOVABLE.
	     * @param {String} objectName   The object to be attached as UI object.
	     */
	
	  }, {
	    key: 'removeUIObject',
	    value: function removeUIObject(layerType, UIName) {
	      switch (layerType) {
	        case LAYER_TYPE_STATIC:
	          _zoomLayer.deleteUIObjects(UIName);
	          break;
	        case LAYER_TYPE_MOVABLE:
	          _movableLayer.deleteUIObjects(UIName);
	          break;
	      }
	    }
	    /**
	     * Create a special layer, that can holds e.g. UI effects in it.
	     *
	     * @method createSpecialLayer
	     * @param {String} name               name of the layer
	     * @param {Object} options            Optional options.
	     * @param {Object} options.coord      Coordinates of the layer
	     * @param {Integer} options.coord.x   X coordinate
	     * @param {Integer} options.coord.y   Y coordinate
	     * @param {Object} options.toLayer    To which layer will this layer be added to as UILayer.
	     *  Default false
	     * @return {MapLayer}            The created UI layer
	     **/
	
	  }, {
	    key: 'createSpecialLayer',
	    value: function createSpecialLayer() {
	      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default special layer';
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
	        coord: {
	          x: 0,
	          y: 0 },
	        toLayer: false };
	
	      var coord = options.coord || { x: 0, y: 0 };
	      var layer = new _index.mapLayers.MapLayer({ name: name, coord: coord });
	
	      layer.specialLayer = true;
	
	      switch (options.toLayer) {
	        case LAYER_TYPE_STATIC:
	          _zoomLayer.addChild(layer);
	          break;
	        case LAYER_TYPE_MOVABLE:
	          _movableLayer.addChild(layer);
	          break;
	      }
	
	      return layer;
	    }
	    /**
	     * All parameters are passed to ParentLayerConstructor (normally constructor of MapLayer).
	     *
	     * @method addLayer
	     * @uses MapLayer
	     * @return {MapLayer}          created MapLayer instance
	     **/
	
	  }, {
	    key: 'addLayer',
	    value: function addLayer(layerOptions) {
	      if (this.getSubcontainerConfigs() && layerOptions.subcontainers !== false) {
	        layerOptions.subcontainers = this.getSubcontainerConfigs();
	      }
	
	      var newLayer = new ParentLayerConstructor(layerOptions);
	      _movableLayer.addChild(newLayer);
	
	      return newLayer;
	    }
	    /**
	     * Just a convenience function (for usability and readability), for checking if the map uses
	     * subcontainers.
	     *
	     * @method usesSubcontainers
	     * @return {Boolean}
	     **/
	
	  }, {
	    key: 'usesSubcontainers',
	    value: function usesSubcontainers() {
	      return !!(this.getSubcontainerConfigs().width && this.getSubcontainerConfigs().height);
	    }
	    /**
	     * Returns current subcontainers configurations (like subcontainers size).
	     *
	     * @method getSubcontainerConfigs
	     * @return {Object}
	     **/
	
	  }, {
	    key: 'getSubcontainerConfigs',
	    value: function getSubcontainerConfigs() {
	      return this.subcontainersConfig;
	    }
	    /**
	     * Get the size of the area that is shown to the player. More or less the area of the browser
	     * window.
	     *
	     * @method getViewportArea
	     * @param  {Boolean} isLocal                                                  Do we want to
	     * use Map coordinates or global / canvas
	     * coordinates. Default = false
	     * @return {{x: Integer, y: Integer, width: Integer, height: Integer}}        x- and
	     * y-coordinates and the width and height of the
	     * viewport
	     **/
	
	  }, {
	    key: 'getViewportArea',
	    value: function getViewportArea() {
	      var isLocal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	      var multiplier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	      var layer = isLocal ? _movableLayer : _zoomLayer;
	      var leftSideCoords = new PIXI.Point(0, 0);
	      var rightSideCoords = new PIXI.Point(window.innerWidth, window.innerHeight);
	
	      if (isLocal) {
	        rightSideCoords = layer.toLocal(rightSideCoords);
	        leftSideCoords = layer.toLocal(leftSideCoords);
	      }
	
	      var leftSide = {
	        x: leftSideCoords.x,
	        y: leftSideCoords.y
	      };
	      var rightSide = {
	        x2: rightSideCoords.x,
	        y2: rightSideCoords.y
	      };
	
	      var offset = {
	        x: (Math.abs(rightSide.x2) - leftSide.x) * multiplier,
	        y: (Math.abs(rightSide.y2) - leftSide.y) * multiplier
	      };
	      return {
	        x: Math.round(leftSide.x - offset.x),
	        y: Math.round(leftSide.y - offset.y),
	        width: Math.round(Math.abs(Math.abs(rightSide.x2) - leftSide.x) + offset.x * 2),
	        height: Math.round(Math.abs(Math.abs(rightSide.y2) - leftSide.y) + offset.y * 2)
	      };
	    }
	    /**
	     * Remove a primary layer from the map
	     *
	     * @method removeLayer
	     * @param {MapLayer|PIXI.Container|PIXI.ParticleContainer} layer       The layer object to be
	     * removed
	     **/
	
	  }, {
	    key: 'removeLayer',
	    value: function removeLayer(layer) {
	      _movableLayer.removeChild(layer);
	
	      return layer;
	    }
	    /**
	     * return the mapsize as width and height
	     *
	     * @return {Object}       { x: Number, y: Number }
	     */
	
	  }, {
	    key: 'getMapsize',
	    value: function getMapsize() {
	      return this.mapSize;
	    }
	    /**
	     * Moves the map the amount of given x and y pixels. Note that this is not the destination coordinate, but the amount of movement that
	     * the map should move. Internally it moves the movableLayer, taking into account necessary properties (like scale). Draws map after
	     * movement.
	     *
	     * @method moveMap
	     * @param {Object} coord                 The amount of x and y coordinates we want the map to move. I.e. { x: 5, y: 0 }. With this we
	     * want the map to move horizontally 5 pixels and vertically stay at the same position.
	     * @param {Integer} coord.x              X coordinate
	     * @param {Integer} coord.y              Y coordinate
	     * @param {Integer} absolute             If the given coordinates are not relative, like move map 1 pixel, but instead absolute, like
	     * move map to coordinates { x: 1, y: 2 }. Defaults to false (relative).
	     * @todo  the informcoordinates away and fix the issue they tried to fix!
	     **/
	
	  }, {
	    key: 'moveMap',
	    value: function moveMap(_ref2) {
	      var _ref2$x = _ref2.x,
	          x = _ref2$x === undefined ? 0 : _ref2$x,
	          _ref2$y = _ref2.y,
	          y = _ref2$y === undefined ? 0 : _ref2$y;
	
	      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	          _ref3$absolute = _ref3.absolute,
	          absolute = _ref3$absolute === undefined ? false : _ref3$absolute;
	
	      var realCoordinates = {
	        x: Math.round(x / _zoomLayer.getZoom()),
	        y: Math.round(y / _zoomLayer.getZoom())
	      };
	
	      if (absolute) {
	        _movableLayer.position = new PIXI.Point(x, y);
	      } else {
	        _movableLayer.move(realCoordinates);
	      }
	
	      _index.mapEvents.publish('mapMoved', realCoordinates);
	      this.drawOnNextTick();
	    }
	    /**
	     * Initializes all plugins for the map. Iterates through the given plugins we wish to
	     * initialize and does the actual work in initPlugin-method.
	      *
	     * @method initPlugins
	     * @param {Object[]} pluginsArray   Array that consists the plugin modules to be activated
	     * @return {Promise}                Promise. If string are provided resolved those with System.import, otherwise resolves immediately.
	     * */
	
	  }, {
	    key: 'initPlugins',
	    value: function initPlugins() {
	      var _this3 = this;
	
	      var pluginsArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	
	      var allPromises = [];
	
	      /* Iterates over given plugins Array and calls their init-method, depeding if it is String or Object */
	      pluginsArray.forEach(function (data) {
	        if (_typeof(data.plugin) === 'object') {
	          (function () {
	            var params = {};
	            data.parameters = data.parameters || {};
	
	            Object.keys(data.parameters).forEach(function (i) {
	              if (!data.parameters[i].bind) {
	                throw new Error('All parameters to plugins must be functions with bind-method!');
	              }
	
	              params[i] = data.parameters[i].bind(data.plugin);
	            });
	
	            allPromises.push(_this3.initPlugin(data.plugin, params));
	          })();
	        } else {
	          _index.log.error(new Error('Plugin \'' + data.plugin.pluginName + '\' was not an object'));
	        }
	      });
	
	      return allPromises;
	    }
	    /**
	     * Activate plugin for the map. Plugins need .pluginName property and .init-method. Plugins init-method activates the plugins and we
	     * call them in Map. Plugins init-metho receivse this (Map instance) as their only parameter.
	     *
	     * @method initPlugin
	     * @throws {Error} Throws a general error if there is an issue activating the plugin
	     * @param {Object} plugin        Plugin module
	     * */
	
	  }, {
	    key: 'initPlugin',
	    value: function initPlugin(plugin) {
	      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	
	      var promise = Promise.resolve();
	
	      try {
	        if (!plugin || !plugin.pluginName || !plugin.init) {
	          throw new Error('plugin, plugin.pluginName or plugin.init import is missing!');
	        }
	
	        this.plugins.add(plugin[plugin.pluginName]);
	        if (this.plugins.has(plugin[plugin.pluginName])) {
	          plugin.mapInstance = this;
	          plugin._properties = protectedProperties;
	          promise = plugin.init(params);
	        }
	      } catch (e) {
	        e.message += ' INFO: An error initializing plugin. JSON.stringify: "' + plugin.pluginName + '" ';
	        _index.log.error(e);
	        promise = Promise.reject();
	      }
	
	      return promise;
	    }
	  }, {
	    key: 'registerPreRenderer',
	    value: function registerPreRenderer(name, callback) {
	      if (!name && !callback) {
	        throw new Error('name and callback required for registerPreRenderer');
	      }
	
	      this.preRenderers[name] = {
	        cb: callback
	      };
	    }
	  }, {
	    key: 'removePreRenderer',
	    value: function removePreRenderer(name) {
	      delete this.preRenderers[name];
	    }
	    /**
	     * Setting new prototype methods for the Map instance
	     *
	     * @method setPrototype
	     * @param {String} property         The property you want to set
	     * @param {*} value                 Value for the property
	     */
	
	  }, {
	    key: 'setPrototype',
	    value: function setPrototype(property, value) {
	      var thisPrototype = Object.getPrototypeOf(this);
	
	      thisPrototype[property] = value;
	    }
	    /**
	     * Gets object under specific map coordinates. Using subcontainers if they exist, other
	     * methods if not. If you provide type parameter, the method returns only object types that
	     * match it.
	     *
	     * NOTE! At the moment filters only support layers! You can not give filters object: object and
	     * expect them to be filtered. It will filter only layers (object: layer)!
	     *
	     * @todo This should work with object filtering too, but the issues regarding it are
	     * efficiency (if there are many filter rules, we don't want to go through them twice?). Since
	     * the way filters work now, we would have to filter layers first and then again objects.
	     *
	     * @method getObjectsUnderArea
	     * @param  {Object} globalCoords            Event coordinates on the zoomLayer / canvas.
	     * @param  {Integer} globalCoords.x         X coordinate
	     * @param  {Integer} globalCoords.y         Y coordinate
	     * @param  {Object} options                 Optional options
	     * @param  {Object} options.filter          The filter to apply to subcontainers
	     * @return {Array}                          Array of object found on the map.
	     */
	
	  }, {
	    key: 'getObjectsUnderArea',
	    value: function getObjectsUnderArea(_ref4) {
	      var _ref4$x = _ref4.x,
	          x = _ref4$x === undefined ? 0 : _ref4$x,
	          _ref4$y = _ref4.y,
	          y = _ref4$y === undefined ? 0 : _ref4$y,
	          _ref4$width = _ref4.width,
	          width = _ref4$width === undefined ? 0 : _ref4$width,
	          _ref4$height = _ref4.height,
	          height = _ref4$height === undefined ? 0 : _ref4$height;
	
	      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	          _ref5$filters = _ref5.filters,
	          filters = _ref5$filters === undefined ? null : _ref5$filters;
	
	      var globalCoords = {
	        x: x,
	        y: y,
	        width: width,
	        height: height
	      };
	      /* We need both coordinates later on and it's logical to do the work here */
	      var allCoords = {
	        globalCoords: globalCoords,
	        localCoords: _movableLayer.toLocal(new PIXI.Point(globalCoords.x, globalCoords.y))
	      };
	      var objects = [];
	
	      allCoords.localCoords.width = globalCoords.width / this.getZoom();
	      allCoords.localCoords.height = globalCoords.height / this.getZoom();
	
	      /*      if (this.usesSubcontainers()) {*/
	      var allMatchingSubcontainers = this._getSubcontainersUnderArea(allCoords, { filters: filters });
	
	      objects = this._retrieveObjects(allCoords, allMatchingSubcontainers);
	      /*      } else {
	            const filteredContainers = _movableLayer.children.filter(thisChild => {
	              if ((filters && !filters.filter(thisChild).length) || thisChild.specialLayer) {
	                return false;
	              }
	      
	              return true;
	            });
	      
	            objects = this._retrieveObjects(allCoords, filteredContainers);
	          }*/
	
	      if (filters && filters.doesItFilter("object")) {
	        objects = filters.filter(objects);
	      }
	
	      return objects;
	    }
	    /**
	     * This returns the normal parent layers that we mostly use for manipulation everything. MovableLayer and zoomLayer are built-in
	     * layers designed to provide the basic functionalities like zooming and moving the map. These layers provide everything that extends
	     * the map more.
	     *
	     * @method getPrimaryLayers
	     * @param {MapDataManipulator} [{}.filters]         The mapDataManipulator instance, that you use for filtering.
	     * @return {Object} Basically anything in the map that is used as a layer (not really counting subcontainers).
	     */
	
	  }, {
	    key: 'getPrimaryLayers',
	    value: function getPrimaryLayers() {
	      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          filters = _ref6.filters;
	
	      return _movableLayer.getPrimaryLayers({ filters: filters });
	    }
	    /**
	     * Get all objects on the map, from layers and subcontainers.
	     *
	     * @todo Not very intelligent atm. You need to make a recursive and smart retrieving of objects, so no matter how many layers or
	     * layers there are, you always retrieve the end objects and the end of the path.
	     *
	     * @method getAllObjects
	     * @param {MapDataManipulator} [{}.filters]         The mapDataManipulator instance, that you use for filtering.
	     * @return {Array}                                  Array of found objects
	     * */
	
	  }, {
	    key: 'getAllObjects',
	    value: function getAllObjects() {
	      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          filters = _ref7.filters;
	
	      var allObjects = void 0;
	      var theseObjs = void 0;
	
	      allObjects = this.getPrimaryLayers({ filters: filters }).map(function (layer) {
	        var allObjs = void 0;
	
	        if (layer.hasSubcontainers()) {
	          var subcontainers = layer.getSubcontainers();
	
	          allObjs = subcontainers.map(function (subContainer) {
	            theseObjs = subContainer.children.map(function (obj) {
	              if (filters) {
	                return filters.filter(obj);
	              }
	
	              return obj;
	            });
	
	            return _index.utils.general.flatten2Levels(theseObjs);
	          });
	        } else {
	          return undefined;
	        }
	
	        return _index.utils.general.flatten2Levels(allObjs);
	      });
	
	      allObjects = _index.utils.general.flatten2Levels(allObjects);
	
	      return allObjects;
	    }
	    /**
	     * Set map zoom. 1 = no zoom. <1 zoom out, >1 zoom in.
	     *
	     * @method setZoom
	     * @param {Number} scale    The amount of zoom you want to set
	     * @return {Number}         The amount of zoom applied
	     */
	
	  }, {
	    key: 'setZoom',
	    value: function setZoom(newScale) {
	      _zoomLayer.setZoom(newScale);
	
	      _index.mapEvents.publish({ name: 'mapZoomed', cooldown: true }, { previousScale: this.getZoom(), newScale: newScale });
	
	      return newScale;
	    }
	    /**
	     * Get map zoom. 1 = no zoom. <1 zoom out, >1 zoom in.
	     *
	     * @method getZoom
	     * @return {MapLayer|PIXI.Container|PIXI.ParticleContainer}
	     */
	
	  }, {
	    key: 'getZoom',
	    value: function getZoom() {
	      return _zoomLayer.getZoom();
	    }
	    /**
	     * Returns the PIXI renderer. Don't use this unless you must. For more advanced or PIXI specific cases.
	     *
	     * @method getRenderer
	     * @return {PIXI.Renderer}
	     */
	
	  }, {
	    key: 'getRenderer',
	    value: function getRenderer(type) {
	      return type === 'minimap' ? _renderers.minimap : _renderers.main;
	    }
	    /**
	     * BEING DEPRECATED. ONLY USED IN UNIT TESTS
	     */
	
	  }, {
	    key: '_getMovableLayer',
	    value: function _getMovableLayer() {
	      return _movableLayer;
	    }
	    // toGlobal is there to check if the "coordinates" are a PIXI object and we can use that
	
	  }, {
	    key: 'getMapCoordinates',
	    value: function getMapCoordinates() {
	      var coordinates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _index.constants.ZERO_COORDINATES;
	      var revert = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	      if (coordinates.toGlobal) {
	        return _movableLayer.toLocal(_index.constants.ZERO_COORDINATES, coordinates);
	      } else if (revert) {
	        return _movableLayer.position;
	      } else {
	        return _movableLayer.toLocal(coordinates);
	      }
	    }
	    /**
	     * Return minimap layer. Holds minimap, if used in the game.
	     *
	     * @method getMinimapLayer
	     */
	
	  }, {
	    key: 'getMinimapLayer',
	    value: function getMinimapLayer() {
	      return _minimapLayer;
	    }
	    /**
	     * Removes the minimapLayer from the game.
	     */
	
	  }, {
	    key: 'removeMinimapLayer',
	    value: function removeMinimapLayer() {
	      _minimapLayer = undefined;
	    }
	    /*---------------------------------------------
	     ------- ABSTRACT APIS THROUGH PLUGINS --------
	     --------------------------------------------*/
	    /**
	     * This is abstract method and needs to be implemented with a plugin. Core module has an implementation for this and if you don't
	     * implement your own, I suggest you use it.
	     *
	     * @method zoomIn
	     */
	
	  }, {
	    key: 'zoomIn',
	    value: function zoomIn() {
	      return 'notImplementedYet. Activate with plugin';
	    }
	    /**
	     * This is abstract method and needs to be implemented with a plugin. Core module has an implementation for this and if you don't
	     * implement your own, I suggest you use it.
	     *
	     * @method zoomOut
	     */
	
	  }, {
	    key: 'zoomOut',
	    value: function zoomOut() {
	      return 'notImplementedYet. Activate with plugin';
	    }
	    /**
	     * Resize the canvas to fill the whole browser content area. Defined by the baseEventlisteners-module (core modules plugin)
	     *
	     * @method toggleFullsize
	     **/
	
	  }, {
	    key: 'toggleFullsize',
	    value: function toggleFullsize() {
	      return 'notImplementedYet. Activate with plugin';
	    }
	    /**
	     * Toggles fullscreen mode. Defined by the baseEventlisteners-module (core modules plugin)
	     *
	     * @method toggleFullScreen
	     **/
	
	  }, {
	    key: 'toggleFullScreen',
	    value: function toggleFullScreen() {
	      return 'notImplementedYet. Activate with plugin';
	    }
	    /**
	     * Plugin will overwrite create this method. Method for actually activating minimap.
	     *
	     * @method initMinimap
	     **/
	
	  }, {
	    key: 'initMinimap',
	    value: function initMinimap() {
	      return 'notImplementedYet. Activate with plugin';
	    }
	    /**
	     * Plugin will overwrite create this method. Method for actually activating fog of war.
	     *
	     * @method activateFogOfWar
	     **/
	
	  }, {
	    key: 'activateFogOfWar',
	    value: function activateFogOfWar() {
	      return 'notImplementedYet. Activate with plugin';
	    }
	
	    /*---------------------------------
	    --------- PRIVATE METHODS ---------
	    ---------------------------------*/
	    /**
	     * Retrieves the objects from ObjectManager, with the given parameters. Mostly helper functionality for getObjectsUnderArea
	     *
	     * @private
	     * @method _retrieveObjects
	     * @param {Object} allCoords                        REQUIRED
	     * @param {Object} allCoords.globalCoords           REQUIRED
	     * @param {Integer} allCoords.globalCoords.x        REQUIRED
	     * @param {Integer} allCoords.globalCoords.y        REQUIRED
	     * @param {Integer} allCoords.globalCoords.width    REQUIRED
	     * @param {Integer} allCoords.globalCoords.height   REQUIRED
	     * @param {Object} allCoords.localCoords            REQUIRED
	     * @param {Integer} allCoords.localCoords.x         REQUIRED
	     * @param {Integer} allCoords.localCoords.y         REQUIRED
	     * @param {String} [{}.type]                        The type of objects we want
	     * @param {Array} [{}.subcontainers]                Array of the subcontainers we will search
	     * @return {Array}                                  Found objects
	     */
	
	  }, {
	    key: '_retrieveObjects',
	    value: function _retrieveObjects(allCoords) {
	      var containers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	
	      var _ref8 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	          _ref8$type = _ref8.type,
	          type = _ref8$type === undefined ? '' : _ref8$type;
	
	      return this.objectManager.retrieve(allCoords, containers, {
	        type: type,
	        size: {
	          width: allCoords.globalCoords.width,
	          height: allCoords.globalCoords.height
	        }
	      });
	    }
	    /**
	     * This returns layers by filtering them based on certain attribute. Can be used with more higher order filtering
	     *
	     * @private
	     * @method _getLayersWithAttributes
	     * @param {String} attribute
	     * @param {*} value
	     * @return the current map instance
	     **/
	
	  }, {
	    key: '_getLayersWithAttributes',
	    value: function _getLayersWithAttributes(attribute, value) {
	      return _movableLayer.children[0].children.filter(function (layer) {
	        return layer[attribute] === value;
	      });
	    }
	    /**
	     * Get subcontainers under certain point or rectangle
	     *
	     * @private
	     * @method _getSubcontainersUnderPoint
	     * @param  {[type]} globalCoords
	     * @param {Object} options              Optional options.
	     * @return {Array}                        All subcontainers that matched the critea
	     */
	
	  }, {
	    key: '_getSubcontainersUnderArea',
	    value: function _getSubcontainersUnderArea(allCoords) {
	      var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	          filters = _ref9.filters;
	
	      var primaryLayers = this.getPrimaryLayers({ filters: filters });
	      var allMatchingSubcontainers = [];
	      var thisLayersSubcontainers = void 0;
	
	      primaryLayers.forEach(function (layer) {
	        thisLayersSubcontainers = layer.getSubcontainersByCoordinates(allCoords.localCoords);
	        allMatchingSubcontainers = allMatchingSubcontainers.concat(thisLayersSubcontainers);
	      });
	
	      return allMatchingSubcontainers;
	    }
	    /**
	     * This handles the default drawing of the map, so that map always updates when drawOnNextTick === true. This tick
	     * callback is always set and should not be removed or overruled
	     *
	     * @private
	     * @method _defaultTick
	     */
	
	  }, {
	    key: '_defaultTick',
	    value: function _defaultTick() {
	      var _this4 = this;
	
	      var ONE_SECOND = 1000;
	      var FPSCount = 0;
	      var fpsTimer = new Date().getTime();
	      var renderStart = void 0;
	      var totalRenderTime = void 0;
	
	      PIXI.ticker.shared.add(function () {
	        if (_drawMapOnNextTick) {
	          if (_this4.trackFPSCB) {
	            renderStart = new Date().getTime();
	          }
	
	          Object.keys(_this4.preRenderers).forEach(function (i) {
	            return _this4.preRenderers[i].cb();
	          });
	          _privateRenderers.forEach(function (renderer) {
	            return renderer.render(renderer.getResponsibleLayer());
	          });
	
	          if (_this4.trackFPSCB) {
	            totalRenderTime += Math.round(Math.abs(renderStart - new Date().getTime()));
	          }
	
	          _drawMapOnNextTick = false;
	        }
	
	        if (_this4.trackFPSCB) {
	          FPSCount++;
	
	          if (fpsTimer + ONE_SECOND < new Date().getTime()) {
	            _this4.trackFPSCB({
	              FPS: FPSCount,
	              FPStime: fpsTimer,
	              renderTime: totalRenderTime,
	              drawCount: _renderers.main.drawCount
	            });
	
	            FPSCount = 0;
	            totalRenderTime = 0;
	            fpsTimer = new Date().getTime();
	          }
	        }
	      });
	    }
	  }, {
	    key: '_addObjectToUIlayer',
	    value: function _addObjectToUIlayer(layerType, object, name) {
	      switch (layerType) {
	        case LAYER_TYPE_STATIC:
	          _zoomLayer.addUIObject(object, name);
	          break;
	        case LAYER_TYPE_MOVABLE:
	          _movableLayer.addUIObject(object, name);
	          break;
	      }
	    }
	  }, {
	    key: '_createArrayStructure',
	    value: function _createArrayStructure() {
	      var allObjects = {};
	
	      this.getPrimaryLayers().forEach(function (layer) {
	        allObjects[layer.name] = layer.getObjects();
	      });
	
	      return allObjects;
	    }
	  }]);
	
	  return Flatworld;
	}();
	
	/*---------------------
	--------- API ---------
	----------------------*/
	
	
	exports.default = Flatworld;
	module.exports = exports['default'];

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _loglevel = __webpack_require__(194);
	
	var _loglevel2 = _interopRequireDefault(_loglevel);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_loglevel2.default.enableAll();
	/**
	 * @namespace flatworld
	 * @class log
	 * @requires loglevel.js for frontend logging, or something similar
	 **/
	var log = {
	  debug: function debug(e) {
	    _loglevel2.default.debug(e);
	  },
	  error: function error(e) {
	    _loglevel2.default.error(e);
	  }
	};
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = log;
	module.exports = exports['default'];

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	* loglevel - https://github.com/pimterry/loglevel
	*
	* Copyright (c) 2013 Tim Perry
	* Licensed under the MIT license.
	*/
	(function (root, definition) {
	    "use strict";
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module === 'object' && module.exports) {
	        module.exports = definition();
	    } else {
	        root.log = definition();
	    }
	}(this, function () {
	    "use strict";
	    var noop = function() {};
	    var undefinedType = "undefined";
	
	    function realMethod(methodName) {
	        if (typeof console === undefinedType) {
	            return false; // We can't build a real method without a console to log to
	        } else if (console[methodName] !== undefined) {
	            return bindMethod(console, methodName);
	        } else if (console.log !== undefined) {
	            return bindMethod(console, 'log');
	        } else {
	            return noop;
	        }
	    }
	
	    function bindMethod(obj, methodName) {
	        var method = obj[methodName];
	        if (typeof method.bind === 'function') {
	            return method.bind(obj);
	        } else {
	            try {
	                return Function.prototype.bind.call(method, obj);
	            } catch (e) {
	                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
	                return function() {
	                    return Function.prototype.apply.apply(method, [obj, arguments]);
	                };
	            }
	        }
	    }
	
	    // these private functions always need `this` to be set properly
	
	    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
	        return function () {
	            if (typeof console !== undefinedType) {
	                replaceLoggingMethods.call(this, level, loggerName);
	                this[methodName].apply(this, arguments);
	            }
	        };
	    }
	
	    function replaceLoggingMethods(level, loggerName) {
	        /*jshint validthis:true */
	        for (var i = 0; i < logMethods.length; i++) {
	            var methodName = logMethods[i];
	            this[methodName] = (i < level) ?
	                noop :
	                this.methodFactory(methodName, level, loggerName);
	        }
	    }
	
	    function defaultMethodFactory(methodName, level, loggerName) {
	        /*jshint validthis:true */
	        return realMethod(methodName) ||
	               enableLoggingWhenConsoleArrives.apply(this, arguments);
	    }
	
	    var logMethods = [
	        "trace",
	        "debug",
	        "info",
	        "warn",
	        "error"
	    ];
	
	    function Logger(name, defaultLevel, factory) {
	      var self = this;
	      var currentLevel;
	      var storageKey = "loglevel";
	      if (name) {
	        storageKey += ":" + name;
	      }
	
	      function persistLevelIfPossible(levelNum) {
	          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();
	
	          // Use localStorage if available
	          try {
	              window.localStorage[storageKey] = levelName;
	              return;
	          } catch (ignore) {}
	
	          // Use session cookie as fallback
	          try {
	              window.document.cookie =
	                encodeURIComponent(storageKey) + "=" + levelName + ";";
	          } catch (ignore) {}
	      }
	
	      function getPersistedLevel() {
	          var storedLevel;
	
	          try {
	              storedLevel = window.localStorage[storageKey];
	          } catch (ignore) {}
	
	          if (typeof storedLevel === undefinedType) {
	              try {
	                  var cookie = window.document.cookie;
	                  var location = cookie.indexOf(
	                      encodeURIComponent(storageKey) + "=");
	                  if (location) {
	                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
	                  }
	              } catch (ignore) {}
	          }
	
	          // If the stored level is not valid, treat it as if nothing was stored.
	          if (self.levels[storedLevel] === undefined) {
	              storedLevel = undefined;
	          }
	
	          return storedLevel;
	      }
	
	      /*
	       *
	       * Public API
	       *
	       */
	
	      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
	          "ERROR": 4, "SILENT": 5};
	
	      self.methodFactory = factory || defaultMethodFactory;
	
	      self.getLevel = function () {
	          return currentLevel;
	      };
	
	      self.setLevel = function (level, persist) {
	          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
	              level = self.levels[level.toUpperCase()];
	          }
	          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
	              currentLevel = level;
	              if (persist !== false) {  // defaults to true
	                  persistLevelIfPossible(level);
	              }
	              replaceLoggingMethods.call(self, level, name);
	              if (typeof console === undefinedType && level < self.levels.SILENT) {
	                  return "No console available for logging";
	              }
	          } else {
	              throw "log.setLevel() called with invalid level: " + level;
	          }
	      };
	
	      self.setDefaultLevel = function (level) {
	          if (!getPersistedLevel()) {
	              self.setLevel(level, false);
	          }
	      };
	
	      self.enableAll = function(persist) {
	          self.setLevel(self.levels.TRACE, persist);
	      };
	
	      self.disableAll = function(persist) {
	          self.setLevel(self.levels.SILENT, persist);
	      };
	
	      // Initialize with the right level
	      var initialLevel = getPersistedLevel();
	      if (initialLevel == null) {
	          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;
	      }
	      self.setLevel(initialLevel, false);
	    }
	
	    /*
	     *
	     * Package-level API
	     *
	     */
	
	    var defaultLogger = new Logger();
	
	    var _loggersByName = {};
	    defaultLogger.getLogger = function getLogger(name) {
	        if (typeof name !== "string" || name === "") {
	          throw new TypeError("You must supply a name when creating a logger.");
	        }
	
	        var logger = _loggersByName[name];
	        if (!logger) {
	          logger = _loggersByName[name] = new Logger(
	            name, defaultLogger.getLevel(), defaultLogger.methodFactory);
	        }
	        return logger;
	    };
	
	    // Grab the current global log variable in case of overwrite
	    var _log = (typeof window !== undefinedType) ? window.log : undefined;
	    defaultLogger.noConflict = function() {
	        if (typeof window !== undefinedType &&
	               window.log === defaultLogger) {
	            window.log = _log;
	        }
	
	        return defaultLogger;
	    };
	
	    return defaultLogger;
	}));


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _index = __webpack_require__(2);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/*---------------------
	--------- API ---------
	----------------------*/
	var MapDataManipulator = function () {
	  /**
	   * Class to get a consistent standard for the engine to be able to filter objects, when
	   * etrieving or sorting them. This is used
	   * when some method uses filters.
	   *
	   * You must provide an object that defines how the given objects should be filtered, when
	   * constructing. The module will filter with every rule and object given and everything that
	   * doesn't pass one of the given filters, will be dropped out.
	   *
	   * Given filters look something like this:
	   * {
	   *   type: 'filter',
	   *   object: 'layer',
	   *   property: 'selectable', // THIS can also be an array, like: ['data', 'a'] => data.a
	   *   value: true,
	   * }
	   * For more information, please check the mapDataManipulatorSpec.js (test) for now.
	   *
	   * @namespace flatworld
	   * @class MapDataManipulator
	   * @constructor
	   * @param {Array|Object} rules        REQUIRED. The rules that apply for this instance.
	   * Multiple rules in Array or one as Object.
	   **/
	  function MapDataManipulator() {
	    var rules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _index.utils.general.requireParameter('MapDataManipulator', 'rules');
	
	    _classCallCheck(this, MapDataManipulator);
	
	    this.rules = Array.isArray(rules) ? rules : [rules];
	    this.classes = {
	      layer: Object.keys(_index.mapLayers).map(function (k) {
	        return _index.mapLayers[k];
	      }),
	      object: Object.keys(_index.objects).map(function (k) {
	        return _index.objects[k];
	      })
	    };
	  }
	  /**
	   * This has exceptional query, since it actually queries it's parent. Subcontainers have
	   * really no useful values and they are dumb
	   * containers of objects, every data is on their parent container
	   *
	   * @method filter
	   * @param  {Array | Object} objects     The objects that are being filtered
	   * @return {Array}                      The found objects in an Array
	   */
	
	
	  _createClass(MapDataManipulator, [{
	    key: 'filter',
	    value: function filter(objects) {
	      var _this = this;
	
	      var found = void 0;
	
	      if (!Array.isArray(objects)) {
	        found = this._runRule(objects) ? [objects] : [];
	      } else {
	        found = objects.filter(function (object) {
	          return _this._runRule(object);
	        });
	      }
	
	      return found;
	    }
	    /**
	     * adds a filter rule
	     *
	     * @method addRule
	     * @param {} rules        Rules to add
	     */
	
	  }, {
	    key: 'addRule',
	    value: function addRule(rules) {
	      this.rules.concat(rules);
	    }
	
	    /** @todo I think this should be implemented. But it's a small optimization so don't bother yet. Basically the idea is to ONLY use the filters that each situation requires. Not iterate through the unneeded filters */
	
	  }, {
	    key: 'getOnlyFiltersOf',
	    value: function getOnlyFiltersOf() /*type*/{}
	
	    /**
	     * Checks if this filter instance is set to filter the given type.
	     *
	     * @param  {string} type   Type of the filter we want to check
	     * @return {Boolean}
	     */
	
	  }, {
	    key: 'doesItFilter',
	    value: function doesItFilter(type) {
	      return this.rules.some(function (o) {
	        return o.object === type;
	      });
	    }
	    /**
	     * This is the actual method that runs through the rules and arranges the data
	     *
	     * @method _runRule
	     * @private
	     * @param {Array} [varname] [description]
	     **/
	
	  }, {
	    key: '_runRule',
	    value: function _runRule(object) {
	      var _this2 = this;
	
	      var ruleMatches = true;
	      var matchedType = void 0;
	
	      Object.keys(this.classes).forEach(function (type) {
	        var filtered = _this2.classes[type].filter(function (thisClass) {
	          return object instanceof thisClass;
	        });
	
	        matchedType = filtered.length ? type : matchedType;
	      });
	
	      this.rules.forEach(function (rule) {
	        if (rule.type === 'filter') {
	          if (rule.object !== matchedType) {
	            return;
	          }
	
	          if (matchedType === 'layer') {
	            ruleMatches = _this2._getObject(object, rule);
	          } else if (matchedType === 'object') {
	            ruleMatches = _this2._getObject(object, rule);
	          }
	        }
	      });
	
	      return ruleMatches;
	    }
	    /**
	     * This is the actual method that runs through the rules and arranges the data
	     *
	     * @method _getObject
	     * @private
	     * @return {[type]} [description]
	     **/
	
	  }, {
	    key: '_getObject',
	    value: function _getObject(object, rule) {
	      var result = false;
	
	      if (Array.isArray(rule.property)) {
	        try {
	          result = '' + MapDataManipulator.getPropertyWithArray(object, rule.property, 0) === '' + rule.value;
	        } catch (e) {
	          return false;
	        }
	      } else {
	        result = object[rule.property] === rule.value;
	      }
	
	      return result;
	    }
	  }], [{
	    key: 'getPropertyWithArray',
	    value: function getPropertyWithArray(obj, array, index) {
	      var currentProperty = array[index];
	      var thisLevel = obj[currentProperty];
	
	      if (array[index + 1]) {
	        return MapDataManipulator.getPropertyWithArray(thisLevel, array, ++index);
	      } else {
	        return thisLevel;
	      }
	    }
	  }]);
	
	  return MapDataManipulator;
	}();
	
	MapDataManipulator.OBJECT_LAYER = 'layer';
	MapDataManipulator.OBJECT_OBJECT = 'object';
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = MapDataManipulator;
	module.exports = exports['default'];

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _eventemitter = __webpack_require__(42);
	
	/*---------------------
	-------- PUBLIC -------
	----------------------*/
	/**
	 * This module handles map events. Like informing map movement, object selection and other
	 * changes. Not that ALL the eventlisteners and their callbacks will throw one event!
	 * But that event will have no extra parameters, so when you do special things, like selecting
	 * objects on the map, you should throw another event when that happens and you can pass on
	 * the objects that were selected from the map.
	 * This uses https://github.com/primus/eventemitter3 and follows the nodeJS event
	 * conventions: https://nodejs.org/api/events.html
	 * Events atm:
	 * - mapdrag
	 * - mapzoomed
	 * - objectsSelected (in hexagon extension units.js)
	 * - mapMoved
	 * - mapResize
	 * @namespace flatworld
	 * @class mapEvents
	 * @return {Object}     subsribe and publish
	 * @todo add mapfullscreen, mapfullSize and check if something is missing from the list
	 */
	var mapEvents = function () {
	  var TIMER_FOR_SAME_TYPE = 50;
	  var lastTimePublished = {};
	  var EE = new _eventemitter.EventEmitter();
	
	  /*---------------------
	  --------- API ---------
	  ----------------------*/
	  return {
	    subscribe: subscribe,
	    publish: publish,
	    debounce: debounce,
	    removeAllListeners: EE.removeAllListeners.bind(EE)
	  };
	
	  /*---------------------
	  -------- PUBLIC -------
	  ----------------------*/
	  function subscribe(type, cb) {
	    EE.on(type, cb);
	    lastTimePublished[type] = 0;
	  }
	  /**
	   * publish
	   * @param  {String}    type   Type can be string or an object with:
	   * { name: String (required), cooldown: Int, debounce: Int }.
	   * @param  {...[]} data       Can hold any data with rest of the parameters
	   */
	  function publish() {
	    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	    var datas = arguments[1];
	
	    var timestamp = new Date().getTime();
	    var realType = type.name || type;
	
	    if (lastTimePublished[realType] + (type.cooldown || TIMER_FOR_SAME_TYPE) < timestamp) {
	      lastTimePublished[realType] = timestamp;
	      EE.emit(realType, datas);
	    }
	  }
	
	  // Function from underscore.js
	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  function debounce(func, wait, immediate) {
	    var timeout = void 0;
	
	    return function () {
	      var context = this,
	          args = arguments;
	      var later = function later() {
	        timeout = null;
	        if (!immediate) func.apply(context, args);
	      };
	      var callNow = immediate && !timeout;
	      clearTimeout(timeout);
	      timeout = setTimeout(later, wait);
	      if (callNow) func.apply(context, args);
	    };
	  }
	}();
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = mapEvents;
	module.exports = exports['default'];

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _pixi = __webpack_require__(9);
	
	var PIXI = _interopRequireWildcard(_pixi);
	
	var _index = __webpack_require__(2);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/*---------------------
	------ VARIABLES ------
	---------------------*/
	
	/*---------------------
	-------- EXPORT -------
	---------------------*/
	var MapLayer = function (_PIXI$Container) {
	  _inherits(MapLayer, _PIXI$Container);
	
	  /**
	   * Creates a basic layer for the Map. This type of layer can not hold subcontainers. Note that different devices and graphic cards can
	   * only have specific size of bitmap drawn, and PIXI cache always draws a bitmap thus the default is: 4096, based on this site:
	   * http://webglstats.com/ and MAX_TEXTURE_SIZE. This is important also when caching.
	   *
	   * @namespace flatworld.maplayers
	   * @class MapLayer
	   * @constructor
	   * @param {Object} options                            optional options
	   * @param {String} options.name                       Layers name, used for identifying the layer. Useful in debugging, but can be
	   * used for finding correct layers too
	   * @param  {Object} options.coord                   coord starting coords of layer. Relative to parent map layer.
	   * @param  {Integer} options.coord.x         X coordinate
	   * @param  {Integer} options.coord.y         Y coordinate
	   * @param  {Object} options.specialLayer            Is this layer special (e.g. UILayer not included in normal operations)
	   * @param  {Integer} options.specialLayer.x         X coordinate
	   * @param  {Integer} options.specialLayer.y         Y coordinate
	   **/
	  function MapLayer() {
	    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref$name = _ref.name,
	        name = _ref$name === undefined ? '' : _ref$name,
	        _ref$coord = _ref.coord,
	        coord = _ref$coord === undefined ? { x: 0, y: 0 } : _ref$coord,
	        _ref$specialLayer = _ref.specialLayer,
	        specialLayer = _ref$specialLayer === undefined ? false : _ref$specialLayer,
	        _ref$zoomLayer = _ref.zoomLayer,
	        zoomLayer = _ref$zoomLayer === undefined ? true : _ref$zoomLayer,
	        _ref$selectable = _ref.selectable,
	        selectable = _ref$selectable === undefined ? false : _ref$selectable;
	
	    _classCallCheck(this, MapLayer);
	
	    var _this = _possibleConstructorReturn(this, (MapLayer.__proto__ || Object.getPrototypeOf(MapLayer)).call(this));
	
	    Object.assign(_this, coord);
	
	    /**
	     * Layers name, used for identifying the layer. Useful in debugging, but can be used for finding correct layers too
	     *
	     * @attribute name
	     * @type {String}
	     */
	    _this.name = '' + name;
	    /**
	     * Is this layer special (e.g. UILayer not included in normal operations)
	     *
	     * @attribute specialLayer
	     * @type {Boolean}
	     */
	    _this.specialLayer = !!specialLayer;
	    /**
	     * Will this layer change dynamically or can we assume that this holds the same objects always, until game reload
	     *
	     * @attribute static
	     * @type {Boolean}
	     */
	    _this.zoomLayer = !!zoomLayer;
	    /**
	     * Can you select objects from this layer. For example with Map.getObjectsUnderArea
	     *
	     * @attribute selectable
	     * @type {Boolean}
	     */
	    _this.selectable = selectable;
	    /**
	     * Every added UIObject will be listed here for removal and updating. The indexes in the list provide the easy option to remove only
	     * certain object from the UIObjects.
	     *
	     * @attribute UIObjectList
	     * @type {Array}
	     */
	    _this.UIObjectList = {};
	    return _this;
	  }
	  /**
	   * Does this layer use subcontainers.
	   *
	   * @method hasSubcontainers
	   * @return {Boolean} true = uses subcontainers.
	   */
	
	
	  _createClass(MapLayer, [{
	    key: 'hasSubcontainers',
	    value: function hasSubcontainers() {
	      return this.subcontainersConfig && this.subcontainersConfig.width && this.subcontainersConfig.height ? true : false;
	    }
	    /**
	     * Move layer based on given amounts
	     *
	     * @method move
	     * @param  {Object} coord            The amount of x and y coordinates we want the layer to move. I.e. { x: 5, y: 0 }. This would move
	     * the map 5 pixels horizontally and 0 pixels vertically
	     * @param  {Integer} coord.x         X coordinate
	     * @param  {Integer} coord.y         Y coordinate
	     **/
	
	  }, {
	    key: 'move',
	    value: function move(coord) {
	      this.x += coord.x;
	      this.y += coord.y;
	    }
	    /**
	     * set layer zoom
	     *
	     * @method setZoom
	     * @param {Number} amount The amount that you want the layer to zoom.
	     * @return {Number} The same amount that was given, except after transform to 2 decimals and type cast to Number
	     * */
	
	  }, {
	    key: 'setZoom',
	    value: function setZoom(amount) {
	      this.scale.x = this.scale.y = +amount.toFixed(2);
	
	      return this.scale.x;
	    }
	    /**
	     * get layer zoom
	     *
	     * @method getZoom
	     * @return {Boolean} current amount of zoom
	     * */
	
	  }, {
	    key: 'getZoom',
	    value: function getZoom() {
	      return this.scale.x;
	    }
	    /**
	     * Get primary layers, that this layer holds as children. So basically all children that are
	     * not special layers (such as UI layers etc.)
	     *
	     * @method getPrimaryLayers
	     * @return {Array}                            Primary children layers under this layer
	     * */
	
	  }, {
	    key: 'getPrimaryLayers',
	    value: function getPrimaryLayers() {
	      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          filters = _ref2.filters;
	
	      return this.children.filter(function (thisChild) {
	        if (filters && filters.doesItFilter("layer") && !filters.filter(thisChild).length || thisChild.specialLayer) {
	          return false;
	        }
	
	        return true;
	      });
	    }
	    /**
	     * Get all objects that are this layers children or subcontainers children. Does not return
	     * layers, but the objects. Works on primary layer only currently. So can not seek for
	     * complicated children structure, seeks only inside subcontainers.
	     *
	     * @method getObjects
	     * @param {MapDataManipulator}  filter  filter for filtering correct objects
	     * @return {Array}                      All the objects (not layers) found under this layer
	     * */
	
	  }, {
	    key: 'getObjects',
	    value: function getObjects(filter) {
	      // eslint-disable-line no-unused-vars
	      throw new Error('Has to be implemented in child class');
	    }
	    /**
	     * Create and add special layer, that holds UI effects in it. UILayer is normally positioned
	     * as movableLayers 3rd child. And the
	     * actual UI stuff is added there.
	     *
	     * @method createUILayer
	     * @param  {String} name          name of the layer
	     * @param  {Object} coord         Coordinates of the layer
	     * @param  {Integer} coord.x      X coordinate
	     * @param  {Integer} coord.y      Y coordinate
	     * @return {MapLayer}            The created UI layer
	     **/
	
	  }, {
	    key: 'createUILayer',
	    value: function createUILayer() {
	      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default UI layer';
	      var coord = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { x: 0, y: 0 };
	
	      var layer = new MapLayer(name, coord);
	
	      layer.specialLayer = true;
	      this.addChild(layer);
	
	      this.UILayer = layer;
	
	      return layer;
	    }
	    /**
	     * Return the UILayer. If no UILayer is yet created, will return undefined
	     *
	     * @method getUILayer
	     * @return {MapLayer | undefined}
	     */
	
	  }, {
	    key: 'getUILayer',
	    value: function getUILayer() {
	      return this.UILayer;
	    }
	    /**
	     * Adds and object to this layers UILayer child. If an object with the same name already exists, we remove it automatically and replace
	     * it with the new object given as parameter.
	     *
	     * @method addUIObject
	     * @param {Object} object   The UI object to be added under this layer
	     * @param {Object} UIName   Name of the UI object. This is important as you can use it to remove the UI object later or replace it.
	     * @return {Array}          All the UIObjects currently on this layer
	     */
	
	  }, {
	    key: 'addUIObject',
	    value: function addUIObject(object, UIName) {
	      if (this.UIObjectList[UIName] && Array.isArray(this.UIObjectList[UIName])) {
	        this.UIObjectList[UIName].push(object);
	      } else if (this.UIObjectList[UIName]) {
	        this.UIObjectList[UIName] = [this.UIObjectList[UIName]];
	        this.UIObjectList[UIName].push(object);
	      } else {
	        this.UIObjectList[UIName] = object;
	      }
	
	      if (!this.getUILayer()) {
	        this.UILayer = this.createUILayer();
	      }
	
	      this.UILayer.addChild(object);
	
	      return this.UIObjectList;
	    }
	    /**
	     * If object is given, removes that object, otherwiseRemove all the UIObjects from this layer
	     *
	     * @method deleteUIObjects
	     * @param {Object} object   If you wish to delete particular object
	     * @return {Array} empty    UIObjects array
	     * */
	
	  }, {
	    key: 'deleteUIObjects',
	    value: function deleteUIObjects(UIName) {
	      var _this2 = this;
	
	      var UILayer = this.getUILayer() || this.createUILayer();
	
	      if (UIName) {
	        var object = this.UIObjectList[UIName];
	
	        _removeObjectsFromLayer(object, UILayer);
	
	        this.UIObjectList[UIName] = undefined;
	        return;
	      } else {
	        Object.keys(this.UIObjectList).map(function (index) {
	          var object = _this2.UIObjectList[index];
	
	          _removeObjectsFromLayer(object, UILayer);
	
	          _this2.UIObjectList[index] = undefined;
	        });
	      }
	
	      return this.UIObjectList;
	    }
	  }]);
	
	  return MapLayer;
	}(PIXI.Container);
	
	var MapLayerParent = function (_MapLayer) {
	  _inherits(MapLayerParent, _MapLayer);
	
	  /**
	   * Layer designed to hold subcontainers. But can handle objects too. Different devices graphic cards can only have specific size of
	   * bitmap drawn, and PIXI cache always draws a bitmap. Thus the default is: 4096, based on this site: http://webglstats.com/ and
	   * MAX_TEXTURE_SIZE
	   *
	   * @class MapLayerParent
	   * @constructor
	   * @param {Object} options
	   * @param {String} options.name                    name layer property name, used for identifiying the layer, usefull in debugging,
	   * but used also otherwise too
	   * @param  {Object} options.coord                  starting coords of layer. Relative to parent map layer.
	   * @param  {Integer} options.coord.x               X coordinate
	   * @param  {Integer} options.coord.y               Y coordinate
	   * @param  {Object} options.subcontainers          Subontainer size. If given activated subcontainers, otherwise not.
	   * @param  {Integer} options.subcontainers.width   width (in pixels)
	   * @param  {Integer} options.subcontainers.height  height (in pixels)
	   * @param {Boolean} options.specialLayer           Is this special layer or not.
	   */
	  function MapLayerParent() {
	    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref3$name = _ref3.name,
	        name = _ref3$name === undefined ? '' : _ref3$name,
	        _ref3$coord = _ref3.coord,
	        coord = _ref3$coord === undefined ? { x: 0, y: 0 } : _ref3$coord,
	        _ref3$subcontainers = _ref3.subcontainers,
	        subcontainers = _ref3$subcontainers === undefined ? { width: 0, height: 0, maxDetectionOffset: 100 } : _ref3$subcontainers,
	        _ref3$specialLayer = _ref3.specialLayer,
	        specialLayer = _ref3$specialLayer === undefined ? false : _ref3$specialLayer,
	        _ref3$zoomLayer = _ref3.zoomLayer,
	        zoomLayer = _ref3$zoomLayer === undefined ? true : _ref3$zoomLayer,
	        _ref3$selectable = _ref3.selectable,
	        selectable = _ref3$selectable === undefined ? false : _ref3$selectable;
	
	    _classCallCheck(this, MapLayerParent);
	
	    var _this3 = _possibleConstructorReturn(this, (MapLayerParent.__proto__ || Object.getPrototypeOf(MapLayerParent)).call(this, arguments[0]));
	
	    _this3.oldAddChild = _get(MapLayerParent.prototype.__proto__ || Object.getPrototypeOf(MapLayerParent.prototype), 'addChild', _this3).bind(_this3);
	    _this3.subcontainersConfig = subcontainers;
	    _this3.subcontainerList = [];
	    _this3.selectable = selectable;
	    _this3.specialLayer = specialLayer;
	    return _this3;
	  }
	  /**
	   * We override the PIXIs own addchild functionality. Since we need to support subcontainers in
	   * addChild. We check subcontainers and
	   * then we call the original (PIXIs) addChild
	   *
	   * @method addChild
	   * @param {PIXI.DisplayObject} displayObject      PIXI.DisplayObject
	   */
	
	
	  _createClass(MapLayerParent, [{
	    key: 'addChild',
	    value: function addChild(displayObject) {
	      if (this.hasSubcontainers()) {
	        var correctContainer = setCorrectSubcontainer(displayObject, this);
	        this.oldAddChild(correctContainer);
	      } else {
	        this.oldAddChild(displayObject);
	      }
	
	      return displayObject;
	    }
	    /**
	     * Get all objects that are this layers children or subcontainers children. Does not return layers, but the objects. Works on primary layer only currently. So can not seek for complicated children structure, seeks only inside subcontainers.
	     *
	     * @method getObjects
	     * @return {Array}            All the objects (not layers) found under this layer
	     * */
	
	  }, {
	    key: 'getObjects',
	    value: function getObjects(filter) {
	      var allObjects = [];
	      var willFilter = filter && filter.doesItFilter("object");
	      var objects = void 0;
	
	      this.getSubcontainers().forEach(function (subcontainer) {
	        if (willFilter) {
	          objects = subcontainer.children.filter(function (o) {
	            return !!filter.filter(o).length;
	          });
	        } else {
	          objects = subcontainer.children;
	        }
	
	        allObjects.push(objects);
	      });
	
	      return _index.utils.general.flatten2Levels(allObjects);
	    }
	    /**
	     * Returns the configurations set for subcontainers.
	     *
	     * @method getSubcontainerConfigs
	     */
	
	  }, {
	    key: 'getSubcontainerConfigs',
	    value: function getSubcontainerConfigs() {
	      return this.subcontainersConfig;
	    }
	    /**
	     * Returns subcontainers based on the given coordinates. Can be applied through a MapDataManipulator filter also.
	     *
	     * @method getSubcontainersByCoordinates
	     * @param  {Object} coordinates
	     * @param  {Integer} coordinates.x                  X coordinate
	     * @param  {Integer} coordinates.y                  Y coordinate
	     * @param  {MapDataManipulator} options.filter      Filter for selecting only certain subcontainers
	     */
	
	  }, {
	    key: 'getSubcontainersByCoordinates',
	    value: function getSubcontainersByCoordinates(coordinates) {
	      if (!this.hasSubcontainers()) {
	        throw new Error('tried to retrieve subcontainers, when they are not present');
	      }
	
	      var foundSubcontainers = _getClosestSubcontainers(this, coordinates);
	
	      return foundSubcontainers;
	    }
	    /**
	     * @method getSubcontainers
	     */
	
	  }, {
	    key: 'getSubcontainers',
	    value: function getSubcontainers() {
	      return _index.utils.general.flatten2Levels(this.subcontainerList);
	    }
	  }]);
	
	  return MapLayerParent;
	}(MapLayer);
	
	var MapSubcontainer = function (_PIXI$Container2) {
	  _inherits(MapSubcontainer, _PIXI$Container2);
	
	  /**
	   * Subcontainers are containers that hold objects like units and terrain etc. under them. They have some restrictions atm. since they
	   * are PIXI.ParticleContainers. But when needed we can extend MapLayers with another class which is subcontainer, but not
	   * ParticleContainer at the present there is no need, so we won't extend yet. Subcontainers help the layers to make better movement of
	   * the map, by making subcontainers visible or invisible and even helping with selecting objects on the map. Thus we don't need to use
	   * our inefficient Quadtree. The intention was to use PIXI.ParticleContainer for this, but it seems it doesn't clean up the memory
	   * afterwards the same way as normal Container.
	   *
	   * @private
	   * @class MapSubcontainer
	   * @constructor
	   * @param  {Object} size              Subontainer size. If given activated subcontainers, otherwise not.
	   * @param  {Integer} size.width       width (in pixels)
	   * @param  {Integer} size.height      height (in pixels)
	   */
	  function MapSubcontainer(size) {
	    _classCallCheck(this, MapSubcontainer);
	
	    var _this4 = _possibleConstructorReturn(this, (MapSubcontainer.__proto__ || Object.getPrototypeOf(MapSubcontainer)).call(this));
	
	    _this4.specialLayer = true;
	    _this4.size = size;
	    _this4.selectable = false;
	    return _this4;
	  }
	  /**
	   * Gets this subcontainers coordinates and size
	   *
	   * @method getSubcontainerArea
	   * @param {Number} scale                              The size of scale the map currently has
	   * @param {Boolean} options.toGlobal                  Do we get the global coordinates or local
	   * @return {Object}                                   x, y, width and height returned inside object.
	   */
	
	
	  _createClass(MapSubcontainer, [{
	    key: 'getSubcontainerArea',
	    value: function getSubcontainerArea() {
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { toGlobal: true };
	
	      var coordinates = options.toGlobal ? this.toGlobal(new PIXI.Point(0, 0)) : this;
	
	      return {
	        x: Math.round(coordinates.x),
	        y: Math.round(coordinates.y),
	        width: Math.round(this.size.width),
	        height: Math.round(this.size.height)
	      };
	    }
	  }]);
	
	  return MapSubcontainer;
	}(PIXI.Container);
	
	var MinimapLayer = function (_PIXI$Container3) {
	  _inherits(MinimapLayer, _PIXI$Container3);
	
	  /**
	   * Subcontainers are containers that hold objects like units and terrain etc. under them. They have some restrictions atm. since they
	   * are PIXI.ParticleContainers. But when needed we can extend MapLayers with another class which is subcontainer, but not
	   * ParticleContainer at the present there is no need, so we won't extend yet. Subcontainers help the layers to make better movement of
	   * the map, by making subcontainers visible or invisible and even helping with selecting objects on the map. Thus we don't need to use
	   * our inefficient Quadtree. The intention was to use PIXI.ParticleContainer for this, but it seems it doesn't clean up the memory
	   * afterwards the same way as normal Container.
	   *
	   * @private
	   * @class MapSubcontainer
	   * @constructor
	   * @param  {Object} size              Subontainer size. If given activated subcontainers, otherwise not.
	   * @param  {Integer} size.width       width (in pixels)
	   * @param  {Integer} size.height      height (in pixels)
	   */
	  function MinimapLayer(size) {
	    _classCallCheck(this, MinimapLayer);
	
	    var _this5 = _possibleConstructorReturn(this, (MinimapLayer.__proto__ || Object.getPrototypeOf(MinimapLayer)).call(this));
	
	    _this5.specialLayer = true;
	    _this5.targetSize = size;
	    _this5.selectable = false;
	    return _this5;
	  }
	
	  return MinimapLayer;
	}(PIXI.Container);
	/*---------------------
	------- PRIVATE -------
	----------------------*/
	/**
	 * Helper function for setting subcontainers to parent containers. Adds subcontainers when
	 * needed. Subcontainers are not and can not be initialized at the start as we won't know the
	 * size of the parent container. Container is always dynamic in size.
	 *
	 *
	 * @method setCorrectSubcontainer
	 * @private
	 * @static
	 * @method setCorrectSubcontainer
	 * @param {PIXI.DisplayObject} displayObject
	 * @param {Object} parentLayer
	 */
	
	
	function setCorrectSubcontainer(displayObject, parentLayer) {
	  var subcontainersConfig = parentLayer.subcontainersConfig,
	      subcontainerList = parentLayer.subcontainerList;
	
	  var xIndex = Math.floor(displayObject.x / subcontainersConfig.width);
	  var yIndex = Math.floor(displayObject.y / subcontainersConfig.height);
	  var thisSubcontainer = void 0;
	
	  subcontainerList[xIndex] = subcontainerList[xIndex] || [];
	  thisSubcontainer = subcontainerList[xIndex][yIndex] = subcontainerList[xIndex][yIndex] || [];
	
	  if (subcontainerList[xIndex][yIndex].length <= 0) {
	    thisSubcontainer = new MapSubcontainer({
	      x: xIndex * subcontainersConfig.width,
	      y: yIndex * subcontainersConfig.height,
	      width: subcontainersConfig.width,
	      height: subcontainersConfig.height
	    });
	
	    subcontainerList[xIndex][yIndex] = thisSubcontainer;
	    thisSubcontainer.x = xIndex * subcontainersConfig.width;
	    thisSubcontainer.y = yIndex * subcontainersConfig.height;
	    thisSubcontainer.visible = !subcontainersConfig.isHiddenByDefault;
	  }
	
	  displayObject.x -= thisSubcontainer.x;
	  displayObject.y -= thisSubcontainer.y;
	  subcontainerList[xIndex][yIndex].addChild(displayObject);
	
	  return subcontainerList[xIndex][yIndex];
	}
	/**
	 * Get the closest subcontainers of the given area.
	 *
	 * @method setCorrectSubcontainer
	 * @private
	 * @static
	 * @method _getClosestSubcontainers
	 * @param  {Object} layer                         Instance of PIXI.Container - The layer being used
	 * @param  {Object} givenCoordinates              Coordinates or rectangle
	 * @param  {Integer} givenCoordinates.x           x coordinate
	 * @param  {Integer} givenCoordinates.y           y coordinate
	 * @param  {Integer} givenCoordinates.width       width of the rectangle
	 * @param  {Integer} givenCoordinates.height      height of the rectangle
	 * @param  {Object} options                       Optional options.
	 * @return {Array}                                Array of found subcontainers.
	 */
	function _getClosestSubcontainers(layer, givenCoordinates) {
	  var _layer$getSubcontaine = layer.getSubcontainerConfigs(),
	      width = _layer$getSubcontaine.width,
	      height = _layer$getSubcontaine.height,
	      maxDetectionOffset = _layer$getSubcontaine.maxDetectionOffset;
	
	  var coordinates = {
	    x: givenCoordinates.x >= 0 ? givenCoordinates.x - maxDetectionOffset : -maxDetectionOffset,
	    y: givenCoordinates.y >= 0 ? givenCoordinates.y - maxDetectionOffset : -maxDetectionOffset,
	    width: (givenCoordinates.width || 0) + maxDetectionOffset * 2,
	    height: (givenCoordinates.height || 0) + maxDetectionOffset * 2
	  };
	  var allFoundSubcontainers = [];
	  var xIndex = Math.floor(coordinates.x / width);
	  var yIndex = Math.floor(coordinates.y / height);
	  var x2 = coordinates.width ? coordinates.x + coordinates.width : +coordinates.x;
	  var y2 = coordinates.height ? coordinates.y + coordinates.height : +coordinates.y;
	  var widthIndex = Math.floor(x2 / width);
	  var heightIndex = Math.floor(y2 / height);
	  var subcontainerList = layer.subcontainerList;
	
	  for (var thisXIndex = xIndex; thisXIndex <= widthIndex; thisXIndex++) {
	    if (thisXIndex >= 0 && subcontainerList && subcontainerList[thisXIndex]) {
	      for (var thisYIndex = yIndex; thisYIndex <= heightIndex; thisYIndex++) {
	        if (thisYIndex >= 0 && subcontainerList[thisXIndex][thisYIndex]) {
	          allFoundSubcontainers.push(subcontainerList[thisXIndex][thisYIndex]);
	        }
	      }
	    }
	  }
	
	  return allFoundSubcontainers;
	}
	
	function _removeObjectsFromLayer(object, layer) {
	  if (Array.isArray(object)) {
	    object.forEach(function (o) {
	      layer.removeChild(o);
	    });
	  } else {
	    layer.removeChild(object);
	  }
	}
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = {
	  MapLayer: MapLayer,
	  MapLayerParent: MapLayerParent,
	  MinimapLayer: MinimapLayer
	};
	module.exports = exports['default'];

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _javascriptStateMachine = __webpack_require__(199);
	
	var StateMachine = _interopRequireWildcard(_javascriptStateMachine);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	/*---------------------
	-------- PUBLIC -------
	----------------------*/
	/**
	 * Finite state machine for the map. Uses this library and pretty much it's API https://github.com/jakesgordon/javascript-state-machine.
	 *
	 * @namespace flatworld
	 * @class mapStates
	 * @requires  state-machine library
	 */
	var mapStates = StateMachine.create({
	  initial: 'statusQuo',
	  events: [
	  /**
	   * When multiple objects are represented as an option
	   *
	   * @method objectSelectDialog
	   */
	  { name: 'objectSelectDialog', from: ['statusQuo', 'objectSelected'], to: 'objectSelectDialogOpened' },
	  /**
	   * When the object is selected
	   *
	   * @method objectSelect
	   */
	  { name: 'objectSelect', from: ['statusQuo', 'objectSelected', 'objectSelectDialogOpened'], to: 'objectSelected' },
	  /**
	   * When situation is normal, nothing selected.
	   *
	   * @method normalize
	   */
	  { name: 'normalize', from: ['objectSelected', 'objectSelectDialogOpened'], to: 'statusQuo' },
	  /**
	   * When object is issued a move order
	   *
	   * @method objectOrder
	   */
	  { name: 'objectOrder', from: 'objectSelected', to: 'animatingObject' },
	  /**
	   * When object ends it's movement animation
	   *
	   * @method objectOrderEnd
	   */
	  { name: 'objectOrderEnd', from: 'animatingObject', to: 'objectSelected' },
	  /**
	   * The games main UI is opened and the map stays at the background, normally non-responsive
	   *
	   * @method UIOpen
	   */
	  { name: 'UIOpen', from: ['statusQuo', 'objectSelected', 'objectSelectDialogOpened'], to: 'mainUIOpened' },
	  /**
	   * Games main UI is closed and map is activated again
	   *
	   * @method UIClose
	   */
	  { name: 'UIClose', from: 'mainUIOpened', to: 'statusQuo' }] });
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = mapStates;
	module.exports = exports['default'];

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/*
	
	  Javascript State Machine Library - https://github.com/jakesgordon/javascript-state-machine
	
	  Copyright (c) 2012, 2013, 2014, 2015, Jake Gordon and contributors
	  Released under the MIT license - https://github.com/jakesgordon/javascript-state-machine/blob/master/LICENSE
	
	*/
	
	(function () {
	
	  var StateMachine = {
	
	    //---------------------------------------------------------------------------
	
	    VERSION: "2.3.5",
	
	    //---------------------------------------------------------------------------
	
	    Result: {
	      SUCCEEDED:    1, // the event transitioned successfully from one state to another
	      NOTRANSITION: 2, // the event was successfull but no state transition was necessary
	      CANCELLED:    3, // the event was cancelled by the caller in a beforeEvent callback
	      PENDING:      4  // the event is asynchronous and the caller is in control of when the transition occurs
	    },
	
	    Error: {
	      INVALID_TRANSITION: 100, // caller tried to fire an event that was innapropriate in the current state
	      PENDING_TRANSITION: 200, // caller tried to fire an event while an async transition was still pending
	      INVALID_CALLBACK:   300 // caller provided callback function threw an exception
	    },
	
	    WILDCARD: '*',
	    ASYNC: 'async',
	
	    //---------------------------------------------------------------------------
	
	    create: function(cfg, target) {
	
	      var initial      = (typeof cfg.initial == 'string') ? { state: cfg.initial } : cfg.initial; // allow for a simple string, or an object with { state: 'foo', event: 'setup', defer: true|false }
	      var terminal     = cfg.terminal || cfg['final'];
	      var fsm          = target || cfg.target  || {};
	      var events       = cfg.events || [];
	      var callbacks    = cfg.callbacks || {};
	      var map          = {}; // track state transitions allowed for an event { event: { from: [ to ] } }
	      var transitions  = {}; // track events allowed from a state            { state: [ event ] }
	
	      var add = function(e) {
	        var from = (e.from instanceof Array) ? e.from : (e.from ? [e.from] : [StateMachine.WILDCARD]); // allow 'wildcard' transition if 'from' is not specified
	        map[e.name] = map[e.name] || {};
	        for (var n = 0 ; n < from.length ; n++) {
	          transitions[from[n]] = transitions[from[n]] || [];
	          transitions[from[n]].push(e.name);
	
	          map[e.name][from[n]] = e.to || from[n]; // allow no-op transition if 'to' is not specified
	        }
	      };
	
	      if (initial) {
	        initial.event = initial.event || 'startup';
	        add({ name: initial.event, from: 'none', to: initial.state });
	      }
	
	      for(var n = 0 ; n < events.length ; n++)
	        add(events[n]);
	
	      for(var name in map) {
	        if (map.hasOwnProperty(name))
	          fsm[name] = StateMachine.buildEvent(name, map[name]);
	      }
	
	      for(var name in callbacks) {
	        if (callbacks.hasOwnProperty(name))
	          fsm[name] = callbacks[name]
	      }
	
	      fsm.current     = 'none';
	      fsm.is          = function(state) { return (state instanceof Array) ? (state.indexOf(this.current) >= 0) : (this.current === state); };
	      fsm.can         = function(event) { return !this.transition && (map[event].hasOwnProperty(this.current) || map[event].hasOwnProperty(StateMachine.WILDCARD)); }
	      fsm.cannot      = function(event) { return !this.can(event); };
	      fsm.transitions = function()      { return transitions[this.current]; };
	      fsm.isFinished  = function()      { return this.is(terminal); };
	      fsm.error       = cfg.error || function(name, from, to, args, error, msg, e) { throw e || msg; }; // default behavior when something unexpected happens is to throw an exception, but caller can override this behavior if desired (see github issue #3 and #17)
	
	      if (initial && !initial.defer)
	        fsm[initial.event]();
	
	      return fsm;
	
	    },
	
	    //===========================================================================
	
	    doCallback: function(fsm, func, name, from, to, args) {
	      if (func) {
	        try {
	          return func.apply(fsm, [name, from, to].concat(args));
	        }
	        catch(e) {
	          return fsm.error(name, from, to, args, StateMachine.Error.INVALID_CALLBACK, "an exception occurred in a caller-provided callback function", e);
	        }
	      }
	    },
	
	    beforeAnyEvent:  function(fsm, name, from, to, args) { return StateMachine.doCallback(fsm, fsm['onbeforeevent'],                       name, from, to, args); },
	    afterAnyEvent:   function(fsm, name, from, to, args) { return StateMachine.doCallback(fsm, fsm['onafterevent'] || fsm['onevent'],      name, from, to, args); },
	    leaveAnyState:   function(fsm, name, from, to, args) { return StateMachine.doCallback(fsm, fsm['onleavestate'],                        name, from, to, args); },
	    enterAnyState:   function(fsm, name, from, to, args) { return StateMachine.doCallback(fsm, fsm['onenterstate'] || fsm['onstate'],      name, from, to, args); },
	    changeState:     function(fsm, name, from, to, args) { return StateMachine.doCallback(fsm, fsm['onchangestate'],                       name, from, to, args); },
	
	    beforeThisEvent: function(fsm, name, from, to, args) { return StateMachine.doCallback(fsm, fsm['onbefore' + name],                     name, from, to, args); },
	    afterThisEvent:  function(fsm, name, from, to, args) { return StateMachine.doCallback(fsm, fsm['onafter'  + name] || fsm['on' + name], name, from, to, args); },
	    leaveThisState:  function(fsm, name, from, to, args) { return StateMachine.doCallback(fsm, fsm['onleave'  + from],                     name, from, to, args); },
	    enterThisState:  function(fsm, name, from, to, args) { return StateMachine.doCallback(fsm, fsm['onenter'  + to]   || fsm['on' + to],   name, from, to, args); },
	
	    beforeEvent: function(fsm, name, from, to, args) {
	      if ((false === StateMachine.beforeThisEvent(fsm, name, from, to, args)) ||
	          (false === StateMachine.beforeAnyEvent( fsm, name, from, to, args)))
	        return false;
	    },
	
	    afterEvent: function(fsm, name, from, to, args) {
	      StateMachine.afterThisEvent(fsm, name, from, to, args);
	      StateMachine.afterAnyEvent( fsm, name, from, to, args);
	    },
	
	    leaveState: function(fsm, name, from, to, args) {
	      var specific = StateMachine.leaveThisState(fsm, name, from, to, args),
	          general  = StateMachine.leaveAnyState( fsm, name, from, to, args);
	      if ((false === specific) || (false === general))
	        return false;
	      else if ((StateMachine.ASYNC === specific) || (StateMachine.ASYNC === general))
	        return StateMachine.ASYNC;
	    },
	
	    enterState: function(fsm, name, from, to, args) {
	      StateMachine.enterThisState(fsm, name, from, to, args);
	      StateMachine.enterAnyState( fsm, name, from, to, args);
	    },
	
	    //===========================================================================
	
	    buildEvent: function(name, map) {
	      return function() {
	
	        var from  = this.current;
	        var to    = map[from] || map[StateMachine.WILDCARD] || from;
	        var args  = Array.prototype.slice.call(arguments); // turn arguments into pure array
	
	        if (this.transition)
	          return this.error(name, from, to, args, StateMachine.Error.PENDING_TRANSITION, "event " + name + " inappropriate because previous transition did not complete");
	
	        if (this.cannot(name))
	          return this.error(name, from, to, args, StateMachine.Error.INVALID_TRANSITION, "event " + name + " inappropriate in current state " + this.current);
	
	        if (false === StateMachine.beforeEvent(this, name, from, to, args))
	          return StateMachine.Result.CANCELLED;
	
	        if (from === to) {
	          StateMachine.afterEvent(this, name, from, to, args);
	          return StateMachine.Result.NOTRANSITION;
	        }
	
	        // prepare a transition method for use EITHER lower down, or by caller if they want an async transition (indicated by an ASYNC return value from leaveState)
	        var fsm = this;
	        this.transition = function() {
	          fsm.transition = null; // this method should only ever be called once
	          fsm.current = to;
	          StateMachine.enterState( fsm, name, from, to, args);
	          StateMachine.changeState(fsm, name, from, to, args);
	          StateMachine.afterEvent( fsm, name, from, to, args);
	          return StateMachine.Result.SUCCEEDED;
	        };
	        this.transition.cancel = function() { // provide a way for caller to cancel async transition if desired (issue #22)
	          fsm.transition = null;
	          StateMachine.afterEvent(fsm, name, from, to, args);
	        }
	
	        var leave = StateMachine.leaveState(this, name, from, to, args);
	        if (false === leave) {
	          this.transition = null;
	          return StateMachine.Result.CANCELLED;
	        }
	        else if (StateMachine.ASYNC === leave) {
	          return StateMachine.Result.PENDING;
	        }
	        else {
	          if (this.transition) // need to check in case user manually called transition() but forgot to return StateMachine.ASYNC
	            return this.transition();
	        }
	
	      };
	    }
	
	  }; // StateMachine
	
	  //===========================================================================
	
	  //======
	  // NODE
	  //======
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = StateMachine;
	    }
	    exports.StateMachine = StateMachine;
	  }
	  //============
	  // AMD/REQUIRE
	  //============
	  else if (typeof define === 'function' && define.amd) {
	    define(function(require) { return StateMachine; });
	  }
	  //========
	  // BROWSER
	  //========
	  else if (typeof window !== 'undefined') {
	    window.StateMachine = StateMachine;
	  }
	  //===========
	  // WEB WORKER
	  //===========
	  else if (typeof self !== 'undefined') {
	    self.StateMachine = StateMachine;
	  }
	
	}());


/***/ },
/* 200 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/*---------------------
	--------- API ---------
	----------------------*/
	var ObjectManager = function () {
	  /**
	   * this module is responsible for doing hitTesting, like returning the units on certain clicked coordinates or when objects or areas
	   * collide with each other.
	   *
	   * @namespace flatworld
	   * @class ObjectManager
	   * @constructor
	   * @todo It might be a good idea to make the hitDetection more extensive. Now it just uses point or rectangle / bounds to detect hits.
	   * It could use sprites or forms.
	   */
	  function ObjectManager() {
	    _classCallCheck(this, ObjectManager);
	  }
	  /**
	   * Retrieve objects under certain coordinates or area, if size is given. Uses subcontainers when used, no other options yet.
	   *
	   * @method retrieve
	   * @param {Object} allCoords                                The coordinates which we want to hitTest
	   * @param {x:Integer, y:Integer} allCoords.globalCoords     Global coordinates on static layer / canvas
	   * @param {x:Integer, y:Integer} allCoords.globalCoords.x
	   * @param {x:Integer, y:Integer} allCoords.globalCoords.y
	   * @param {Object} allCoords.localCoords                    Local coordiantes on movable layer
	   * @param {x:Integer, y:Integer} allCoords.localCoords.x
	   * @param {x:Integer, y:Integer} allCoords.localCoords.y
	   * @param {string} type                                     type of the object / layer that we want to retrieve
	   * @param {Object} options                                  optional options
	   * @param {Array} options.subcontainers                     The subcontainers we match against
	   * @param {Object} options.size                             Size of the rectangle area to match against, if we want to match rectangle
	   * instead of one point
	   * @param {Integer} options.size.width
	   * @param {Integer} options.size.height
	   * @return {Array}                                          matched objects
	   *
	   * @todo add checks for rectangles. Now we can only check with width = 0 && height = 0
	   */
	
	
	  _createClass(ObjectManager, [{
	    key: "retrieve",
	    value: function retrieve(allCoords) {
	      var containers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { type: undefined, size: { width: 0, height: 0 } };
	      var size = options.size,
	          type = options.type;
	      var globalCoords = allCoords.globalCoords;
	
	      var foundObjs = [];
	
	      if (containers.length > 0) {
	        containers.forEach(function (container) {
	          foundObjs = foundObjs.concat(container.children);
	        });
	
	        if (!size.width || !size.height) {
	          foundObjs = filterChildren(globalCoords, foundObjs, type);
	        }
	      } else {
	        return [];
	      }
	
	      return foundObjs;
	    }
	  }]);
	
	  return ObjectManager;
	}();
	
	function filterChildren(globalCoords) {
	  var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
	
	  return children.filter(function (obj) {
	    if (type && type !== obj.type) {
	      return false;
	    }
	
	    var isHit = obj.hitTest ? obj.hitTest(globalCoords) : true;
	
	    return isHit;
	  });
	}
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = ObjectManager;
	module.exports = exports["default"];

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _pixi = __webpack_require__(9);
	
	var PIXI = _interopRequireWildcard(_pixi);
	
	var _index = __webpack_require__(2);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/*-----------------------
	---------- API ----------
	-----------------------*/
	var ObjectSprite = function (_PIXI$Sprite) {
	  _inherits(ObjectSprite, _PIXI$Sprite);
	
	  /**
	   * The base class of all sprite objects
	   *
	   * @namespace flatworld.objects
	   * @class ObjectSprite
	   * @constructor
	   * @extends PIXI.Sprite
	   * @param {PIXI.Point} coords       the coordinate where the object is located at, relative to it's parent
	   * @param {Object} {}
	   * @param {Object} {}.data          objects data, that will be used in the game. It will not actually be mainly used
	   * in graphical but rather things  like unit-data and city-data presentations etc.
	   */
	  function ObjectSprite(texture) {
	    var coord = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { x: 0, y: 0 };
	
	    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	        _ref$data = _ref.data,
	        data = _ref$data === undefined ? null : _ref$data;
	
	    _classCallCheck(this, ObjectSprite);
	
	    /* We need to round the numbers. If there are decimal values, the graphics will get blurry */
	    var _this = _possibleConstructorReturn(this, (ObjectSprite.__proto__ || Object.getPrototypeOf(ObjectSprite)).call(this, texture));
	
	    var exactCoords = {
	      x: Math.round(coord.x),
	      y: Math.round(coord.y)
	    };
	    _this.position.set(exactCoords.x, exactCoords.y);
	    /**
	     * Name of the object. Used mostly for debugging
	     *
	     * @attribute name
	     * @type {String}
	     */
	    _this.name = 'Objects_sprite_' + _this.id;
	    /**
	     * Type of the object. Can be used for filtering, ordering or finding correct objects.
	     *
	     * @attribute type
	     * @type {String}
	     */
	    _this.type = 'None';
	    /**
	     * Is the object highligtable.
	     *
	     * @attribute highlightable
	     * @type {Boolean}
	     */
	    _this.highlightable = true;
	    /**
	     * Objects custom data. Holds unit statistics and most data. Like unit movement speed etc.
	     *
	     * @attribute data
	     * @type {Object}
	     */
	    _this.data = data;
	    /**
	     * Object area width in pixels.
	     *
	     * @attribute areaWidth
	     * @type {Number}
	     */
	    _this.areaWidth = _this.width;
	    /**
	     * Object area height in pixels.
	     *
	     * @attribute areaHeight
	     * @type {Number}
	     */
	    _this.areaHeight = _this.height;
	    /**
	     * If this object is static. Meaning it's position won't be changed etc. This can be used e.g. in rendering the minimap. The static
	     * objects and then the dynamic separately.
	     *
	     * @attribute static
	     * @type {Boolean}
	     */
	    _this.static = true;
	    /**
	     * This is a color used to generate minimap functionality. Holds a color in hexadecimal
	     *
	     * @type {Number}
	     */
	    _this.minimapColor = 0xFF0000;
	    /**
	     * We pre-calculate global and map coordinates for all objects, to make calculations faster
	     * and the whole engine more easy to use.
	     *
	     * @type {Object}
	     */
	    _this.coordinates = {};
	    _initializeCoordinates(_this.coordinates);
	    return _this;
	  }
	  /**
	   * Drawing the object
	   *
	   * @method innerDraw
	   * @param {Number} x coordinate x
	   * @param {Number} y coordinate y
	   * @return this object instance
	   */
	
	
	  _createClass(ObjectSprite, [{
	    key: 'innerDraw',
	    value: function innerDraw(x, y) {
	      this.fromFrame(this.currentFrame);
	      this.x = x;
	      this.y = y;
	
	      return this;
	    }
	    /**
	     * Draws new frame to animate or such
	     *
	     * @method drawNewFrame
	     * @param {Number} x                coordinate x
	     * @param {Number} y                coordinate y
	     * @param {Number} newFrame         New frame number to animate to
	     * @return this object instance
	     */
	
	  }, {
	    key: 'drawNewFrame',
	    value: function drawNewFrame(x, y, newFrame) {
	      this.currentFrame = newFrame;
	
	      return this.innerDraw(x, y);
	    }
	    /**
	     * Get the area that is reserved for the graphical presenation of this object as a rectangle.
	     *
	     * @method getGraphicalArea
	     * @param  {Object} options       toGlobal: Boolean. Should the method return global coordinates or local (movableLayer)
	     * @return {AreaSize}               { x: Number, y: Number, width: Number, height: Number}
	     */
	
	  }, {
	    key: 'getGraphicalArea',
	    value: function getGraphicalArea() {
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { toGlobal: true };
	
	      var coordinates = options.toGlobal ? this.toGlobal(new PIXI.Point(0, 0)) : this;
	
	      return {
	        x: Math.round(coordinates.x),
	        y: Math.round(coordinates.y),
	        width: Math.round(this.width),
	        height: Math.round(this.height)
	      };
	    }
	    /**
	     * Clone object
	     *
	     * @method clone
	     * @param  {Object} renderer              PIXI renderer
	     * @param  {Object} options               position: Boolean, anchor: Boolean
	     * @return {Object}                       cloned object
	     */
	
	  }, {
	    key: 'clone',
	    value: function clone(renderer) {
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { position: false, anchor: false, scale: false };
	
	      var newSprite = new PIXI.Sprite();
	
	      newSprite.texture = renderer.generateTexture(this);
	
	      options.anchor && newSprite.anchor.set(this.anchor.x, this.anchor.y);
	      options.position && newSprite.position.set(this.x, this.y);
	      options.scale && newSprite.scale.set(this.scale.x, this.scale.y);
	
	      Object.setPrototypeOf(newSprite, this.constructor.prototype);
	
	      return newSprite;
	    }
	    /**
	     * We pre-calculate global and map coordinates for all objects, to make calculations faster
	     * and the whole engine more easy to use.
	     */
	
	  }, {
	    key: 'initializeCoordinates',
	    value: function initializeCoordinates(mapInstance) {
	      _initializeCoordinates(this.coordinates);
	      this.getMapCoordinates(mapInstance);
	      this.getCenterCoordinates();
	    }
	  }, {
	    key: 'getGlobalCoordinates',
	    value: function getGlobalCoordinates(coordinates) {
	      return this.toGlobal(coordinates || _index.constants.ZERO_COORDINATES);
	    }
	  }, {
	    key: 'getMapCoordinates',
	    value: function getMapCoordinates(mapInstance) {
	      this.coordinates.map = this.coordinates.map || mapInstance.getMapCoordinates(this);
	      return Object.assign({}, this.coordinates.map);
	    }
	  }, {
	    key: 'getCenterCoordinates',
	    value: function getCenterCoordinates() {
	      if (!this.coordinates.center) {
	        this.coordinates.center = {
	          x: this.width / 2,
	          y: this.height / 2
	        };
	      }
	
	      return this.coordinates.center;
	    }
	  }]);
	
	  return ObjectSprite;
	}(PIXI.Sprite);
	
	var ObjectSpriteTerrain = function (_ObjectSprite) {
	  _inherits(ObjectSpriteTerrain, _ObjectSprite);
	
	  /**
	   * Terrain tile like desert or mountain, non-movable and cacheable. Normally, but not necessarily, these are
	   * inherited, depending on the map type. For example you might want to add some click area for these
	   *
	   * @class ObjectSpriteTerrain
	   * @constructor
	   * @extends ObjectSprite
	   * @param {Coordinates} coords        format: {x: Number, y: Number}. Coordinates for the object relative to it's parent
	   * @param {object} data               This units custom data
	   */
	  function ObjectSpriteTerrain(texture, coords) {
	    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	        _ref2$data = _ref2.data,
	        data = _ref2$data === undefined ? null : _ref2$data;
	
	    _classCallCheck(this, ObjectSpriteTerrain);
	
	    var _this2 = _possibleConstructorReturn(this, (ObjectSpriteTerrain.__proto__ || Object.getPrototypeOf(ObjectSpriteTerrain)).call(this, texture, coords, { data: data }));
	
	    _this2.name = 'DefaultTerrainObject';
	    _this2.type = 'terrain';
	    _this2.highlightable = false;
	    return _this2;
	  }
	
	  return ObjectSpriteTerrain;
	}(ObjectSprite);
	
	var ObjectSpriteUnit = function (_ObjectSprite2) {
	  _inherits(ObjectSpriteUnit, _ObjectSprite2);
	
	  /**
	   * Map unit like infantry or worker, usually something with actions or movable. Usually these are extended, depending on the map type.
	   * For example you might want to add some click area for these (e.g. hexagon)
	   *
	   * @class ObjectSpriteUnit
	   * @constructor
	   * @extends ObjectSprite
	   * @requires graphics
	   * @param {Object} coords               Coordinates for the object relative to it's parent
	   * @param {Integer} coords.x            X coordinate
	   * @param {Integer} coords.y            Y coordinate
	   * @param {object} data                 This units data
	   */
	  function ObjectSpriteUnit(texture, coords) {
	    var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	        _ref3$data = _ref3.data,
	        data = _ref3$data === undefined ? null : _ref3$data;
	
	    _classCallCheck(this, ObjectSpriteUnit);
	
	    var _this3 = _possibleConstructorReturn(this, (ObjectSpriteUnit.__proto__ || Object.getPrototypeOf(ObjectSpriteUnit)).call(this, texture, coords, { data: data }));
	
	    _this3.name = 'DefaultUnitObjects';
	    _this3.type = 'unit';
	    /**
	     * actions bound to this object. @todo THIS HAS NOT BEEN IMPLEMENTED YET!
	     *
	     * @attribute actions
	     * @type {Object}
	     */
	    _this3.actions = {};
	    return _this3;
	  }
	  /**
	   * Execute action on units (move, attack etc.). @todo THIS HAS NOT BEEN IMPLEMENTED YET!
	   *
	   * @method  doAction
	   * @param {String} type
	   */
	
	
	  _createClass(ObjectSpriteUnit, [{
	    key: 'doAction',
	    value: function doAction(type) {
	      this.actions[type].forEach(function (action) {
	        action();
	      });
	    }
	    /**
	     * Add certain action type. @todo THIS HAS NOT BEEN IMPLEMENTED YET!
	     *
	     * @method addActionType
	     * @param {String} type
	     */
	
	  }, {
	    key: 'addActionType',
	    value: function addActionType(type) {
	      this.actions[type] = this.actions[type] || [];
	    }
	    /**
	     * Attach callback for the certain action type. @todo THIS HAS NOT BEEN IMPLEMENTED YET!
	     *
	     * @method addCallbackToAction
	     * @param {String} type
	     * @param {Function} cb
	     */
	
	  }, {
	    key: 'addCallbackToAction',
	    value: function addCallbackToAction(type, cb) {
	      this.actions[type].push(cb);
	    }
	    /**
	     * @method dropShadow
	     */
	
	  }, {
	    key: 'dropShadow',
	    value: function dropShadow() {
	      var _utils$effects;
	
	      return (_utils$effects = _index.utils.effects).dropShadow.apply(_utils$effects, arguments);
	    }
	    /**
	      * This is abstract method and needs to be implemented with a plugin. Core module has an implementation for this and if you
	      * don't implement your own, I suggest you use it. You can attach any method to object if you wish. Like attack, siege, greet, talk.
	      *
	      * @method move
	      * @param {String} path  Path through which the object moves
	      */
	
	  }, {
	    key: 'move',
	    value: function move(path) {
	      _index.mapEvents.publish('objectMove', {
	        object: this,
	        path: path
	      });
	    }
	  }]);
	
	  return ObjectSpriteUnit;
	}(ObjectSprite);
	
	function _initializeCoordinates(object) {
	  object.center = null;
	  object.map = null;
	}
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = {
	  ObjectSprite: ObjectSprite,
	  ObjectSpriteTerrain: ObjectSpriteTerrain,
	  ObjectSpriteUnit: ObjectSpriteUnit
	};
	module.exports = exports['default'];

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _howler = __webpack_require__(203);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/*---------------------
	--------- API ---------
	----------------------*/
	var Sound = function () {
	  function Sound() {
	    _classCallCheck(this, Sound);
	
	    this._allSounds = {};
	  }
	  /**
	   * Add a sound to be used.
	   *
	   * @namespace flatworld
	   * @method add
	   * @param {String} name               Name / identifier
	   * @param {String} urls               An array of urls or one url
	   * @param {Object} options            *OPTIONAL*
	   * @param {Booleam} options.loop      Wether the sound will be looped or not
	   * @param {Object} options.volume     The volume of the sound (0 - 1)
	   * @return {Object}                   Created instance of sound
	   */
	
	
	  _createClass(Sound, [{
	    key: 'add',
	    value: function add(name, urls) {
	      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { loop: false, volume: 1 };
	
	      //const ERROR_STRING = 'The sound "' + name + '" was unable to load!';
	      var loop = options.loop,
	          volume = options.volume;
	
	
	      this._allSounds[name] = {};
	      this._allSounds[name] = new _howler.Howl({
	        src: [].concat(urls),
	        autoplay: false,
	        loop: loop,
	        volume: volume
	      });
	
	      return this._allSounds[name];
	    }
	    /**
	     * Remove the sound from usage and memory
	     *
	     * @method remove
	     * @param {String} name     Name / identifier of the sound to be removed
	     */
	
	  }, {
	    key: 'remove',
	    value: function remove(name) {
	      delete this._allSounds[name];
	    }
	    /**
	     * Start the sounds playback
	     *
	     * @method play
	     * @param  {String} name      Name of the sound to play
	     */
	
	  }, {
	    key: 'play',
	    value: function play(name) {
	      this._allSounds[name].play();
	    }
	    /**
	     * stop sound playback
	     *
	     * @method stop
	     * @param  {String} name      Name of the sound to stop playing
	     */
	
	  }, {
	    key: 'stop',
	    value: function stop(name) {
	      this._allSounds[name].stop();
	    }
	    /**
	     * Fade the sound in or out
	     *
	     * @method  fade
	     * @param  {String} name            Name / identifier of the sound
	     * @param  {Object} from            Volume to fade from
	     * @param  {Object} to              Volume to fade to
	     * @param  {Object} duration        Time in milliseconds to fade
	     * @return {Promise}                Promise that resolves after fade is complete
	     */
	
	  }, {
	    key: 'fade',
	    value: function fade(name, from, to, duration) {
	      var _this = this;
	
	      var promise = new Promise(function (resolve, reject) {
	        try {
	          var cb = function cb() {
	            resolve(true);
	          };
	
	          _this._allSounds[name].fade(from, to, duration, cb);
	        } catch (e) {
	          reject(e);
	        }
	      });
	
	      return promise;
	    }
	  }]);
	
	  return Sound;
	}();
	
	/*---------------------
	--------- API ---------
	----------------------*/
	
	
	exports.default = Sound;
	module.exports = exports['default'];

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {/*!
	 *  howler.js v2.0.1
	 *  howlerjs.com
	 *
	 *  (c) 2013-2016, James Simpson of GoldFire Studios
	 *  goldfirestudios.com
	 *
	 *  MIT License
	 */
	
	(function() {
	
	  'use strict';
	
	  /** Global Methods **/
	  /***************************************************************************/
	
	  /**
	   * Create the global controller. All contained methods and properties apply
	   * to all sounds that are currently playing or will be in the future.
	   */
	  var HowlerGlobal = function() {
	    this.init();
	  };
	  HowlerGlobal.prototype = {
	    /**
	     * Initialize the global Howler object.
	     * @return {Howler}
	     */
	    init: function() {
	      var self = this || Howler;
	
	      // Internal properties.
	      self._codecs = {};
	      self._howls = [];
	      self._muted = false;
	      self._volume = 1;
	      self._canPlayEvent = 'canplaythrough';
	      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;
	
	      // Public properties.
	      self.masterGain = null;
	      self.noAudio = false;
	      self.usingWebAudio = true;
	      self.autoSuspend = true;
	      self.ctx = null;
	
	      // Set to false to disable the auto iOS enabler.
	      self.mobileAutoEnable = true;
	
	      // Setup the various state values for global tracking.
	      self._setup();
	
	      return self;
	    },
	
	    /**
	     * Get/set the global volume for all sounds.
	     * @param  {Float} vol Volume from 0.0 to 1.0.
	     * @return {Howler/Float}     Returns self or current volume.
	     */
	    volume: function(vol) {
	      var self = this || Howler;
	      vol = parseFloat(vol);
	
	      // If we don't have an AudioContext created yet, run the setup.
	      if (!self.ctx) {
	        setupAudioContext();
	      }
	
	      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
	        self._volume = vol;
	
	        // Don't update any of the nodes if we are muted.
	        if (self._muted) {
	          return self;
	        }
	
	        // When using Web Audio, we just need to adjust the master gain.
	        if (self.usingWebAudio) {
	          self.masterGain.gain.value = vol;
	        }
	
	        // Loop through and change volume for all HTML5 audio nodes.
	        for (var i=0; i<self._howls.length; i++) {
	          if (!self._howls[i]._webAudio) {
	            // Get all of the sounds in this Howl group.
	            var ids = self._howls[i]._getSoundIds();
	
	            // Loop through all sounds and change the volumes.
	            for (var j=0; j<ids.length; j++) {
	              var sound = self._howls[i]._soundById(ids[j]);
	
	              if (sound && sound._node) {
	                sound._node.volume = sound._volume * vol;
	              }
	            }
	          }
	        }
	
	        return self;
	      }
	
	      return self._volume;
	    },
	
	    /**
	     * Handle muting and unmuting globally.
	     * @param  {Boolean} muted Is muted or not.
	     */
	    mute: function(muted) {
	      var self = this || Howler;
	
	      // If we don't have an AudioContext created yet, run the setup.
	      if (!self.ctx) {
	        setupAudioContext();
	      }
	
	      self._muted = muted;
	
	      // With Web Audio, we just need to mute the master gain.
	      if (self.usingWebAudio) {
	        self.masterGain.gain.value = muted ? 0 : self._volume;
	      }
	
	      // Loop through and mute all HTML5 Audio nodes.
	      for (var i=0; i<self._howls.length; i++) {
	        if (!self._howls[i]._webAudio) {
	          // Get all of the sounds in this Howl group.
	          var ids = self._howls[i]._getSoundIds();
	
	          // Loop through all sounds and mark the audio node as muted.
	          for (var j=0; j<ids.length; j++) {
	            var sound = self._howls[i]._soundById(ids[j]);
	
	            if (sound && sound._node) {
	              sound._node.muted = (muted) ? true : sound._muted;
	            }
	          }
	        }
	      }
	
	      return self;
	    },
	
	    /**
	     * Unload and destroy all currently loaded Howl objects.
	     * @return {Howler}
	     */
	    unload: function() {
	      var self = this || Howler;
	
	      for (var i=self._howls.length-1; i>=0; i--) {
	        self._howls[i].unload();
	      }
	
	      // Create a new AudioContext to make sure it is fully reset.
	      if (self.usingWebAudio && typeof self.ctx.close !== 'undefined') {
	        self.ctx.close();
	        self.ctx = null;
	        setupAudioContext();
	      }
	
	      return self;
	    },
	
	    /**
	     * Check for codec support of specific extension.
	     * @param  {String} ext Audio file extention.
	     * @return {Boolean}
	     */
	    codecs: function(ext) {
	      return (this || Howler)._codecs[ext.replace(/^x-/, '')];
	    },
	
	    /**
	     * Setup various state values for global tracking.
	     * @return {Howler}
	     */
	    _setup: function() {
	      var self = this || Howler;
	
	      // Keeps track of the suspend/resume state of the AudioContext.
	      self.state = self.ctx ? self.ctx.state || 'running' : 'running';
	
	      // Automatically begin the 30-second suspend process
	      self._autoSuspend();
	
	      // Check for supported codecs.
	      if (!self.noAudio) {
	        self._setupCodecs();
	      }
	
	      return self;
	    },
	
	    /**
	     * Check for browser support for various codecs and cache the results.
	     * @return {Howler}
	     */
	    _setupCodecs: function() {
	      var self = this || Howler;
	      var audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;
	
	      if (!audioTest || typeof audioTest.canPlayType !== 'function') {
	        return self;
	      }
	
	      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');
	
	      // Opera version <33 has mixed MP3 support, so we need to check for and block it.
	      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\/([0-6].)/g);
	      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);
	
	      self._codecs = {
	        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),
	        mpeg: !!mpegTest,
	        opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ''),
	        ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
	        oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
	        wav: !!audioTest.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ''),
	        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),
	        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),
	        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
	        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
	        weba: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
	        webm: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
	        dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ''),
	        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')
	      };
	
	      return self;
	    },
	
	    /**
	     * Mobile browsers will only allow audio to be played after a user interaction.
	     * Attempt to automatically unlock audio on the first user interaction.
	     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
	     * @return {Howler}
	     */
	    _enableMobileAudio: function() {
	      var self = this || Howler;
	
	      // Only run this on mobile devices if audio isn't already eanbled.
	      var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(self._navigator && self._navigator.userAgent);
	      var isTouch = !!(('ontouchend' in window) || (self._navigator && self._navigator.maxTouchPoints > 0) || (self._navigator && self._navigator.msMaxTouchPoints > 0));
	      if (self._mobileEnabled || !self.ctx || (!isMobile && !isTouch)) {
	        return;
	      }
	
	      self._mobileEnabled = false;
	
	      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.
	      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.
	      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.
	      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {
	        self._mobileUnloaded = true;
	        self.unload();
	      }
	
	      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:
	      // http://stackoverflow.com/questions/24119684
	      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);
	
	      // Call this method on touch start to create and play a buffer,
	      // then check if the audio actually played to determine if
	      // audio has now been unlocked on iOS, Android, etc.
	      var unlock = function() {
	        // Create an empty buffer.
	        var source = self.ctx.createBufferSource();
	        source.buffer = self._scratchBuffer;
	        source.connect(self.ctx.destination);
	
	        // Play the empty buffer.
	        if (typeof source.start === 'undefined') {
	          source.noteOn(0);
	        } else {
	          source.start(0);
	        }
	
	        // Setup a timeout to check that we are unlocked on the next event loop.
	        source.onended = function() {
	          source.disconnect(0);
	
	          // Update the unlocked state and prevent this check from happening again.
	          self._mobileEnabled = true;
	          self.mobileAutoEnable = false;
	
	          // Remove the touch start listener.
	          document.removeEventListener('touchend', unlock, true);
	        };
	      };
	
	      // Setup a touch start listener to attempt an unlock in.
	      document.addEventListener('touchend', unlock, true);
	
	      return self;
	    },
	
	    /**
	     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.
	     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.
	     * @return {Howler}
	     */
	    _autoSuspend: function() {
	      var self = this;
	
	      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {
	        return;
	      }
	
	      // Check if any sounds are playing.
	      for (var i=0; i<self._howls.length; i++) {
	        if (self._howls[i]._webAudio) {
	          for (var j=0; j<self._howls[i]._sounds.length; j++) {
	            if (!self._howls[i]._sounds[j]._paused) {
	              return self;
	            }
	          }
	        }
	      }
	
	      if (self._suspendTimer) {
	        clearTimeout(self._suspendTimer);
	      }
	
	      // If no sound has played after 30 seconds, suspend the context.
	      self._suspendTimer = setTimeout(function() {
	        if (!self.autoSuspend) {
	          return;
	        }
	
	        self._suspendTimer = null;
	        self.state = 'suspending';
	        self.ctx.suspend().then(function() {
	          self.state = 'suspended';
	
	          if (self._resumeAfterSuspend) {
	            delete self._resumeAfterSuspend;
	            self._autoResume();
	          }
	        });
	      }, 30000);
	
	      return self;
	    },
	
	    /**
	     * Automatically resume the Web Audio AudioContext when a new sound is played.
	     * @return {Howler}
	     */
	    _autoResume: function() {
	      var self = this;
	
	      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {
	        return;
	      }
	
	      if (self.state === 'running' && self._suspendTimer) {
	        clearTimeout(self._suspendTimer);
	        self._suspendTimer = null;
	      } else if (self.state === 'suspended') {
	        self.state = 'resuming';
	        self.ctx.resume().then(function() {
	          self.state = 'running';
	        });
	
	        if (self._suspendTimer) {
	          clearTimeout(self._suspendTimer);
	          self._suspendTimer = null;
	        }
	      } else if (self.state === 'suspending') {
	        self._resumeAfterSuspend = true;
	      }
	
	      return self;
	    }
	  };
	
	  // Setup the global audio controller.
	  var Howler = new HowlerGlobal();
	
	  /** Group Methods **/
	  /***************************************************************************/
	
	  /**
	   * Create an audio group controller.
	   * @param {Object} o Passed in properties for this group.
	   */
	  var Howl = function(o) {
	    var self = this;
	
	    // Throw an error if no source is provided.
	    if (!o.src || o.src.length === 0) {
	      console.error('An array of source files must be passed with any new Howl.');
	      return;
	    }
	
	    self.init(o);
	  };
	  Howl.prototype = {
	    /**
	     * Initialize a new Howl group object.
	     * @param  {Object} o Passed in properties for this group.
	     * @return {Howl}
	     */
	    init: function(o) {
	      var self = this;
	
	      // If we don't have an AudioContext created yet, run the setup.
	      if (!Howler.ctx) {
	        setupAudioContext();
	      }
	
	      // Setup user-defined default properties.
	      self._autoplay = o.autoplay || false;
	      self._format = (typeof o.format !== 'string') ? o.format : [o.format];
	      self._html5 = o.html5 || false;
	      self._muted = o.mute || false;
	      self._loop = o.loop || false;
	      self._pool = o.pool || 5;
	      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;
	      self._rate = o.rate || 1;
	      self._sprite = o.sprite || {};
	      self._src = (typeof o.src !== 'string') ? o.src : [o.src];
	      self._volume = o.volume !== undefined ? o.volume : 1;
	
	      // Setup all other default properties.
	      self._duration = 0;
	      self._state = 'unloaded';
	      self._sounds = [];
	      self._endTimers = {};
	      self._queue = [];
	
	      // Setup event listeners.
	      self._onend = o.onend ? [{fn: o.onend}] : [];
	      self._onfade = o.onfade ? [{fn: o.onfade}] : [];
	      self._onload = o.onload ? [{fn: o.onload}] : [];
	      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];
	      self._onpause = o.onpause ? [{fn: o.onpause}] : [];
	      self._onplay = o.onplay ? [{fn: o.onplay}] : [];
	      self._onstop = o.onstop ? [{fn: o.onstop}] : [];
	      self._onmute = o.onmute ? [{fn: o.onmute}] : [];
	      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];
	      self._onrate = o.onrate ? [{fn: o.onrate}] : [];
	      self._onseek = o.onseek ? [{fn: o.onseek}] : [];
	
	      // Web Audio or HTML5 Audio?
	      self._webAudio = Howler.usingWebAudio && !self._html5;
	
	      // Automatically try to enable audio on iOS.
	      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.mobileAutoEnable) {
	        Howler._enableMobileAudio();
	      }
	
	      // Keep track of this Howl group in the global controller.
	      Howler._howls.push(self);
	
	      // Load the source file unless otherwise specified.
	      if (self._preload) {
	        self.load();
	      }
	
	      return self;
	    },
	
	    /**
	     * Load the audio file.
	     * @return {Howler}
	     */
	    load: function() {
	      var self = this;
	      var url = null;
	
	      // If no audio is available, quit immediately.
	      if (Howler.noAudio) {
	        self._emit('loaderror', null, 'No audio support.');
	        return;
	      }
	
	      // Make sure our source is in an array.
	      if (typeof self._src === 'string') {
	        self._src = [self._src];
	      }
	
	      // Loop through the sources and pick the first one that is compatible.
	      for (var i=0; i<self._src.length; i++) {
	        var ext, str;
	
	        if (self._format && self._format[i]) {
	          // If an extension was specified, use that instead.
	          ext = self._format[i];
	        } else {
	          // Make sure the source is a string.
	          str = self._src[i];
	          if (typeof str !== 'string') {
	            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');
	            continue;
	          }
	
	          // Extract the file extension from the URL or base64 data URI.
	          ext = /^data:audio\/([^;,]+);/i.exec(str);
	          if (!ext) {
	            ext = /\.([^.]+)$/.exec(str.split('?', 1)[0]);
	          }
	
	          if (ext) {
	            ext = ext[1].toLowerCase();
	          }
	        }
	
	        // Check if this extension is available.
	        if (Howler.codecs(ext)) {
	          url = self._src[i];
	          break;
	        }
	      }
	
	      if (!url) {
	        self._emit('loaderror', null, 'No codec support for selected audio sources.');
	        return;
	      }
	
	      self._src = url;
	      self._state = 'loading';
	
	      // If the hosting page is HTTPS and the source isn't,
	      // drop down to HTML5 Audio to avoid Mixed Content errors.
	      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {
	        self._html5 = true;
	        self._webAudio = false;
	      }
	
	      // Create a new sound object and add it to the pool.
	      new Sound(self);
	
	      // Load and decode the audio data for playback.
	      if (self._webAudio) {
	        loadBuffer(self);
	      }
	
	      return self;
	    },
	
	    /**
	     * Play a sound or resume previous playback.
	     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.
	     * @param  {Boolean} internal Internal Use: true prevents event firing.
	     * @return {Number}          Sound ID.
	     */
	    play: function(sprite, internal) {
	      var self = this;
	      var id = null;
	
	      // Determine if a sprite, sound id or nothing was passed
	      if (typeof sprite === 'number') {
	        id = sprite;
	        sprite = null;
	      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {
	        // If the passed sprite doesn't exist, do nothing.
	        return null;
	      } else if (typeof sprite === 'undefined') {
	        // Use the default sound sprite (plays the full audio length).
	        sprite = '__default';
	
	        // Check if there is a single paused sound that isn't ended.
	        // If there is, play that sound. If not, continue as usual.
	        var num = 0;
	        for (var i=0; i<self._sounds.length; i++) {
	          if (self._sounds[i]._paused && !self._sounds[i]._ended) {
	            num++;
	            id = self._sounds[i]._id;
	          }
	        }
	
	        if (num === 1) {
	          sprite = null;
	        } else {
	          id = null;
	        }
	      }
	
	      // Get the selected node, or get one from the pool.
	      var sound = id ? self._soundById(id) : self._inactiveSound();
	
	      // If the sound doesn't exist, do nothing.
	      if (!sound) {
	        return null;
	      }
	
	      // Select the sprite definition.
	      if (id && !sprite) {
	        sprite = sound._sprite || '__default';
	      }
	
	      // If we have no sprite and the sound hasn't loaded, we must wait
	      // for the sound to load to get our audio's duration.
	      if (self._state !== 'loaded' && !self._sprite[sprite]) {
	        self._queue.push({
	          event: 'play',
	          action: function() {
	            self.play(self._soundById(sound._id) ? sound._id : undefined);
	          }
	        });
	
	        return sound._id;
	      }
	
	      // Don't play the sound if an id was passed and it is already playing.
	      if (id && !sound._paused) {
	        // Trigger the play event, in order to keep iterating through queue.
	        if (!internal) {
	          setTimeout(function() {
	            self._emit('play', sound._id);
	          }, 0);
	        }
	
	        return sound._id;
	      }
	
	      // Make sure the AudioContext isn't suspended, and resume it if it is.
	      if (self._webAudio) {
	        Howler._autoResume();
	      }
	
	      // Determine how long to play for and where to start playing.
	      var seek = sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000;
	      var duration = ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek;
	      var timeout = (duration * 1000) / Math.abs(sound._rate);
	
	      // Update the parameters of the sound
	      sound._paused = false;
	      sound._ended = false;
	      sound._sprite = sprite;
	      sound._seek = seek;
	      sound._start = self._sprite[sprite][0] / 1000;
	      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;
	      sound._loop = !!(sound._loop || self._sprite[sprite][2]);
	
	      // Begin the actual playback.
	      var node = sound._node;
	      if (self._webAudio) {
	        // Fire this when the sound is ready to play to begin Web Audio playback.
	        var playWebAudio = function() {
	          self._refreshBuffer(sound);
	
	          // Setup the playback params.
	          var vol = (sound._muted || self._muted) ? 0 : sound._volume;
	          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
	          sound._playStart = Howler.ctx.currentTime;
	
	          // Play the sound using the supported method.
	          if (typeof node.bufferSource.start === 'undefined') {
	            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
	          } else {
	            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
	          }
	
	          // Start a new timer if none is present.
	          if (timeout !== Infinity) {
	            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
	          }
	
	          if (!internal) {
	            setTimeout(function() {
	              self._emit('play', sound._id);
	            }, 0);
	          }
	        };
	
	        if (self._state === 'loaded') {
	          playWebAudio();
	        } else {
	          // Wait for the audio to load and then begin playback.
	          self.once('load', playWebAudio, sound._id);
	
	          // Cancel the end timer.
	          self._clearTimer(sound._id);
	        }
	      } else {
	        // Fire this when the sound is ready to play to begin HTML5 Audio playback.
	        var playHtml5 = function() {
	          node.currentTime = seek;
	          node.muted = sound._muted || self._muted || Howler._muted || node.muted;
	          node.volume = sound._volume * Howler.volume();
	          node.playbackRate = sound._rate;
	
	          setTimeout(function() {
	            node.play();
	
	            // Setup the new end timer.
	            if (timeout !== Infinity) {
	              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
	            }
	
	            if (!internal) {
	              self._emit('play', sound._id);
	            }
	          }, 0);
	        };
	
	        // Play immediately if ready, or wait for the 'canplaythrough'e vent.
	        var loadedNoReadyState = (self._state === 'loaded' && (window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS));
	        if (node.readyState === 4 || loadedNoReadyState) {
	          playHtml5();
	        } else {
	          var listener = function() {
	            // Begin playback.
	            playHtml5();
	
	            // Clear this listener.
	            node.removeEventListener(Howler._canPlayEvent, listener, false);
	          };
	          node.addEventListener(Howler._canPlayEvent, listener, false);
	
	          // Cancel the end timer.
	          self._clearTimer(sound._id);
	        }
	      }
	
	      return sound._id;
	    },
	
	    /**
	     * Pause playback and save current position.
	     * @param  {Number} id The sound ID (empty to pause all in group).
	     * @return {Howl}
	     */
	    pause: function(id) {
	      var self = this;
	
	      // If the sound hasn't loaded, add it to the load queue to pause when capable.
	      if (self._state !== 'loaded') {
	        self._queue.push({
	          event: 'pause',
	          action: function() {
	            self.pause(id);
	          }
	        });
	
	        return self;
	      }
	
	      // If no id is passed, get all ID's to be paused.
	      var ids = self._getSoundIds(id);
	
	      for (var i=0; i<ids.length; i++) {
	        // Clear the end timer.
	        self._clearTimer(ids[i]);
	
	        // Get the sound.
	        var sound = self._soundById(ids[i]);
	
	        if (sound && !sound._paused) {
	          // Reset the seek position.
	          sound._seek = self.seek(ids[i]);
	          sound._rateSeek = 0;
	          sound._paused = true;
	
	          // Stop currently running fades.
	          self._stopFade(ids[i]);
	
	          if (sound._node) {
	            if (self._webAudio) {
	              // make sure the sound has been created
	              if (!sound._node.bufferSource) {
	                return self;
	              }
	
	              if (typeof sound._node.bufferSource.stop === 'undefined') {
	                sound._node.bufferSource.noteOff(0);
	              } else {
	                sound._node.bufferSource.stop(0);
	              }
	
	              // Clean up the buffer source.
	              self._cleanBuffer(sound._node);
	            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
	              sound._node.pause();
	            }
	          }
	
	          // Fire the pause event, unless `true` is passed as the 2nd argument.
	          if (!arguments[1]) {
	            self._emit('pause', sound._id);
	          }
	        }
	      }
	
	      return self;
	    },
	
	    /**
	     * Stop playback and reset to start.
	     * @param  {Number} id The sound ID (empty to stop all in group).
	     * @param  {Boolean} internal Internal Use: true prevents event firing.
	     * @return {Howl}
	     */
	    stop: function(id, internal) {
	      var self = this;
	
	      // If the sound hasn't loaded, add it to the load queue to stop when capable.
	      if (self._state !== 'loaded') {
	        self._queue.push({
	          event: 'stop',
	          action: function() {
	            self.stop(id);
	          }
	        });
	
	        return self;
	      }
	
	      // If no id is passed, get all ID's to be stopped.
	      var ids = self._getSoundIds(id);
	
	      for (var i=0; i<ids.length; i++) {
	        // Clear the end timer.
	        self._clearTimer(ids[i]);
	
	        // Get the sound.
	        var sound = self._soundById(ids[i]);
	
	        if (sound) {
	          // Reset the seek position.
	          sound._seek = sound._start || 0;
	          sound._rateSeek = 0;
	          sound._paused = true;
	          sound._ended = true;
	
	          // Stop currently running fades.
	          self._stopFade(ids[i]);
	
	          if (sound._node) {
	            if (self._webAudio) {
	              // make sure the sound has been created
	              if (!sound._node.bufferSource) {
	                if (!internal) {
	                  self._emit('stop', sound._id);
	                }
	
	                return self;
	              }
	
	              if (typeof sound._node.bufferSource.stop === 'undefined') {
	                sound._node.bufferSource.noteOff(0);
	              } else {
	                sound._node.bufferSource.stop(0);
	              }
	
	              // Clean up the buffer source.
	              self._cleanBuffer(sound._node);
	            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
	              sound._node.currentTime = sound._start || 0;
	              sound._node.pause();
	            }
	          }
	        }
	
	        if (sound && !internal) {
	          self._emit('stop', sound._id);
	        }
	      }
	
	      return self;
	    },
	
	    /**
	     * Mute/unmute a single sound or all sounds in this Howl group.
	     * @param  {Boolean} muted Set to true to mute and false to unmute.
	     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
	     * @return {Howl}
	     */
	    mute: function(muted, id) {
	      var self = this;
	
	      // If the sound hasn't loaded, add it to the load queue to mute when capable.
	      if (self._state !== 'loaded') {
	        self._queue.push({
	          event: 'mute',
	          action: function() {
	            self.mute(muted, id);
	          }
	        });
	
	        return self;
	      }
	
	      // If applying mute/unmute to all sounds, update the group's value.
	      if (typeof id === 'undefined') {
	        if (typeof muted === 'boolean') {
	          self._muted = muted;
	        } else {
	          return self._muted;
	        }
	      }
	
	      // If no id is passed, get all ID's to be muted.
	      var ids = self._getSoundIds(id);
	
	      for (var i=0; i<ids.length; i++) {
	        // Get the sound.
	        var sound = self._soundById(ids[i]);
	
	        if (sound) {
	          sound._muted = muted;
	
	          if (self._webAudio && sound._node) {
	            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);
	          } else if (sound._node) {
	            sound._node.muted = Howler._muted ? true : muted;
	          }
	
	          self._emit('mute', sound._id);
	        }
	      }
	
	      return self;
	    },
	
	    /**
	     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
	     *   volume() -> Returns the group's volume value.
	     *   volume(id) -> Returns the sound id's current volume.
	     *   volume(vol) -> Sets the volume of all sounds in this Howl group.
	     *   volume(vol, id) -> Sets the volume of passed sound id.
	     * @return {Howl/Number} Returns self or current volume.
	     */
	    volume: function() {
	      var self = this;
	      var args = arguments;
	      var vol, id;
	
	      // Determine the values based on arguments.
	      if (args.length === 0) {
	        // Return the value of the groups' volume.
	        return self._volume;
	      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {
	        // First check if this is an ID, and if not, assume it is a new volume.
	        var ids = self._getSoundIds();
	        var index = ids.indexOf(args[0]);
	        if (index >= 0) {
	          id = parseInt(args[0], 10);
	        } else {
	          vol = parseFloat(args[0]);
	        }
	      } else if (args.length >= 2) {
	        vol = parseFloat(args[0]);
	        id = parseInt(args[1], 10);
	      }
	
	      // Update the volume or return the current volume.
	      var sound;
	      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
	        // If the sound hasn't loaded, add it to the load queue to change volume when capable.
	        if (self._state !== 'loaded') {
	          self._queue.push({
	            event: 'volume',
	            action: function() {
	              self.volume.apply(self, args);
	            }
	          });
	
	          return self;
	        }
	
	        // Set the group volume.
	        if (typeof id === 'undefined') {
	          self._volume = vol;
	        }
	
	        // Update one or all volumes.
	        id = self._getSoundIds(id);
	        for (var i=0; i<id.length; i++) {
	          // Get the sound.
	          sound = self._soundById(id[i]);
	
	          if (sound) {
	            sound._volume = vol;
	
	            // Stop currently running fades.
	            if (!args[2]) {
	              self._stopFade(id[i]);
	            }
	
	            if (self._webAudio && sound._node && !sound._muted) {
	              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
	            } else if (sound._node && !sound._muted) {
	              sound._node.volume = vol * Howler.volume();
	            }
	
	            self._emit('volume', sound._id);
	          }
	        }
	      } else {
	        sound = id ? self._soundById(id) : self._sounds[0];
	        return sound ? sound._volume : 0;
	      }
	
	      return self;
	    },
	
	    /**
	     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).
	     * @param  {Number} from The value to fade from (0.0 to 1.0).
	     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
	     * @param  {Number} len  Time in milliseconds to fade.
	     * @param  {Number} id   The sound id (omit to fade all sounds).
	     * @return {Howl}
	     */
	    fade: function(from, to, len, id) {
	      var self = this;
	      var diff = Math.abs(from - to);
	      var dir = from > to ? 'out' : 'in';
	      var steps = diff / 0.01;
	      var stepLen = (steps > 0) ? len / steps : len;
	
	      // Since browsers clamp timeouts to 4ms, we need to clamp our steps to that too.
	      if (stepLen < 4) {
	        steps = Math.ceil(steps / (4 / stepLen));
	        stepLen = 4;
	      }
	
	      // If the sound hasn't loaded, add it to the load queue to fade when capable.
	      if (self._state !== 'loaded') {
	        self._queue.push({
	          event: 'fade',
	          action: function() {
	            self.fade(from, to, len, id);
	          }
	        });
	
	        return self;
	      }
	
	      // Set the volume to the start position.
	      self.volume(from, id);
	
	      // Fade the volume of one or all sounds.
	      var ids = self._getSoundIds(id);
	      for (var i=0; i<ids.length; i++) {
	        // Get the sound.
	        var sound = self._soundById(ids[i]);
	
	        // Create a linear fade or fall back to timeouts with HTML5 Audio.
	        if (sound) {
	          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).
	          if (!id) {
	            self._stopFade(ids[i]);
	          }
	
	          // If we are using Web Audio, let the native methods do the actual fade.
	          if (self._webAudio && !sound._muted) {
	            var currentTime = Howler.ctx.currentTime;
	            var end = currentTime + (len / 1000);
	            sound._volume = from;
	            sound._node.gain.setValueAtTime(from, currentTime);
	            sound._node.gain.linearRampToValueAtTime(to, end);
	          }
	
	          var vol = from;
	          sound._interval = setInterval(function(soundId, sound) {
	            // Update the volume amount, but only if the volume should change.
	            if (steps > 0) {
	              vol += (dir === 'in' ? 0.01 : -0.01);
	            }
	
	            // Make sure the volume is in the right bounds.
	            vol = Math.max(0, vol);
	            vol = Math.min(1, vol);
	
	            // Round to within 2 decimal points.
	            vol = Math.round(vol * 100) / 100;
	
	            // Change the volume.
	            if (self._webAudio) {
	              if (typeof id === 'undefined') {
	                self._volume = vol;
	              }
	
	              sound._volume = vol;
	            } else {
	              self.volume(vol, soundId, true);
	            }
	
	            // When the fade is complete, stop it and fire event.
	            if (vol === to) {
	              clearInterval(sound._interval);
	              sound._interval = null;
	              self.volume(vol, soundId);
	              self._emit('fade', soundId);
	            }
	          }.bind(self, ids[i], sound), stepLen);
	        }
	      }
	
	      return self;
	    },
	
	    /**
	     * Internal method that stops the currently playing fade when
	     * a new fade starts, volume is changed or the sound is stopped.
	     * @param  {Number} id The sound id.
	     * @return {Howl}
	     */
	    _stopFade: function(id) {
	      var self = this;
	      var sound = self._soundById(id);
	
	      if (sound && sound._interval) {
	        if (self._webAudio) {
	          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);
	        }
	
	        clearInterval(sound._interval);
	        sound._interval = null;
	        self._emit('fade', id);
	      }
	
	      return self;
	    },
	
	    /**
	     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
	     *   loop() -> Returns the group's loop value.
	     *   loop(id) -> Returns the sound id's loop value.
	     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
	     *   loop(loop, id) -> Sets the loop value of passed sound id.
	     * @return {Howl/Boolean} Returns self or current loop value.
	     */
	    loop: function() {
	      var self = this;
	      var args = arguments;
	      var loop, id, sound;
	
	      // Determine the values for loop and id.
	      if (args.length === 0) {
	        // Return the grou's loop value.
	        return self._loop;
	      } else if (args.length === 1) {
	        if (typeof args[0] === 'boolean') {
	          loop = args[0];
	          self._loop = loop;
	        } else {
	          // Return this sound's loop value.
	          sound = self._soundById(parseInt(args[0], 10));
	          return sound ? sound._loop : false;
	        }
	      } else if (args.length === 2) {
	        loop = args[0];
	        id = parseInt(args[1], 10);
	      }
	
	      // If no id is passed, get all ID's to be looped.
	      var ids = self._getSoundIds(id);
	      for (var i=0; i<ids.length; i++) {
	        sound = self._soundById(ids[i]);
	
	        if (sound) {
	          sound._loop = loop;
	          if (self._webAudio && sound._node && sound._node.bufferSource) {
	            sound._node.bufferSource.loop = loop;
	            if (loop) {
	              sound._node.bufferSource.loopStart = sound._start || 0;
	              sound._node.bufferSource.loopEnd = sound._stop;
	            }
	          }
	        }
	      }
	
	      return self;
	    },
	
	    /**
	     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.
	     *   rate() -> Returns the first sound node's current playback rate.
	     *   rate(id) -> Returns the sound id's current playback rate.
	     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.
	     *   rate(rate, id) -> Sets the playback rate of passed sound id.
	     * @return {Howl/Number} Returns self or the current playback rate.
	     */
	    rate: function() {
	      var self = this;
	      var args = arguments;
	      var rate, id;
	
	      // Determine the values based on arguments.
	      if (args.length === 0) {
	        // We will simply return the current rate of the first node.
	        id = self._sounds[0]._id;
	      } else if (args.length === 1) {
	        // First check if this is an ID, and if not, assume it is a new rate value.
	        var ids = self._getSoundIds();
	        var index = ids.indexOf(args[0]);
	        if (index >= 0) {
	          id = parseInt(args[0], 10);
	        } else {
	          rate = parseFloat(args[0]);
	        }
	      } else if (args.length === 2) {
	        rate = parseFloat(args[0]);
	        id = parseInt(args[1], 10);
	      }
	
	      // Update the playback rate or return the current value.
	      var sound;
	      if (typeof rate === 'number') {
	        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.
	        if (self._state !== 'loaded') {
	          self._queue.push({
	            event: 'rate',
	            action: function() {
	              self.rate.apply(self, args);
	            }
	          });
	
	          return self;
	        }
	
	        // Set the group rate.
	        if (typeof id === 'undefined') {
	          self._rate = rate;
	        }
	
	        // Update one or all volumes.
	        id = self._getSoundIds(id);
	        for (var i=0; i<id.length; i++) {
	          // Get the sound.
	          sound = self._soundById(id[i]);
	
	          if (sound) {
	            // Keep track of our position when the rate changed and update the playback
	            // start position so we can properly adjust the seek position for time elapsed.
	            sound._rateSeek = self.seek(id[i]);
	            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;
	            sound._rate = rate;
	
	            // Change the playback rate.
	            if (self._webAudio && sound._node && sound._node.bufferSource) {
	              sound._node.bufferSource.playbackRate.value = rate;
	            } else if (sound._node) {
	              sound._node.playbackRate = rate;
	            }
	
	            // Reset the timers.
	            var seek = self.seek(id[i]);
	            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;
	            var timeout = (duration * 1000) / Math.abs(sound._rate);
	
	            // Start a new end timer if sound is already playing.
	            if (self._endTimers[id[i]] || !sound._paused) {
	              self._clearTimer(id[i]);
	              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);
	            }
	
	            self._emit('rate', sound._id);
	          }
	        }
	      } else {
	        sound = self._soundById(id);
	        return sound ? sound._rate : self._rate;
	      }
	
	      return self;
	    },
	
	    /**
	     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
	     *   seek() -> Returns the first sound node's current seek position.
	     *   seek(id) -> Returns the sound id's current seek position.
	     *   seek(seek) -> Sets the seek position of the first sound node.
	     *   seek(seek, id) -> Sets the seek position of passed sound id.
	     * @return {Howl/Number} Returns self or the current seek position.
	     */
	    seek: function() {
	      var self = this;
	      var args = arguments;
	      var seek, id;
	
	      // Determine the values based on arguments.
	      if (args.length === 0) {
	        // We will simply return the current position of the first node.
	        id = self._sounds[0]._id;
	      } else if (args.length === 1) {
	        // First check if this is an ID, and if not, assume it is a new seek position.
	        var ids = self._getSoundIds();
	        var index = ids.indexOf(args[0]);
	        if (index >= 0) {
	          id = parseInt(args[0], 10);
	        } else {
	          id = self._sounds[0]._id;
	          seek = parseFloat(args[0]);
	        }
	      } else if (args.length === 2) {
	        seek = parseFloat(args[0]);
	        id = parseInt(args[1], 10);
	      }
	
	      // If there is no ID, bail out.
	      if (typeof id === 'undefined') {
	        return self;
	      }
	
	      // If the sound hasn't loaded, add it to the load queue to seek when capable.
	      if (self._state !== 'loaded') {
	        self._queue.push({
	          event: 'seek',
	          action: function() {
	            self.seek.apply(self, args);
	          }
	        });
	
	        return self;
	      }
	
	      // Get the sound.
	      var sound = self._soundById(id);
	
	      if (sound) {
	        if (typeof seek === 'number' && seek >= 0) {
	          // Pause the sound and update position for restarting playback.
	          var playing = self.playing(id);
	          if (playing) {
	            self.pause(id, true);
	          }
	
	          // Move the position of the track and cancel timer.
	          sound._seek = seek;
	          sound._ended = false;
	          self._clearTimer(id);
	
	          // Restart the playback if the sound was playing.
	          if (playing) {
	            self.play(id, true);
	          }
	
	          // Update the seek position for HTML5 Audio.
	          if (!self._webAudio && sound._node) {
	            sound._node.currentTime = seek;
	          }
	
	          self._emit('seek', id);
	        } else {
	          if (self._webAudio) {
	            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;
	            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
	            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
	          } else {
	            return sound._node.currentTime;
	          }
	        }
	      }
	
	      return self;
	    },
	
	    /**
	     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.
	     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.
	     * @return {Boolean} True if playing and false if not.
	     */
	    playing: function(id) {
	      var self = this;
	
	      // Check the passed sound ID (if any).
	      if (typeof id === 'number') {
	        var sound = self._soundById(id);
	        return sound ? !sound._paused : false;
	      }
	
	      // Otherwise, loop through all sounds and check if any are playing.
	      for (var i=0; i<self._sounds.length; i++) {
	        if (!self._sounds[i]._paused) {
	          return true;
	        }
	      }
	
	      return false;
	    },
	
	    /**
	     * Get the duration of this sound. Passing a sound id will return the sprite duration.
	     * @param  {Number} id The sound id to check. If none is passed, return full source duration.
	     * @return {Number} Audio duration in seconds.
	     */
	    duration: function(id) {
	      var self = this;
	      var duration = self._duration;
	
	      // If we pass an ID, get the sound and return the sprite length.
	      var sound = self._soundById(id);
	      if (sound) {
	        duration = self._sprite[sound._sprite][1] / 1000;
	      }
	
	      return duration;
	    },
	
	    /**
	     * Returns the current loaded state of this Howl.
	     * @return {String} 'unloaded', 'loading', 'loaded'
	     */
	    state: function() {
	      return this._state;
	    },
	
	    /**
	     * Unload and destroy the current Howl object.
	     * This will immediately stop all sound instances attached to this group.
	     */
	    unload: function() {
	      var self = this;
	
	      // Stop playing any active sounds.
	      var sounds = self._sounds;
	      for (var i=0; i<sounds.length; i++) {
	        // Stop the sound if it is currently playing.
	        if (!sounds[i]._paused) {
	          self.stop(sounds[i]._id);
	          self._emit('end', sounds[i]._id);
	        }
	
	        // Remove the source or disconnect.
	        if (!self._webAudio) {
	          // Set the source to 0-second silence to stop any downloading.
	          sounds[i]._node.src = 'data:audio/wav;base64,UklGRiQAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQAAAAA=';
	
	          // Remove any event listeners.
	          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);
	          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);
	        }
	
	        // Empty out all of the nodes.
	        delete sounds[i]._node;
	
	        // Make sure all timers are cleared out.
	        self._clearTimer(sounds[i]._id);
	
	        // Remove the references in the global Howler object.
	        var index = Howler._howls.indexOf(self);
	        if (index >= 0) {
	          Howler._howls.splice(index, 1);
	        }
	      }
	
	      // Delete this sound from the cache (if no other Howl is using it).
	      var remCache = true;
	      for (i=0; i<Howler._howls.length; i++) {
	        if (Howler._howls[i]._src === self._src) {
	          remCache = false;
	          break;
	        }
	      }
	
	      if (cache && remCache) {
	        delete cache[self._src];
	      }
	
	      // Clear global errors.
	      Howler.noAudio = false;
	
	      // Clear out `self`.
	      self._state = 'unloaded';
	      self._sounds = [];
	      self = null;
	
	      return null;
	    },
	
	    /**
	     * Listen to a custom event.
	     * @param  {String}   event Event name.
	     * @param  {Function} fn    Listener to call.
	     * @param  {Number}   id    (optional) Only listen to events for this sound.
	     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.
	     * @return {Howl}
	     */
	    on: function(event, fn, id, once) {
	      var self = this;
	      var events = self['_on' + event];
	
	      if (typeof fn === 'function') {
	        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});
	      }
	
	      return self;
	    },
	
	    /**
	     * Remove a custom event. Call without parameters to remove all events.
	     * @param  {String}   event Event name.
	     * @param  {Function} fn    Listener to remove. Leave empty to remove all.
	     * @param  {Number}   id    (optional) Only remove events for this sound.
	     * @return {Howl}
	     */
	    off: function(event, fn, id) {
	      var self = this;
	      var events = self['_on' + event];
	      var i = 0;
	
	      if (fn) {
	        // Loop through event store and remove the passed function.
	        for (i=0; i<events.length; i++) {
	          if (fn === events[i].fn && id === events[i].id) {
	            events.splice(i, 1);
	            break;
	          }
	        }
	      } else if (event) {
	        // Clear out all events of this type.
	        self['_on' + event] = [];
	      } else {
	        // Clear out all events of every type.
	        var keys = Object.keys(self);
	        for (i=0; i<keys.length; i++) {
	          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {
	            self[keys[i]] = [];
	          }
	        }
	      }
	
	      return self;
	    },
	
	    /**
	     * Listen to a custom event and remove it once fired.
	     * @param  {String}   event Event name.
	     * @param  {Function} fn    Listener to call.
	     * @param  {Number}   id    (optional) Only listen to events for this sound.
	     * @return {Howl}
	     */
	    once: function(event, fn, id) {
	      var self = this;
	
	      // Setup the event listener.
	      self.on(event, fn, id, 1);
	
	      return self;
	    },
	
	    /**
	     * Emit all events of a specific type and pass the sound id.
	     * @param  {String} event Event name.
	     * @param  {Number} id    Sound ID.
	     * @param  {Number} msg   Message to go with event.
	     * @return {Howl}
	     */
	    _emit: function(event, id, msg) {
	      var self = this;
	      var events = self['_on' + event];
	
	      // Loop through event store and fire all functions.
	      for (var i=events.length-1; i>=0; i--) {
	        if (!events[i].id || events[i].id === id || event === 'load') {
	          setTimeout(function(fn) {
	            fn.call(this, id, msg);
	          }.bind(self, events[i].fn), 0);
	
	          // If this event was setup with `once`, remove it.
	          if (events[i].once) {
	            self.off(event, events[i].fn, events[i].id);
	          }
	        }
	      }
	
	      return self;
	    },
	
	    /**
	     * Queue of actions initiated before the sound has loaded.
	     * These will be called in sequence, with the next only firing
	     * after the previous has finished executing (even if async like play).
	     * @return {Howl}
	     */
	    _loadQueue: function() {
	      var self = this;
	
	      if (self._queue.length > 0) {
	        var task = self._queue[0];
	
	        // don't move onto the next task until this one is done
	        self.once(task.event, function() {
	          self._queue.shift();
	          self._loadQueue();
	        });
	
	        task.action();
	      }
	
	      return self;
	    },
	
	    /**
	     * Fired when playback ends at the end of the duration.
	     * @param  {Sound} sound The sound object to work with.
	     * @return {Howl}
	     */
	    _ended: function(sound) {
	      var self = this;
	      var sprite = sound._sprite;
	
	      // Should this sound loop?
	      var loop = !!(sound._loop || self._sprite[sprite][2]);
	
	      // Fire the ended event.
	      self._emit('end', sound._id);
	
	      // Restart the playback for HTML5 Audio loop.
	      if (!self._webAudio && loop) {
	        self.stop(sound._id, true).play(sound._id);
	      }
	
	      // Restart this timer if on a Web Audio loop.
	      if (self._webAudio && loop) {
	        self._emit('play', sound._id);
	        sound._seek = sound._start || 0;
	        sound._rateSeek = 0;
	        sound._playStart = Howler.ctx.currentTime;
	
	        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);
	        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
	      }
	
	      // Mark the node as paused.
	      if (self._webAudio && !loop) {
	        sound._paused = true;
	        sound._ended = true;
	        sound._seek = sound._start || 0;
	        sound._rateSeek = 0;
	        self._clearTimer(sound._id);
	
	        // Clean up the buffer source.
	        self._cleanBuffer(sound._node);
	
	        // Attempt to auto-suspend AudioContext if no sounds are still playing.
	        Howler._autoSuspend();
	      }
	
	      // When using a sprite, end the track.
	      if (!self._webAudio && !loop) {
	        self.stop(sound._id);
	      }
	
	      return self;
	    },
	
	    /**
	     * Clear the end timer for a sound playback.
	     * @param  {Number} id The sound ID.
	     * @return {Howl}
	     */
	    _clearTimer: function(id) {
	      var self = this;
	
	      if (self._endTimers[id]) {
	        clearTimeout(self._endTimers[id]);
	        delete self._endTimers[id];
	      }
	
	      return self;
	    },
	
	    /**
	     * Return the sound identified by this ID, or return null.
	     * @param  {Number} id Sound ID
	     * @return {Object}    Sound object or null.
	     */
	    _soundById: function(id) {
	      var self = this;
	
	      // Loop through all sounds and find the one with this ID.
	      for (var i=0; i<self._sounds.length; i++) {
	        if (id === self._sounds[i]._id) {
	          return self._sounds[i];
	        }
	      }
	
	      return null;
	    },
	
	    /**
	     * Return an inactive sound from the pool or create a new one.
	     * @return {Sound} Sound playback object.
	     */
	    _inactiveSound: function() {
	      var self = this;
	
	      self._drain();
	
	      // Find the first inactive node to recycle.
	      for (var i=0; i<self._sounds.length; i++) {
	        if (self._sounds[i]._ended) {
	          return self._sounds[i].reset();
	        }
	      }
	
	      // If no inactive node was found, create a new one.
	      return new Sound(self);
	    },
	
	    /**
	     * Drain excess inactive sounds from the pool.
	     */
	    _drain: function() {
	      var self = this;
	      var limit = self._pool;
	      var cnt = 0;
	      var i = 0;
	
	      // If there are less sounds than the max pool size, we are done.
	      if (self._sounds.length < limit) {
	        return;
	      }
	
	      // Count the number of inactive sounds.
	      for (i=0; i<self._sounds.length; i++) {
	        if (self._sounds[i]._ended) {
	          cnt++;
	        }
	      }
	
	      // Remove excess inactive sounds, going in reverse order.
	      for (i=self._sounds.length - 1; i>=0; i--) {
	        if (cnt <= limit) {
	          return;
	        }
	
	        if (self._sounds[i]._ended) {
	          // Disconnect the audio source when using Web Audio.
	          if (self._webAudio && self._sounds[i]._node) {
	            self._sounds[i]._node.disconnect(0);
	          }
	
	          // Remove sounds until we have the pool size.
	          self._sounds.splice(i, 1);
	          cnt--;
	        }
	      }
	    },
	
	    /**
	     * Get all ID's from the sounds pool.
	     * @param  {Number} id Only return one ID if one is passed.
	     * @return {Array}    Array of IDs.
	     */
	    _getSoundIds: function(id) {
	      var self = this;
	
	      if (typeof id === 'undefined') {
	        var ids = [];
	        for (var i=0; i<self._sounds.length; i++) {
	          ids.push(self._sounds[i]._id);
	        }
	
	        return ids;
	      } else {
	        return [id];
	      }
	    },
	
	    /**
	     * Load the sound back into the buffer source.
	     * @param  {Sound} sound The sound object to work with.
	     * @return {Howl}
	     */
	    _refreshBuffer: function(sound) {
	      var self = this;
	
	      // Setup the buffer source for playback.
	      sound._node.bufferSource = Howler.ctx.createBufferSource();
	      sound._node.bufferSource.buffer = cache[self._src];
	
	      // Connect to the correct node.
	      if (sound._panner) {
	        sound._node.bufferSource.connect(sound._panner);
	      } else {
	        sound._node.bufferSource.connect(sound._node);
	      }
	
	      // Setup looping and playback rate.
	      sound._node.bufferSource.loop = sound._loop;
	      if (sound._loop) {
	        sound._node.bufferSource.loopStart = sound._start || 0;
	        sound._node.bufferSource.loopEnd = sound._stop;
	      }
	      sound._node.bufferSource.playbackRate.value = sound._rate;
	
	      return self;
	    },
	
	    /**
	     * Prevent memory leaks by cleaning up the buffer source after playback.
	     * @param  {Object} node Sound's audio node containing the buffer source.
	     * @return {Howl}
	     */
	    _cleanBuffer: function(node) {
	      var self = this;
	
	      if (self._scratchBuffer) {
	        node.bufferSource.onended = null;
	        node.bufferSource.disconnect(0);
	        try { node.bufferSource.buffer = self._scratchBuffer; } catch(e) {}
	      }
	      node.bufferSource = null;
	
	      return self;
	    }
	  };
	
	  /** Single Sound Methods **/
	  /***************************************************************************/
	
	  /**
	   * Setup the sound object, which each node attached to a Howl group is contained in.
	   * @param {Object} howl The Howl parent group.
	   */
	  var Sound = function(howl) {
	    this._parent = howl;
	    this.init();
	  };
	  Sound.prototype = {
	    /**
	     * Initialize a new Sound object.
	     * @return {Sound}
	     */
	    init: function() {
	      var self = this;
	      var parent = self._parent;
	
	      // Setup the default parameters.
	      self._muted = parent._muted;
	      self._loop = parent._loop;
	      self._volume = parent._volume;
	      self._muted = parent._muted;
	      self._rate = parent._rate;
	      self._seek = 0;
	      self._paused = true;
	      self._ended = true;
	      self._sprite = '__default';
	
	      // Generate a unique ID for this sound.
	      self._id = Math.round(Date.now() * Math.random());
	
	      // Add itself to the parent's pool.
	      parent._sounds.push(self);
	
	      // Create the new node.
	      self.create();
	
	      return self;
	    },
	
	    /**
	     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
	     * @return {Sound}
	     */
	    create: function() {
	      var self = this;
	      var parent = self._parent;
	      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;
	
	      if (parent._webAudio) {
	        // Create the gain node for controlling volume (the source will connect to this).
	        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
	        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);
	        self._node.paused = true;
	        self._node.connect(Howler.masterGain);
	      } else {
	        self._node = new Audio();
	
	        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).
	        self._errorFn = self._errorListener.bind(self);
	        self._node.addEventListener('error', self._errorFn, false);
	
	        // Listen for 'canplaythrough' event to let us know the sound is ready.
	        self._loadFn = self._loadListener.bind(self);
	        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);
	
	        // Setup the new audio node.
	        self._node.src = parent._src;
	        self._node.preload = 'auto';
	        self._node.volume = volume * Howler.volume();
	
	        // Begin loading the source.
	        self._node.load();
	      }
	
	      return self;
	    },
	
	    /**
	     * Reset the parameters of this sound to the original state (for recycle).
	     * @return {Sound}
	     */
	    reset: function() {
	      var self = this;
	      var parent = self._parent;
	
	      // Reset all of the parameters of this sound.
	      self._muted = parent._muted;
	      self._loop = parent._loop;
	      self._volume = parent._volume;
	      self._muted = parent._muted;
	      self._rate = parent._rate;
	      self._seek = 0;
	      self._rateSeek = 0;
	      self._paused = true;
	      self._ended = true;
	      self._sprite = '__default';
	
	      // Generate a new ID so that it isn't confused with the previous sound.
	      self._id = Math.round(Date.now() * Math.random());
	
	      return self;
	    },
	
	    /**
	     * HTML5 Audio error listener callback.
	     */
	    _errorListener: function() {
	      var self = this;
	
	      // Fire an error event and pass back the code.
	      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);
	
	      // Clear the event listener.
	      self._node.removeEventListener('error', self._errorListener, false);
	    },
	
	    /**
	     * HTML5 Audio canplaythrough listener callback.
	     */
	    _loadListener: function() {
	      var self = this;
	      var parent = self._parent;
	
	      // Round up the duration to account for the lower precision in HTML5 Audio.
	      parent._duration = Math.ceil(self._node.duration * 10) / 10;
	
	      // Setup a sprite if none is defined.
	      if (Object.keys(parent._sprite).length === 0) {
	        parent._sprite = {__default: [0, parent._duration * 1000]};
	      }
	
	      if (parent._state !== 'loaded') {
	        parent._state = 'loaded';
	        parent._emit('load');
	        parent._loadQueue();
	      }
	
	      if (parent._autoplay) {
	        parent.play();
	      }
	
	      // Clear the event listener.
	      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);
	    }
	  };
	
	  /** Helper Methods **/
	  /***************************************************************************/
	
	  var cache = {};
	
	  /**
	   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).
	   * @param  {Howl} self
	   */
	  var loadBuffer = function(self) {
	    var url = self._src;
	
	    // Check if the buffer has already been cached and use it instead.
	    if (cache[url]) {
	      // Set the duration from the cache.
	      self._duration = cache[url].duration;
	
	      // Load the sound into this Howl.
	      loadSound(self);
	
	      return;
	    }
	
	    if (/^data:[^;]+;base64,/.test(url)) {
	      // Decode the base64 data URI without XHR, since some browsers don't support it.
	      var data = atob(url.split(',')[1]);
	      var dataView = new Uint8Array(data.length);
	      for (var i=0; i<data.length; ++i) {
	        dataView[i] = data.charCodeAt(i);
	      }
	
	      decodeAudioData(dataView.buffer, self);
	    } else {
	      // Load the buffer from the URL.
	      var xhr = new XMLHttpRequest();
	      xhr.open('GET', url, true);
	      xhr.responseType = 'arraybuffer';
	      xhr.onload = function() {
	        // Make sure we get a successful response back.
	        var code = (xhr.status + '')[0];
	        if (code !== '0' && code !== '2' && code !== '3') {
	          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');
	          return;
	        }
	
	        decodeAudioData(xhr.response, self);
	      };
	      xhr.onerror = function() {
	        // If there is an error, switch to HTML5 Audio.
	        if (self._webAudio) {
	          self._html5 = true;
	          self._webAudio = false;
	          self._sounds = [];
	          delete cache[url];
	          self.load();
	        }
	      };
	      safeXhrSend(xhr);
	    }
	  };
	
	  /**
	   * Send the XHR request wrapped in a try/catch.
	   * @param  {Object} xhr XHR to send.
	   */
	  var safeXhrSend = function(xhr) {
	    try {
	      xhr.send();
	    } catch (e) {
	      xhr.onerror();
	    }
	  };
	
	  /**
	   * Decode audio data from an array buffer.
	   * @param  {ArrayBuffer} arraybuffer The audio data.
	   * @param  {Howl}        self
	   */
	  var decodeAudioData = function(arraybuffer, self) {
	    // Decode the buffer into an audio source.
	    Howler.ctx.decodeAudioData(arraybuffer, function(buffer) {
	      if (buffer && self._sounds.length > 0) {
	        cache[self._src] = buffer;
	        loadSound(self, buffer);
	      }
	    }, function() {
	      self._emit('loaderror', null, 'Decoding audio data failed.');
	    });
	  };
	
	  /**
	   * Sound is now loaded, so finish setting everything up and fire the loaded event.
	   * @param  {Howl} self
	   * @param  {Object} buffer The decoded buffer sound source.
	   */
	  var loadSound = function(self, buffer) {
	    // Set the duration.
	    if (buffer && !self._duration) {
	      self._duration = buffer.duration;
	    }
	
	    // Setup a sprite if none is defined.
	    if (Object.keys(self._sprite).length === 0) {
	      self._sprite = {__default: [0, self._duration * 1000]};
	    }
	
	    // Fire the loaded event.
	    if (self._state !== 'loaded') {
	      self._state = 'loaded';
	      self._emit('load');
	      self._loadQueue();
	    }
	
	    // Begin playback if specified.
	    if (self._autoplay) {
	      self.play();
	    }
	  };
	
	  /**
	   * Setup the audio context when available, or switch to HTML5 Audio mode.
	   */
	  var setupAudioContext = function() {
	    Howler.noAudio = false;
	
	    // Check if we are using Web Audio and setup the AudioContext if we are.
	    try {
	      if (typeof AudioContext !== 'undefined') {
	        Howler.ctx = new AudioContext();
	      } else if (typeof webkitAudioContext !== 'undefined') {
	        Howler.ctx = new webkitAudioContext();
	      } else {
	        Howler.usingWebAudio = false;
	      }
	    } catch(e) {
	      Howler.usingWebAudio = false;
	    }
	
	    if (!Howler.usingWebAudio) {
	      // No audio is available on this system if noAudio is set to true.
	      if (typeof Audio !== 'undefined') {
	        try {
	          var test = new Audio();
	
	          // Check if the canplaythrough event is available.
	          if (typeof test.oncanplaythrough === 'undefined') {
	            Howler._canPlayEvent = 'canplay';
	          }
	        } catch(e) {
	          Howler.noAudio = true;
	        }
	      } else {
	        Howler.noAudio = true;
	      }
	    }
	
	    // Test to make sure audio isn't disabled in Internet Explorer
	    try {
	      var test = new Audio();
	      if (test.muted) {
	        Howler.noAudio = true;
	      }
	    } catch (e) {}
	
	    // Check if a webview is being used on iOS8 or earlier (rather than the browser).
	    // If it is, disable Web Audio as it causes crashing.
	    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));
	    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
	    var version = appVersion ? parseInt(appVersion[1], 10) : null;
	    if (iOS && version && version < 9) {
	      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());
	      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {
	        Howler.usingWebAudio = false;
	      }
	    }
	
	    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).
	    if (Howler.usingWebAudio) {
	      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
	      Howler.masterGain.gain.value = 1;
	      Howler.masterGain.connect(Howler.ctx.destination);
	    }
	
	    // Re-run the setup on Howler.
	    Howler._setup();
	  };
	
	  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return {
	        Howler: Howler,
	        Howl: Howl
	      };
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	
	  // Add support for CommonJS libraries such as browserify.
	  if (true) {
	    exports.Howler = Howler;
	    exports.Howl = Howl;
	  }
	
	  // Define globally in case AMD is not available or unused.
	  if (typeof window !== 'undefined') {
	    window.HowlerGlobal = HowlerGlobal;
	    window.Howler = Howler;
	    window.Howl = Howl;
	    window.Sound = Sound;
	  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).
	    global.HowlerGlobal = HowlerGlobal;
	    global.Howler = Howler;
	    global.Howl = Howl;
	    global.Sound = Sound;
	  }
	})();
	
	
	/*!
	 *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
	 *  
	 *  howler.js v2.0.1
	 *  howlerjs.com
	 *
	 *  (c) 2013-2016, James Simpson of GoldFire Studios
	 *  goldfirestudios.com
	 *
	 *  MIT License
	 */
	
	(function() {
	
	  'use strict';
	
	  // Setup default properties.
	  HowlerGlobal.prototype._pos = [0, 0, 0];
	  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];
	  
	  /** Global Methods **/
	  /***************************************************************************/
	
	  /**
	   * Helper method to update the stereo panning position of all current Howls.
	   * Future Howls will not use this value unless explicitly set.
	   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.
	   * @return {Howler/Number}     Self or current stereo panning value.
	   */
	  HowlerGlobal.prototype.stereo = function(pan) {
	    var self = this;
	
	    // Stop right here if not using Web Audio.
	    if (!self.ctx || !self.ctx.listener) {
	      return self;
	    }
	
	    // Loop through all Howls and update their stereo panning.
	    for (var i=self._howls.length-1; i>=0; i--) {
	      self._howls[i].stereo(pan);
	    }
	
	    return self;
	  };
	
	  /**
	   * Get/set the position of the listener in 3D cartesian space. Sounds using
	   * 3D position will be relative to the listener's position.
	   * @param  {Number} x The x-position of the listener.
	   * @param  {Number} y The y-position of the listener.
	   * @param  {Number} z The z-position of the listener.
	   * @return {Howler/Array}   Self or current listener position.
	   */
	  HowlerGlobal.prototype.pos = function(x, y, z) {
	    var self = this;
	
	    // Stop right here if not using Web Audio.
	    if (!self.ctx || !self.ctx.listener) {
	      return self;
	    }
	
	    // Set the defaults for optional 'y' & 'z'.
	    y = (typeof y !== 'number') ? self._pos[1] : y;
	    z = (typeof z !== 'number') ? self._pos[2] : z;
	
	    if (typeof x === 'number') {
	      self._pos = [x, y, z];
	      self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);
	    } else {
	      return self._pos;
	    }
	
	    return self;
	  };
	
	  /**
	   * Get/set the direction the listener is pointing in the 3D cartesian space.
	   * A front and up vector must be provided. The front is the direction the
	   * face of the listener is pointing, and up is the direction the top of the
	   * listener is pointing. Thus, these values are expected to be at right angles
	   * from each other.
	   * @param  {Number} x   The x-orientation of the listener.
	   * @param  {Number} y   The y-orientation of the listener.
	   * @param  {Number} z   The z-orientation of the listener.
	   * @param  {Number} xUp The x-orientation of the top of the listener.
	   * @param  {Number} yUp The y-orientation of the top of the listener.
	   * @param  {Number} zUp The z-orientation of the top of the listener.
	   * @return {Howler/Array}     Returns self or the current orientation vectors.
	   */
	  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {
	    var self = this;
	
	    // Stop right here if not using Web Audio.
	    if (!self.ctx || !self.ctx.listener) {
	      return self;
	    }
	
	    // Set the defaults for optional 'y' & 'z'.
	    var or = self._orientation;
	    y = (typeof y !== 'number') ? or[1] : y;
	    z = (typeof z !== 'number') ? or[2] : z;
	    xUp = (typeof xUp !== 'number') ? or[3] : xUp;
	    yUp = (typeof yUp !== 'number') ? or[4] : yUp;
	    zUp = (typeof zUp !== 'number') ? or[5] : zUp;
	
	    if (typeof x === 'number') {
	      self._orientation = [x, y, z, xUp, yUp, zUp];
	      self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);
	    } else {
	      return or;
	    }
	
	    return self;
	  };
	
	  /** Group Methods **/
	  /***************************************************************************/
	
	  /**
	   * Add new properties to the core init.
	   * @param  {Function} _super Core init method.
	   * @return {Howl}
	   */
	  Howl.prototype.init = (function(_super) {
	    return function(o) {
	      var self = this;
	
	      // Setup user-defined default properties.
	      self._orientation = o.orientation || [1, 0, 0];
	      self._stereo = o.stereo || null;
	      self._pos = o.pos || null;
	      self._pannerAttr = {
	        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,
	        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,
	        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,
	        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',
	        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,
	        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',
	        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,
	        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1
	      };
	
	      // Setup event listeners.
	      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];
	      self._onpos = o.onpos ? [{fn: o.onpos}] : [];
	      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];
	
	      // Complete initilization with howler.js core's init function.
	      return _super.call(this, o);
	    };
	  })(Howl.prototype.init);
	
	  /**
	   * Get/set the stereo panning of the audio source for this sound or all in the group.
	   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.
	   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
	   * @return {Howl/Number}    Returns self or the current stereo panning value.
	   */
	  Howl.prototype.stereo = function(pan, id) {
	    var self = this;
	
	    // Stop right here if not using Web Audio.
	    if (!self._webAudio) {
	      return self;
	    }
	
	    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.
	    if (self._state !== 'loaded') {
	      self._queue.push({
	        event: 'stereo',
	        action: function() {
	          self.stereo(pan, id);
	        }
	      });
	
	      return self;
	    }
	
	    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.
	    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';
	
	    // Setup the group's stereo panning if no ID is passed.
	    if (typeof id === 'undefined') {
	      // Return the group's stereo panning if no parameters are passed.
	      if (typeof pan === 'number') {
	        self._stereo = pan;
	        self._pos = [pan, 0, 0];
	      } else {
	        return self._stereo;
	      }
	    }
	
	    // Change the streo panning of one or all sounds in group.
	    var ids = self._getSoundIds(id);
	    for (var i=0; i<ids.length; i++) {
	      // Get the sound.
	      var sound = self._soundById(ids[i]);
	
	      if (sound) {
	        if (typeof pan === 'number') {
	          sound._stereo = pan;
	          sound._pos = [pan, 0, 0];
	
	          if (sound._node) {
	            // If we are falling back, make sure the panningModel is equalpower.
	            sound._pannerAttr.panningModel = 'equalpower';
	
	            // Check if there is a panner setup and create a new one if not.
	            if (!sound._panner || !sound._panner.pan) {
	              setupPanner(sound, pannerType);
	            }
	
	            if (pannerType === 'spatial') {
	              sound._panner.setPosition(pan, 0, 0);
	            } else {
	              sound._panner.pan.value = pan;
	            }
	          }
	
	          self._emit('stereo', sound._id);
	        } else {
	          return sound._stereo;
	        }
	      }
	    }
	
	    return self;
	  };
	
	  /**
	   * Get/set the 3D spatial position of the audio source for this sound or
	   * all in the group. The most common usage is to set the 'x' position for
	   * left/right panning. Setting any value higher than 1.0 will begin to
	   * decrease the volume of the sound as it moves further away.
	   * @param  {Number} x  The x-position of the audio from -1000.0 to 1000.0.
	   * @param  {Number} y  The y-position of the audio from -1000.0 to 1000.0.
	   * @param  {Number} z  The z-position of the audio from -1000.0 to 1000.0.
	   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
	   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].
	   */
	  Howl.prototype.pos = function(x, y, z, id) {
	    var self = this;
	
	    // Stop right here if not using Web Audio.
	    if (!self._webAudio) {
	      return self;
	    }
	
	    // If the sound hasn't loaded, add it to the load queue to change position when capable.
	    if (self._state !== 'loaded') {
	      self._queue.push({
	        event: 'pos',
	        action: function() {
	          self.pos(x, y, z, id);
	        }
	      });
	
	      return self;
	    }
	
	    // Set the defaults for optional 'y' & 'z'.
	    y = (typeof y !== 'number') ? 0 : y;
	    z = (typeof z !== 'number') ? -0.5 : z;
	
	    // Setup the group's spatial position if no ID is passed.
	    if (typeof id === 'undefined') {
	      // Return the group's spatial position if no parameters are passed.
	      if (typeof x === 'number') {
	        self._pos = [x, y, z];
	      } else {
	        return self._pos;
	      }
	    }
	
	    // Change the spatial position of one or all sounds in group.
	    var ids = self._getSoundIds(id);
	    for (var i=0; i<ids.length; i++) {
	      // Get the sound.
	      var sound = self._soundById(ids[i]);
	
	      if (sound) {
	        if (typeof x === 'number') {
	          sound._pos = [x, y, z];
	
	          if (sound._node) {
	            // Check if there is a panner setup and create a new one if not.
	            if (!sound._panner || sound._panner.pan) {
	              setupPanner(sound, 'spatial');
	            }
	
	            sound._panner.setPosition(x, y, z);
	          }
	
	          self._emit('pos', sound._id);
	        } else {
	          return sound._pos;
	        }
	      }
	    }
	
	    return self;
	  };
	
	  /**
	   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate
	   * space. Depending on how direction the sound is, based on the `cone` attributes,
	   * a sound pointing away from the listener can be quiet or silent.
	   * @param  {Number} x  The x-orientation of the source.
	   * @param  {Number} y  The y-orientation of the source.
	   * @param  {Number} z  The z-orientation of the source.
	   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
	   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].
	   */
	  Howl.prototype.orientation = function(x, y, z, id) {
	    var self = this;
	
	    // Stop right here if not using Web Audio.
	    if (!self._webAudio) {
	      return self;
	    }
	
	    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.
	    if (self._state !== 'loaded') {
	      self._queue.push({
	        event: 'orientation',
	        action: function() {
	          self.orientation(x, y, z, id);
	        }
	      });
	
	      return self;
	    }
	
	    // Set the defaults for optional 'y' & 'z'.
	    y = (typeof y !== 'number') ? self._orientation[1] : y;
	    z = (typeof z !== 'number') ? self._orientation[2] : z;
	
	    // Setup the group's spatial orientation if no ID is passed.
	    if (typeof id === 'undefined') {
	      // Return the group's spatial orientation if no parameters are passed.
	      if (typeof x === 'number') {
	        self._orientation = [x, y, z];
	      } else {
	        return self._orientation;
	      }
	    }
	
	    // Change the spatial orientation of one or all sounds in group.
	    var ids = self._getSoundIds(id);
	    for (var i=0; i<ids.length; i++) {
	      // Get the sound.
	      var sound = self._soundById(ids[i]);
	
	      if (sound) {
	        if (typeof x === 'number') {
	          sound._orientation = [x, y, z];
	
	          if (sound._node) {
	            // Check if there is a panner setup and create a new one if not.
	            if (!sound._panner) {
	              // Make sure we have a position to setup the node with.
	              if (!sound._pos) {
	                sound._pos = self._pos || [0, 0, -0.5];
	              }
	
	              setupPanner(sound, 'spatial');
	            }
	
	            sound._panner.setOrientation(x, y, z);
	          }
	
	          self._emit('orientation', sound._id);
	        } else {
	          return sound._orientation;
	        }
	      }
	    }
	
	    return self;
	  };
	
	  /**
	   * Get/set the panner node's attributes for a sound or group of sounds.
	   * This method can optionall take 0, 1 or 2 arguments.
	   *   pannerAttr() -> Returns the group's values.
	   *   pannerAttr(id) -> Returns the sound id's values.
	   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.
	   *   pannerAttr(o, id) -> Set's the values of passed sound id.
	   *
	   *   Attributes:
	   *     coneInnerAngle - (360 by default) There will be no volume reduction inside this angle.
	   *     coneOuterAngle - (360 by default) The volume will be reduced to a constant value of
	   *                      `coneOuterGain` outside this angle.
	   *     coneOuterGain - (0 by default) The amount of volume reduction outside of `coneOuterAngle`.
	   *     distanceModel - ('inverse' by default) Determines algorithm to use to reduce volume as audio moves
	   *                      away from listener. Can be `linear`, `inverse` or `exponential`.
	   *     maxDistance - (10000 by default) Volume won't reduce between source/listener beyond this distance.
	   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.
	   *                     Can be `HRTF` or `equalpower`.
	   *     refDistance - (1 by default) A reference distance for reducing volume as the source
	   *                    moves away from the listener.
	   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener.
	   * 
	   * @return {Howl/Object} Returns self or current panner attributes.
	   */
	  Howl.prototype.pannerAttr = function() {
	    var self = this;
	    var args = arguments;
	    var o, id, sound;
	
	    // Stop right here if not using Web Audio.
	    if (!self._webAudio) {
	      return self;
	    }
	
	    // Determine the values based on arguments.
	    if (args.length === 0) {
	      // Return the group's panner attribute values.
	      return self._pannerAttr;
	    } else if (args.length === 1) {
	      if (typeof args[0] === 'object') {
	        o = args[0];
	
	        // Set the grou's panner attribute values.
	        if (typeof id === 'undefined') {
	          self._pannerAttr = {
	            coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : self._coneInnerAngle,
	            coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : self._coneOuterAngle,
	            coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : self._coneOuterGain,
	            distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : self._distanceModel,
	            maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : self._maxDistance,
	            panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : self._panningModel,
	            refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : self._refDistance,
	            rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : self._rolloffFactor
	          };
	        }
	      } else {
	        // Return this sound's panner attribute values.
	        sound = self._soundById(parseInt(args[0], 10));
	        return sound ? sound._pannerAttr : self._pannerAttr;
	      }
	    } else if (args.length === 2) {
	      o = args[0];
	      id = parseInt(args[1], 10);
	    }
	
	    // Update the values of the specified sounds.
	    var ids = self._getSoundIds(id);
	    for (var i=0; i<ids.length; i++) {
	      sound = self._soundById(ids[i]);
	
	      if (sound) {
	        // Merge the new values into the sound.
	        var pa = sound._pannerAttr;
	        pa = {
	          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,
	          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,
	          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,
	          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,
	          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,
	          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel,
	          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,
	          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor
	        };
	
	        // Update the panner values or create a new panner if none exists.
	        var panner = sound._panner;
	        if (panner) {
	          panner.coneInnerAngle = pa.coneInnerAngle;
	          panner.coneOuterAngle = pa.coneOuterAngle;
	          panner.coneOuterGain = pa.coneOuterGain;
	          panner.distanceModel = pa.distanceModel;
	          panner.maxDistance = pa.maxDistance;
	          panner.panningModel = pa.panningModel;
	          panner.refDistance = pa.refDistance;
	          panner.rolloffFactor = pa.rolloffFactor;
	        } else {
	          // Make sure we have a position to setup the node with.
	          if (!sound._pos) {
	            sound._pos = self._pos || [0, 0, -0.5];
	          }
	
	          // Create a new panner node.
	          setupPanner(sound, 'spatial');
	        }
	      }
	    }
	
	    return self;
	  };
	
	  /** Single Sound Methods **/
	  /***************************************************************************/
	
	  /**
	   * Add new properties to the core Sound init.
	   * @param  {Function} _super Core Sound init method.
	   * @return {Sound}
	   */
	  Sound.prototype.init = (function(_super) {
	    return function() {
	      var self = this;
	      var parent = self._parent;
	
	      // Setup user-defined default properties.
	      self._orientation = parent._orientation;
	      self._stereo = parent._stereo;
	      self._pos = parent._pos;
	      self._pannerAttr = parent._pannerAttr;
	
	      // Complete initilization with howler.js core Sound's init function.
	      _super.call(this);
	
	      // If a stereo or position was specified, set it up.
	      if (self._stereo) {
	        parent.stereo(self._stereo);
	      } else if (self._pos) {
	        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
	      }
	    };
	  })(Sound.prototype.init);
	
	  /**
	   * Override the Sound.reset method to clean up properties from the spatial plugin.
	   * @param  {Function} _super Sound reset method.
	   * @return {Sound}
	   */
	  Sound.prototype.reset = (function(_super) {
	    return function() {
	      var self = this;
	      var parent = self._parent;
	
	      // Reset all spatial plugin properties on this sound.
	      self._orientation = parent._orientation;
	      self._pos = parent._pos;
	      self._pannerAttr = parent._pannerAttr;
	
	      // Complete resetting of the sound.
	      return _super.call(this);
	    };
	  })(Sound.prototype.reset);
	
	  /** Helper Methods **/
	  /***************************************************************************/
	
	  /**
	   * Create a new panner node and save it on the sound.
	   * @param  {Sound} sound Specific sound to setup panning on.
	   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.
	   */
	  var setupPanner = function(sound, type) {
	    type = type || 'spatial';
	
	    // Create the new panner node.
	    if (type === 'spatial') {
	      sound._panner = Howler.ctx.createPanner();
	      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
	      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
	      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
	      sound._panner.distanceModel = sound._pannerAttr.distanceModel;
	      sound._panner.maxDistance = sound._pannerAttr.maxDistance;
	      sound._panner.panningModel = sound._pannerAttr.panningModel;
	      sound._panner.refDistance = sound._pannerAttr.refDistance;
	      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
	      sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);
	      sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
	    } else {
	      sound._panner = Howler.ctx.createStereoPanner();
	      sound._panner.pan.value = sound._stereo;
	    }
	
	    sound._panner.connect(sound._node);
	
	    // Update the connections.
	    if (!sound._paused) {
	      sound._parent.pause(sound._id, true).play(sound._id);
	    }
	  };
	})();
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _index = __webpack_require__(2);
	
	/*---------------------
	------ VARIABLES ------
	----------------------*/
	var scope = {};
	
	/*---------------------
	-------- PUBLIC -------
	----------------------*/
	/**
	 * Main class for showing UI on the map, like unit selections, movements and such. Has nothing
	 * to do with showing off-map data, like
	 * datagrams of the resources player has or other players status etc.
	 * Good examples for what this shows are: selected units-list, selection highlight (like a
	 * circle on the selected unit), unit movement.
	 * How it works is that this is basically the interface that shows what the UI theme class can
	 * (or must) implement.
	 *
	 * @namespace flatworld
	 * @class UI
	 * @static
	 * @param {Object} UITheme        Module that will be used for the UI theme
	 * @param {Map} givenMap          Map instance that is used
	 * @throws {Error}                If either param isn't given or UITheme doesn't implement all
	 * the requires methods, this class throws an error.
	 * @return {Object}               UI module
	*/
	function UI(UITheme, givenMap, protectedProperties) {
	  // eslint-disable-line no-unused-vars
	
	  /* SINGLETON MODULE */
	  if (Object.keys(scope).length !== 0) {
	    return scope;
	  }
	
	  if (!UITheme || !givenMap) {
	    throw new Error('UI-module requires UITheme and map object, This is a singleton class, so it\'s possible it should have been already called earlier');
	  }
	
	  validateUITheme(['highlightSelectedObject', 'showSelections', 'showUnitMovement', 'unSelect'], UITheme);
	
	  /**
	   * Responsible for showing what objects have been selected for inspection or if the player selects only one object, we hightlihgt it.
	   * For example if there are several objects in one tile on the map and the player needs to be able to select one
	   * specific unit on the stack. This is always defined in the UI theme-module Selecting one unit, highlight it, which means,
	   * e.g. bringing the unit on top on the map and showing selection circle around it.
	   *
	   * @method showSelections
	   * @static
	   * @param  {Array|Object} objects           Objects that have been selected.
	   * @param {Object} getDatas                 This is an object made of functions, that get wanted data from the object. For example if
	   * you have objects name in object.data.specialData.name, then you have an object getDatas.name(), which retrieves this. This should be
	   * standardized maybe in MapDataManipulator, so that we can change the template between different game setups easier. Lets say if one
	   * game modification has different attributes than another, then maybe it should still have standard interface.
	   * @param {Object} getDatas.name            Retrieves object name
	   * @param {Object} {}                       Extra options
	   * @param {MapDataManipulator} {}.filters   Filters objects
	   * @param {Object} {}.options               Extra options that are passed to the UITheme class
	   * @return {Boolean}
	   *
	   * @todo the getDatas function should be standardized, so that most UIs would work with most different setups.
	   * */
	  scope.showSelections = function (objects, getDatas) {
	    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	        filters = _ref.filters,
	        UIThemeOptions = _ref.UIThemeOptions;
	
	    if (filters) {
	      objects = filters.filterObjects(objects);
	    }
	
	    objects = Array.isArray(objects) ? objects : [objects];
	
	    var returnable = UITheme.showSelections(objects, getDatas, UIThemeOptions);
	
	    givenMap.drawOnNextTick();
	
	    return returnable;
	  };
	  /**
	   * Shows arrow or movement or what ever to indicate the selected unit is moving to the given location
	   *
	   * @method showUnitMovement
	   * @static
	   * @param {Object} object         Unit that the player wants to move
	   * @param {Array} path            Array of coordinates for the path of movement
	   * where the unit is being moved to.
	   * @param {Object} options        Extra options. Like dropping a shadow etc.
	   * */
	  scope.showUnitMovement = function (path) {
	    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	        UIThemeOptions = _ref2.UIThemeOptions;
	
	    if (!Array.isArray(path)) {
	      _index.mapLog.error('Array expected for showUnitMovement');
	    }
	
	    var returnable = UITheme.showUnitMovement(path, UIThemeOptions);
	
	    givenMap.drawOnNextTick();
	
	    return returnable;
	  };
	
	  return scope;
	}
	
	function validateUITheme(allRequiredMethods, UITheme) {
	  allRequiredMethods.forEach(function (method) {
	    if (!UITheme[method]) {
	      throw new Error('UItheme module need to implement methods defined in flatword UI module');
	    }
	  });
	}
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = UI;
	module.exports = exports['default'];

/***/ },
/* 205 */
/***/ function(module, exports) {

	"use strict";

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _baseEventlisteners = __webpack_require__(207);
	
	var _baseEventlisteners2 = _interopRequireDefault(_baseEventlisteners);
	
	var _index = __webpack_require__(210);
	
	var _index2 = _interopRequireDefault(_index);
	
	var _index3 = __webpack_require__(212);
	
	var _index4 = _interopRequireDefault(_index3);
	
	var _mapMovement = __webpack_require__(220);
	
	var _mapMovement2 = _interopRequireDefault(_mapMovement);
	
	var _index5 = __webpack_require__(221);
	
	var _index6 = _interopRequireDefault(_index5);
	
	var _mapDrag = __webpack_require__(223);
	
	var _mapDrag2 = _interopRequireDefault(_mapDrag);
	
	var _mapZoom = __webpack_require__(224);
	
	var _mapZoom2 = _interopRequireDefault(_mapZoom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	  baseEventlisteners: _baseEventlisteners2.default,
	  fogOfWars: _index2.default,
	  hexagons: _index4.default,
	  mapMovement: _mapMovement2.default,
	  minimaps: _index6.default,
	  mapDrag: _mapDrag2.default,
	  mapZoom: _mapZoom2.default
	};
	module.exports = exports['default'];

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _hammerjs = __webpack_require__(208);
	
	var Hammer = _interopRequireWildcard(_hammerjs);
	
	var _hamsterjs = __webpack_require__(209);
	
	var _hamsterjs2 = _interopRequireDefault(_hamsterjs);
	
	var _core = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	/*-----------------------
	-------- PUBLIC ---------
	-----------------------*/
	/**
	 * Core plugin. Houses the default eventlisteners used in the map. When plugins are added to the map this class can be used for the
	 * eventlistener management. Creates window.flatworld.setFullScreen function to be used when switching to fullscreen.
	 *
	 * @namespace flatworld
	 * @class extensions.baseEventlisteners
	 * @requires Hammer.js                    (for touch events)
	 * @requires Hamster.js                   (for good cross-browser mousewheel events)
	 * @event                                 mapEvents.publish('mapResized')
	 * @param {HTMLElement} canvasElement     The canvas element we listen events from. Will try to search the first canvas in the DOM,
	 * if none is provided
	 */
	var baseEventlisteners = function () {
	  var caches = {};
	  var hammer = void 0,
	      hamster = void 0,
	      mapInstance = void 0;
	
	  /*---------------------------
	  ----------- API -------------
	  ---------------------------*/
	  return {
	    init: init,
	    toggleFullSize: toggleFullSize,
	    toggleFullscreen: toggleFullscreen,
	    toggleZoom: toggleZoom,
	    toggleDrag: toggleDrag,
	    toggleSelect: toggleSelect,
	    toggleOrder: toggleOrder,
	
	    /**
	     * Plugins name
	     *
	     * @attribute pluginName
	     * @type {String}
	     */
	    pluginName: 'baseEventlisteners'
	  };
	
	  /**
	   * Initialize plugin
	   *
	   * @method init
	   */
	  function init() {
	    mapInstance = this.mapInstance;
	    var orderToggle = toggleOrder();
	    var selectToggle = toggleSelect();
	
	    hammer = new Hammer.Manager(this.mapInstance.canvas);
	    hamster = new _hamsterjs2.default(this.mapInstance.canvas);
	
	    _core.eventListeners.setDetector('fullSize', toggleFullSize().on, toggleFullSize().off);
	    _core.eventListeners.on('fullSize', resizeCanvas);
	
	    _core.eventListeners.setDetector('fullscreen', toggleFullscreen().on, toggleFullscreen().off);
	    this.mapInstance.setPrototype('setFullScreen', _setFullScreen);
	
	    _core.eventListeners.setDetector('zoom', toggleZoom().on, toggleZoom().off);
	    _core.eventListeners.setDetector('drag', toggleDrag().on, toggleDrag().off);
	    _core.eventListeners.setDetector('select', selectToggle.on, selectToggle.off);
	    _core.eventListeners.setDetector('order', orderToggle.on, orderToggle.off);
	
	    return Promise.resolve();
	  }
	
	  /**
	   * Sets the canvas to fullsize as in the same size of the window / content area. But not fullscreen. Note that
	   *
	   * @method toggleFullSize
	   */
	  function toggleFullSize() {
	    var activeCB = void 0;
	
	    if (!caches['fullsize']) {
	      caches['fullsize'] = {
	        on: function on(cb) {
	          activeCB = cb;
	
	          window.addEventListener('resize', activeCB);
	        },
	        off: function off() {
	          window.removeEventListener('resize', activeCB);
	        }
	      };
	    }
	
	    return caches['fullsize'];
	  }
	  /**
	   * Sets the browser in fullscreen mode.
	   *
	   * @method toggleFullscreen
	   * @param {Function} cb     Callback that fires when this event activates
	   * @return {Boolean}        Return the state of this event
	   */
	  function toggleFullscreen() {
	    var activeCB = void 0;
	
	    if (!caches['fullscreen']) {
	      caches['fullscreen'] = {
	        on: function on(cb) {
	          activeCB = cb;
	
	          window.addEventListener('fullscreen', activeCB);
	        },
	        off: function off() {
	          window.removeEventListener('fullscreen', activeCB);
	        }
	      };
	
	      return caches['fullscreen'];
	    }
	
	    return caches['fullscreen'];
	  }
	  /**
	   * Zoom the map. Mousewheel (desktop) and pinch (mobile)
	   *
	   * @method toggleZoom
	   * @param {Function} cb         Callback that fires when this event activates
	   * @return {Boolean}            Return the state of this event
	   */
	  function toggleZoom() {
	    var activeCB = void 0;
	
	    if (!caches['zoom']) {
	      caches['zoom'] = {
	        on: function on(cb) {
	          var pinch = new Hammer.Pinch({
	            threshold: 0.08
	          });
	          activeCB = cb;
	
	          hammer.add(pinch);
	          hammer.on('pinch', activeCB);
	          /* Hamster handles wheel events really nicely */
	          hamster.wheel(activeCB);
	        },
	        off: function off() {
	          hammer.on('pinch', activeCB);
	          hamster.unwheel(activeCB);
	        }
	      };
	    }
	
	    return caches['zoom'];
	  }
	  /**
	   * DragListener (normally used for moving the map)
	   *
	   * @method toggleDrag
	   * @param {Function} cb     Callback that fires when this event activates
	   * @return {Boolean}        Return the state of this event
	   */
	  function toggleDrag() {
	    var activeCB = void 0;
	
	    if (!caches['drag']) {
	      caches['drag'] = {
	        on: function on(cb) {
	          var pan = new Hammer.Pan({
	            pointers: 1,
	            threshold: 5,
	            direction: Hammer.DIRECTION_ALL });
	          activeCB = cb;
	
	          hammer.add(pan);
	          hammer.on('pan', activeCB);
	        },
	        off: function off() {
	          hammer.off('pan', activeCB);
	        }
	      };
	    }
	
	    return caches['drag'];
	  }
	  /**
	   * Selecting something from the map
	   *
	   * @method toggleSelect
	   * @param {Function} cb     Callback that fires when this event activates
	   * @return {Boolean}        Return the state of this event
	   */
	  function toggleSelect() {
	    var activeCB = void 0;
	
	    if (!caches['select']) {
	      caches['select'] = {
	        on: function on(cb) {
	          var tap = new Hammer.Tap();
	          activeCB = cb;
	
	          hammer.add(tap);
	          hammer.on('tap', activeCB);
	        },
	        off: function off() {
	          hammer.off('tap', activeCB);
	        }
	      };
	    }
	
	    return caches['select'];
	  }
	  /**
	   * Selecting something from the map. With mouse you can use the default right click and in touch devices you can use continuous press
	   * event (keeping the finger pressed on the screen for a preset time).
	   *
	   * @method toggleOrder
	   * @param {Function} cb     Callback that fires when this event activates
	   * @return {Boolean}        Return the state of this event
	   */
	  function toggleOrder() {
	    var activeCB = void 0;
	
	    if (!caches['order']) {
	      caches['order'] = {
	        on: function on(cb) {
	          activeCB = cb;
	
	          var press = new Hammer.Press();
	
	          hammer.add(press);
	          hammer.on('press', clickListener);
	          /* We are detecting mouse right click here. This should be in utils */
	          mapInstance.canvas.addEventListener('mouseup', function (e) {
	            if (e.which === 3) {
	              clickListener(e);
	            }
	          }, true);
	        },
	        off: function off() {
	          hammer.off('press', clickListener);
	          mapInstance.canvas.removeEventListener('mouseup', clickListener, true);
	        }
	      };
	    }
	
	    return caches['order'];
	
	    function clickListener(e) {
	      if (!_core.utils.mouse.isRightClick(e) && e.type !== 'press') {
	        return;
	      }
	
	      /* Check that finite state is correct and that if desktop, the user clicked right button */
	      if (!_core.mapStates.can('objectOrder') && (mapInstance.isSupportedTouch || _core.utils.mouse.isRightClick(e))) {
	        return false;
	      }
	
	      activeCB(e);
	    }
	  }
	
	  /**
	   * Activate the browsers fullScreen mode and expand the canvas to fullsize
	   *
	   * @private
	   * @method _setFullScreen
	   */
	  function _setFullScreen() {
	    _core.utils.resize.toggleFullScreen();
	    resizeCanvas();
	    _core.mapEvents.publish('mapResized');
	  }
	  /**
	   * Resizes the canvas to the current most wide and high element status.
	   * Basically canvas size === window size.
	   *
	   * @private
	   * @method _resizeCanvas
	   */
	  function resizeCanvas() {
	    _core.utils.resize.resizePIXIRenderer(mapInstance.getRenderer(), mapInstance.drawOnNextTick.bind(mapInstance));
	    _core.mapEvents.publish('mapResized');
	  }
	}();
	
	/*-----------------------
	---------- API ----------
	-----------------------*/
	exports.default = baseEventlisteners;
	module.exports = exports['default'];

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22
	 * http://hammerjs.github.io/
	 *
	 * Copyright (c) 2016 Jorik Tangelder;
	 * Licensed under the MIT license */
	(function(window, document, exportName, undefined) {
	  'use strict';
	
	var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
	var TEST_ELEMENT = document.createElement('div');
	
	var TYPE_FUNCTION = 'function';
	
	var round = Math.round;
	var abs = Math.abs;
	var now = Date.now;
	
	/**
	 * set a timeout with a given scope
	 * @param {Function} fn
	 * @param {Number} timeout
	 * @param {Object} context
	 * @returns {number}
	 */
	function setTimeoutContext(fn, timeout, context) {
	    return setTimeout(bindFn(fn, context), timeout);
	}
	
	/**
	 * if the argument is an array, we want to execute the fn on each entry
	 * if it aint an array we don't want to do a thing.
	 * this is used by all the methods that accept a single and array argument.
	 * @param {*|Array} arg
	 * @param {String} fn
	 * @param {Object} [context]
	 * @returns {Boolean}
	 */
	function invokeArrayArg(arg, fn, context) {
	    if (Array.isArray(arg)) {
	        each(arg, context[fn], context);
	        return true;
	    }
	    return false;
	}
	
	/**
	 * walk objects and arrays
	 * @param {Object} obj
	 * @param {Function} iterator
	 * @param {Object} context
	 */
	function each(obj, iterator, context) {
	    var i;
	
	    if (!obj) {
	        return;
	    }
	
	    if (obj.forEach) {
	        obj.forEach(iterator, context);
	    } else if (obj.length !== undefined) {
	        i = 0;
	        while (i < obj.length) {
	            iterator.call(context, obj[i], i, obj);
	            i++;
	        }
	    } else {
	        for (i in obj) {
	            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
	        }
	    }
	}
	
	/**
	 * wrap a method with a deprecation warning and stack trace
	 * @param {Function} method
	 * @param {String} name
	 * @param {String} message
	 * @returns {Function} A new function wrapping the supplied method.
	 */
	function deprecate(method, name, message) {
	    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
	    return function() {
	        var e = new Error('get-stack-trace');
	        var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
	            .replace(/^\s+at\s+/gm, '')
	            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';
	
	        var log = window.console && (window.console.warn || window.console.log);
	        if (log) {
	            log.call(window.console, deprecationMessage, stack);
	        }
	        return method.apply(this, arguments);
	    };
	}
	
	/**
	 * extend object.
	 * means that properties in dest will be overwritten by the ones in src.
	 * @param {Object} target
	 * @param {...Object} objects_to_assign
	 * @returns {Object} target
	 */
	var assign;
	if (typeof Object.assign !== 'function') {
	    assign = function assign(target) {
	        if (target === undefined || target === null) {
	            throw new TypeError('Cannot convert undefined or null to object');
	        }
	
	        var output = Object(target);
	        for (var index = 1; index < arguments.length; index++) {
	            var source = arguments[index];
	            if (source !== undefined && source !== null) {
	                for (var nextKey in source) {
	                    if (source.hasOwnProperty(nextKey)) {
	                        output[nextKey] = source[nextKey];
	                    }
	                }
	            }
	        }
	        return output;
	    };
	} else {
	    assign = Object.assign;
	}
	
	/**
	 * extend object.
	 * means that properties in dest will be overwritten by the ones in src.
	 * @param {Object} dest
	 * @param {Object} src
	 * @param {Boolean} [merge=false]
	 * @returns {Object} dest
	 */
	var extend = deprecate(function extend(dest, src, merge) {
	    var keys = Object.keys(src);
	    var i = 0;
	    while (i < keys.length) {
	        if (!merge || (merge && dest[keys[i]] === undefined)) {
	            dest[keys[i]] = src[keys[i]];
	        }
	        i++;
	    }
	    return dest;
	}, 'extend', 'Use `assign`.');
	
	/**
	 * merge the values from src in the dest.
	 * means that properties that exist in dest will not be overwritten by src
	 * @param {Object} dest
	 * @param {Object} src
	 * @returns {Object} dest
	 */
	var merge = deprecate(function merge(dest, src) {
	    return extend(dest, src, true);
	}, 'merge', 'Use `assign`.');
	
	/**
	 * simple class inheritance
	 * @param {Function} child
	 * @param {Function} base
	 * @param {Object} [properties]
	 */
	function inherit(child, base, properties) {
	    var baseP = base.prototype,
	        childP;
	
	    childP = child.prototype = Object.create(baseP);
	    childP.constructor = child;
	    childP._super = baseP;
	
	    if (properties) {
	        assign(childP, properties);
	    }
	}
	
	/**
	 * simple function bind
	 * @param {Function} fn
	 * @param {Object} context
	 * @returns {Function}
	 */
	function bindFn(fn, context) {
	    return function boundFn() {
	        return fn.apply(context, arguments);
	    };
	}
	
	/**
	 * let a boolean value also be a function that must return a boolean
	 * this first item in args will be used as the context
	 * @param {Boolean|Function} val
	 * @param {Array} [args]
	 * @returns {Boolean}
	 */
	function boolOrFn(val, args) {
	    if (typeof val == TYPE_FUNCTION) {
	        return val.apply(args ? args[0] || undefined : undefined, args);
	    }
	    return val;
	}
	
	/**
	 * use the val2 when val1 is undefined
	 * @param {*} val1
	 * @param {*} val2
	 * @returns {*}
	 */
	function ifUndefined(val1, val2) {
	    return (val1 === undefined) ? val2 : val1;
	}
	
	/**
	 * addEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function addEventListeners(target, types, handler) {
	    each(splitStr(types), function(type) {
	        target.addEventListener(type, handler, false);
	    });
	}
	
	/**
	 * removeEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function removeEventListeners(target, types, handler) {
	    each(splitStr(types), function(type) {
	        target.removeEventListener(type, handler, false);
	    });
	}
	
	/**
	 * find if a node is in the given parent
	 * @method hasParent
	 * @param {HTMLElement} node
	 * @param {HTMLElement} parent
	 * @return {Boolean} found
	 */
	function hasParent(node, parent) {
	    while (node) {
	        if (node == parent) {
	            return true;
	        }
	        node = node.parentNode;
	    }
	    return false;
	}
	
	/**
	 * small indexOf wrapper
	 * @param {String} str
	 * @param {String} find
	 * @returns {Boolean} found
	 */
	function inStr(str, find) {
	    return str.indexOf(find) > -1;
	}
	
	/**
	 * split string on whitespace
	 * @param {String} str
	 * @returns {Array} words
	 */
	function splitStr(str) {
	    return str.trim().split(/\s+/g);
	}
	
	/**
	 * find if a array contains the object using indexOf or a simple polyFill
	 * @param {Array} src
	 * @param {String} find
	 * @param {String} [findByKey]
	 * @return {Boolean|Number} false when not found, or the index
	 */
	function inArray(src, find, findByKey) {
	    if (src.indexOf && !findByKey) {
	        return src.indexOf(find);
	    } else {
	        var i = 0;
	        while (i < src.length) {
	            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
	                return i;
	            }
	            i++;
	        }
	        return -1;
	    }
	}
	
	/**
	 * convert array-like objects to real arrays
	 * @param {Object} obj
	 * @returns {Array}
	 */
	function toArray(obj) {
	    return Array.prototype.slice.call(obj, 0);
	}
	
	/**
	 * unique array with objects based on a key (like 'id') or just by the array's value
	 * @param {Array} src [{id:1},{id:2},{id:1}]
	 * @param {String} [key]
	 * @param {Boolean} [sort=False]
	 * @returns {Array} [{id:1},{id:2}]
	 */
	function uniqueArray(src, key, sort) {
	    var results = [];
	    var values = [];
	    var i = 0;
	
	    while (i < src.length) {
	        var val = key ? src[i][key] : src[i];
	        if (inArray(values, val) < 0) {
	            results.push(src[i]);
	        }
	        values[i] = val;
	        i++;
	    }
	
	    if (sort) {
	        if (!key) {
	            results = results.sort();
	        } else {
	            results = results.sort(function sortUniqueArray(a, b) {
	                return a[key] > b[key];
	            });
	        }
	    }
	
	    return results;
	}
	
	/**
	 * get the prefixed property
	 * @param {Object} obj
	 * @param {String} property
	 * @returns {String|Undefined} prefixed
	 */
	function prefixed(obj, property) {
	    var prefix, prop;
	    var camelProp = property[0].toUpperCase() + property.slice(1);
	
	    var i = 0;
	    while (i < VENDOR_PREFIXES.length) {
	        prefix = VENDOR_PREFIXES[i];
	        prop = (prefix) ? prefix + camelProp : property;
	
	        if (prop in obj) {
	            return prop;
	        }
	        i++;
	    }
	    return undefined;
	}
	
	/**
	 * get a unique id
	 * @returns {number} uniqueId
	 */
	var _uniqueId = 1;
	function uniqueId() {
	    return _uniqueId++;
	}
	
	/**
	 * get the window object of an element
	 * @param {HTMLElement} element
	 * @returns {DocumentView|Window}
	 */
	function getWindowForElement(element) {
	    var doc = element.ownerDocument || element;
	    return (doc.defaultView || doc.parentWindow || window);
	}
	
	var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
	
	var SUPPORT_TOUCH = ('ontouchstart' in window);
	var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
	var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
	
	var INPUT_TYPE_TOUCH = 'touch';
	var INPUT_TYPE_PEN = 'pen';
	var INPUT_TYPE_MOUSE = 'mouse';
	var INPUT_TYPE_KINECT = 'kinect';
	
	var COMPUTE_INTERVAL = 25;
	
	var INPUT_START = 1;
	var INPUT_MOVE = 2;
	var INPUT_END = 4;
	var INPUT_CANCEL = 8;
	
	var DIRECTION_NONE = 1;
	var DIRECTION_LEFT = 2;
	var DIRECTION_RIGHT = 4;
	var DIRECTION_UP = 8;
	var DIRECTION_DOWN = 16;
	
	var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
	var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
	var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
	
	var PROPS_XY = ['x', 'y'];
	var PROPS_CLIENT_XY = ['clientX', 'clientY'];
	
	/**
	 * create new input type manager
	 * @param {Manager} manager
	 * @param {Function} callback
	 * @returns {Input}
	 * @constructor
	 */
	function Input(manager, callback) {
	    var self = this;
	    this.manager = manager;
	    this.callback = callback;
	    this.element = manager.element;
	    this.target = manager.options.inputTarget;
	
	    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
	    // so when disabled the input events are completely bypassed.
	    this.domHandler = function(ev) {
	        if (boolOrFn(manager.options.enable, [manager])) {
	            self.handler(ev);
	        }
	    };
	
	    this.init();
	
	}
	
	Input.prototype = {
	    /**
	     * should handle the inputEvent data and trigger the callback
	     * @virtual
	     */
	    handler: function() { },
	
	    /**
	     * bind the events
	     */
	    init: function() {
	        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    },
	
	    /**
	     * unbind the events
	     */
	    destroy: function() {
	        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    }
	};
	
	/**
	 * create new input type manager
	 * called by the Manager constructor
	 * @param {Hammer} manager
	 * @returns {Input}
	 */
	function createInputInstance(manager) {
	    var Type;
	    var inputClass = manager.options.inputClass;
	
	    if (inputClass) {
	        Type = inputClass;
	    } else if (SUPPORT_POINTER_EVENTS) {
	        Type = PointerEventInput;
	    } else if (SUPPORT_ONLY_TOUCH) {
	        Type = TouchInput;
	    } else if (!SUPPORT_TOUCH) {
	        Type = MouseInput;
	    } else {
	        Type = TouchMouseInput;
	    }
	    return new (Type)(manager, inputHandler);
	}
	
	/**
	 * handle input events
	 * @param {Manager} manager
	 * @param {String} eventType
	 * @param {Object} input
	 */
	function inputHandler(manager, eventType, input) {
	    var pointersLen = input.pointers.length;
	    var changedPointersLen = input.changedPointers.length;
	    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
	    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));
	
	    input.isFirst = !!isFirst;
	    input.isFinal = !!isFinal;
	
	    if (isFirst) {
	        manager.session = {};
	    }
	
	    // source event is the normalized value of the domEvents
	    // like 'touchstart, mouseup, pointerdown'
	    input.eventType = eventType;
	
	    // compute scale, rotation etc
	    computeInputData(manager, input);
	
	    // emit secret event
	    manager.emit('hammer.input', input);
	
	    manager.recognize(input);
	    manager.session.prevInput = input;
	}
	
	/**
	 * extend the data with some usable properties like scale, rotate, velocity etc
	 * @param {Object} manager
	 * @param {Object} input
	 */
	function computeInputData(manager, input) {
	    var session = manager.session;
	    var pointers = input.pointers;
	    var pointersLength = pointers.length;
	
	    // store the first input to calculate the distance and direction
	    if (!session.firstInput) {
	        session.firstInput = simpleCloneInputData(input);
	    }
	
	    // to compute scale and rotation we need to store the multiple touches
	    if (pointersLength > 1 && !session.firstMultiple) {
	        session.firstMultiple = simpleCloneInputData(input);
	    } else if (pointersLength === 1) {
	        session.firstMultiple = false;
	    }
	
	    var firstInput = session.firstInput;
	    var firstMultiple = session.firstMultiple;
	    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
	
	    var center = input.center = getCenter(pointers);
	    input.timeStamp = now();
	    input.deltaTime = input.timeStamp - firstInput.timeStamp;
	
	    input.angle = getAngle(offsetCenter, center);
	    input.distance = getDistance(offsetCenter, center);
	
	    computeDeltaXY(session, input);
	    input.offsetDirection = getDirection(input.deltaX, input.deltaY);
	
	    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
	    input.overallVelocityX = overallVelocity.x;
	    input.overallVelocityY = overallVelocity.y;
	    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;
	
	    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
	    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
	
	    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
	        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);
	
	    computeIntervalInputData(session, input);
	
	    // find the correct target
	    var target = manager.element;
	    if (hasParent(input.srcEvent.target, target)) {
	        target = input.srcEvent.target;
	    }
	    input.target = target;
	}
	
	function computeDeltaXY(session, input) {
	    var center = input.center;
	    var offset = session.offsetDelta || {};
	    var prevDelta = session.prevDelta || {};
	    var prevInput = session.prevInput || {};
	
	    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
	        prevDelta = session.prevDelta = {
	            x: prevInput.deltaX || 0,
	            y: prevInput.deltaY || 0
	        };
	
	        offset = session.offsetDelta = {
	            x: center.x,
	            y: center.y
	        };
	    }
	
	    input.deltaX = prevDelta.x + (center.x - offset.x);
	    input.deltaY = prevDelta.y + (center.y - offset.y);
	}
	
	/**
	 * velocity is calculated every x ms
	 * @param {Object} session
	 * @param {Object} input
	 */
	function computeIntervalInputData(session, input) {
	    var last = session.lastInterval || input,
	        deltaTime = input.timeStamp - last.timeStamp,
	        velocity, velocityX, velocityY, direction;
	
	    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
	        var deltaX = input.deltaX - last.deltaX;
	        var deltaY = input.deltaY - last.deltaY;
	
	        var v = getVelocity(deltaTime, deltaX, deltaY);
	        velocityX = v.x;
	        velocityY = v.y;
	        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
	        direction = getDirection(deltaX, deltaY);
	
	        session.lastInterval = input;
	    } else {
	        // use latest velocity info if it doesn't overtake a minimum period
	        velocity = last.velocity;
	        velocityX = last.velocityX;
	        velocityY = last.velocityY;
	        direction = last.direction;
	    }
	
	    input.velocity = velocity;
	    input.velocityX = velocityX;
	    input.velocityY = velocityY;
	    input.direction = direction;
	}
	
	/**
	 * create a simple clone from the input used for storage of firstInput and firstMultiple
	 * @param {Object} input
	 * @returns {Object} clonedInputData
	 */
	function simpleCloneInputData(input) {
	    // make a simple copy of the pointers because we will get a reference if we don't
	    // we only need clientXY for the calculations
	    var pointers = [];
	    var i = 0;
	    while (i < input.pointers.length) {
	        pointers[i] = {
	            clientX: round(input.pointers[i].clientX),
	            clientY: round(input.pointers[i].clientY)
	        };
	        i++;
	    }
	
	    return {
	        timeStamp: now(),
	        pointers: pointers,
	        center: getCenter(pointers),
	        deltaX: input.deltaX,
	        deltaY: input.deltaY
	    };
	}
	
	/**
	 * get the center of all the pointers
	 * @param {Array} pointers
	 * @return {Object} center contains `x` and `y` properties
	 */
	function getCenter(pointers) {
	    var pointersLength = pointers.length;
	
	    // no need to loop when only one touch
	    if (pointersLength === 1) {
	        return {
	            x: round(pointers[0].clientX),
	            y: round(pointers[0].clientY)
	        };
	    }
	
	    var x = 0, y = 0, i = 0;
	    while (i < pointersLength) {
	        x += pointers[i].clientX;
	        y += pointers[i].clientY;
	        i++;
	    }
	
	    return {
	        x: round(x / pointersLength),
	        y: round(y / pointersLength)
	    };
	}
	
	/**
	 * calculate the velocity between two points. unit is in px per ms.
	 * @param {Number} deltaTime
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Object} velocity `x` and `y`
	 */
	function getVelocity(deltaTime, x, y) {
	    return {
	        x: x / deltaTime || 0,
	        y: y / deltaTime || 0
	    };
	}
	
	/**
	 * get the direction between two points
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Number} direction
	 */
	function getDirection(x, y) {
	    if (x === y) {
	        return DIRECTION_NONE;
	    }
	
	    if (abs(x) >= abs(y)) {
	        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
	    }
	    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
	}
	
	/**
	 * calculate the absolute distance between two points
	 * @param {Object} p1 {x, y}
	 * @param {Object} p2 {x, y}
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} distance
	 */
	function getDistance(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]],
	        y = p2[props[1]] - p1[props[1]];
	
	    return Math.sqrt((x * x) + (y * y));
	}
	
	/**
	 * calculate the angle between two coordinates
	 * @param {Object} p1
	 * @param {Object} p2
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} angle
	 */
	function getAngle(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]],
	        y = p2[props[1]] - p1[props[1]];
	    return Math.atan2(y, x) * 180 / Math.PI;
	}
	
	/**
	 * calculate the rotation degrees between two pointersets
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} rotation
	 */
	function getRotation(start, end) {
	    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
	}
	
	/**
	 * calculate the scale factor between two pointersets
	 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} scale
	 */
	function getScale(start, end) {
	    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
	}
	
	var MOUSE_INPUT_MAP = {
	    mousedown: INPUT_START,
	    mousemove: INPUT_MOVE,
	    mouseup: INPUT_END
	};
	
	var MOUSE_ELEMENT_EVENTS = 'mousedown';
	var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';
	
	/**
	 * Mouse events input
	 * @constructor
	 * @extends Input
	 */
	function MouseInput() {
	    this.evEl = MOUSE_ELEMENT_EVENTS;
	    this.evWin = MOUSE_WINDOW_EVENTS;
	
	    this.pressed = false; // mousedown state
	
	    Input.apply(this, arguments);
	}
	
	inherit(MouseInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function MEhandler(ev) {
	        var eventType = MOUSE_INPUT_MAP[ev.type];
	
	        // on start we want to have the left mouse button down
	        if (eventType & INPUT_START && ev.button === 0) {
	            this.pressed = true;
	        }
	
	        if (eventType & INPUT_MOVE && ev.which !== 1) {
	            eventType = INPUT_END;
	        }
	
	        // mouse must be down
	        if (!this.pressed) {
	            return;
	        }
	
	        if (eventType & INPUT_END) {
	            this.pressed = false;
	        }
	
	        this.callback(this.manager, eventType, {
	            pointers: [ev],
	            changedPointers: [ev],
	            pointerType: INPUT_TYPE_MOUSE,
	            srcEvent: ev
	        });
	    }
	});
	
	var POINTER_INPUT_MAP = {
	    pointerdown: INPUT_START,
	    pointermove: INPUT_MOVE,
	    pointerup: INPUT_END,
	    pointercancel: INPUT_CANCEL,
	    pointerout: INPUT_CANCEL
	};
	
	// in IE10 the pointer types is defined as an enum
	var IE10_POINTER_TYPE_ENUM = {
	    2: INPUT_TYPE_TOUCH,
	    3: INPUT_TYPE_PEN,
	    4: INPUT_TYPE_MOUSE,
	    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
	};
	
	var POINTER_ELEMENT_EVENTS = 'pointerdown';
	var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';
	
	// IE10 has prefixed support, and case-sensitive
	if (window.MSPointerEvent && !window.PointerEvent) {
	    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
	    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
	}
	
	/**
	 * Pointer events input
	 * @constructor
	 * @extends Input
	 */
	function PointerEventInput() {
	    this.evEl = POINTER_ELEMENT_EVENTS;
	    this.evWin = POINTER_WINDOW_EVENTS;
	
	    Input.apply(this, arguments);
	
	    this.store = (this.manager.session.pointerEvents = []);
	}
	
	inherit(PointerEventInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function PEhandler(ev) {
	        var store = this.store;
	        var removePointer = false;
	
	        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
	        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
	        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
	
	        var isTouch = (pointerType == INPUT_TYPE_TOUCH);
	
	        // get index of the event in the store
	        var storeIndex = inArray(store, ev.pointerId, 'pointerId');
	
	        // start and mouse must be down
	        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
	            if (storeIndex < 0) {
	                store.push(ev);
	                storeIndex = store.length - 1;
	            }
	        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
	            removePointer = true;
	        }
	
	        // it not found, so the pointer hasn't been down (so it's probably a hover)
	        if (storeIndex < 0) {
	            return;
	        }
	
	        // update the event in the store
	        store[storeIndex] = ev;
	
	        this.callback(this.manager, eventType, {
	            pointers: store,
	            changedPointers: [ev],
	            pointerType: pointerType,
	            srcEvent: ev
	        });
	
	        if (removePointer) {
	            // remove from the store
	            store.splice(storeIndex, 1);
	        }
	    }
	});
	
	var SINGLE_TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};
	
	var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
	var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';
	
	/**
	 * Touch events input
	 * @constructor
	 * @extends Input
	 */
	function SingleTouchInput() {
	    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
	    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
	    this.started = false;
	
	    Input.apply(this, arguments);
	}
	
	inherit(SingleTouchInput, Input, {
	    handler: function TEhandler(ev) {
	        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
	
	        // should we handle the touch events?
	        if (type === INPUT_START) {
	            this.started = true;
	        }
	
	        if (!this.started) {
	            return;
	        }
	
	        var touches = normalizeSingleTouches.call(this, ev, type);
	
	        // when done, reset the started state
	        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
	            this.started = false;
	        }
	
	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});
	
	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function normalizeSingleTouches(ev, type) {
	    var all = toArray(ev.touches);
	    var changed = toArray(ev.changedTouches);
	
	    if (type & (INPUT_END | INPUT_CANCEL)) {
	        all = uniqueArray(all.concat(changed), 'identifier', true);
	    }
	
	    return [all, changed];
	}
	
	var TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};
	
	var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';
	
	/**
	 * Multi-user touch events input
	 * @constructor
	 * @extends Input
	 */
	function TouchInput() {
	    this.evTarget = TOUCH_TARGET_EVENTS;
	    this.targetIds = {};
	
	    Input.apply(this, arguments);
	}
	
	inherit(TouchInput, Input, {
	    handler: function MTEhandler(ev) {
	        var type = TOUCH_INPUT_MAP[ev.type];
	        var touches = getTouches.call(this, ev, type);
	        if (!touches) {
	            return;
	        }
	
	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});
	
	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function getTouches(ev, type) {
	    var allTouches = toArray(ev.touches);
	    var targetIds = this.targetIds;
	
	    // when there is only one touch, the process can be simplified
	    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
	        targetIds[allTouches[0].identifier] = true;
	        return [allTouches, allTouches];
	    }
	
	    var i,
	        targetTouches,
	        changedTouches = toArray(ev.changedTouches),
	        changedTargetTouches = [],
	        target = this.target;
	
	    // get target touches from touches
	    targetTouches = allTouches.filter(function(touch) {
	        return hasParent(touch.target, target);
	    });
	
	    // collect touches
	    if (type === INPUT_START) {
	        i = 0;
	        while (i < targetTouches.length) {
	            targetIds[targetTouches[i].identifier] = true;
	            i++;
	        }
	    }
	
	    // filter changed touches to only contain touches that exist in the collected target ids
	    i = 0;
	    while (i < changedTouches.length) {
	        if (targetIds[changedTouches[i].identifier]) {
	            changedTargetTouches.push(changedTouches[i]);
	        }
	
	        // cleanup removed touches
	        if (type & (INPUT_END | INPUT_CANCEL)) {
	            delete targetIds[changedTouches[i].identifier];
	        }
	        i++;
	    }
	
	    if (!changedTargetTouches.length) {
	        return;
	    }
	
	    return [
	        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
	        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
	        changedTargetTouches
	    ];
	}
	
	/**
	 * Combined touch and mouse input
	 *
	 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
	 * This because touch devices also emit mouse events while doing a touch.
	 *
	 * @constructor
	 * @extends Input
	 */
	
	var DEDUP_TIMEOUT = 2500;
	var DEDUP_DISTANCE = 25;
	
	function TouchMouseInput() {
	    Input.apply(this, arguments);
	
	    var handler = bindFn(this.handler, this);
	    this.touch = new TouchInput(this.manager, handler);
	    this.mouse = new MouseInput(this.manager, handler);
	
	    this.primaryTouch = null;
	    this.lastTouches = [];
	}
	
	inherit(TouchMouseInput, Input, {
	    /**
	     * handle mouse and touch events
	     * @param {Hammer} manager
	     * @param {String} inputEvent
	     * @param {Object} inputData
	     */
	    handler: function TMEhandler(manager, inputEvent, inputData) {
	        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
	            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);
	
	        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
	            return;
	        }
	
	        // when we're in a touch event, record touches to  de-dupe synthetic mouse event
	        if (isTouch) {
	            recordTouches.call(this, inputEvent, inputData);
	        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
	            return;
	        }
	
	        this.callback(manager, inputEvent, inputData);
	    },
	
	    /**
	     * remove the event listeners
	     */
	    destroy: function destroy() {
	        this.touch.destroy();
	        this.mouse.destroy();
	    }
	});
	
	function recordTouches(eventType, eventData) {
	    if (eventType & INPUT_START) {
	        this.primaryTouch = eventData.changedPointers[0].identifier;
	        setLastTouch.call(this, eventData);
	    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
	        setLastTouch.call(this, eventData);
	    }
	}
	
	function setLastTouch(eventData) {
	    var touch = eventData.changedPointers[0];
	
	    if (touch.identifier === this.primaryTouch) {
	        var lastTouch = {x: touch.clientX, y: touch.clientY};
	        this.lastTouches.push(lastTouch);
	        var lts = this.lastTouches;
	        var removeLastTouch = function() {
	            var i = lts.indexOf(lastTouch);
	            if (i > -1) {
	                lts.splice(i, 1);
	            }
	        };
	        setTimeout(removeLastTouch, DEDUP_TIMEOUT);
	    }
	}
	
	function isSyntheticEvent(eventData) {
	    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
	    for (var i = 0; i < this.lastTouches.length; i++) {
	        var t = this.lastTouches[i];
	        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
	        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
	            return true;
	        }
	    }
	    return false;
	}
	
	var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
	var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
	
	// magical touchAction value
	var TOUCH_ACTION_COMPUTE = 'compute';
	var TOUCH_ACTION_AUTO = 'auto';
	var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
	var TOUCH_ACTION_NONE = 'none';
	var TOUCH_ACTION_PAN_X = 'pan-x';
	var TOUCH_ACTION_PAN_Y = 'pan-y';
	var TOUCH_ACTION_MAP = getTouchActionProps();
	
	/**
	 * Touch Action
	 * sets the touchAction property or uses the js alternative
	 * @param {Manager} manager
	 * @param {String} value
	 * @constructor
	 */
	function TouchAction(manager, value) {
	    this.manager = manager;
	    this.set(value);
	}
	
	TouchAction.prototype = {
	    /**
	     * set the touchAction value on the element or enable the polyfill
	     * @param {String} value
	     */
	    set: function(value) {
	        // find out the touch-action by the event handlers
	        if (value == TOUCH_ACTION_COMPUTE) {
	            value = this.compute();
	        }
	
	        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
	            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
	        }
	        this.actions = value.toLowerCase().trim();
	    },
	
	    /**
	     * just re-set the touchAction value
	     */
	    update: function() {
	        this.set(this.manager.options.touchAction);
	    },
	
	    /**
	     * compute the value for the touchAction property based on the recognizer's settings
	     * @returns {String} value
	     */
	    compute: function() {
	        var actions = [];
	        each(this.manager.recognizers, function(recognizer) {
	            if (boolOrFn(recognizer.options.enable, [recognizer])) {
	                actions = actions.concat(recognizer.getTouchAction());
	            }
	        });
	        return cleanTouchActions(actions.join(' '));
	    },
	
	    /**
	     * this method is called on each input cycle and provides the preventing of the browser behavior
	     * @param {Object} input
	     */
	    preventDefaults: function(input) {
	        var srcEvent = input.srcEvent;
	        var direction = input.offsetDirection;
	
	        // if the touch action did prevented once this session
	        if (this.manager.session.prevented) {
	            srcEvent.preventDefault();
	            return;
	        }
	
	        var actions = this.actions;
	        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
	        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
	        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];
	
	        if (hasNone) {
	            //do not prevent defaults if this is a tap gesture
	
	            var isTapPointer = input.pointers.length === 1;
	            var isTapMovement = input.distance < 2;
	            var isTapTouchTime = input.deltaTime < 250;
	
	            if (isTapPointer && isTapMovement && isTapTouchTime) {
	                return;
	            }
	        }
	
	        if (hasPanX && hasPanY) {
	            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
	            return;
	        }
	
	        if (hasNone ||
	            (hasPanY && direction & DIRECTION_HORIZONTAL) ||
	            (hasPanX && direction & DIRECTION_VERTICAL)) {
	            return this.preventSrc(srcEvent);
	        }
	    },
	
	    /**
	     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
	     * @param {Object} srcEvent
	     */
	    preventSrc: function(srcEvent) {
	        this.manager.session.prevented = true;
	        srcEvent.preventDefault();
	    }
	};
	
	/**
	 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
	 * @param {String} actions
	 * @returns {*}
	 */
	function cleanTouchActions(actions) {
	    // none
	    if (inStr(actions, TOUCH_ACTION_NONE)) {
	        return TOUCH_ACTION_NONE;
	    }
	
	    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
	    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
	
	    // if both pan-x and pan-y are set (different recognizers
	    // for different directions, e.g. horizontal pan but vertical swipe?)
	    // we need none (as otherwise with pan-x pan-y combined none of these
	    // recognizers will work, since the browser would handle all panning
	    if (hasPanX && hasPanY) {
	        return TOUCH_ACTION_NONE;
	    }
	
	    // pan-x OR pan-y
	    if (hasPanX || hasPanY) {
	        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
	    }
	
	    // manipulation
	    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
	        return TOUCH_ACTION_MANIPULATION;
	    }
	
	    return TOUCH_ACTION_AUTO;
	}
	
	function getTouchActionProps() {
	    if (!NATIVE_TOUCH_ACTION) {
	        return false;
	    }
	    var touchMap = {};
	    var cssSupports = window.CSS && window.CSS.supports;
	    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {
	
	        // If css.supports is not supported but there is native touch-action assume it supports
	        // all values. This is the case for IE 10 and 11.
	        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
	    });
	    return touchMap;
	}
	
	/**
	 * Recognizer flow explained; *
	 * All recognizers have the initial state of POSSIBLE when a input session starts.
	 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
	 * Example session for mouse-input: mousedown -> mousemove -> mouseup
	 *
	 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
	 * which determines with state it should be.
	 *
	 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
	 * POSSIBLE to give it another change on the next cycle.
	 *
	 *               Possible
	 *                  |
	 *            +-----+---------------+
	 *            |                     |
	 *      +-----+-----+               |
	 *      |           |               |
	 *   Failed      Cancelled          |
	 *                          +-------+------+
	 *                          |              |
	 *                      Recognized       Began
	 *                                         |
	 *                                      Changed
	 *                                         |
	 *                                  Ended/Recognized
	 */
	var STATE_POSSIBLE = 1;
	var STATE_BEGAN = 2;
	var STATE_CHANGED = 4;
	var STATE_ENDED = 8;
	var STATE_RECOGNIZED = STATE_ENDED;
	var STATE_CANCELLED = 16;
	var STATE_FAILED = 32;
	
	/**
	 * Recognizer
	 * Every recognizer needs to extend from this class.
	 * @constructor
	 * @param {Object} options
	 */
	function Recognizer(options) {
	    this.options = assign({}, this.defaults, options || {});
	
	    this.id = uniqueId();
	
	    this.manager = null;
	
	    // default is enable true
	    this.options.enable = ifUndefined(this.options.enable, true);
	
	    this.state = STATE_POSSIBLE;
	
	    this.simultaneous = {};
	    this.requireFail = [];
	}
	
	Recognizer.prototype = {
	    /**
	     * @virtual
	     * @type {Object}
	     */
	    defaults: {},
	
	    /**
	     * set options
	     * @param {Object} options
	     * @return {Recognizer}
	     */
	    set: function(options) {
	        assign(this.options, options);
	
	        // also update the touchAction, in case something changed about the directions/enabled state
	        this.manager && this.manager.touchAction.update();
	        return this;
	    },
	
	    /**
	     * recognize simultaneous with an other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    recognizeWith: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
	            return this;
	        }
	
	        var simultaneous = this.simultaneous;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (!simultaneous[otherRecognizer.id]) {
	            simultaneous[otherRecognizer.id] = otherRecognizer;
	            otherRecognizer.recognizeWith(this);
	        }
	        return this;
	    },
	
	    /**
	     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRecognizeWith: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
	            return this;
	        }
	
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        delete this.simultaneous[otherRecognizer.id];
	        return this;
	    },
	
	    /**
	     * recognizer can only run when an other is failing
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    requireFailure: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
	            return this;
	        }
	
	        var requireFail = this.requireFail;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (inArray(requireFail, otherRecognizer) === -1) {
	            requireFail.push(otherRecognizer);
	            otherRecognizer.requireFailure(this);
	        }
	        return this;
	    },
	
	    /**
	     * drop the requireFailure link. it does not remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRequireFailure: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
	            return this;
	        }
	
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        var index = inArray(this.requireFail, otherRecognizer);
	        if (index > -1) {
	            this.requireFail.splice(index, 1);
	        }
	        return this;
	    },
	
	    /**
	     * has require failures boolean
	     * @returns {boolean}
	     */
	    hasRequireFailures: function() {
	        return this.requireFail.length > 0;
	    },
	
	    /**
	     * if the recognizer can recognize simultaneous with an other recognizer
	     * @param {Recognizer} otherRecognizer
	     * @returns {Boolean}
	     */
	    canRecognizeWith: function(otherRecognizer) {
	        return !!this.simultaneous[otherRecognizer.id];
	    },
	
	    /**
	     * You should use `tryEmit` instead of `emit` directly to check
	     * that all the needed recognizers has failed before emitting.
	     * @param {Object} input
	     */
	    emit: function(input) {
	        var self = this;
	        var state = this.state;
	
	        function emit(event) {
	            self.manager.emit(event, input);
	        }
	
	        // 'panstart' and 'panmove'
	        if (state < STATE_ENDED) {
	            emit(self.options.event + stateStr(state));
	        }
	
	        emit(self.options.event); // simple 'eventName' events
	
	        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
	            emit(input.additionalEvent);
	        }
	
	        // panend and pancancel
	        if (state >= STATE_ENDED) {
	            emit(self.options.event + stateStr(state));
	        }
	    },
	
	    /**
	     * Check that all the require failure recognizers has failed,
	     * if true, it emits a gesture event,
	     * otherwise, setup the state to FAILED.
	     * @param {Object} input
	     */
	    tryEmit: function(input) {
	        if (this.canEmit()) {
	            return this.emit(input);
	        }
	        // it's failing anyway
	        this.state = STATE_FAILED;
	    },
	
	    /**
	     * can we emit?
	     * @returns {boolean}
	     */
	    canEmit: function() {
	        var i = 0;
	        while (i < this.requireFail.length) {
	            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
	                return false;
	            }
	            i++;
	        }
	        return true;
	    },
	
	    /**
	     * update the recognizer
	     * @param {Object} inputData
	     */
	    recognize: function(inputData) {
	        // make a new copy of the inputData
	        // so we can change the inputData without messing up the other recognizers
	        var inputDataClone = assign({}, inputData);
	
	        // is is enabled and allow recognizing?
	        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
	            this.reset();
	            this.state = STATE_FAILED;
	            return;
	        }
	
	        // reset when we've reached the end
	        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
	            this.state = STATE_POSSIBLE;
	        }
	
	        this.state = this.process(inputDataClone);
	
	        // the recognizer has recognized a gesture
	        // so trigger an event
	        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
	            this.tryEmit(inputDataClone);
	        }
	    },
	
	    /**
	     * return the state of the recognizer
	     * the actual recognizing happens in this method
	     * @virtual
	     * @param {Object} inputData
	     * @returns {Const} STATE
	     */
	    process: function(inputData) { }, // jshint ignore:line
	
	    /**
	     * return the preferred touch-action
	     * @virtual
	     * @returns {Array}
	     */
	    getTouchAction: function() { },
	
	    /**
	     * called when the gesture isn't allowed to recognize
	     * like when another is being recognized or it is disabled
	     * @virtual
	     */
	    reset: function() { }
	};
	
	/**
	 * get a usable string, used as event postfix
	 * @param {Const} state
	 * @returns {String} state
	 */
	function stateStr(state) {
	    if (state & STATE_CANCELLED) {
	        return 'cancel';
	    } else if (state & STATE_ENDED) {
	        return 'end';
	    } else if (state & STATE_CHANGED) {
	        return 'move';
	    } else if (state & STATE_BEGAN) {
	        return 'start';
	    }
	    return '';
	}
	
	/**
	 * direction cons to string
	 * @param {Const} direction
	 * @returns {String}
	 */
	function directionStr(direction) {
	    if (direction == DIRECTION_DOWN) {
	        return 'down';
	    } else if (direction == DIRECTION_UP) {
	        return 'up';
	    } else if (direction == DIRECTION_LEFT) {
	        return 'left';
	    } else if (direction == DIRECTION_RIGHT) {
	        return 'right';
	    }
	    return '';
	}
	
	/**
	 * get a recognizer by name if it is bound to a manager
	 * @param {Recognizer|String} otherRecognizer
	 * @param {Recognizer} recognizer
	 * @returns {Recognizer}
	 */
	function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
	    var manager = recognizer.manager;
	    if (manager) {
	        return manager.get(otherRecognizer);
	    }
	    return otherRecognizer;
	}
	
	/**
	 * This recognizer is just used as a base for the simple attribute recognizers.
	 * @constructor
	 * @extends Recognizer
	 */
	function AttrRecognizer() {
	    Recognizer.apply(this, arguments);
	}
	
	inherit(AttrRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof AttrRecognizer
	     */
	    defaults: {
	        /**
	         * @type {Number}
	         * @default 1
	         */
	        pointers: 1
	    },
	
	    /**
	     * Used to check if it the recognizer receives valid input, like input.distance > 10.
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {Boolean} recognized
	     */
	    attrTest: function(input) {
	        var optionPointers = this.options.pointers;
	        return optionPointers === 0 || input.pointers.length === optionPointers;
	    },
	
	    /**
	     * Process the input and return the state for the recognizer
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {*} State
	     */
	    process: function(input) {
	        var state = this.state;
	        var eventType = input.eventType;
	
	        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
	        var isValid = this.attrTest(input);
	
	        // on cancel input and we've recognized before, return STATE_CANCELLED
	        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
	            return state | STATE_CANCELLED;
	        } else if (isRecognized || isValid) {
	            if (eventType & INPUT_END) {
	                return state | STATE_ENDED;
	            } else if (!(state & STATE_BEGAN)) {
	                return STATE_BEGAN;
	            }
	            return state | STATE_CHANGED;
	        }
	        return STATE_FAILED;
	    }
	});
	
	/**
	 * Pan
	 * Recognized when the pointer is down and moved in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PanRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	
	    this.pX = null;
	    this.pY = null;
	}
	
	inherit(PanRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PanRecognizer
	     */
	    defaults: {
	        event: 'pan',
	        threshold: 10,
	        pointers: 1,
	        direction: DIRECTION_ALL
	    },
	
	    getTouchAction: function() {
	        var direction = this.options.direction;
	        var actions = [];
	        if (direction & DIRECTION_HORIZONTAL) {
	            actions.push(TOUCH_ACTION_PAN_Y);
	        }
	        if (direction & DIRECTION_VERTICAL) {
	            actions.push(TOUCH_ACTION_PAN_X);
	        }
	        return actions;
	    },
	
	    directionTest: function(input) {
	        var options = this.options;
	        var hasMoved = true;
	        var distance = input.distance;
	        var direction = input.direction;
	        var x = input.deltaX;
	        var y = input.deltaY;
	
	        // lock to axis?
	        if (!(direction & options.direction)) {
	            if (options.direction & DIRECTION_HORIZONTAL) {
	                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
	                hasMoved = x != this.pX;
	                distance = Math.abs(input.deltaX);
	            } else {
	                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
	                hasMoved = y != this.pY;
	                distance = Math.abs(input.deltaY);
	            }
	        }
	        input.direction = direction;
	        return hasMoved && distance > options.threshold && direction & options.direction;
	    },
	
	    attrTest: function(input) {
	        return AttrRecognizer.prototype.attrTest.call(this, input) &&
	            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
	    },
	
	    emit: function(input) {
	
	        this.pX = input.deltaX;
	        this.pY = input.deltaY;
	
	        var direction = directionStr(input.direction);
	
	        if (direction) {
	            input.additionalEvent = this.options.event + direction;
	        }
	        this._super.emit.call(this, input);
	    }
	});
	
	/**
	 * Pinch
	 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PinchRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}
	
	inherit(PinchRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'pinch',
	        threshold: 0,
	        pointers: 2
	    },
	
	    getTouchAction: function() {
	        return [TOUCH_ACTION_NONE];
	    },
	
	    attrTest: function(input) {
	        return this._super.attrTest.call(this, input) &&
	            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
	    },
	
	    emit: function(input) {
	        if (input.scale !== 1) {
	            var inOut = input.scale < 1 ? 'in' : 'out';
	            input.additionalEvent = this.options.event + inOut;
	        }
	        this._super.emit.call(this, input);
	    }
	});
	
	/**
	 * Press
	 * Recognized when the pointer is down for x ms without any movement.
	 * @constructor
	 * @extends Recognizer
	 */
	function PressRecognizer() {
	    Recognizer.apply(this, arguments);
	
	    this._timer = null;
	    this._input = null;
	}
	
	inherit(PressRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PressRecognizer
	     */
	    defaults: {
	        event: 'press',
	        pointers: 1,
	        time: 251, // minimal time of the pointer to be pressed
	        threshold: 9 // a minimal movement is ok, but keep it low
	    },
	
	    getTouchAction: function() {
	        return [TOUCH_ACTION_AUTO];
	    },
	
	    process: function(input) {
	        var options = this.options;
	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTime = input.deltaTime > options.time;
	
	        this._input = input;
	
	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
	            this.reset();
	        } else if (input.eventType & INPUT_START) {
	            this.reset();
	            this._timer = setTimeoutContext(function() {
	                this.state = STATE_RECOGNIZED;
	                this.tryEmit();
	            }, options.time, this);
	        } else if (input.eventType & INPUT_END) {
	            return STATE_RECOGNIZED;
	        }
	        return STATE_FAILED;
	    },
	
	    reset: function() {
	        clearTimeout(this._timer);
	    },
	
	    emit: function(input) {
	        if (this.state !== STATE_RECOGNIZED) {
	            return;
	        }
	
	        if (input && (input.eventType & INPUT_END)) {
	            this.manager.emit(this.options.event + 'up', input);
	        } else {
	            this._input.timeStamp = now();
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});
	
	/**
	 * Rotate
	 * Recognized when two or more pointer are moving in a circular motion.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function RotateRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}
	
	inherit(RotateRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof RotateRecognizer
	     */
	    defaults: {
	        event: 'rotate',
	        threshold: 0,
	        pointers: 2
	    },
	
	    getTouchAction: function() {
	        return [TOUCH_ACTION_NONE];
	    },
	
	    attrTest: function(input) {
	        return this._super.attrTest.call(this, input) &&
	            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
	    }
	});
	
	/**
	 * Swipe
	 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function SwipeRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}
	
	inherit(SwipeRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof SwipeRecognizer
	     */
	    defaults: {
	        event: 'swipe',
	        threshold: 10,
	        velocity: 0.3,
	        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
	        pointers: 1
	    },
	
	    getTouchAction: function() {
	        return PanRecognizer.prototype.getTouchAction.call(this);
	    },
	
	    attrTest: function(input) {
	        var direction = this.options.direction;
	        var velocity;
	
	        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
	            velocity = input.overallVelocity;
	        } else if (direction & DIRECTION_HORIZONTAL) {
	            velocity = input.overallVelocityX;
	        } else if (direction & DIRECTION_VERTICAL) {
	            velocity = input.overallVelocityY;
	        }
	
	        return this._super.attrTest.call(this, input) &&
	            direction & input.offsetDirection &&
	            input.distance > this.options.threshold &&
	            input.maxPointers == this.options.pointers &&
	            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
	    },
	
	    emit: function(input) {
	        var direction = directionStr(input.offsetDirection);
	        if (direction) {
	            this.manager.emit(this.options.event + direction, input);
	        }
	
	        this.manager.emit(this.options.event, input);
	    }
	});
	
	/**
	 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
	 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
	 * a single tap.
	 *
	 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
	 * multi-taps being recognized.
	 * @constructor
	 * @extends Recognizer
	 */
	function TapRecognizer() {
	    Recognizer.apply(this, arguments);
	
	    // previous time and center,
	    // used for tap counting
	    this.pTime = false;
	    this.pCenter = false;
	
	    this._timer = null;
	    this._input = null;
	    this.count = 0;
	}
	
	inherit(TapRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'tap',
	        pointers: 1,
	        taps: 1,
	        interval: 300, // max time between the multi-tap taps
	        time: 250, // max time of the pointer to be down (like finger on the screen)
	        threshold: 9, // a minimal movement is ok, but keep it low
	        posThreshold: 10 // a multi-tap can be a bit off the initial position
	    },
	
	    getTouchAction: function() {
	        return [TOUCH_ACTION_MANIPULATION];
	    },
	
	    process: function(input) {
	        var options = this.options;
	
	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTouchTime = input.deltaTime < options.time;
	
	        this.reset();
	
	        if ((input.eventType & INPUT_START) && (this.count === 0)) {
	            return this.failTimeout();
	        }
	
	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (validMovement && validTouchTime && validPointers) {
	            if (input.eventType != INPUT_END) {
	                return this.failTimeout();
	            }
	
	            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
	            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
	
	            this.pTime = input.timeStamp;
	            this.pCenter = input.center;
	
	            if (!validMultiTap || !validInterval) {
	                this.count = 1;
	            } else {
	                this.count += 1;
	            }
	
	            this._input = input;
	
	            // if tap count matches we have recognized it,
	            // else it has began recognizing...
	            var tapCount = this.count % options.taps;
	            if (tapCount === 0) {
	                // no failing requirements, immediately trigger the tap event
	                // or wait as long as the multitap interval to trigger
	                if (!this.hasRequireFailures()) {
	                    return STATE_RECOGNIZED;
	                } else {
	                    this._timer = setTimeoutContext(function() {
	                        this.state = STATE_RECOGNIZED;
	                        this.tryEmit();
	                    }, options.interval, this);
	                    return STATE_BEGAN;
	                }
	            }
	        }
	        return STATE_FAILED;
	    },
	
	    failTimeout: function() {
	        this._timer = setTimeoutContext(function() {
	            this.state = STATE_FAILED;
	        }, this.options.interval, this);
	        return STATE_FAILED;
	    },
	
	    reset: function() {
	        clearTimeout(this._timer);
	    },
	
	    emit: function() {
	        if (this.state == STATE_RECOGNIZED) {
	            this._input.tapCount = this.count;
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});
	
	/**
	 * Simple way to create a manager with a default set of recognizers.
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Hammer(element, options) {
	    options = options || {};
	    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
	    return new Manager(element, options);
	}
	
	/**
	 * @const {string}
	 */
	Hammer.VERSION = '2.0.7';
	
	/**
	 * default settings
	 * @namespace
	 */
	Hammer.defaults = {
	    /**
	     * set if DOM events are being triggered.
	     * But this is slower and unused by simple implementations, so disabled by default.
	     * @type {Boolean}
	     * @default false
	     */
	    domEvents: false,
	
	    /**
	     * The value for the touchAction property/fallback.
	     * When set to `compute` it will magically set the correct value based on the added recognizers.
	     * @type {String}
	     * @default compute
	     */
	    touchAction: TOUCH_ACTION_COMPUTE,
	
	    /**
	     * @type {Boolean}
	     * @default true
	     */
	    enable: true,
	
	    /**
	     * EXPERIMENTAL FEATURE -- can be removed/changed
	     * Change the parent input target element.
	     * If Null, then it is being set the to main element.
	     * @type {Null|EventTarget}
	     * @default null
	     */
	    inputTarget: null,
	
	    /**
	     * force an input class
	     * @type {Null|Function}
	     * @default null
	     */
	    inputClass: null,
	
	    /**
	     * Default recognizer setup when calling `Hammer()`
	     * When creating a new Manager these will be skipped.
	     * @type {Array}
	     */
	    preset: [
	        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
	        [RotateRecognizer, {enable: false}],
	        [PinchRecognizer, {enable: false}, ['rotate']],
	        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
	        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
	        [TapRecognizer],
	        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
	        [PressRecognizer]
	    ],
	
	    /**
	     * Some CSS properties can be used to improve the working of Hammer.
	     * Add them to this method and they will be set when creating a new Manager.
	     * @namespace
	     */
	    cssProps: {
	        /**
	         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userSelect: 'none',
	
	        /**
	         * Disable the Windows Phone grippers when pressing an element.
	         * @type {String}
	         * @default 'none'
	         */
	        touchSelect: 'none',
	
	        /**
	         * Disables the default callout shown when you touch and hold a touch target.
	         * On iOS, when you touch and hold a touch target such as a link, Safari displays
	         * a callout containing information about the link. This property allows you to disable that callout.
	         * @type {String}
	         * @default 'none'
	         */
	        touchCallout: 'none',
	
	        /**
	         * Specifies whether zooming is enabled. Used by IE10>
	         * @type {String}
	         * @default 'none'
	         */
	        contentZooming: 'none',
	
	        /**
	         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userDrag: 'none',
	
	        /**
	         * Overrides the highlight color shown when the user taps a link or a JavaScript
	         * clickable element in iOS. This property obeys the alpha value, if specified.
	         * @type {String}
	         * @default 'rgba(0,0,0,0)'
	         */
	        tapHighlightColor: 'rgba(0,0,0,0)'
	    }
	};
	
	var STOP = 1;
	var FORCED_STOP = 2;
	
	/**
	 * Manager
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Manager(element, options) {
	    this.options = assign({}, Hammer.defaults, options || {});
	
	    this.options.inputTarget = this.options.inputTarget || element;
	
	    this.handlers = {};
	    this.session = {};
	    this.recognizers = [];
	    this.oldCssProps = {};
	
	    this.element = element;
	    this.input = createInputInstance(this);
	    this.touchAction = new TouchAction(this, this.options.touchAction);
	
	    toggleCssProps(this, true);
	
	    each(this.options.recognizers, function(item) {
	        var recognizer = this.add(new (item[0])(item[1]));
	        item[2] && recognizer.recognizeWith(item[2]);
	        item[3] && recognizer.requireFailure(item[3]);
	    }, this);
	}
	
	Manager.prototype = {
	    /**
	     * set options
	     * @param {Object} options
	     * @returns {Manager}
	     */
	    set: function(options) {
	        assign(this.options, options);
	
	        // Options that need a little more setup
	        if (options.touchAction) {
	            this.touchAction.update();
	        }
	        if (options.inputTarget) {
	            // Clean up existing event listeners and reinitialize
	            this.input.destroy();
	            this.input.target = options.inputTarget;
	            this.input.init();
	        }
	        return this;
	    },
	
	    /**
	     * stop recognizing for this session.
	     * This session will be discarded, when a new [input]start event is fired.
	     * When forced, the recognizer cycle is stopped immediately.
	     * @param {Boolean} [force]
	     */
	    stop: function(force) {
	        this.session.stopped = force ? FORCED_STOP : STOP;
	    },
	
	    /**
	     * run the recognizers!
	     * called by the inputHandler function on every movement of the pointers (touches)
	     * it walks through all the recognizers and tries to detect the gesture that is being made
	     * @param {Object} inputData
	     */
	    recognize: function(inputData) {
	        var session = this.session;
	        if (session.stopped) {
	            return;
	        }
	
	        // run the touch-action polyfill
	        this.touchAction.preventDefaults(inputData);
	
	        var recognizer;
	        var recognizers = this.recognizers;
	
	        // this holds the recognizer that is being recognized.
	        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
	        // if no recognizer is detecting a thing, it is set to `null`
	        var curRecognizer = session.curRecognizer;
	
	        // reset when the last recognizer is recognized
	        // or when we're in a new session
	        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
	            curRecognizer = session.curRecognizer = null;
	        }
	
	        var i = 0;
	        while (i < recognizers.length) {
	            recognizer = recognizers[i];
	
	            // find out if we are allowed try to recognize the input for this one.
	            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
	            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
	            //      that is being recognized.
	            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
	            //      this can be setup with the `recognizeWith()` method on the recognizer.
	            if (session.stopped !== FORCED_STOP && ( // 1
	                    !curRecognizer || recognizer == curRecognizer || // 2
	                    recognizer.canRecognizeWith(curRecognizer))) { // 3
	                recognizer.recognize(inputData);
	            } else {
	                recognizer.reset();
	            }
	
	            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
	            // current active recognizer. but only if we don't already have an active recognizer
	            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
	                curRecognizer = session.curRecognizer = recognizer;
	            }
	            i++;
	        }
	    },
	
	    /**
	     * get a recognizer by its event name.
	     * @param {Recognizer|String} recognizer
	     * @returns {Recognizer|Null}
	     */
	    get: function(recognizer) {
	        if (recognizer instanceof Recognizer) {
	            return recognizer;
	        }
	
	        var recognizers = this.recognizers;
	        for (var i = 0; i < recognizers.length; i++) {
	            if (recognizers[i].options.event == recognizer) {
	                return recognizers[i];
	            }
	        }
	        return null;
	    },
	
	    /**
	     * add a recognizer to the manager
	     * existing recognizers with the same event name will be removed
	     * @param {Recognizer} recognizer
	     * @returns {Recognizer|Manager}
	     */
	    add: function(recognizer) {
	        if (invokeArrayArg(recognizer, 'add', this)) {
	            return this;
	        }
	
	        // remove existing
	        var existing = this.get(recognizer.options.event);
	        if (existing) {
	            this.remove(existing);
	        }
	
	        this.recognizers.push(recognizer);
	        recognizer.manager = this;
	
	        this.touchAction.update();
	        return recognizer;
	    },
	
	    /**
	     * remove a recognizer by name or instance
	     * @param {Recognizer|String} recognizer
	     * @returns {Manager}
	     */
	    remove: function(recognizer) {
	        if (invokeArrayArg(recognizer, 'remove', this)) {
	            return this;
	        }
	
	        recognizer = this.get(recognizer);
	
	        // let's make sure this recognizer exists
	        if (recognizer) {
	            var recognizers = this.recognizers;
	            var index = inArray(recognizers, recognizer);
	
	            if (index !== -1) {
	                recognizers.splice(index, 1);
	                this.touchAction.update();
	            }
	        }
	
	        return this;
	    },
	
	    /**
	     * bind event
	     * @param {String} events
	     * @param {Function} handler
	     * @returns {EventEmitter} this
	     */
	    on: function(events, handler) {
	        if (events === undefined) {
	            return;
	        }
	        if (handler === undefined) {
	            return;
	        }
	
	        var handlers = this.handlers;
	        each(splitStr(events), function(event) {
	            handlers[event] = handlers[event] || [];
	            handlers[event].push(handler);
	        });
	        return this;
	    },
	
	    /**
	     * unbind event, leave emit blank to remove all handlers
	     * @param {String} events
	     * @param {Function} [handler]
	     * @returns {EventEmitter} this
	     */
	    off: function(events, handler) {
	        if (events === undefined) {
	            return;
	        }
	
	        var handlers = this.handlers;
	        each(splitStr(events), function(event) {
	            if (!handler) {
	                delete handlers[event];
	            } else {
	                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
	            }
	        });
	        return this;
	    },
	
	    /**
	     * emit event to the listeners
	     * @param {String} event
	     * @param {Object} data
	     */
	    emit: function(event, data) {
	        // we also want to trigger dom events
	        if (this.options.domEvents) {
	            triggerDomEvent(event, data);
	        }
	
	        // no handlers, so skip it all
	        var handlers = this.handlers[event] && this.handlers[event].slice();
	        if (!handlers || !handlers.length) {
	            return;
	        }
	
	        data.type = event;
	        data.preventDefault = function() {
	            data.srcEvent.preventDefault();
	        };
	
	        var i = 0;
	        while (i < handlers.length) {
	            handlers[i](data);
	            i++;
	        }
	    },
	
	    /**
	     * destroy the manager and unbinds all events
	     * it doesn't unbind dom events, that is the user own responsibility
	     */
	    destroy: function() {
	        this.element && toggleCssProps(this, false);
	
	        this.handlers = {};
	        this.session = {};
	        this.input.destroy();
	        this.element = null;
	    }
	};
	
	/**
	 * add/remove the css properties as defined in manager.options.cssProps
	 * @param {Manager} manager
	 * @param {Boolean} add
	 */
	function toggleCssProps(manager, add) {
	    var element = manager.element;
	    if (!element.style) {
	        return;
	    }
	    var prop;
	    each(manager.options.cssProps, function(value, name) {
	        prop = prefixed(element.style, name);
	        if (add) {
	            manager.oldCssProps[prop] = element.style[prop];
	            element.style[prop] = value;
	        } else {
	            element.style[prop] = manager.oldCssProps[prop] || '';
	        }
	    });
	    if (!add) {
	        manager.oldCssProps = {};
	    }
	}
	
	/**
	 * trigger dom event
	 * @param {String} event
	 * @param {Object} data
	 */
	function triggerDomEvent(event, data) {
	    var gestureEvent = document.createEvent('Event');
	    gestureEvent.initEvent(event, true, true);
	    gestureEvent.gesture = data;
	    data.target.dispatchEvent(gestureEvent);
	}
	
	assign(Hammer, {
	    INPUT_START: INPUT_START,
	    INPUT_MOVE: INPUT_MOVE,
	    INPUT_END: INPUT_END,
	    INPUT_CANCEL: INPUT_CANCEL,
	
	    STATE_POSSIBLE: STATE_POSSIBLE,
	    STATE_BEGAN: STATE_BEGAN,
	    STATE_CHANGED: STATE_CHANGED,
	    STATE_ENDED: STATE_ENDED,
	    STATE_RECOGNIZED: STATE_RECOGNIZED,
	    STATE_CANCELLED: STATE_CANCELLED,
	    STATE_FAILED: STATE_FAILED,
	
	    DIRECTION_NONE: DIRECTION_NONE,
	    DIRECTION_LEFT: DIRECTION_LEFT,
	    DIRECTION_RIGHT: DIRECTION_RIGHT,
	    DIRECTION_UP: DIRECTION_UP,
	    DIRECTION_DOWN: DIRECTION_DOWN,
	    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
	    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
	    DIRECTION_ALL: DIRECTION_ALL,
	
	    Manager: Manager,
	    Input: Input,
	    TouchAction: TouchAction,
	
	    TouchInput: TouchInput,
	    MouseInput: MouseInput,
	    PointerEventInput: PointerEventInput,
	    TouchMouseInput: TouchMouseInput,
	    SingleTouchInput: SingleTouchInput,
	
	    Recognizer: Recognizer,
	    AttrRecognizer: AttrRecognizer,
	    Tap: TapRecognizer,
	    Pan: PanRecognizer,
	    Swipe: SwipeRecognizer,
	    Pinch: PinchRecognizer,
	    Rotate: RotateRecognizer,
	    Press: PressRecognizer,
	
	    on: addEventListeners,
	    off: removeEventListeners,
	    each: each,
	    merge: merge,
	    extend: extend,
	    assign: assign,
	    inherit: inherit,
	    bindFn: bindFn,
	    prefixed: prefixed
	});
	
	// this prevents errors when Hammer is loaded in the presence of an AMD
	//  style loader but by script tag, not by the loader.
	var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
	freeGlobal.Hammer = Hammer;
	
	if (true) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	        return Hammer;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (typeof module != 'undefined' && module.exports) {
	    module.exports = Hammer;
	} else {
	    window[exportName] = Hammer;
	}
	
	})(window, document, 'Hammer');


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Hamster.js v1.1.2
	 * (c) 2013 Monospaced http://monospaced.com
	 * License: MIT
	 */
	
	(function(window, document){
	'use strict';
	
	/**
	 * Hamster
	 * use this to create instances
	 * @returns {Hamster.Instance}
	 * @constructor
	 */
	var Hamster = function(element) {
	  return new Hamster.Instance(element);
	};
	
	// default event name
	Hamster.SUPPORT = 'wheel';
	
	// default DOM methods
	Hamster.ADD_EVENT = 'addEventListener';
	Hamster.REMOVE_EVENT = 'removeEventListener';
	Hamster.PREFIX = '';
	
	// until browser inconsistencies have been fixed...
	Hamster.READY = false;
	
	Hamster.Instance = function(element){
	  if (!Hamster.READY) {
	    // fix browser inconsistencies
	    Hamster.normalise.browser();
	
	    // Hamster is ready...!
	    Hamster.READY = true;
	  }
	
	  this.element = element;
	
	  // store attached event handlers
	  this.handlers = [];
	
	  // return instance
	  return this;
	};
	
	/**
	 * create new hamster instance
	 * all methods should return the instance itself, so it is chainable.
	 * @param   {HTMLElement}       element
	 * @returns {Hamster.Instance}
	 * @constructor
	 */
	Hamster.Instance.prototype = {
	  /**
	   * bind events to the instance
	   * @param   {Function}    handler
	   * @param   {Boolean}     useCapture
	   * @returns {Hamster.Instance}
	   */
	  wheel: function onEvent(handler, useCapture){
	    Hamster.event.add(this, Hamster.SUPPORT, handler, useCapture);
	
	    // handle MozMousePixelScroll in older Firefox
	    if (Hamster.SUPPORT === 'DOMMouseScroll') {
	      Hamster.event.add(this, 'MozMousePixelScroll', handler, useCapture);
	    }
	
	    return this;
	  },
	
	  /**
	   * unbind events to the instance
	   * @param   {Function}    handler
	   * @param   {Boolean}     useCapture
	   * @returns {Hamster.Instance}
	   */
	  unwheel: function offEvent(handler, useCapture){
	    // if no handler argument,
	    // unbind the last bound handler (if exists)
	    if (handler === undefined && (handler = this.handlers.slice(-1)[0])) {
	      handler = handler.original;
	    }
	
	    Hamster.event.remove(this, Hamster.SUPPORT, handler, useCapture);
	
	    // handle MozMousePixelScroll in older Firefox
	    if (Hamster.SUPPORT === 'DOMMouseScroll') {
	      Hamster.event.remove(this, 'MozMousePixelScroll', handler, useCapture);
	    }
	
	    return this;
	  }
	};
	
	Hamster.event = {
	  /**
	   * cross-browser 'addWheelListener'
	   * @param   {Instance}    hamster
	   * @param   {String}      eventName
	   * @param   {Function}    handler
	   * @param   {Boolean}     useCapture
	   */
	  add: function add(hamster, eventName, handler, useCapture){
	    // store the original handler
	    var originalHandler = handler;
	
	    // redefine the handler
	    handler = function(originalEvent){
	
	      if (!originalEvent) {
	        originalEvent = window.event;
	      }
	
	      // create a normalised event object,
	      // and normalise "deltas" of the mouse wheel
	      var event = Hamster.normalise.event(originalEvent),
	          delta = Hamster.normalise.delta(originalEvent);
	
	      // fire the original handler with normalised arguments
	      return originalHandler(event, delta[0], delta[1], delta[2]);
	
	    };
	
	    // cross-browser addEventListener
	    hamster.element[Hamster.ADD_EVENT](Hamster.PREFIX + eventName, handler, useCapture || false);
	
	    // store original and normalised handlers on the instance
	    hamster.handlers.push({
	      original: originalHandler,
	      normalised: handler
	    });
	  },
	
	  /**
	   * removeWheelListener
	   * @param   {Instance}    hamster
	   * @param   {String}      eventName
	   * @param   {Function}    handler
	   * @param   {Boolean}     useCapture
	   */
	  remove: function remove(hamster, eventName, handler, useCapture){
	    // find the normalised handler on the instance
	    var originalHandler = handler,
	        lookup = {},
	        handlers;
	    for (var i = 0, len = hamster.handlers.length; i < len; ++i) {
	      lookup[hamster.handlers[i].original] = hamster.handlers[i];
	    }
	    handlers = lookup[originalHandler];
	    handler = handlers.normalised;
	
	    // cross-browser removeEventListener
	    hamster.element[Hamster.REMOVE_EVENT](Hamster.PREFIX + eventName, handler, useCapture || false);
	
	    // remove original and normalised handlers from the instance
	    for (var h in hamster.handlers) {
	      if (hamster.handlers[h] == handlers) {
	        hamster.handlers.splice(h, 1);
	        break;
	      }
	    }
	  }
	};
	
	/**
	 * these hold the lowest deltas,
	 * used to normalise the delta values
	 * @type {Number}
	 */
	var lowestDelta,
	    lowestDeltaXY;
	
	Hamster.normalise = {
	  /**
	   * fix browser inconsistencies
	   */
	  browser: function normaliseBrowser(){
	    // detect deprecated wheel events
	    if (!('onwheel' in document || document.documentMode >= 9)) {
	      Hamster.SUPPORT = document.onmousewheel !== undefined ?
	                        'mousewheel' : // webkit and IE < 9 support at least "mousewheel"
	                        'DOMMouseScroll'; // assume remaining browsers are older Firefox
	    }
	
	    // detect deprecated event model
	    if (!window.addEventListener) {
	      // assume IE < 9
	      Hamster.ADD_EVENT = 'attachEvent';
	      Hamster.REMOVE_EVENT = 'detachEvent';
	      Hamster.PREFIX = 'on';
	    }
	
	  },
	
	  /**
	   * create a normalised event object
	   * @param   {Function}    originalEvent
	   * @returns {Object}      event
	   */
	   event: function normaliseEvent(originalEvent){
	    var event = {
	          // keep a reference to the original event object
	          originalEvent: originalEvent,
	          target: originalEvent.target || originalEvent.srcElement,
	          type: 'wheel',
	          deltaMode: originalEvent.type === 'MozMousePixelScroll' ? 0 : 1,
	          deltaX: 0,
	          delatZ: 0,
	          preventDefault: function(){
	            if (originalEvent.preventDefault) {
	              originalEvent.preventDefault();
	            } else {
	              originalEvent.returnValue = false;
	            }
	          },
	          stopPropagation: function(){
	            if (originalEvent.stopPropagation) {
	              originalEvent.stopPropagation();
	            } else {
	              originalEvent.cancelBubble = false;
	            }
	          }
	        };
	
	    // calculate deltaY (and deltaX) according to the event
	
	    // 'mousewheel'
	    if (originalEvent.wheelDelta) {
	      event.deltaY = - 1/40 * originalEvent.wheelDelta;
	    }
	    // webkit
	    if (originalEvent.wheelDeltaX) {
	      event.deltaX = - 1/40 * originalEvent.wheelDeltaX;
	    }
	
	    // 'DomMouseScroll'
	    if (originalEvent.detail) {
	      event.deltaY = originalEvent.detail;
	    }
	
	    return event;
	  },
	
	  /**
	   * normalise 'deltas' of the mouse wheel
	   * @param   {Function}    originalEvent
	   * @returns {Array}       deltas
	   */
	  delta: function normaliseDelta(originalEvent){
	    var delta = 0,
	      deltaX = 0,
	      deltaY = 0,
	      absDelta = 0,
	      absDeltaXY = 0,
	      fn;
	
	    // normalise deltas according to the event
	
	    // 'wheel' event
	    if (originalEvent.deltaY) {
	      deltaY = originalEvent.deltaY * -1;
	      delta  = deltaY;
	    }
	    if (originalEvent.deltaX) {
	      deltaX = originalEvent.deltaX;
	      delta  = deltaX * -1;
	    }
	
	    // 'mousewheel' event
	    if (originalEvent.wheelDelta) {
	      delta = originalEvent.wheelDelta;
	    }
	    // webkit
	    if (originalEvent.wheelDeltaY) {
	      deltaY = originalEvent.wheelDeltaY;
	    }
	    if (originalEvent.wheelDeltaX) {
	      deltaX = originalEvent.wheelDeltaX * -1;
	    }
	
	    // 'DomMouseScroll' event
	    if (originalEvent.detail) {
	      delta = originalEvent.detail * -1;
	    }
	
	    // Don't return NaN
	    if (delta === 0) {
	      return [0, 0, 0];
	    }
	
	    // look for lowest delta to normalize the delta values
	    absDelta = Math.abs(delta);
	    if (!lowestDelta || absDelta < lowestDelta) {
	      lowestDelta = absDelta;
	    }
	    absDeltaXY = Math.max(Math.abs(deltaY), Math.abs(deltaX));
	    if (!lowestDeltaXY || absDeltaXY < lowestDeltaXY) {
	      lowestDeltaXY = absDeltaXY;
	    }
	
	    // convert deltas to whole numbers
	    fn = delta > 0 ? 'floor' : 'ceil';
	    delta  = Math[fn](delta / lowestDelta);
	    deltaX = Math[fn](deltaX / lowestDeltaXY);
	    deltaY = Math[fn](deltaY / lowestDeltaXY);
	
	    return [delta, deltaX, deltaY];
	  }
	};
	
	if (typeof window.define === 'function' && window.define.amd) {
	  // AMD
	  window.define('hamster', [], function(){
	    return Hamster;
	  });
	} else if (true) {
	  // CommonJS
	  module.exports = Hamster;
	} else {
	  // Browser global
	  window.Hamster = Hamster;
	}
	
	})(window, window.document);


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _simpleFogOfWar = __webpack_require__(211);
	
	var _simpleFogOfWar2 = _interopRequireDefault(_simpleFogOfWar);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	  simpleFogOfWar: _simpleFogOfWar2.default
	};
	module.exports = exports['default'];

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _pixi = __webpack_require__(9);
	
	var PIXI = _interopRequireWildcard(_pixi);
	
	var _core = __webpack_require__(2);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var resize = _core.utils.resize;
	
	/*-----------------------
	-------- PUBLIC ---------
	-----------------------*/
	/**
	 * Simple fog of war works with hexagon sized holes around objects
	 *
	 * @namespace flatworld.extensions.fogOfWars
	 * @class pixelizedMiniMap
	 **/
	
	var simpleFogOfWar = function () {
	  var maskSprite = new PIXI.Sprite(PIXI.Texture.EMPTY);
	  var renderTexture = new PIXI.RenderTexture(new PIXI.BaseRenderTexture(resize.getWindowSize().x, resize.getWindowSize().y));
	  var FoWOverlay = new PIXI.Graphics();
	  var zoomLayer = void 0;
	  var mapRenderer = void 0;
	  var maskMovableContainer = void 0;
	  var maskStageContainer = void 0;
	  var FoWCB = void 0;
	  var objectsForFoW = void 0;
	  var color = void 0;
	  var mapInstance = void 0;
	
	  return {
	    // These two are required by all plugins
	    init: init,
	    pluginName: 'simpleFogOfWar',
	
	    activateFogOfWar: activateFogOfWar,
	    refreshFoW: refreshFoW,
	    getFoWObjectArray: getFoWObjectArray,
	    calculateCorrectCoordinates: calculateCorrectCoordinates,
	    FOR_TESTS: {
	      setObjectsForFoW: function setObjectsForFoW(o) {
	        return objectsForFoW = o;
	      }
	    }
	  };
	  /**
	   * √çnitialize as a plugin. Done by the Flatworld class.
	   *
	   * After plugin has been initialized by the flatworld, you must still call activateFogOfWar to
	   * start showing it.
	   *
	   * @todo the offsets are really bad! For some reason they are needed, I don't know where the
	   * issue lies :(. We probably need an offset for the renderer in the end anyway, but now it
	   * doesn't even work properly without them.
	   * can be used here and in getViewportArea-method etc.
	   *
	   * @method init
	   * @param  {Object} parameters    This plugin requires cb and filter properties!
	   */
	  function init(params) {
	    if (!(params.cb && params.filter)) {
	      throw new Error('SimpleFogOfWar plugin requires cb and filter properties');
	    }
	    mapInstance = this.mapInstance;
	    zoomLayer = this._properties.zoomLayer;
	    mapRenderer = this.mapInstance.getRenderer();
	
	    maskStageContainer = this.mapInstance.createSpecialLayer('FoWStageMaskLayer');
	    // This could use particleContainer. But particleContainer + drawRect graphics have a conflict. In our case, when we zoom far enough and there is a lot of sprites on the screen, the particleContainer + drawRect gives a webGL error "glDrawElements: range out of bounds for buffer". So we must use container for now.
	    maskMovableContainer = new PIXI.Container();
	    maskMovableContainer.position = mapInstance.getMapCoordinates(undefined, true);
	
	    activateFogOfWar(this.mapInstance, params.cb, params.filter, params.getOptions ? params.getOptions() : {});
	
	    return Promise.resolve();
	  }
	
	  function activateFogOfWar(mapInstance, cb, filterCreator) {
	    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	
	    color = options.color || 0x222222;
	    FoWCB = cb;
	    var filter = filterCreator();
	    // Get layers with filters. So it filters layers and objects
	    objectsForFoW = mapInstance.getPrimaryLayers({ filters: filter }).map(function (o) {
	      return o.getObjects(filter);
	    });
	    objectsForFoW = _core.utils.general.flatten2Levels(objectsForFoW);
	
	    createOverlay();
	
	    setupFoW();
	    setEvents();
	  }
	
	  function setupFoW() {
	    var spriteArray = getFoWObjectArray(FoWCB);
	
	    resetFoW(FoWOverlay);
	
	    if (spriteArray.length > 0) {
	      var _maskMovableContainer;
	
	      (_maskMovableContainer = maskMovableContainer).addChild.apply(_maskMovableContainer, _toConsumableArray(spriteArray));
	    }
	
	    resizeFoW();
	
	    zoomLayer.mask = maskSprite;
	
	    mapInstance.registerPreRenderer('renderFoW', moveFoW);
	
	    resizeFoW();
	  }
	
	  function refreshFoW() {
	    /*    var t0 = performance.now();*/
	    mapRenderer.render(maskStageContainer, renderTexture, true, null, false);
	
	    maskSprite.texture = renderTexture;
	    /*    var t1 = performance.now();
	        console.log("Call to doSomething took " + (t1 - t0) + " milliseconds.")*/
	  }
	
	  function moveFoW() {
	    maskMovableContainer.position = mapInstance.getMapCoordinates(undefined, true);
	
	    refreshFoW();
	  }
	
	  function zoomFoW() {
	    maskStageContainer.scale.x = mapInstance.getZoom();
	    maskStageContainer.scale.y = mapInstance.getZoom();
	
	    createOverlay();
	    refreshFoW();
	  }
	
	  function resizeFoW() {
	    changeMaskSize();
	    createOverlay();
	    refreshFoW();
	  }
	
	  function changeMaskSize() {
	    resize.resizePIXIRenderer(renderTexture, function () {});
	
	    //renderTexture.resize(resize.getWindowSize().x, resize.getWindowSize().y);
	    maskSprite.width = resize.getWindowSize().x;
	    maskSprite.height = resize.getWindowSize().y;
	    // MaskSprites bounds create a filterArea to the zoomLayer as the maskSprite is a mask for it. This causes resizing not to work correctly, if the bounds are not changed and bounds are not updated without this call (for some reason just width and height change is not enough).
	    maskSprite.getBounds();
	  }
	
	  function getFoWObjectArray(cb) {
	    return objectsForFoW.map(function (object) {
	      return cb(calculateCorrectCoordinates(object));
	    });
	  }
	
	  function calculateCorrectCoordinates(object) {
	    var coordinates = object.toGlobal(new PIXI.Point(0, 0));
	
	    coordinates.x = Math.round(coordinates.x);
	    coordinates.y = Math.round(coordinates.y);
	    coordinates.anchor = object.anchor;
	    coordinates.pivot = object.pivot;
	    coordinates.scale = mapInstance.getZoom();
	
	    return coordinates;
	  }
	
	  /** *************************************
	  **************** PRIVATE ****************
	  ****************************************/
	  function resetFoW() {
	    maskMovableContainer.children && maskMovableContainer.removeChildren();
	    maskStageContainer.children && maskStageContainer.removeChildren();
	    maskStageContainer.addChild(FoWOverlay);
	    maskStageContainer.addChild(maskMovableContainer);
	  }
	
	  function createOverlay() {
	    var coordinates = {
	      x: -100,
	      y: -100,
	      width: mapRenderer.width + 200 + mapRenderer.width / mapInstance.getZoom(),
	      height: mapRenderer.height + 200 + mapRenderer.height / mapInstance.getZoom()
	    };
	
	    FoWOverlay.clear();
	    FoWOverlay.beginFill(color);
	    FoWOverlay.drawRect(coordinates.x, coordinates.y, coordinates.width, coordinates.height);
	    FoWOverlay.endFill();
	  }
	  function setEvents() {
	    _core.mapEvents.subscribe('mapResized', resizeFoW);
	    _core.mapEvents.subscribe('mapZoomed', zoomFoW);
	    /* mapEvents.subscribe('mapMoved', moveFoW); */
	  }
	}();
	
	/*-----------------------
	---------- API ----------
	-----------------------*/
	exports.default = simpleFogOfWar;
	module.exports = exports['default'];

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _units = __webpack_require__(213);
	
	var eventListeners = _interopRequireWildcard(_units);
	
	var _selectHexagonPlugin = __webpack_require__(218);
	
	var hexagonPlugin = _interopRequireWildcard(_selectHexagonPlugin);
	
	var _findPath = __webpack_require__(214);
	
	var pathfinding = _interopRequireWildcard(_findPath);
	
	var _utils = __webpack_require__(215);
	
	var utils = _interopRequireWildcard(_utils);
	
	var _Objects = __webpack_require__(219);
	
	var objects = _interopRequireWildcard(_Objects);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var toBeExported = {};
	toBeExported.setupHexagonClick = eventListeners.setupHexagonClick;
	toBeExported.selectHexagonObject = hexagonPlugin.selectHexagonObject;
	toBeExported.pathfinding = pathfinding;
	toBeExported.utils = utils;
	toBeExported.objects = objects;
	toBeExported._tests = hexagonPlugin._tests;
	
	exports.default = toBeExported;
	module.exports = exports['default'];

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports._tests = exports.setupHexagonClick = undefined;
	
	var _core = __webpack_require__(2);
	
	var _findPath = __webpack_require__(214);
	
	var _utils = __webpack_require__(215);
	
	var hexaUtils = _interopRequireWildcard(_utils);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var hexagons = {
	  findPath: _findPath.findPath,
	  utils: hexaUtils
	};
	
	/*---------------------
	------ VARIABLES ------
	----------------------*/
	var unitLayerFilter = new _core.MapDataManipulator({
	  type: 'filter',
	  object: 'layer',
	  property: 'selectable',
	  value: true
	});
	var terrainLayerFilter = new _core.MapDataManipulator({
	  type: 'filter',
	  object: 'layer',
	  property: 'name',
	  value: 'terrainLayer'
	});
	/* @todo This must be changed to outside the module */
	var weight = function weight() {
	  return 0;
	};
	/* @todo This must be changed to game logic too! */
	var getObjectData = function getObjectData(object) {
	  return object.data.typeData;
	};
	var FTW = void 0,
	    ui = void 0;
	
	/*---------------------
	------- PUBLIC --------
	----------------------*/
	/**
	 * Handles the eventlistner for selecting objects on the map. THe actual logic for detecting the objects under mouse
	 * etc. are in selectHexagonPlugin
	 *
	 * @class extensions.hexagons.setupHexagonClick
	 * @requires Hammer.js. Some events are done with Hammer.js, so we need it to handle those events correctly
	 * @event                 Mapselect and objectsSelected (objectsSelected will have parameter for the objects that were selected)
	 * @param  {Map} map      The currently use Map instance
	 * @return {Boolean}      True
	 */
	function setupHexagonClick(mapInstance, weightFn) {
	  if (!mapInstance) {
	    throw new Error('eventlisteners initialization requires flatworld instance as a parameter');
	  }
	
	  FTW = mapInstance;
	
	  ui = (0, _core.UI)();
	
	  _core.eventListeners.on('select', _tapListener);
	  _core.eventListeners.on('order', _orderListener);
	
	  weight = weightFn || weight;
	
	  return true;
	}
	
	/**
	 * the listener that received the event object
	 *
	 * @private
	 * @method _tapListener
	 * @param  {Event} e      Event object
	 */
	function _tapListener(e) {
	  var globalCoords = _core.utils.mouse.eventData.getHAMMERPointerCoords(e);
	  var getData = {
	    allData: function allData(object) {
	      return getObjectData(object);
	    }
	  };
	  _core.mapStates.objectSelect();
	
	  var objects = FTW.getObjectsUnderArea(globalCoords, { filters: unitLayerFilter });
	  objects = _core.utils.dataManipulation.mapObjectsToArray(objects);
	  objects = _core.utils.dataManipulation.flattenArrayBy1Level(objects);
	
	  if (!objects.length) {
	    FTW.currentlySelectedObjects.length = 0;
	    _core.log.debug('No objects found for selection!');
	    // Delete the UI objects, as player clicked somewhere that doesn't have any selectable objects
	    ui.showSelections([]);
	
	    return false;
	  } else if (objects.length === 1) {
	    FTW.currentlySelectedObjects = objects;
	    _core.mapEvents.publish('objectsSelected', objects);
	
	    _core.log.debug('One object selected');
	  } else {
	    _core.mapEvents.publish('multipObjectsSelected', objects);
	
	    _core.log.debug('Multiple objects selected');
	  }
	
	  ui.showSelections(objects, getData);
	  FTW.drawOnNextTick();
	
	  return true;
	}
	/**
	 * This listener is for the situation, where we have an object and we issue an order / action to
	 * that unit. For example to move from one hexagon to another.
	 *
	 * @private
	 * @method _orderListener
	 * @param  {Event} e      Event object
	 */
	function _orderListener(e) {
	  // We want to wrap the whole functionality in try catch, to cancel the order state, if any
	  // errors occur. Otherwise the states can get stuck more easily in a situation, where you can
	  // not move anything (if objectOrder stays on, then the map won't allow you to move units)
	  try {
	    _core.mapStates.objectOrder();
	
	    if (!FTW.currentlySelectedObjects) {
	      throw 'No objects selected for orders!';
	    } else if (FTW.currentlySelectedObjects.length > 1) {
	      throw 'the selected object is only supported to be one atm.' + JSON.stringify(FTW.currentlySelectedObjects[0]);
	    }
	
	    var selectedObject = FTW.currentlySelectedObjects[0];
	    var selectedObjectsCoordinates = selectedObject.getMapCoordinates();
	    var globalCoords = _core.utils.mouse.eventData.getGlobalCoordinates(e, FTW.isSupportedTouch);
	
	    var objects = FTW.getObjectsUnderArea(globalCoords, { filters: terrainLayerFilter });
	
	    if (!objects.length) {
	      throw 'No terrain objects found for destination!';
	    }
	
	    var objectIndexes = hexagons.utils.hexagonMath.coordinatesToIndexes(selectedObjectsCoordinates);
	    var centerCoords = {
	      x: objects[0].getMapCoordinates().x,
	      y: objects[0].getMapCoordinates().y
	    };
	    var destinationIndexes = hexagons.utils.hexagonMath.coordinatesToIndexes(centerCoords);
	
	    var pathsToCoordinates = void 0;
	
	    if (objectIndexes.x === destinationIndexes.x && objectIndexes.y === destinationIndexes.y) {
	      pathsToCoordinates = [];
	    } else {
	      try {
	        var timeUnits = selectedObject.data.typeData.move;
	        pathsToCoordinates = hexagons.findPath(objectIndexes, destinationIndexes, +FTW.getMapsize().x, +FTW.getMapsize().y, +timeUnits, _isBlocked);
	        pathsToCoordinates = pathsToCoordinates.map(function (coords) {
	          return hexagons.utils.hexagonMath.indexesToCoordinates(coords);
	        });
	      } catch (e) {
	        if (!pathsToCoordinates || pathsToCoordinates.length < 1) {
	          e.message = 'the destination was farther than the given maximum distance';
	        } else {
	          e.message += ', EXTRA INFO: ' + 'start and end point are same, destination is blocked, unit could not reach the destination or something else happened';
	        }
	
	        throw e;
	      }
	    }
	
	    selectedObject.move(pathsToCoordinates);
	
	    ui.showUnitMovement(pathsToCoordinates);
	
	    _core.mapStates.objectOrderEnd();
	    FTW.drawOnNextTick();
	  } catch (e) {
	    _core.mapStates.objectOrderEnd();
	    _core.log.debug(e);
	    return;
	  }
	}
	
	function _isBlocked(coordinates) {
	  /* We use the EARLIER path to test, how much moving to the next area will require. We can
	   * not use the next area to test it, as that could lead to nasty surpises (like units
	   * couldn't move to an area at all, because they have 1 move and it requires 2 moves)
	   */
	  var correctHexagon = FTW.hexagonIndexes[coordinates.x] && FTW.hexagonIndexes[coordinates.x][coordinates.y];
	  var returnedWeight = weight(correctHexagon, FTW.currentlySelectedObjects[0], coordinates);
	
	  if (!correctHexagon) {
	    return -1;
	  } else if (returnedWeight && isInteger(returnedWeight)) {
	    return returnedWeight;
	  } else if (returnedWeight && !isInteger(returnedWeight)) {
	    throw new Error('weight callback has to return an integer');
	  }
	
	  return -1;
	}
	
	function isInteger(x) {
	  return x === Math.floor(x) && isFinite(x);
	}
	
	/*---------------------
	--------- API ---------
	----------------------*/
	var _tests = {
	  _isBlocked: _isBlocked,
	  _orderListener: _orderListener,
	  _tapListener: _tapListener
	};
	exports.setupHexagonClick = setupHexagonClick;
	exports._tests = _tests;

/***/ },
/* 214 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Author: https://github.com/dmitrysteblyuk
	 * Thank you for the awesome path finding :)
	 */
	
	var allHexDirections = [{ x: 0, y: 1 }, { x: -1, y: 1 }, { x: 1, y: 0 }, { x: 1, y: -1 }, { x: -1, y: 0 }, { x: 0, y: -1 }];
	var allNormalDirections = [{ x: 0, y: 1 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: 0, y: -1 }];
	
	var PriorityQueue = function () {
	  function PriorityQueue() {
	    _classCallCheck(this, PriorityQueue);
	
	    this.items = [];
	  }
	
	  _createClass(PriorityQueue, [{
	    key: 'pop',
	    value: function pop() {
	      var stack = this.items[this.items.length - 1].stack;
	      var value = stack.pop();
	      if (!stack.length) {
	        this.items.pop();
	      }
	      return value;
	    }
	  }, {
	    key: 'push',
	    value: function push(value, loss) {
	      var _this = this;
	
	      var _ref = this.items.length ? binarySearch(function (i) {
	        return _this.items[i].loss - loss;
	      }, 0, this.items.length) : [0, false],
	          _ref2 = _slicedToArray(_ref, 2),
	          index = _ref2[0],
	          match = _ref2[1];
	
	      if (match) {
	        this.items[index].stack.push(value);
	      } else {
	        var newItem = { stack: [value], loss: loss };
	        this.items.splice(index, 0, newItem);
	      }
	    }
	  }, {
	    key: 'length',
	    get: function get() {
	      return this.items.length;
	    }
	  }]);
	
	  return PriorityQueue;
	}();
	
	/**
	 * Finds shortest route on a hexagon/normal grid
	 * @param  {int} options.x:  xStart - start x-coordinate
	 * @param  {int} options.y:  yStart - start y-coordinate
	 * @param  {{ x: int, y: int }} - destination coordinates; if destination is null, then look for all reachable cells
	 * @param  {int} width - width of the grid
	 * @param  {int} height - height of the grid
	 * @param  {int} maxTime - maximal allowed time to get to destination (must be at least 1)
	 * @param  {({ x: int, y: int }, { x: int, y: int }) => int} weightFn - function that returns time between two adjacent cells
	 * @param  {boolean} allowDiagonal - if not null then apply algorithm for normal square grid
	 * @return {{ x: int, y: int, time: int }[]} - path coordinates from start to destination (including starting point)
	 */
	
	
	function findPath(_ref3, dest, width, height, maxTime, weightFn) {
	  var xStart = _ref3.x,
	      yStart = _ref3.y;
	  var allowDiagonal = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
	  var debug = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;
	
	
	  validateArgs();
	
	  var counter = 0;
	  var d = Date.now();
	
	  var hexagonGrid = allowDiagonal === null;
	  var pathArr = bestDirectionAlg();
	
	  if (debug) {
	    var _console;
	
	    (_console = console).log.apply(_console, _toConsumableArray(dest ? [] : ['reachable: ']).concat([// eslint-disable-line no-console
	    Date.now() - d + 'ms', pathArr && pathArr.length, counter + ' oper', maxTime + ' cells', counter / maxTime / Math.log(maxTime) + ' coeff']));
	  }
	
	  return pathArr;
	
	  function bestDirectionAlg() {
	    var visited = [];
	    var startMinTime = dest && getMinSteps(dest.x - xStart, dest.y - yStart, hexagonGrid);
	    var queue = new PriorityQueue();
	    var allCoordinates = new Set();
	    var start = {
	      x: xStart,
	      y: yStart,
	      time: 0,
	      prev: null
	    };
	
	    isVisited(start);
	    queue.push(start, 0);
	
	    var resPath = null;
	    var allowedTime = maxTime;
	
	    while (queue.length) {
	      counter++;
	      var curr = queue.pop();
	      var maxRemainingTime = allowedTime - curr.time;
	      var minPossibleTime = !dest || maxRemainingTime < 1 ? 1 : getMinSteps(dest.x - curr.x, dest.y - curr.y, hexagonGrid);
	
	      if (minPossibleTime > maxRemainingTime) {
	        continue;
	      }
	
	      var directions = hexagonGrid ? allHexDirections : allNormalDirections;
	
	      for (var i = directions.length; i-- > 0;) {
	        var x = curr.x + directions[i].x;
	        var y = curr.y + directions[i].y;
	        var next = { x: x, y: y };
	        var weight = weightFn(next, curr);
	
	        if (debug && (!isInteger(weight) || weight < 0)) {
	          console.error(next, curr); // eslint-disable-line no-console
	          throw new Error('weightFn didn\'t return non-negative integer: ' + weight);
	        }
	
	        if (weight < 0 || curr.time + weight > maxTime) {
	          continue;
	        }
	
	        next.time = curr.time + weight;
	        next.prev = curr;
	
	        if (dest && x === dest.x && y === dest.y) {
	          resPath = next;
	          allowedTime = next.time - 1;
	          break;
	        }
	
	        if (!isVisited(next)) {
	          var loss = next.time + (dest ? getMinSteps(dest.x - x, dest.y - y, hexagonGrid) - startMinTime : 0);
	          queue.push(next, loss /* * (maxTime + 1) - next.time*/);
	          if (!dest) {
	            allCoordinates.add(next.x + ',' + next.y);
	          }
	        }
	      }
	    }
	
	    if (dest) {
	      return resPath && pathListToArray(resPath);
	    }
	
	    // If we get all available coordinates (e.g. for are highlighting), not only path for start -> destination
	    return [].concat(_toConsumableArray(allCoordinates)).map(function (coordinateString) {
	      var coordinates = coordinateString.split(',');
	      return {
	        x: +coordinates[0],
	        y: +coordinates[1]
	      };
	    });
	
	    function isVisited(cell) {
	      // if width and height are chosen right then the key should not be negative
	      var key = (cell.x - xStart + width) * height + (cell.y - yStart);
	
	      if (key < 0) {
	        if (debug) {
	          console.error(cell); // eslint-disable-line no-console
	        }
	        throw new Error('negative key: ' + key);
	      }
	
	      return visited[key] ? visited[key] <= cell.time || (visited[key] = cell.time, false) : (visited[key] = cell.time, false);
	    }
	  }
	
	  function validateArgs() {
	    [xStart, yStart].concat(dest ? [dest.x, dest.y] : []).concat([width, height, maxTime]).forEach(function (arg, i) {
	      if (!isInteger(arg)) {
	        throw new Error('argument #' + i + ' must be an integer: ' + arg);
	      }
	    });
	
	    if (maxTime < 1) {
	      throw new Error('maxTime must be at least 1: ' + maxTime);
	    }
	    if (dest && xStart === dest.x && yStart === dest.y) {
	      throw new Error('starting and destination points must be different: ' + xStart + ', ' + yStart);
	    }
	  }
	}
	
	function pathListToArray(pathList) {
	  var link = pathList;
	  var arr = [];
	
	  do {
	    arr.push(link);
	    link = link.prev;
	  } while (link);
	
	  return arr.reverse();
	}
	
	function binarySearch(sortFn, i0, i1) {
	  var mid = Math.floor((i0 + i1) / 2);
	  var res = sortFn(mid);
	
	  if (res < 0) {
	    return mid > i0 ? binarySearch(sortFn, i0, mid) : [i0, false];
	  } else if (res > 0) {
	    return mid + 1 < i1 ? binarySearch(sortFn, mid + 1, i1) : [i1, false];
	  }
	  return [mid, true];
	}
	
	function isInteger(x) {
	  return x === Math.floor(x) && isFinite(x);
	}
	
	function getMinSteps(dx, dy, hexagonGrid) {
	  if (hexagonGrid) {
	    return dx > 0 && dy > 0 ? dx + dy : dx < 0 && dy < 0 ? -dx - dy : Math.max(Math.abs(dx), Math.abs(dy));
	  } else {
	    return Math.abs(dx) + Math.abs(dy);
	  }
	}
	
	/*---------------------
	------- EXPORT --------
	----------------------*/
	exports.findPath = findPath;

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.hexagonMath = exports.createHexagon = undefined;
	
	var _createHexagon = __webpack_require__(216);
	
	var createHexagon = _interopRequireWildcard(_createHexagon);
	
	var _hexagonMath = __webpack_require__(217);
	
	var hexagonMath = _interopRequireWildcard(_hexagonMath);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	exports.createHexagon = createHexagon;
	exports.hexagonMath = hexagonMath;

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.createVisibleHexagon = exports.createHexagon = undefined;
	
	var _pixi = __webpack_require__(9);
	
	var PIXI = _interopRequireWildcard(_pixi);
	
	var _hexagonMath = __webpack_require__(217);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	/*-----------------------
	--------- PUBLIC --------
	-----------------------*/
	/**
	 * This manages some utility functionalities for creating hexagons
	 *
	 * @class extensions.hexagons.utils
	 */
	/**
	 * Credits belong to: https://github.com/alforno-productions/HexPixiJs/blob/master/lib/hexPixi.js
	 * Creates a hex shaped polygon that is used for the hex's hit area.
	 *
	 * @private
	 * @static
	 * @method createHexagon
	 * @param {Number} radius           Radius of the hexagon
	 * @param {Object} {}               *OPTIONAL*
	 * @param {Object} {}.orientation   Is the heaxgon grid horizontal or vertical. Default: 'horizontal"
	 * @return {PIXI.Polygon}           Hexagon shaped PIXI.Polygon object. That houses the hexagons corner points.
	 */
	function createHexagon(radius) {
	  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      _ref$orientation = _ref.orientation,
	      orientation = _ref$orientation === undefined ? 'horizontal' : _ref$orientation;
	
	  if (orientation !== 'horizontal') {
	    throw new Error('Nothing else than horizontal supported so far!');
	  }
	  var points = coordsToPixiPoints(radius);
	
	  return new PIXI.Polygon(points);
	}
	/**
	 * @private
	 * @static
	 * @method createVisibleHexagon
	 * @method createVisibleHexagon
	 * @param {Number} radius       Radius of the hexagon
	 * @param {Object} options      Options, such as:
	 *                              color: The fill color of the hexagon
	 *                              isFlatTop (Boolean), is the heaxgon flat-topped
	 * @return {PIXI.Graphics}      Graphics object that is shaped as hexagon, based on given radius and options.
	 */
	function createVisibleHexagon(radius) {
	  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      _ref2$color = _ref2.color,
	      color = _ref2$color === undefined ? 0xFF0000 : _ref2$color,
	      _ref2$isFlatTop = _ref2.isFlatTop,
	      isFlatTop = _ref2$isFlatTop === undefined ? false : _ref2$isFlatTop;
	
	  var graphics = new PIXI.Graphics();
	  var points = coordsToPixiPoints(radius, isFlatTop);
	
	  graphics.beginFill(color, 1);
	  graphics.drawPolygon(points, isFlatTop);
	  graphics.endFill();
	
	  return graphics;
	}
	
	/*-----------------------
	--------- PRIVATE -------
	-----------------------*/
	/**
	 * Converts Array of x- and y-coordinates to new PIXI.Point coordinates
	 *
	 * @private
	 * @static
	 * @method coordsToPixiPoints
	 * @method coordsToPixiPoints
	 * @param  {Number} radius        Hexagons radius
	 * @return {Array}                Array of PIXI.Point coordinates
	 */
	function coordsToPixiPoints(radius) {
	  return (0, _hexagonMath.getHexagonPoints)({ radius: radius }).map(function (point) {
	    return new PIXI.Point(point.x, point.y);
	  });
	}
	
	/*-----------------------
	---------- API ----------
	-----------------------*/
	exports.createHexagon = createHexagon;
	exports.createVisibleHexagon = createVisibleHexagon;

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.indexesToCoordinates = exports.coordinatesToIndexes = exports.hexaHitTest = exports.calcSpecialDistance = exports.calcLongDiagonal = exports.calcShortDiagonal = exports.getHexagonPoints = exports.createHexagonGridCoordinates = exports.init = undefined;
	
	var _core = __webpack_require__(2);
	
	/*-----------------------
	------- VARIABLES -------
	-----------------------*/
	var globalRadius = void 0,
	    globalStartingPoint = void 0,
	    globalOrientation = void 0;
	
	/**
	 * Utility module, for making different calculations and tests when hexagon based grid map in use
	 *
	 * @namespace flatworld.extensions.hexagons
	 * @class utils
	 */
	/*-----------------------
	--------- PUBLIC --------
	-----------------------*/
	/**
	 * Set hexagon radius
	 *
	 * @static
	 * @method init
	 * @param {Number} radius    The radius of the hexagon
	 */
	function init(radius) {
	  var startingPoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { x: 0, y: 0 };
	
	  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	      _ref$orientation = _ref.orientation,
	      orientation = _ref$orientation === undefined ? 'horizontal' : _ref$orientation;
	
	  if (!radius) {
	    _core.mapLog.error('You need to pass radius as a parameter');
	  }
	
	  globalRadius = radius;
	  globalStartingPoint = startingPoint;
	  globalOrientation = orientation;
	}
	/**
	 * @method
	 * @static
	 * @method getHexagonPoints
	 * @param {Float} radius      radius of the hexagon
	 * @param {object} options    extra options, like generating horizontal hexagon points and
	 * how many decimals to round
	*/
	function getHexagonPoints() {
	  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	      _ref2$radius = _ref2.radius,
	      radius = _ref2$radius === undefined ? globalRadius : _ref2$radius,
	      _ref2$orientation = _ref2.orientation,
	      orientation = _ref2$orientation === undefined ? globalOrientation : _ref2$orientation;
	
	  var OFFSET = orientation === 'horizontal' ? 0.5 : 0;
	  var CENTER = {
	    x: radius,
	    y: radius
	  };
	  var points = [];
	  var angle = 2 * Math.PI / 6 * OFFSET;
	  var x = CENTER.x * Math.cos(angle);
	  var y = CENTER.y * Math.sin(angle);
	  points.push({ x: x, y: y });
	
	  for (var i = 1; i < 7; i++) {
	    angle = 2 * Math.PI / 6 * (i + OFFSET);
	    x = CENTER.x * Math.cos(angle);
	    y = CENTER.y * Math.sin(angle);
	
	    points.push({ x: x, y: y });
	  }
	
	  return points;
	}
	/**
	 * Calculates the hexagons:
	 * innerDiameter
	 * - Vertical / Flat hexagons height
	 * - Horizontal / pointy hexagons width
	 *
	 * @method calcShortDiagonal
	 * @static
	 * @param {Object} {}               *OPTIONAL*
	 * @param {float} {}.radius         Usually the radius of the hexagon
	 * @param {string} {}.type          If you provide something else than radius, where the calculation is based from
	 */
	function calcShortDiagonal() {
	  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	      _ref3$radius = _ref3.radius,
	      radius = _ref3$radius === undefined ? globalRadius : _ref3$radius,
	      _ref3$floorNumbers = _ref3.floorNumbers,
	      floorNumbers = _ref3$floorNumbers === undefined ? true : _ref3$floorNumbers;
	
	  var answer = radius * Math.sqrt(3);
	  answer = floorNumbers ? Math.floor(answer) : answer;
	
	  return answer;
	}
	/** Calculates the hexagons:
	 * outerDiameter
	 * - Vertical / Flat hexagons width
	 * - Horizontal / pointy hexagons height
	 *
	 * @method calcLongDiagonal
	 * @static
	 * @param {Object} {}                 *OPTIONAL*
	 * @param {float} {}.radius           Usually the radius of the hexagon
	 * @param {string} {}.type            If you provide something else than radius, where the calculation is based from
	 */
	function calcLongDiagonal() {
	  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	      _ref4$radius = _ref4.radius,
	      radius = _ref4$radius === undefined ? globalRadius : _ref4$radius,
	      _ref4$floorNumbers = _ref4.floorNumbers,
	      floorNumbers = _ref4$floorNumbers === undefined ? true : _ref4$floorNumbers;
	
	  var answer = radius * 2;
	  answer = floorNumbers ? Math.floor(answer) : answer;
	
	  return answer;
	}
	/** Calculates the hexagons distance between each other in y-coordinate, when orientation is horizontal
	 *
	 * @method calcSpecialDistance
	 * @static
	 * @param {Object} {}                   *OPTIONAL*
	 * @param {float} {}.radius             Usually the radius of the hexagon
	 */
	function calcSpecialDistance() {
	  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	      _ref5$radius = _ref5.radius,
	      radius = _ref5$radius === undefined ? globalRadius : _ref5$radius,
	      _ref5$floorNumbers = _ref5.floorNumbers,
	      floorNumbers = _ref5$floorNumbers === undefined ? true : _ref5$floorNumbers;
	
	  var answer = calcLongDiagonal(radius) - radius / 2;
	  answer = floorNumbers ? Math.floor(answer) : answer;
	
	  return answer;
	}
	/**
	 * Test do the given coordinates hit the hexagon, given by the points container / array
	 *
	 * @static
	 * @method hexaHitTest
	 * @param  {PIXI.Point[]} points             Array of PIXI.points
	 * @param  {Object} hitCoords         The coordinates to test against
	 * @param  {Integer} hitCoords.x      X coordinate
	 * @param  {Integer} hitCoords.y      Y coordinate
	 * @param  {Object} offsetCoords      *OPTIONAL* offsetCoordinates that are added to the hitCoordinates.
	 * Separate because these are outside the
	 * given array.
	 * @param  {Integer} offsetCoords.x   X coordinate
	 * @param  {Integer} offsetCoords.y   Y coordinate
	 * @return {Boolean}                  Is the coordinate inside the hexagon or not
	 */
	
	function hexaHitTest(points, hitCoords) {
	  var offsetCoords = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { x: 0, y: 0 };
	
	  var realPolygonPoints = points.map(function (point) {
	    return {
	      x: point.x + offsetCoords.x,
	      y: point.y + offsetCoords.y
	    };
	  });
	
	  return _pointInPolygon(hitCoords, realPolygonPoints);
	}
	/**
	 * Create Array that holds the coordinates for the size of hexagon grid we want to create.
	 *
	 * @method createHexagonGridCoordinates
	 * @static
	 * @param {Object} gridSize
	 * @param {Object} gridSize.rows      The count of rows in the hexagon grid
	 * @param {Object} gridSize.columns   The count of columns in the hexagon grid
	 * @param {Object} {}                 *OPTIONAL* configurations in an object
	 * @param {Number} {}.radius          The radius of hexagon. Basically the radius of the outer edges / circle of the hexagon.
	 * @param {String} {}.orientation     Is it horizontal or vertical hexagon grid. Default: horizontal
	 * @return {[]}                       Array that holds the coordinates for the hexagon grid, like [{x: ?, y: ?}]
	 */
	function createHexagonGridCoordinates(gridSize) {
	  var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      _ref6$radius = _ref6.radius,
	      radius = _ref6$radius === undefined ? globalRadius : _ref6$radius,
	      _ref6$orientation = _ref6.orientation,
	      orientation = _ref6$orientation === undefined ? globalOrientation : _ref6$orientation;
	
	  var rows = gridSize.rows,
	      columns = gridSize.columns;
	
	  var gridArray = [];
	  var shortDistance = calcShortDiagonal({ floorNumbers: false });
	  var longDistance = calcLongDiagonal({ floorNumbers: false }) - radius / 2;
	  /* We set the distances of hexagons / hexagon rows and columns, depending are we building horizontal or vertical hexagon grid. */
	  var rowHeight = orientation === 'horizontal' ? longDistance : shortDistance;
	  var columnWidth = orientation === 'horizontal' ? shortDistance : longDistance;
	
	  for (var row = 0; rows > row; row++) {
	    for (var column = 0; columns > column; column++) {
	      /* Se the coordinates for each hexagons upper-left corner on the grid */
	      gridArray.push({
	        x: Math.floor(column * columnWidth + (orientation === 'horizontal' && (row === 0 || row % 2 === 0) ? 0 : -shortDistance / 2)),
	        y: row * rowHeight
	      });
	    }
	  }
	
	  return gridArray;
	}
	/**
	 * This converts pixel-based coordinates to hexagon indexes. Uses axial coordinate system
	 * (http://www.redblobgames.com/grids/hexagons/)
	 * @param  {Object} coordinates           Coordinates with x and y
	 * @param  {Object} options.startingPoint Starting point coordinates with x and y
	 * @return {Object}                       Index coordinates with x and y
	 */
	function coordinatesToIndexes(coordinates) {
	  var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      _ref7$startingPoint = _ref7.startingPoint,
	      startingPoint = _ref7$startingPoint === undefined ? globalStartingPoint : _ref7$startingPoint;
	
	  var indexes = {
	    x: (coordinates.x - startingPoint.x) / calcShortDiagonal({ floorNumbers: false }),
	    y: (coordinates.y - startingPoint.y) / calcSpecialDistance({ floorNumbers: false })
	  };
	
	  indexes.x -= coordinates.y / (calcSpecialDistance({ floorNumbers: false }) * 2);
	
	  indexes.x = Math.round(indexes.x);
	  indexes.y = Math.round(indexes.y);
	
	  return indexes;
	}
	/**
	 * This converts hexagon indexes to pixel-based coordinates. Uses axial coordinate system
	 * (http://www.redblobgames.com/grids/hexagons/)
	 * @param  {Object} indexes               Coordinates with x and y
	 * @param  {Object} options.startingPoint Starting point coordinates with x and y
	 * @return {Object}                       Pixel coordinates with x and y
	 */
	function indexesToCoordinates(indexes) {
	  var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      _ref8$startingPoint = _ref8.startingPoint,
	      startingPoint = _ref8$startingPoint === undefined ? globalStartingPoint : _ref8$startingPoint;
	
	  var coordinates = {
	    x: indexes.x * calcShortDiagonal({ floorNumbers: false }) + startingPoint.x,
	    y: indexes.y * calcSpecialDistance({ floorNumbers: false }) + startingPoint.y
	  };
	
	  coordinates.x += indexes.y * (calcShortDiagonal({ floorNumbers: false }) / 2);
	
	  coordinates.x = _floorTowardsZero(coordinates.x);
	  coordinates.y = _floorTowardsZero(coordinates.y);
	
	  return coordinates;
	}
	
	/*-----------------------
	--------- PRIVATE -------
	-----------------------*/
	/**
	 * credits to: https://github.com/substack/point-in-polygon
	 * Tests whether the given point / coordinate is inside the given points. Assuming the points form a polygon
	 *
	 * @static
	 * @private
	 * @method _pointInPolygon
	 * @param  {Object} point             The coordinates to test against
	 * @param  {Integer} hitCoords.x      X coordinate
	 * @param  {Integer} hitCoords.y      Y coordinate
	 * @param  {Integer[]} vs             The points of the polygon to test [0] === x-point, [1] === y-point
	 * @return {Boolean}                  Is the coordinate inside the hexagon or not
	 */
	function _pointInPolygon(point, vs) {
	  var x = point.x;
	  var y = point.y;
	  var inside = false;
	  var xi = void 0,
	      xj = void 0,
	      yi = void 0,
	      yj = void 0,
	      intersect = void 0;
	
	  for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
	    xi = vs[i].x;
	    yi = vs[i].y;
	    xj = vs[j].x;
	    yj = vs[j].y;
	    intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
	
	    if (intersect) {
	      inside = !inside;
	    }
	  }
	
	  return inside;
	}
	
	function _floorTowardsZero(x) {
	  return Math.sign(x) * Math.floor(Math.abs(x));
	}
	
	/*-----------------------
	---------- API ----------
	-----------------------*/
	exports.init = init;
	exports.createHexagonGridCoordinates = createHexagonGridCoordinates;
	exports.getHexagonPoints = getHexagonPoints;
	exports.calcShortDiagonal = calcShortDiagonal;
	exports.calcLongDiagonal = calcLongDiagonal;
	exports.calcSpecialDistance = calcSpecialDistance;
	exports.hexaHitTest = hexaHitTest;
	exports.coordinatesToIndexes = coordinatesToIndexes;
	exports.indexesToCoordinates = indexesToCoordinates;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports._tests = exports.selectHexagonObject = undefined;
	
	var _units = __webpack_require__(213);
	
	var _utils = __webpack_require__(215);
	
	/*-----------------------
	-------- PUBLIC ---------
	-----------------------*/
	/**
	 * Handles the selection of hexagons on the map
	 *
	 * @namespace flatworld.extensions.hexagons
	 * @class selectHexagonObject
	 * @return {Object}       Return methods inside object
	 */
	var selectHexagonObject = function () {
	  return {
	    init: init,
	    pluginName: 'selectHexagonObject'
	  };
	
	  /**
	   * @method  init
	   * @param {Map} givenMap                  Instantiated Map class object
	   * @param {Object} protectedProperties    Holds all the non-public properties to use
	   * @param {Array} params                  Rest of the parameters
	   */
	  function init(params) {
	    var _this = this;
	
	    if (!params.isBlocked) {
	      throw new Error('hexagon pathFinding plugin requires cb and filter properties');
	    }
	
	    this.mapInstance.hexagonIndexes = createHexagonDataStructure(function () {
	      return _this.mapInstance.allMapObjects.terrainLayer;
	    });
	
	    startClickListener(this.mapInstance, params.isBlocked);
	
	    return Promise.resolve();
	  }
	
	  /*-----------------------
	  -------- PRIVATE --------
	  -----------------------*/
	  /**
	   * @private
	   * @method startClickListener
	   * @param {Map} map              Instantiated Map class object
	   */
	  function startClickListener(mapInstance, isBlocked) {
	    return (0, _units.setupHexagonClick)(mapInstance, isBlocked);
	  }
	}();
	
	function createHexagonDataStructure(getLayers) {
	  var hexagonIndexes = {};
	  var objArray = getLayers();
	  var indexes = void 0;
	
	  objArray.forEach(function (obj) {
	    var correctCoords = obj.getMapCoordinates();
	
	    indexes = _utils.hexagonMath.coordinatesToIndexes(correctCoords);
	
	    hexagonIndexes[indexes.x] = hexagonIndexes[indexes.x] || {};
	    hexagonIndexes[indexes.x][indexes.y] = obj;
	  });
	
	  return hexagonIndexes;
	}
	
	/*-----------------------
	---------- API ----------
	-----------------------*/
	var _tests = {
	  createHexagonDataStructure: createHexagonDataStructure
	};
	exports.selectHexagonObject = selectHexagonObject;
	exports._tests = _tests;

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ObjectHexaUnit = exports.ObjectHexaTerrain = exports.calculateHexa = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _pixi = __webpack_require__(9);
	
	var PIXI = _interopRequireWildcard(_pixi);
	
	var _index = __webpack_require__(2);
	
	var _utils = __webpack_require__(215);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ObjectSpriteTerrain = _index.objects.ObjectSpriteTerrain,
	    ObjectSpriteUnit = _index.objects.ObjectSpriteUnit;
	
	/*-----------------------
	-------- VARIABLES ------
	-----------------------*/
	
	var shape = void 0;
	
	var ObjectHexaTerrain = function (_ObjectSpriteTerrain) {
	  _inherits(ObjectHexaTerrain, _ObjectSpriteTerrain);
	
	  /**
	   * Terrain tile like desert or mountain, non-movable and cacheable. Normally, but not necessarily, these are inherited, depending on
	   * the map type. For example you might want to add some click area for these
	   *
	   * @namespace flatworld.extensions.hexagons
	   * @class ObjectHexaTerrain
	   * @constructor
	   * @param  {Object} coords
	   * @param  {Integer} coords.x         X coordinate
	   * @param  {Integer} coords.y         Y coordinate
	   * @param {object} data               This units custom data
	   * @param {Object} options            options.radius REQUIRED.
	   * @param {Number} options.radius     REQUIRED. This is the radius of the game maps hexagon.
	   */
	  function ObjectHexaTerrain(texture) {
	    var coords = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { x: 0, y: 0 };
	    var _ref = arguments[2];
	    var data = _ref.data,
	        radius = _ref.radius,
	        minimapColor = _ref.minimapColor,
	        minimapShape = _ref.minimapShape,
	        _ref$anchor = _ref.anchor,
	        anchor = _ref$anchor === undefined ? 0.5 : _ref$anchor;
	
	    _classCallCheck(this, ObjectHexaTerrain);
	
	    var _this = _possibleConstructorReturn(this, (ObjectHexaTerrain.__proto__ || Object.getPrototypeOf(ObjectHexaTerrain)).call(this, texture, coords, { data: data }));
	
	    _this.name = 'DefaultTerrainObject_hexa';
	    _this.minimapColor = minimapColor;
	    _this.minimapShape = minimapShape;
	    // Set graphics to center of the hexa
	    _this.anchor.set(anchor, anchor);
	
	    calculateHexa.call(_this, radius);
	    return _this;
	  }
	  /**
	   * Overwrite super method
	   * @method calculateHexa
	   * @return {[type]} [description]
	   */
	
	
	  _createClass(ObjectHexaTerrain, [{
	    key: 'getCenterCoordinates',
	    value: function getCenterCoordinates() {
	      if (!this.coordinates.center) {
	        this.coordinates.center = {
	          x: this.HEXA_WIDTH / 2,
	          y: this.HEXA_HEIGHT / 2
	        };
	      }
	
	      return this.coordinates.center;
	    }
	  }]);
	
	  return ObjectHexaTerrain;
	}(ObjectSpriteTerrain);
	
	var ObjectHexaUnit = function (_ObjectSpriteUnit) {
	  _inherits(ObjectHexaUnit, _ObjectSpriteUnit);
	
	  /**
	   * Map unit like infantry or worker, usually something with actions or movable. Usually these are extended, depending on the map type.
	   * For example you might want to add some click area for these (e.g. hexagon)
	   *
	   * @class ObjectHexaUnit
	   * @constructor
	   * @param {Object} coords            This units coordinates, relative to it's parent container
	   * @param {Integer} coords.x         X coordinate
	   * @param {Integer} coords.y         Y coordinate
	   * @param {object} data               This units custom data
	   * @param {Object} options            options.radius REQUIRED
	   * @param {Object} options.radius     REQUIRED. This is the radius of the game maps hexagon
	   */
	  function ObjectHexaUnit(texture) {
	    var coords = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { x: 0, y: 0 };
	    var _ref2 = arguments[2];
	    var data = _ref2.data,
	        radius = _ref2.radius,
	        minimapColor = _ref2.minimapColor,
	        minimapShape = _ref2.minimapShape,
	        _ref2$anchor = _ref2.anchor,
	        anchor = _ref2$anchor === undefined ? 0.5 : _ref2$anchor;
	
	    _classCallCheck(this, ObjectHexaUnit);
	
	    var _this2 = _possibleConstructorReturn(this, (ObjectHexaUnit.__proto__ || Object.getPrototypeOf(ObjectHexaUnit)).call(this, texture, coords, { data: data }));
	
	    _this2.name = 'DefaultUnitObjects_hexa';
	    _this2.minimapColor = minimapColor;
	    _this2.minimapShape = minimapShape;
	    _this2.static = false;
	    // Set graphics to center of the hexa
	    _this2.anchor.set(anchor, anchor);
	
	    calculateHexa.call(_this2, radius);
	    return _this2;
	  }
	  /**
	   * Overwrite super method
	   * @method calculateHexa
	   * @return {[type]} [description]
	   */
	
	
	  _createClass(ObjectHexaUnit, [{
	    key: 'getCenterCoordinates',
	    value: function getCenterCoordinates() {
	      if (!this.coordinates.center) {
	        this.coordinates.center = {
	          x: this.HEXA_WIDTH / 2,
	          y: this.HEXA_HEIGHT / 2
	        };
	      }
	
	      return this.coordinates.center;
	    }
	  }]);
	
	  return ObjectHexaUnit;
	}(ObjectSpriteUnit);
	/**
	 * @static
	 * @method calculateHexa
	 * @param {Number} radius       Hexagon radius
	 */
	
	
	function calculateHexa(radius) {
	  if (!radius) {
	    throw new Error('Need radius!');
	  }
	
	  var HEXA_HEIGHT = Math.round(_utils.hexagonMath.calcLongDiagonal(radius));
	  var HEXA_WIDTH = Math.round(_utils.hexagonMath.calcShortDiagonal(radius));
	  var SIDE = Math.round(radius);
	
	  this.areaHeight = this.HEXA_HEIGHT = HEXA_HEIGHT;
	  this.areaWidth = this.HEXA_WIDTH = HEXA_WIDTH;
	  this.SIDE = SIDE;
	  this.ROW_HEIGHT = Math.round(HEXA_HEIGHT * 0.75);
	
	  /* Draw hexagon to test the hits with hitArea */
	  this.hitArea = setAndGetShape(radius);
	  this.hitTest = function (coords) {
	    var localCoords = this.toLocal(new PIXI.Point(coords.x, coords.y));
	
	    return this.hitArea.contains(localCoords.x * this.scale.x, localCoords.y * this.scale.y);
	  };
	}
	/*-----------------------
	--------- PRIVATE -------
	-----------------------*/
	/**
	 * @private
	 * @static
	 * @method setAndGetShape
	 * @param {Number} radius       Hexagon radius
	 */
	function setAndGetShape(radius) {
	  if (!shape) {
	    shape = _utils.createHexagon.createHexagon(radius);
	  }
	
	  return shape;
	}
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.calculateHexa = calculateHexa;
	exports.ObjectHexaTerrain = ObjectHexaTerrain;
	exports.ObjectHexaUnit = ObjectHexaUnit;

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _core = __webpack_require__(2);
	
	/*-----------------------
	-------- PUBLIC ---------
	-----------------------*/
	/** This module manages visibility of the objects, based on are they visible to the player
	 * on the canvas / viewport or outside of it. It does this by getting object from larger area
	 * than the current viewport size and then checking if the subcontainers are actually inside the
	 * viewport or not. If inside mark them visible, if outside mark then hidden.
	 * This makes the map a lot faster and reliable resource-wise.
	 *
	 * @namespace flatworld.extensions
	 * @class mapMovement
	 **/
	var mapMovement = function () {
	  var debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	  var VIEWPORT_OFFSET = 0.2;
	  var CHECK_INTERVAL = 20;
	  var SUBCONTAINERS_TO_HANDLE_IN_TIMEOUT = 40;
	  var queue = {};
	  var viewportArea = void 0,
	      offsetSize = void 0,
	      mapInstance = void 0;
	
	  return {
	    init: init,
	    pluginName: 'mapMovement',
	    addAll: addAll,
	    check: check,
	    startEventListeners: startEventListeners,
	    _testObject: {
	      isObjectOutsideViewport: isObjectOutsideViewport,
	      checkAndSetSubcontainers: checkAndSetSubcontainers,
	      getViewportWithOffset: getViewportWithOffset,
	      testRectangleIntersect: testRectangleIntersect,
	      _setMap: _setMap,
	      setOffsetSize: setOffsetSize
	    }
	  };
	  /**
	   * √çnitialize as a plugin
	   *
	   * @method init
	   * @param  {Map} map     Instance of Map
	   */
	  function init() {
	    mapInstance = this.mapInstance;
	    addAll(this.mapInstance);
	    startEventListeners();
	    this.mapInstance.drawOnNextTick();
	
	    if (debug) {
	      /**
	       * For debugging. Shows the amount of currectly active and inactive subcontainers. Console.logs the data.
	       * Also extends window object.
	       *
	       * @method window.FlaTWorld_mapMovement_subCheck
	       * @static
	       */
	      window.FlaTWorld_mapMovement_subCheck = function () {
	        mapInstance.getPrimaryLayers().forEach(function (layer) {
	          var subcontainers = layer.getSubcontainers();
	          var visibleContainers = subcontainers.filter(function (subcontainer) {
	            return subcontainer.visible;
	          });
	          var invisibleContainers = subcontainers.filter(function (subcontainer) {
	            return !subcontainer.visible;
	          });
	
	          var containerCoords = visibleContainers.reduce(function (all, cont2) {
	            all + cont2.x + '';
	          });
	          window.flatworld.log.debug('visible subcontainers: ' + visibleContainers.length + ', ' + containerCoords + '\n\ninvisible: ' + invisibleContainers.length);
	        });
	      };
	      /**
	       * For debugging. Sets all primaryLayers subcontainers on the map as visible = true.
	       *
	       * @method window.FlaTWorld_mapMovement_deactivate
	       * @static
	       */
	      window.FlaTWorld_mapMovement_deactivate = function () {
	        mapInstance.getPrimaryLayers().forEach(function (layer) {
	
	          layer.getSubcontainers().forEach(function (subcontainer) {
	            subcontainer.visible = false;
	          });
	        });
	      };
	    }
	
	    return Promise.resolve();
	  }
	  /**
	   * √çnitialize the plugin
	   *
	   * @method addAll
	   * @param  {Map} map     Instance of Map
	   */
	  function addAll(mapInstance) {
	    viewportArea = setupViewportArea(true, VIEWPORT_OFFSET);
	    setOffsetSize(viewportArea);
	
	    mapInstance.getPrimaryLayers().forEach(function (layer) {
	      layer.getSubcontainers().forEach(function (subcontainer) {
	        subcontainer.visible = isObjectOutsideViewport(subcontainer, viewportArea) ? false : true;
	      });
	    });
	  }
	  /**
	   * This one checks the that the objects that should currently be visible in the viewport area
	   * are visible and outside
	   * of the viewport objects are set .visible = false. This affect performance a lot. Basically
	   * when the map moves, we
	   * set a check in the future based on the given intervalCheck milliseconds. And immediately
	   * after it we check if there
	   * is another map movement. If there is we set another timeout. This works better with
	   * timeouts.
	   *
	   * @method check
	   * @param  {Map} map        The current Map instance
	   * @return {Boolean}        True
	   */
	  function check() {
	    if (queue.processing) {
	      return false;
	    }
	    queue.processing = true;
	
	    window.setTimeout(setupHandleViewportArea(), CHECK_INTERVAL);
	
	    function setupHandleViewportArea() {
	      viewportArea = setupViewportArea(true, VIEWPORT_OFFSET);
	
	      checkAndSetSubcontainers(viewportArea, mapInstance.getPrimaryLayers());
	    }
	
	    return;
	  }
	  /**
	   * @method startEventListeners
	   * @param  {Map} map     Instance of Map
	   */
	  function startEventListeners() {
	    _core.mapEvents.subscribe('mapMoved', moveCb);
	    _core.mapEvents.subscribe('mapResized', resizeCb);
	    /* We change the scale factor ONLY if the map is zoomed. We reserve resources */
	    _core.mapEvents.subscribe('mapZoomed', zoomCb);
	
	    function moveCb() {
	      check();
	    }
	    function resizeCb() {
	      setOffsetSize(viewportArea);
	      check();
	    }
	    function zoomCb() {
	      setOffsetSize(viewportArea);
	      check();
	    }
	  }
	  /*-----------------------
	  -------- PRIVATE --------
	  -----------------------*/
	  /**
	   * See if the given object or subcontainer is outside the given viewportarea. We check intersecting rectangles
	   *
	   * @private
	   * @static
	   * @method isObjectOutsideViewport
	   * @param  {Object} object                  Object / layer we are testing
	   * @param  {Object} viewportArea            ViewportArea location and size
	   * @param  {Integer} viewportArea.x         X coordinate
	   * @param  {Integer} viewportArea.y         Y coordinate
	   * @param  {Integer} viewportArea.width     Viewports width (in pixels)
	   * @param  {Integer} viewportArea.height    Viewports height (in pixels)
	   * @param  {Boolean} hasParent              default = true
	   * @return {Boolean}
	   */
	  function isObjectOutsideViewport(object, viewportArea) {
	    var globalArea = object.getSubcontainerArea({ toGlobal: false });
	
	    var isOutside = !testRectangleIntersect(globalArea, viewportArea);
	
	    return isOutside;
	  }
	  /**
	   * Checks proper subcontainers and mark the correct ones visible or hidden
	   *
	   * @todo rename and generally refactor
	   * @method checkAndSetSubcontainers
	   * @param  {Object} scaledViewport    Viewportarea that has been scaled.
	   * @param  {Array} primaryLayers      The primarylayers that we handle
	   */
	  function checkAndSetSubcontainers(scaledViewport, primaryLayers) {
	    var largerViewportAreaWithOffset = getViewportWithOffset(scaledViewport);
	    var containersUnderChangedArea = [];
	
	    primaryLayers = _core.utils.general.chunkArray(primaryLayers, VIEWPORT_OFFSET);
	    var promises = primaryLayers.map(function (theseLayers) {
	      var promise = new Promise(function (resolve, reject) {
	        try {
	          window.setTimeout(function () {
	            var foundSubcontainers = theseLayers.map(function (layer) {
	              return layer.getSubcontainersByCoordinates(largerViewportAreaWithOffset);
	            });
	            containersUnderChangedArea = containersUnderChangedArea.concat(foundSubcontainers);
	
	            resolve(containersUnderChangedArea);
	          });
	        } catch (e) {
	          reject(e);
	        }
	      });
	
	      return promise;
	    });
	
	    Promise.all(promises).then(function () {
	      containersUnderChangedArea = _core.utils.general.flatten2Levels(containersUnderChangedArea);
	
	      var subcontainers = _core.utils.general.chunkArray(containersUnderChangedArea, SUBCONTAINERS_TO_HANDLE_IN_TIMEOUT);
	
	      var promises = subcontainers.map(function (thesesContainers) {
	        var promise = new Promise(function (resolve, reject) {
	          try {
	            window.setTimeout(function () {
	              resolve(thesesContainers.filter(function (thisContainer) {
	                return thisContainer.visible = isObjectOutsideViewport(thisContainer, scaledViewport) ? false : true;
	              }));
	            });
	          } catch (e) {
	            reject(e);
	          }
	        });
	
	        return promise;
	      });
	
	      return promises;
	    }).then(function () {
	      queue.processing = false;
	
	      mapInstance.drawOnNextTick();
	    }).catch(function (err) {
	      queue.processing = true;
	
	      window.flatworld.log.debug(err);
	    });
	  }
	  /**
	   * Initializes the module variables viewportArea and offsetSize
	   *
	   * @private
	   * @static
	   * @method setupViewportArea
	   * @return {totalViewportArea}              The total viewportArea
	   */
	  function setupViewportArea() {
	    var isLocal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	    var multiplier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
	
	    return mapInstance.getViewportArea(isLocal, multiplier);
	  }
	  /**
	   * Initializes the module variable offsetSize
	   *
	   * @private
	   * @static
	   * @method setOffsetSize
	   * @return {totalViewportArea}              The total viewportArea
	   */
	  function setOffsetSize(viewportArea) {
	    offsetSize = calculateOffset(viewportArea, { zoom: mapInstance.getZoom() });
	  }
	  /**
	   * forms the total viewport parameters based on the given ones.
	   *
	   * @private
	   * @static
	   * @method getViewportWithOffset
	   * @param  {AreaSize} viewportArea          Given viewport area
	   * @return {totalViewportArea}              The total viewportArea
	   */
	  function getViewportWithOffset(viewportArea) {
	    if (!offsetSize) {
	      throw new Error('getViewportWithOffset requires module variable offsetSize to have been set');
	    }
	
	    return {
	      x: Math.round(viewportArea.x - offsetSize),
	      y: Math.round(viewportArea.y - offsetSize),
	      width: Math.round(viewportArea.width + offsetSize * 2),
	      height: Math.round(viewportArea.height + offsetSize * 2)
	    };
	  }
	  /**
	   * @private
	   * @static
	   * @method testRectangleIntersect
	   */
	  function testRectangleIntersect(a, b) {
	    return a.x <= b.x + b.width && b.x <= a.x + a.width && a.y <= b.y + b.height && b.y <= a.y + a.height;
	  }
	  /**
	   * @private
	   * @static
	   * @method calculateOffset
	   */
	  function calculateOffset(viewportArea) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { zoom: 1 };
	
	    return Math.abs(viewportArea.width / options.zoom * VIEWPORT_OFFSET);
	  }
	  /**
	   * @private
	   * @static
	   * @method _setMap
	   */
	  function _setMap(givenMap) {
	    this.mapInstance = mapInstance = givenMap;
	  }
	}();
	
	/*-----------------------
	---------- API ----------
	-----------------------*/
	/* For debugging? This will show up if the plugin fails to load in Map.js */
	exports.default = mapMovement;
	module.exports = exports['default'];

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _pixelizedMinimap = __webpack_require__(222);
	
	var _pixelizedMinimap2 = _interopRequireDefault(_pixelizedMinimap);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	  pixelizedMinimap: _pixelizedMinimap2.default
	};
	module.exports = exports['default'];

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _hammerjs = __webpack_require__(208);
	
	var _hammerjs2 = _interopRequireDefault(_hammerjs);
	
	var _pixi = __webpack_require__(9);
	
	var PIXI = _interopRequireWildcard(_pixi);
	
	var _index = __webpack_require__(2);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*-----------------------
	-------- PUBLIC ---------
	-----------------------*/
	/**
	 * Pixelized minimap works in situations, where you map a symmetrical map. E.g. hexagon or square based map.
	 * It can only be created in sizes that match pixel squares (not sure what it is called). So basically object area on the minimap can be
	 * either 1, 4, 9, 16 etc. pixels in size.
	 *
	 * After plugin has been initialized by the flatworld, you must still call initMinimap to start showing the minimap.
	 *
	 * @namespace flatworld.extensions.minimaps
	 * @class pixelizedMinimap
	 **/
	var pixelizedMinimap = function () {
	    var paddingX = 0;
	    var paddingY = 0;
	    var minimap = void 0,
	        minimapViewport = void 0,
	        hammer = void 0,
	        coordinateConverterCB = void 0,
	        mapMoveTimestamp = void 0,
	        dynamicContainer = void 0,
	        mapInstance = void 0;
	
	    return {
	        init: init,
	        pluginName: 'pixelizedMinimap',
	        initMinimap: initMinimap,
	        _testObject: {}
	    };
	    /**
	     * √çnitialize as a plugin. Done by the Flatworld class.
	     *
	     * @method init
	     * @param  {Map} givenMap     Instance of Map
	     */
	    function init() {
	        hammer = new _hammerjs2.default.Manager(this.mapInstance.minimapCanvas);
	        this.mapInstance.initMinimap = initMinimap;
	        minimap = this.mapInstance.getMinimapLayer();
	
	        return Promise.resolve();
	    }
	    /**
	     * initMinimap requires some data, to initialize and show the actual minimap.
	     *
	     * @param  {PIXI.DisplayObject} UIImage         The canvas image that you want to show around the UI element
	     * @param  {Integer} {}.x                       x coordinate for the minimap layer
	     * @param  {Integer} {}.y                       y coordinate for the minimap layer
	     * @return {PIXI.Container}                     minimap layer
	     */
	    function initMinimap(UIImage, minimapSize, staticCB, dynamicCB, coordinateConvCB, givenMinimapViewport) {
	        var _ref = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {},
	            _ref$xPadding = _ref.xPadding,
	            xPadding = _ref$xPadding === undefined ? 10 : _ref$xPadding,
	            _ref$yPadding = _ref.yPadding,
	            yPadding = _ref$yPadding === undefined ? 10 : _ref$yPadding;
	
	        paddingX = xPadding;
	        paddingY = yPadding;
	        minimap.minimapSize = minimapSize;
	        coordinateConverterCB = coordinateConvCB;
	        // utils.mouse.disableContextMenu(map.getRenderer('minimap').view);
	        setMinimapUI(UIImage);
	        setupBackgroundLayer(staticCB);
	        setupDynamicLayer(dynamicCB);
	        _setMinimapArea(minimap.minimapSize.x, minimap.minimapSize.y, minimap.minimapSize.width, minimap.minimapSize.height);
	        setupMinimapViewportEvents();
	        setupMinimapClickEvent();
	        minimapViewport = givenMinimapViewport;
	        minimap.addChild(minimapViewport);
	
	        _index.mapEvents.publish('minimapInitialized', minimap);
	
	        return minimap;
	    }
	    function setMinimapUI(UIImage) {
	        minimap.addChild(UIImage);
	    }
	    /**
	     * Sets up the layer that doesn't change, normally terrain layer. This layer is supposed to be unchanged during this play session, so
	     * is is cached for efficiency.
	     *
	     * @param  {Function} staticCB   Callback that receives each object that is added to the map individually.
	     */
	    function setupBackgroundLayer(staticCB) {
	        var filters = new _index.MapDataManipulator({
	            type: 'filter',
	            object: 'layer',
	            property: 'zoomLayer',
	            value: true
	        });
	        var backgroundContainer = createMinimapLayer();
	
	        mapInstance.getAllObjects({ filters: filters }).forEach(function (obj) {
	            backgroundContainer.addChild(staticCB(obj));
	        });
	
	        backgroundContainer.cacheAsBitmap = true;
	
	        minimap.addChild(backgroundContainer);
	    }
	    function setupDynamicLayer(updateCB) {
	        var filters = new _index.MapDataManipulator({
	            type: 'filter',
	            object: 'object',
	            property: 'static',
	            value: false
	        });
	        dynamicContainer = createMinimapLayer();
	
	        mapInstance.getAllObjects({ filters: filters }).forEach(function (obj) {
	            dynamicContainer.addChild(updateCB(obj));
	        });
	
	        dynamicContainer.cacheAsBitmap = true;
	
	        minimap.addChild(dynamicContainer);
	    }
	    function setupMinimapViewportEvents() {
	        _index.mapEvents.subscribe('mapMoved', reactToMapMovement);
	        _index.mapEvents.subscribe('mapZoomed', reactToMapScale);
	        _index.mapEvents.subscribe('minimapClicked', moveViewport);
	    }
	    function reactToMapMovement() {
	        if (mapMoveTimestamp - Date.now() > -5) {
	            return;
	        }
	
	        var minimapCoordinates = coordinateConverterCB(mapInstance.getCurrentMapCoordinates(), true);
	
	        minimapViewport.x = minimapCoordinates.x;
	        minimapViewport.y = minimapCoordinates.y;
	
	        mapInstance.drawOnNextTick();
	    }
	    function reactToMapScale() {
	        minimapViewport.scale.x += 0.1;
	        minimapViewport.scale.y = 0.1;
	    }
	    function moveViewport(datas) {
	        var globalCoordinates = _index.utils.mouse.eventData.getHAMMERPointerCoords(datas);
	        var mapCoordinates = new PIXI.Point(datas.srcEvent.layerX, datas.srcEvent.layerY);
	
	        globalCoordinates = _index.utils.mouse.coordinatesFromGlobalToRelative(globalCoordinates, mapInstance.minimapCanvas);
	
	        /* We need to keep track when the map was moved, so we don't react to this movement */
	        mapMoveTimestamp = Date.now();
	
	        /* Select the center of the viewport rectangle */
	        globalCoordinates.x -= Math.round(minimapViewport.width / 2);
	        globalCoordinates.y -= Math.round(minimapViewport.height / 2);
	
	        mapCoordinates = coordinateConverterCB(globalCoordinates, true);
	        minimapViewport.x = mapCoordinates.x;
	        minimapViewport.y = mapCoordinates.y;
	        mapCoordinates = coordinateConverterCB(globalCoordinates, false);
	        mapInstance.moveMap(mapCoordinates, { absolute: true, noEvent: true });
	
	        mapInstance.drawOnNextTick();
	    }
	    function setupMinimapClickEvent() {
	        var activeCB = void 0;
	        var minimapClickDetector = {
	            on: function on(cb) {
	                var tap = new _hammerjs2.default.Tap();
	                activeCB = cb;
	
	                hammer.add(tap);
	                hammer.on('tap', activeCB);
	            },
	            off: function off() {
	                hammer.on('tap', activeCB);
	            }
	        };
	
	        _index.eventListeners.setDetector('minimapClicked', minimapClickDetector.on, minimapClickDetector.off);
	
	        _index.eventListeners.on('minimapClicked', moveViewport);
	    }
	    /*-----------------------
	    -------- PRIVATE --------
	    -----------------------*/
	    /**
	     * Sets up the minimap area. Like correct position and renderer auto resizing.
	     *
	     * @param {Integer} x
	     * @param {Integer} y
	     * @param {Integer} width
	     * @param {Integer} height
	     */
	    function _setMinimapArea(x, y, width, height) {
	        var _minimapRenderer = mapInstance.getRenderer('minimap');
	
	        minimap.position = new PIXI.Point(x, y);
	        _minimapRenderer.autoResize = true;
	        _minimapRenderer.resize(width + paddingX * 2, height + paddingY * 2);
	
	        mapInstance.drawOnNextTick();
	    }
	    /**
	     * Creates minimap layer with proper starting coordinates
	     *
	     * @return {PIXI.Container}
	     */
	    function createMinimapLayer() {
	        var container = new PIXI.Container();
	
	        container.x = paddingX;
	        container.y = paddingY;
	
	        return container;
	    }
	    /*    function updateMinimapLayer() {
	        dynamicContainer.cacheAsBitmap = false;
	        dynamicContainer.cacheAsBitmap = true;
	      }*/
	}();
	
	/*-----------------------
	---------- API ----------
	-----------------------*/
	exports.default = pixelizedMinimap;
	module.exports = exports['default'];

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _index = __webpack_require__(2);
	
	/*---------------------
	-------- PUBLIC -------
	----------------------*/
	/**
	 * Core plugin for the engine. Handles moving the map by dragging the map with mouse or touch event. Core plugins can always be
	 * overwrote if needed.
	 *
	 * @class extensions.mapDrag
	 * @requires Hammer.js - Mobile part requires
	 * @return {Object}      init, _startDragListener
	 */
	var mapDrag = function () {
	  /* Function for setting and getting the mouse offset. Private functions declared bottom */
	  var offsetCoords = _offsetCoords();
	  var eventListenerCB = void 0;
	
	  /*--------------------
	  ------- API ----------
	  --------------------*/
	  return {
	    init: init,
	    pluginName: 'mapDrag',
	    _startDragListener: _startDragListener /* Function revealed for testing */
	  };
	
	  /*---------------------
	  -------- PUBLIC -------
	  ----------------------*/
	  /**
	   * Required init functions for the plugin
	   *
	   * @method init
	   * @param {Map} mapObj        The current instance of Map class
	   * */
	  function init() {
	    eventListenerCB = _startDragListener(this.mapInstance);
	
	    /* Singleton should have been instantiated before, we only retrieve it with 0 params */
	    _index.eventListeners.on('drag', eventListenerCB);
	
	    return Promise.resolve();
	  }
	
	  /*---------------------
	  -------- PRIVATE ------
	  ----------------------*/
	  /**
	   * Mobile version. Starts the functionality, uses Hammer.js heavily for doing the drag. More simple and better than
	   * desktop version, since we don't need to calculate the drag with several event listener, one is enough with Hammer
	   *
	   * @private
	   * @static
	   * @method _startDragListener
	   * @param {Map} map           The current instance of Map class
	   */
	  function _startDragListener(map) {
	    var initialized = false;
	
	    return function startDrag(e) {
	      if (_index.eventListeners.getActivityState('zoom')) {
	        return false;
	      }
	      var coords = _index.utils.mouse.eventData.getHAMMERPointerCoords(e);
	
	      coords.x = Math.round(coords.x);
	      coords.y = Math.round(coords.y);
	
	      if (!initialized) {
	        offsetCoords.setOffset({
	          x: coords.x,
	          y: coords.y
	        });
	        initialized = true;
	
	        return;
	      } else if (e.isFinal === true) {
	        initialized = false;
	      }
	
	      _mapMovement(e, map, coords);
	    };
	  }
	
	  /**
	   * This handles offset Changes and setting data has map been moved based on it. Also
	   * sets basic settings like preventDefault etc.
	   *
	   * @private
	   * @static
	   * @method _mapMovement
	   * @param  {Event} e                        The event being dealt with
	   * @param  {Map} map                        The current instance of Map class
	   * @param  {Coordinates} coords             Current pointer coordinates
	   */
	  function _mapMovement(e, map, coords) {
	    var offset = offsetCoords.getOffset();
	    var moved = {
	      x: coords.x - offset.x,
	      y: coords.y - offset.y
	    };
	
	    if (moved.x > 0 || moved.y > 0 || moved.x < 0 || moved.y < 0) {
	      map.moveMap(moved);
	    }
	
	    offsetCoords.setOffset(coords);
	
	    e.preventDefault();
	  }
	  /**
	   * Function for setting and getting the mouse offset.
	   * Offset is the distance from the left upper coordinates (global 0, 0 coordinates) on the canvas, to the current /
	   * last known mouse coordinates
	   *
	   * @private
	   * @static
	   * @method _offsetCoords
	   */
	  function _offsetCoords() {
	    var offsetCoordsPrivate = void 0;
	
	    return {
	      setOffset: setOffset,
	      getOffset: getOffset
	    };
	
	    function setOffset(coords) {
	      return offsetCoordsPrivate = coords;
	    }
	    function getOffset() {
	      return offsetCoordsPrivate;
	    }
	  }
	}();
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = mapDrag;
	module.exports = exports['default'];

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _index = __webpack_require__(2);
	
	/*---------------------
	-------- PUBLIC -------
	----------------------*/
	/**
	 * Core plugin for the engine. Handles zooming for the map. Core plugins can always be overwrote if needed. Zooming happens when the
	 * user scrolls the mousewheel or in mobile, pinches the screen.
	 *
	 * @class extensions.mapZoom
	 * @return {Object}      init
	 */
	var mapZoom = function () {
	  /*---------------------
	  ------ VARIABLES ------
	  ----------------------*/
	  var TIMEOUT_AFTER_ZOOM = 40;
	  var initialized = false;
	  var mobileInitialized = false;
	  var difference = {};
	  var map = void 0;
	  /**
	   * Maximum and minimum amount, the player can zoom the map
	   *
	   * @attribute zoomLimit
	   * @type {{ farther: Number, closer: Number }}
	   */
	  var zoomLimit = {
	    farther: 0.4,
	    closer: 2.5
	  };
	  /**
	   * How much one step of zooming affects
	   *
	   * @attribute zoomModifier
	   * @type {Number}
	   */
	  var zoomModifier = 0.1;
	
	  /*---------------------
	  --------- API ---------
	  ---------------------*/
	  return {
	    init: init,
	    pluginName: 'mapZoom'
	  };
	
	  /*---------------------
	  ------- PUBLIC --------
	  ----------------------*/
	  /**
	   * Required init functions for the plugin
	   *
	   * @method init
	   * @param {Map} mapObj       instantiated Map class object
	   *
	   * @todo think through should setZoomLimits and setZoomModifier be in map.prototype?
	   * But zoomLimit and modifier need to be setable in creation, init or later with setters
	   **/
	  function init() {
	    map = this.mapInstance;
	    this.mapInstance.setPrototype('zoomIn', zoomIn);
	    this.mapInstance.setPrototype('zoomOut', zoomOut);
	    this.mapInstance.setPrototype('setZoomLimits', setZoomLimits);
	    this.mapInstance.setPrototype('setZoomModifier', setZoomModifier);
	
	    /* Singleton should have been instantiated before, we only retrieve it with 0 params */
	    _index.eventListeners.on('zoom', unifiedEventCB);
	
	    return Promise.resolve();
	  }
	
	  /*----------------------------------------
	  ------ PROTOTYPE extensions for map ------
	  ----------------------------------------*/
	  /**
	   * How much one mouse wheel step zooms
	   *
	   * @method setZoomModifier
	   * @param {Number} amount           How much one mouse wheel step zooms. Needs to be in between 0 - 0.5
	   **/
	  function setZoomModifier(amount) {
	    if (!(amount > 0 || amount <= 0.5)) {
	      throw new Error('Wrong zoom modifier! (needs to be >0 and <=0.5, given:' + amount);
	    }
	    zoomModifier = amount;
	
	    return this;
	  }
	  /**
	   * How much can be zoomed in maximum and minimum
	   *
	   * @method setZoomLimits
	   * @param {Number} farther          (>1) How much one mouse wheel step zooms out
	   * @param {Number} closer           (0 - 1) How much one mouse wheel step zooms in
	   **/
	  function setZoomLimits(farther, closer) {
	    zoomLimit.farther = farther;
	    zoomLimit.closer = closer;
	
	    return this;
	  }
	  /**
	   * Zoom in to the map
	   *
	   * @method zoomIn
	   * @param {Number} amount how much map is zoomed in
	   * */
	  function zoomIn(amount) {
	    var presentScale = map.getZoom();
	    var IS_ZOOM_IN = true;
	
	    return _zoom(this, presentScale, Math.abs(amount) || zoomModifier, IS_ZOOM_IN);
	  }
	  /**
	   * Zoom out of the map
	   *
	   * @method zoomOut
	   * @param {Number} amount how much map is zoomed out
	   * */
	  function zoomOut(amount) {
	    var presentScale = map.getZoom();
	    var IS_ZOOM_IN = false;
	
	    amount = amount < 0 ? amount : -amount;
	
	    return _zoom(this, presentScale, amount || -zoomModifier, IS_ZOOM_IN);
	  }
	
	  /*---------------------------
	  ------ EVENT FUNCTIONS ------
	  ---------------------------*/
	  /**
	   * This starts the correct eventListener for the current environment. Mousewheel and pinch differ quite dramatically
	   * so we keep them as separate functions.
	   *
	   * @method unifiedEventCB
	   * @param  {Event} e             Event object
	   * @param  {Integer} delta       Hamster.js provided delta
	   * @param  {Integer} deltaX      Hamster.js provided delta
	   * @param  {Integer} deltaY      Hamster.js provided delta
	   */
	  function unifiedEventCB(e, delta, deltaX, deltaY) {
	    if (delta) {
	      handleZoomEventDesktop(e, delta, deltaX, deltaY);
	    } else if (e.pointers) {
	      if (!mobileInitialized) {
	        mobileInitialized = true;
	        setZoomModifier(zoomModifier * 0.5);
	      }
	      handleZoomEventMobile(e);
	    }
	  }
	  /**
	   * Setup desktop zoomEvent by currying. Internally: Sets up correct scale + moves map accordingly to zoom to the
	   * current center coordinates
	   *
	   * @method handleZoomEventDesktop
	   * @param  {Map} map             Map instance
	   */
	  function handleZoomEventDesktop(e, delta, deltaX, deltaY) {
	    var mouseWheelDelta = deltaY;
	    /* Scale changes when the map is drawn. We make calculations with the old scale before draw */
	    var oldScale = map.getZoom();
	
	    /* No nasty scrolling side-effects */
	    e.preventDefault();
	
	    if (mouseWheelDelta > 0) {
	      if (map.zoomIn()) {
	        map.moveMap(_calculateCenterMoveCoordinates(oldScale, true));
	      }
	    } else if (mouseWheelDelta < 0) {
	      if (map.zoomOut()) {
	        map.moveMap(_calculateCenterMoveCoordinates(oldScale));
	      }
	    }
	  }
	  /**
	   * handleZoomEventMobile
	   *
	   * @method handleZoomEventMobile
	   * @param  {Event} e
	   */
	  function handleZoomEventMobile(e) {
	    var pointers = e.pointers;
	    var oldScale = map.getZoom();
	    var coords = [{
	      x: pointers[0].pageX,
	      y: pointers[0].pageY
	    }, {
	      x: pointers[1].pageX,
	      y: pointers[1].pageY
	    }];
	    var changeX = Math.abs(coords[0].x - coords[1].x);
	    var changeY = Math.abs(coords[0].y - coords[1].y);
	
	    e.preventDefault();
	
	    try {
	      if (!initialized) {
	        difference = {
	          x: changeX,
	          y: changeY
	        };
	        _index.eventListeners.setActivityState('zoom', true);
	        initialized = true;
	
	        return;
	      } else if (e.eventType === 4 || e.eventType === 8) {
	        /* e.eventType 4 = event canceled, e.eventType 8 = event finished */
	        /* We don't want another event to be fired right after a pinch event. It makes the zoomign experience rather
	         * bad if after zoom there is immediately an unexplainable drag and the map moves a bit
	         * */
	        window.setTimeout(function () {
	          _index.eventListeners.setActivityState('zoom', false);
	        }, TIMEOUT_AFTER_ZOOM);
	        initialized = false;
	      }
	
	      if (difference.x + difference.y < changeX + changeY) {
	        if (map.zoomIn()) {
	          map.moveMap(_calculateCenterMoveCoordinates(oldScale, true));
	        }
	      } else {
	        if (map.zoomOut()) {
	          map.moveMap(_calculateCenterMoveCoordinates(oldScale));
	        }
	      }
	
	      difference = {
	        x: changeX,
	        y: changeY
	      };
	    } catch (ev) {
	      (0, _index.log)('Error! ', ev);
	    }
	  }
	
	  /*---------------------
	  ------- PRIVATE -------
	  ---------------------*/
	  /**
	   * _isOverZoomLimit
	   *
	   * @private
	   * @static
	   * @method _isOverZoomLimit
	   **/
	  function _isOverZoomLimit(amount, isZoomIn) {
	    if (isZoomIn && amount > zoomLimit.closer || !isZoomIn && amount < zoomLimit.farther) {
	      return true;
	    }
	
	    return false;
	  }
	  /**
	   * @private
	   * @static
	   * @method _calculateCenterMoveCoordinates
	   **/
	  function _calculateCenterMoveCoordinates(scale, isZoomIn) {
	    var windowSize = _index.utils.resize.getWindowSize();
	    var halfWindowSize = {
	      x: windowSize.x / 2 / scale,
	      y: windowSize.y / 2 / scale
	    };
	    var realMovement = {
	      x: halfWindowSize.x * (isZoomIn ? -zoomModifier : zoomModifier),
	      y: halfWindowSize.y * (isZoomIn ? -zoomModifier : zoomModifier)
	    };
	
	    return realMovement;
	  }
	  /**
	   * @private
	   * @static
	   * @method _zoom
	   * @todo zoom should always product integers, not floats (this seems to happen)
	   **/
	  function _zoom(map, presentScale, amount, isZoomIn) {
	    var newScale = void 0;
	
	    if (!_isOverZoomLimit(presentScale, isZoomIn)) {
	      newScale = map.setZoom(amount ? presentScale + amount : presentScale + zoomModifier);
	    }
	
	    return newScale;
	  }
	}();
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = mapZoom;
	module.exports = exports['default'];

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.UIs = undefined;
	
	var _default = __webpack_require__(226);
	
	var _default2 = _interopRequireDefault(_default);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var UIs = exports.UIs = _default2.default;

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _default = __webpack_require__(227);
	
	var _default2 = _interopRequireDefault(_default);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	  UIDefault: _default2.default
	};
	module.exports = exports['default'];

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _pixi = __webpack_require__(9);
	
	var PIXI = _interopRequireWildcard(_pixi);
	
	var _core = __webpack_require__(2);
	
	var _layout = __webpack_require__(228);
	
	var templates = _interopRequireWildcard(_layout);
	
	var _arrows = __webpack_require__(250);
	
	var _createHexagon = __webpack_require__(216);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/*---------------------
	------ VARIABLES ------
	----------------------*/
	var UINAME = 'movementArrow';
	var styleSheetElement = void 0;
	var cssClasses = void 0;
	var elementList = {};
	
	/*---------------------
	--------- API ---------
	----------------------*/
	
	var UIDefault = function () {
	  /**
	   * The simplest default UI implementation. Implemented UI functionalities for: showSelections, highlightSelectedObject
	   *
	   * @namespace flatworld.UIs
	   * @class default
	   * @constructor
	   * @requires Handlebars
	   * @requires hexagon extension
	   * @param  {HTMLElement} modal      The modal used in this UI Theme
	   * @param  {Flatworld} FTW          Instance of flatworld class
	   * @param  {Object} options         optional options
	   * @param  {Object} options.styles  styles for the UI
	   */
	  function UIDefault(modal, FTW) {
	    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	        _ref$radius = _ref.radius,
	        radius = _ref$radius === undefined ? 71 : _ref$radius,
	        _ref$styles = _ref.styles,
	        styles = _ref$styles === undefined ? '#F0F0F0' : _ref$styles,
	        elements = _ref.elements;
	
	    _classCallCheck(this, UIDefault);
	
	    this.RADIUS = radius;
	    cssClasses = elements;
	    styleSheetElement = this.addStyleElement();
	    /* For testing. This is deeefinitely supposed to not be here, but it has stayed there for testing. */
	    var createdCSS = '\n      ' + cssClasses.select + ' {\n        z-index: 9999;\n        opacity: 0.9;\n        position: fixed;\n        left: 0px;\n        bottom: 0px;\n        background-color: brown;\n        border: 1px solid rgb(255, 186, 148);;\n        border-bottom: 0px;\n        padding:15px;\n        margin-left:10px;\n      }';
	    this.addCSSRulesToScriptTag(styleSheetElement, createdCSS);
	
	    // Add a media (and/or media query) here if you'd like!
	    // style.setAttribute('media', 'screen')
	    // style.setAttribute('media', 'only screen and (max-width : 1024px)')
	
	    this.FTW = FTW;
	    this.modal = modal;
	    this.styles = styles;
	  }
	  /**
	   * Required by the map.UI API
	   *
	   * @method showSelections
	   * @param  {Object} objects     Objects that have been selected. See core.UI for more information
	   * @param {Object} getDatas       See explanation in core.UI
	   */
	
	
	  _createClass(UIDefault, [{
	    key: 'showSelections',
	    value: function showSelections(objects, getDatas /*, UIThemeOptions*/) {
	      var _this = this;
	
	      var cb = void 0;
	
	      /* We add the objects to be highlighted to the correct UI layer */
	      // objectsToUI(UILayer, objects);
	
	      if (objects && objects.length > 1) {
	        cb = function cb() {
	          _this.showModal(objects, getDatas);
	        };
	      } else if (objects && objects.length === 1) {
	        cb = function cb() {
	          _this.highlightSelectedObject(objects[0]);
	          _this.showModal(objects[0], getDatas);
	        };
	      } else {
	        cb = function cb() {
	          _this.unSelect();
	          _core.log.debug('Error occured selecting the objects on this coordinates! Nothing found');
	        };
	      }
	
	      _getElement('select').style.display = 'none';
	      cb();
	    }
	    /**
	     * Required by the map.UI API
	     *
	     * @method highlightSelectedObject
	     * @param  {Object} object        Object that has been selected. See core.UI for more information
	     * @param {Object} options        Extra options. Like dropping a shadow etc.
	     */
	
	  }, {
	    key: 'highlightSelectedObject',
	    value: function highlightSelectedObject(object) {
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { shadow: { color: '0x0000', distance: 5, alpha: 0.55, angle: 45, blur: 5 } };
	      var shadow = options.shadow;
	
	      var highlightableObject = this._highlightSelectedObject(object, this.FTW.getRenderer());
	
	      highlightableObject.dropShadow({
	        color: shadow.color,
	        distance: shadow.distance,
	        alpha: shadow.alpha,
	        angle: shadow.angle,
	        blur: shadow.blur
	      });
	
	      return highlightableObject;
	    }
	    /**
	     * @method showUnitMovement
	     * @param { Object } object           The object that is being moved
	     * @param {PIXI.Point | Array} to     Coordinates as an object or array of waypoints / 
	     * coordinates where the unit is being moved to.
	     */
	
	  }, {
	    key: 'showUnitMovement',
	    value: function showUnitMovement(path) {
	      var _this2 = this;
	
	      if (!Array.isArray(path)) {
	        throw new Error('showUnitMovement demands path array!');
	      }
	
	      var arrows = [];
	      var prev = void 0;
	
	      this.FTW.removeUIObject(this.FTW.layerTypes.movableType.id, UINAME);
	
	      path.forEach(function (coord, index) {
	        if (index === 0) {
	          prev = coord;
	          return;
	        }
	
	        arrows.push(_this2._createArrow(prev, coord));
	
	        prev = coord;
	      });
	      this.FTW.addUIObject(this.FTW.layerTypes.movableType.id, arrows, UINAME);
	    }
	    /**
	     * Simply clear all selected objects and close object selection menus etc.
	     *
	     * @method unSelect
	     */
	
	  }, {
	    key: 'unSelect',
	    value: function unSelect() {
	      this.FTW.removeUIObject(this.FTW.layerTypes.movableType.id);
	      this.FTW.drawOnNextTick();
	    }
	
	    /*----------------------
	    ------- PRIVATE --------
	    ----------------------*/
	    /**
	     * @private
	     * @static
	     * @method _highlightSelectedObject
	     * @param  {Object} object
	     * @param  {MapLayer} movableLayer
	     * @param  {PIXI.Renderer} renderer
	     */
	
	  }, {
	    key: '_highlightSelectedObject',
	    value: function _highlightSelectedObject(object, renderer) {
	      var clonedObject = object.clone(renderer, { anchor: true, scale: true });
	
	      var coord = object.toGlobal(new PIXI.Point(0, 0));
	      coord = this.FTW.getMapCoordinates(coord);
	
	      this.createHighlight(clonedObject, { coords: coord });
	
	      return clonedObject;
	    }
	  }, {
	    key: '_createArrow',
	    value: function _createArrow(localFrom, localTo) {
	      return (0, _arrows.drawLine)(new PIXI.Graphics(), localFrom, localTo);
	    }
	    /**
	     * @private
	     * @static
	     * @method createHighlight
	     */
	
	  }, {
	    key: 'createHighlight',
	    value: function createHighlight(object) {
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { coords: new PIXI.Point(0, 0) };
	
	      var UI_CONTAINER_NAME = 'unit highlight';
	      var container = new this.FTW.createSpecialLayer('UILayer', { toLayer: this.FTW.layerTypes.movableType.id });
	      var objCoords = {
	        x: Number(object.x),
	        y: Number(object.y)
	      };
	      var highlighterObject = (0, _createHexagon.createVisibleHexagon)(this.RADIUS, { color: '#F0F0F0' });
	      highlighterObject.position.set(objCoords.x, objCoords.y);
	
	      highlighterObject.alpha = 0.5;
	
	      /* We add the children first to subcontainer, since it's much easier to handle the x and y in it, rather than
	       * handle graphics x and y */
	      container.addChild(highlighterObject);
	      container.addChild(object);
	
	      container.position = options.coords;
	
	      this.FTW.removeUIObject(this.FTW.layerTypes.movableType.id);
	      this.FTW.addUIObject(this.FTW.layerTypes.movableType.id, container, UI_CONTAINER_NAME);
	    }
	    /**
	     * @method addCSSRulesToScriptTag
	     *
	     * @param {Object} sheet
	     * @param {Object} rules
	     */
	
	  }, {
	    key: 'addCSSRulesToScriptTag',
	    value: function addCSSRulesToScriptTag(sheet, rules) {
	      sheet.insertRule(rules, 0);
	    }
	    /**
	     * @method addStyleElement
	     */
	
	  }, {
	    key: 'addStyleElement',
	    value: function addStyleElement() {
	      var _styleElement = document.createElement('style');
	      // WebKit hack :(
	      _styleElement.appendChild(document.createTextNode(''));
	      document.head.appendChild(_styleElement);
	
	      return _styleElement.sheet;
	    }
	    /**
	     * @method showModal
	     *
	     * @param {HTMLElement} modalElem
	     * @param {Object} cssClasses
	     * @todo make sure / check, that modalElem.classList.add gets added only once
	     */
	
	  }, {
	    key: 'showModal',
	    value: function showModal(data, getDatas) {
	      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'select';
	
	      //const objectDatas = getDatas.allData(object);
	      if (Array.isArray(data)) {
	        data = data.map(function (o) {
	          return getDatas.allData(o);
	        });
	        this.modal.innerHTML = templates.multiSelection({
	          title: 'Objects',
	          data: data
	        });
	      } else {
	        this.modal.innerHTML = templates.singleSelection({
	          title: 'Selected',
	          object: {
	            name: getDatas.allData(data).name
	          }
	        });
	      }
	
	      _getElement('select').style.display = 'block';
	
	      this.modal.classList.add(cssClasses[type]);
	    }
	  }]);
	
	  return UIDefault;
	}();
	
	/*----------------------
	------- PRIVATE --------
	----------------------*/
	/**
	 * @private
	 * @static
	 * @method _getElement
	 * @param  {[type]} which [description]
	 * @return {[type]}       [description]
	 */
	
	
	function _getElement(which) {
	  if (!elementList[which]) {
	    var element = document.querySelector(cssClasses[which]);
	    elementList[which] = element;
	  }
	
	  return elementList[which];
	}
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.default = UIDefault;
	module.exports = exports['default'];

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.singleSelection = exports.multiSelection = undefined;
	
	var _multiSelection = __webpack_require__(229);
	
	var _multiSelection2 = _interopRequireDefault(_multiSelection);
	
	var _singleSelection = __webpack_require__(249);
	
	var _singleSelection2 = _interopRequireDefault(_singleSelection);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.multiSelection = _multiSelection2.default;
	exports.singleSelection = _singleSelection2.default;

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	var Handlebars = __webpack_require__(230);
	function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
	module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
	    return "  <li>\r\n    "
	    + container.escapeExpression(container.lambda((depth0 != null ? depth0.name : depth0), depth0))
	    + "\r\n  </li>\r\n";
	},"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
	    var stack1, helper, alias1=depth0 != null ? depth0 : {};
	
	  return "<span style='font-size:200%;display:block;margin-bottom:20px;'>\r\n  "
	    + container.escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(alias1,{"name":"title","hash":{},"data":data}) : helper)))
	    + "\r\n</span>\r\n<ul>\r\n"
	    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.objects : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
	    + "</ul>";
	},"useData":true});

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	// Create a simple path alias to allow browserify to resolve
	// the runtime on a supported path.
	module.exports = __webpack_require__(231)['default'];


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	// istanbul ignore next
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	var _handlebarsBase = __webpack_require__(232);
	
	var base = _interopRequireWildcard(_handlebarsBase);
	
	// Each of these augment the Handlebars object. No need to setup here.
	// (This is done to easily share code between commonjs and browse envs)
	
	var _handlebarsSafeString = __webpack_require__(246);
	
	var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);
	
	var _handlebarsException = __webpack_require__(234);
	
	var _handlebarsException2 = _interopRequireDefault(_handlebarsException);
	
	var _handlebarsUtils = __webpack_require__(233);
	
	var Utils = _interopRequireWildcard(_handlebarsUtils);
	
	var _handlebarsRuntime = __webpack_require__(247);
	
	var runtime = _interopRequireWildcard(_handlebarsRuntime);
	
	var _handlebarsNoConflict = __webpack_require__(248);
	
	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);
	
	// For compatibility and usage outside of module systems, make the Handlebars object a namespace
	function create() {
	  var hb = new base.HandlebarsEnvironment();
	
	  Utils.extend(hb, base);
	  hb.SafeString = _handlebarsSafeString2['default'];
	  hb.Exception = _handlebarsException2['default'];
	  hb.Utils = Utils;
	  hb.escapeExpression = Utils.escapeExpression;
	
	  hb.VM = runtime;
	  hb.template = function (spec) {
	    return runtime.template(spec, hb);
	  };
	
	  return hb;
	}
	
	var inst = create();
	inst.create = create;
	
	_handlebarsNoConflict2['default'](inst);
	
	inst['default'] = inst;
	
	exports['default'] = inst;
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9oYW5kbGViYXJzLnJ1bnRpbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OEJBQXNCLG1CQUFtQjs7SUFBN0IsSUFBSTs7Ozs7b0NBSU8sMEJBQTBCOzs7O21DQUMzQix3QkFBd0I7Ozs7K0JBQ3ZCLG9CQUFvQjs7SUFBL0IsS0FBSzs7aUNBQ1Esc0JBQXNCOztJQUFuQyxPQUFPOztvQ0FFSSwwQkFBMEI7Ozs7O0FBR2pELFNBQVMsTUFBTSxHQUFHO0FBQ2hCLE1BQUksRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7O0FBRTFDLE9BQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3ZCLElBQUUsQ0FBQyxVQUFVLG9DQUFhLENBQUM7QUFDM0IsSUFBRSxDQUFDLFNBQVMsbUNBQVksQ0FBQztBQUN6QixJQUFFLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNqQixJQUFFLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDOztBQUU3QyxJQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQztBQUNoQixJQUFFLENBQUMsUUFBUSxHQUFHLFVBQVMsSUFBSSxFQUFFO0FBQzNCLFdBQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDbkMsQ0FBQzs7QUFFRixTQUFPLEVBQUUsQ0FBQztDQUNYOztBQUVELElBQUksSUFBSSxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDOztBQUVyQixrQ0FBVyxJQUFJLENBQUMsQ0FBQzs7QUFFakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQzs7cUJBRVIsSUFBSSIsImZpbGUiOiJoYW5kbGViYXJzLnJ1bnRpbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBiYXNlIGZyb20gJy4vaGFuZGxlYmFycy9iYXNlJztcblxuLy8gRWFjaCBvZiB0aGVzZSBhdWdtZW50IHRoZSBIYW5kbGViYXJzIG9iamVjdC4gTm8gbmVlZCB0byBzZXR1cCBoZXJlLlxuLy8gKFRoaXMgaXMgZG9uZSB0byBlYXNpbHkgc2hhcmUgY29kZSBiZXR3ZWVuIGNvbW1vbmpzIGFuZCBicm93c2UgZW52cylcbmltcG9ydCBTYWZlU3RyaW5nIGZyb20gJy4vaGFuZGxlYmFycy9zYWZlLXN0cmluZyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4vaGFuZGxlYmFycy9leGNlcHRpb24nO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi9oYW5kbGViYXJzL3V0aWxzJztcbmltcG9ydCAqIGFzIHJ1bnRpbWUgZnJvbSAnLi9oYW5kbGViYXJzL3J1bnRpbWUnO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG4vLyBGb3IgY29tcGF0aWJpbGl0eSBhbmQgdXNhZ2Ugb3V0c2lkZSBvZiBtb2R1bGUgc3lzdGVtcywgbWFrZSB0aGUgSGFuZGxlYmFycyBvYmplY3QgYSBuYW1lc3BhY2VcbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgbGV0IGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XG5cbiAgVXRpbHMuZXh0ZW5kKGhiLCBiYXNlKTtcbiAgaGIuU2FmZVN0cmluZyA9IFNhZmVTdHJpbmc7XG4gIGhiLkV4Y2VwdGlvbiA9IEV4Y2VwdGlvbjtcbiAgaGIuVXRpbHMgPSBVdGlscztcbiAgaGIuZXNjYXBlRXhwcmVzc2lvbiA9IFV0aWxzLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgaGIuVk0gPSBydW50aW1lO1xuICBoYi50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHNwZWMpIHtcbiAgICByZXR1cm4gcnVudGltZS50ZW1wbGF0ZShzcGVjLCBoYik7XG4gIH07XG5cbiAgcmV0dXJuIGhiO1xufVxuXG5sZXQgaW5zdCA9IGNyZWF0ZSgpO1xuaW5zdC5jcmVhdGUgPSBjcmVhdGU7XG5cbm5vQ29uZmxpY3QoaW5zdCk7XG5cbmluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3Q7XG4iXX0=


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.HandlebarsEnvironment = HandlebarsEnvironment;
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _utils = __webpack_require__(233);
	
	var _exception = __webpack_require__(234);
	
	var _exception2 = _interopRequireDefault(_exception);
	
	var _helpers = __webpack_require__(235);
	
	var _decorators = __webpack_require__(243);
	
	var _logger = __webpack_require__(245);
	
	var _logger2 = _interopRequireDefault(_logger);
	
	var VERSION = '4.0.5';
	exports.VERSION = VERSION;
	var COMPILER_REVISION = 7;
	
	exports.COMPILER_REVISION = COMPILER_REVISION;
	var REVISION_CHANGES = {
	  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
	  2: '== 1.0.0-rc.3',
	  3: '== 1.0.0-rc.4',
	  4: '== 1.x.x',
	  5: '== 2.0.0-alpha.x',
	  6: '>= 2.0.0-beta.1',
	  7: '>= 4.0.0'
	};
	
	exports.REVISION_CHANGES = REVISION_CHANGES;
	var objectType = '[object Object]';
	
	function HandlebarsEnvironment(helpers, partials, decorators) {
	  this.helpers = helpers || {};
	  this.partials = partials || {};
	  this.decorators = decorators || {};
	
	  _helpers.registerDefaultHelpers(this);
	  _decorators.registerDefaultDecorators(this);
	}
	
	HandlebarsEnvironment.prototype = {
	  constructor: HandlebarsEnvironment,
	
	  logger: _logger2['default'],
	  log: _logger2['default'].log,
	
	  registerHelper: function registerHelper(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple helpers');
	      }
	      _utils.extend(this.helpers, name);
	    } else {
	      this.helpers[name] = fn;
	    }
	  },
	  unregisterHelper: function unregisterHelper(name) {
	    delete this.helpers[name];
	  },
	
	  registerPartial: function registerPartial(name, partial) {
	    if (_utils.toString.call(name) === objectType) {
	      _utils.extend(this.partials, name);
	    } else {
	      if (typeof partial === 'undefined') {
	        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
	      }
	      this.partials[name] = partial;
	    }
	  },
	  unregisterPartial: function unregisterPartial(name) {
	    delete this.partials[name];
	  },
	
	  registerDecorator: function registerDecorator(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple decorators');
	      }
	      _utils.extend(this.decorators, name);
	    } else {
	      this.decorators[name] = fn;
	    }
	  },
	  unregisterDecorator: function unregisterDecorator(name) {
	    delete this.decorators[name];
	  }
	};
	
	var log = _logger2['default'].log;
	
	exports.log = log;
	exports.createFrame = _utils.createFrame;
	exports.logger = _logger2['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2Jhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7cUJBQTRDLFNBQVM7O3lCQUMvQixhQUFhOzs7O3VCQUNFLFdBQVc7OzBCQUNSLGNBQWM7O3NCQUNuQyxVQUFVOzs7O0FBRXRCLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQzs7QUFDeEIsSUFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7OztBQUU1QixJQUFNLGdCQUFnQixHQUFHO0FBQzlCLEdBQUMsRUFBRSxhQUFhO0FBQ2hCLEdBQUMsRUFBRSxlQUFlO0FBQ2xCLEdBQUMsRUFBRSxlQUFlO0FBQ2xCLEdBQUMsRUFBRSxVQUFVO0FBQ2IsR0FBQyxFQUFFLGtCQUFrQjtBQUNyQixHQUFDLEVBQUUsaUJBQWlCO0FBQ3BCLEdBQUMsRUFBRSxVQUFVO0NBQ2QsQ0FBQzs7O0FBRUYsSUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUM7O0FBRTlCLFNBQVMscUJBQXFCLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUU7QUFDbkUsTUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0FBQzdCLE1BQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxJQUFJLEVBQUUsQ0FBQztBQUMvQixNQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxFQUFFLENBQUM7O0FBRW5DLGtDQUF1QixJQUFJLENBQUMsQ0FBQztBQUM3Qix3Q0FBMEIsSUFBSSxDQUFDLENBQUM7Q0FDakM7O0FBRUQscUJBQXFCLENBQUMsU0FBUyxHQUFHO0FBQ2hDLGFBQVcsRUFBRSxxQkFBcUI7O0FBRWxDLFFBQU0scUJBQVE7QUFDZCxLQUFHLEVBQUUsb0JBQU8sR0FBRzs7QUFFZixnQkFBYyxFQUFFLHdCQUFTLElBQUksRUFBRSxFQUFFLEVBQUU7QUFDakMsUUFBSSxnQkFBUyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFO0FBQ3RDLFVBQUksRUFBRSxFQUFFO0FBQUUsY0FBTSwyQkFBYyx5Q0FBeUMsQ0FBQyxDQUFDO09BQUU7QUFDM0Usb0JBQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM1QixNQUFNO0FBQ0wsVUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDekI7R0FDRjtBQUNELGtCQUFnQixFQUFFLDBCQUFTLElBQUksRUFBRTtBQUMvQixXQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDM0I7O0FBRUQsaUJBQWUsRUFBRSx5QkFBUyxJQUFJLEVBQUUsT0FBTyxFQUFFO0FBQ3ZDLFFBQUksZ0JBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFVBQVUsRUFBRTtBQUN0QyxvQkFBTyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzdCLE1BQU07QUFDTCxVQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsRUFBRTtBQUNsQyxjQUFNLHlFQUEwRCxJQUFJLG9CQUFpQixDQUFDO09BQ3ZGO0FBQ0QsVUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUM7S0FDL0I7R0FDRjtBQUNELG1CQUFpQixFQUFFLDJCQUFTLElBQUksRUFBRTtBQUNoQyxXQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDNUI7O0FBRUQsbUJBQWlCLEVBQUUsMkJBQVMsSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUNwQyxRQUFJLGdCQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxVQUFVLEVBQUU7QUFDdEMsVUFBSSxFQUFFLEVBQUU7QUFBRSxjQUFNLDJCQUFjLDRDQUE0QyxDQUFDLENBQUM7T0FBRTtBQUM5RSxvQkFBTyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQy9CLE1BQU07QUFDTCxVQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUM1QjtHQUNGO0FBQ0QscUJBQW1CLEVBQUUsNkJBQVMsSUFBSSxFQUFFO0FBQ2xDLFdBQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUM5QjtDQUNGLENBQUM7O0FBRUssSUFBSSxHQUFHLEdBQUcsb0JBQU8sR0FBRyxDQUFDOzs7UUFFcEIsV0FBVztRQUFFLE1BQU0iLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3JlYXRlRnJhbWUsIGV4dGVuZCwgdG9TdHJpbmd9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2V4Y2VwdGlvbic7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdEhlbHBlcnN9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnN9IGZyb20gJy4vZGVjb3JhdG9ycyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnNC4wLjUnO1xuZXhwb3J0IGNvbnN0IENPTVBJTEVSX1JFVklTSU9OID0gNztcblxuZXhwb3J0IGNvbnN0IFJFVklTSU9OX0NIQU5HRVMgPSB7XG4gIDE6ICc8PSAxLjAucmMuMicsIC8vIDEuMC5yYy4yIGlzIGFjdHVhbGx5IHJldjIgYnV0IGRvZXNuJ3QgcmVwb3J0IGl0XG4gIDI6ICc9PSAxLjAuMC1yYy4zJyxcbiAgMzogJz09IDEuMC4wLXJjLjQnLFxuICA0OiAnPT0gMS54LngnLFxuICA1OiAnPT0gMi4wLjAtYWxwaGEueCcsXG4gIDY6ICc+PSAyLjAuMC1iZXRhLjEnLFxuICA3OiAnPj0gNC4wLjAnXG59O1xuXG5jb25zdCBvYmplY3RUeXBlID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBIYW5kbGViYXJzRW52aXJvbm1lbnQoaGVscGVycywgcGFydGlhbHMsIGRlY29yYXRvcnMpIHtcbiAgdGhpcy5oZWxwZXJzID0gaGVscGVycyB8fCB7fTtcbiAgdGhpcy5wYXJ0aWFscyA9IHBhcnRpYWxzIHx8IHt9O1xuICB0aGlzLmRlY29yYXRvcnMgPSBkZWNvcmF0b3JzIHx8IHt9O1xuXG4gIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnModGhpcyk7XG4gIHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnModGhpcyk7XG59XG5cbkhhbmRsZWJhcnNFbnZpcm9ubWVudC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBIYW5kbGViYXJzRW52aXJvbm1lbnQsXG5cbiAgbG9nZ2VyOiBsb2dnZXIsXG4gIGxvZzogbG9nZ2VyLmxvZyxcblxuICByZWdpc3RlckhlbHBlcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7IHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgaGVscGVycycpOyB9XG4gICAgICBleHRlbmQodGhpcy5oZWxwZXJzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oZWxwZXJzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuaGVscGVyc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUsIHBhcnRpYWwpIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgZXh0ZW5kKHRoaXMucGFydGlhbHMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnRpYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oYEF0dGVtcHRpbmcgdG8gcmVnaXN0ZXIgYSBwYXJ0aWFsIGNhbGxlZCBcIiR7bmFtZX1cIiBhcyB1bmRlZmluZWRgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFydGlhbHNbbmFtZV0gPSBwYXJ0aWFsO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5wYXJ0aWFsc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7IHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgZGVjb3JhdG9ycycpOyB9XG4gICAgICBleHRlbmQodGhpcy5kZWNvcmF0b3JzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWNvcmF0b3JzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuZGVjb3JhdG9yc1tuYW1lXTtcbiAgfVxufTtcblxuZXhwb3J0IGxldCBsb2cgPSBsb2dnZXIubG9nO1xuXG5leHBvcnQge2NyZWF0ZUZyYW1lLCBsb2dnZXJ9O1xuIl19


/***/ },
/* 233 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.extend = extend;
	exports.indexOf = indexOf;
	exports.escapeExpression = escapeExpression;
	exports.isEmpty = isEmpty;
	exports.createFrame = createFrame;
	exports.blockParams = blockParams;
	exports.appendContextPath = appendContextPath;
	var escape = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  "'": '&#x27;',
	  '`': '&#x60;',
	  '=': '&#x3D;'
	};
	
	var badChars = /[&<>"'`=]/g,
	    possible = /[&<>"'`=]/;
	
	function escapeChar(chr) {
	  return escape[chr];
	}
	
	function extend(obj /* , ...source */) {
	  for (var i = 1; i < arguments.length; i++) {
	    for (var key in arguments[i]) {
	      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
	        obj[key] = arguments[i][key];
	      }
	    }
	  }
	
	  return obj;
	}
	
	var toString = Object.prototype.toString;
	
	exports.toString = toString;
	// Sourced from lodash
	// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
	/* eslint-disable func-style */
	var isFunction = function isFunction(value) {
	  return typeof value === 'function';
	};
	// fallback for older versions of Chrome and Safari
	/* istanbul ignore next */
	if (isFunction(/x/)) {
	  exports.isFunction = isFunction = function (value) {
	    return typeof value === 'function' && toString.call(value) === '[object Function]';
	  };
	}
	exports.isFunction = isFunction;
	
	/* eslint-enable func-style */
	
	/* istanbul ignore next */
	var isArray = Array.isArray || function (value) {
	  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
	};
	
	exports.isArray = isArray;
	// Older IE versions do not directly support indexOf so we must implement our own, sadly.
	
	function indexOf(array, value) {
	  for (var i = 0, len = array.length; i < len; i++) {
	    if (array[i] === value) {
	      return i;
	    }
	  }
	  return -1;
	}
	
	function escapeExpression(string) {
	  if (typeof string !== 'string') {
	    // don't escape SafeStrings, since they're already safe
	    if (string && string.toHTML) {
	      return string.toHTML();
	    } else if (string == null) {
	      return '';
	    } else if (!string) {
	      return string + '';
	    }
	
	    // Force a string conversion as this will be done by the append regardless and
	    // the regex test will do this transparently behind the scenes, causing issues if
	    // an object's to string has escaped characters in it.
	    string = '' + string;
	  }
	
	  if (!possible.test(string)) {
	    return string;
	  }
	  return string.replace(badChars, escapeChar);
	}
	
	function isEmpty(value) {
	  if (!value && value !== 0) {
	    return true;
	  } else if (isArray(value) && value.length === 0) {
	    return true;
	  } else {
	    return false;
	  }
	}
	
	function createFrame(object) {
	  var frame = extend({}, object);
	  frame._parent = object;
	  return frame;
	}
	
	function blockParams(params, ids) {
	  params.path = ids;
	  return params;
	}
	
	function appendContextPath(contextPath, id) {
	  return (contextPath ? contextPath + '.' : '') + id;
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFNLE1BQU0sR0FBRztBQUNiLEtBQUcsRUFBRSxPQUFPO0FBQ1osS0FBRyxFQUFFLE1BQU07QUFDWCxLQUFHLEVBQUUsTUFBTTtBQUNYLEtBQUcsRUFBRSxRQUFRO0FBQ2IsS0FBRyxFQUFFLFFBQVE7QUFDYixLQUFHLEVBQUUsUUFBUTtBQUNiLEtBQUcsRUFBRSxRQUFRO0NBQ2QsQ0FBQzs7QUFFRixJQUFNLFFBQVEsR0FBRyxZQUFZO0lBQ3ZCLFFBQVEsR0FBRyxXQUFXLENBQUM7O0FBRTdCLFNBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRTtBQUN2QixTQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNwQjs7QUFFTSxTQUFTLE1BQU0sQ0FBQyxHQUFHLG9CQUFtQjtBQUMzQyxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN6QyxTQUFLLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUM1QixVQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7QUFDM0QsV0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUM5QjtLQUNGO0dBQ0Y7O0FBRUQsU0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFTSxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQzs7Ozs7O0FBS2hELElBQUksVUFBVSxHQUFHLG9CQUFTLEtBQUssRUFBRTtBQUMvQixTQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsQ0FBQztDQUNwQyxDQUFDOzs7QUFHRixJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNuQixVQUlNLFVBQVUsR0FKaEIsVUFBVSxHQUFHLFVBQVMsS0FBSyxFQUFFO0FBQzNCLFdBQU8sT0FBTyxLQUFLLEtBQUssVUFBVSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssbUJBQW1CLENBQUM7R0FDcEYsQ0FBQztDQUNIO1FBQ08sVUFBVSxHQUFWLFVBQVU7Ozs7O0FBSVgsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sSUFBSSxVQUFTLEtBQUssRUFBRTtBQUN0RCxTQUFPLEFBQUMsS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsR0FBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLGdCQUFnQixHQUFHLEtBQUssQ0FBQztDQUNqRyxDQUFDOzs7OztBQUdLLFNBQVMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDcEMsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNoRCxRQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUU7QUFDdEIsYUFBTyxDQUFDLENBQUM7S0FDVjtHQUNGO0FBQ0QsU0FBTyxDQUFDLENBQUMsQ0FBQztDQUNYOztBQUdNLFNBQVMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO0FBQ3ZDLE1BQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFOztBQUU5QixRQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQzNCLGFBQU8sTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ3hCLE1BQU0sSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO0FBQ3pCLGFBQU8sRUFBRSxDQUFDO0tBQ1gsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ2xCLGFBQU8sTUFBTSxHQUFHLEVBQUUsQ0FBQztLQUNwQjs7Ozs7QUFLRCxVQUFNLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQztHQUN0Qjs7QUFFRCxNQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUFFLFdBQU8sTUFBTSxDQUFDO0dBQUU7QUFDOUMsU0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztDQUM3Qzs7QUFFTSxTQUFTLE9BQU8sQ0FBQyxLQUFLLEVBQUU7QUFDN0IsTUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLFdBQU8sSUFBSSxDQUFDO0dBQ2IsTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUMvQyxXQUFPLElBQUksQ0FBQztHQUNiLE1BQU07QUFDTCxXQUFPLEtBQUssQ0FBQztHQUNkO0NBQ0Y7O0FBRU0sU0FBUyxXQUFXLENBQUMsTUFBTSxFQUFFO0FBQ2xDLE1BQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0IsT0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDdkIsU0FBTyxLQUFLLENBQUM7Q0FDZDs7QUFFTSxTQUFTLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO0FBQ3ZDLFFBQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQ2xCLFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRU0sU0FBUyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUFFO0FBQ2pELFNBQU8sQ0FBQyxXQUFXLEdBQUcsV0FBVyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUEsR0FBSSxFQUFFLENBQUM7Q0FDcEQiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBlc2NhcGUgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmI3gyNzsnLFxuICAnYCc6ICcmI3g2MDsnLFxuICAnPSc6ICcmI3gzRDsnXG59O1xuXG5jb25zdCBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXG4gICAgICBwb3NzaWJsZSA9IC9bJjw+XCInYD1dLztcblxuZnVuY3Rpb24gZXNjYXBlQ2hhcihjaHIpIHtcbiAgcmV0dXJuIGVzY2FwZVtjaHJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKG9iai8qICwgLi4uc291cmNlICovKSB7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQga2V5IGluIGFyZ3VtZW50c1tpXSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcmd1bWVudHNbaV0sIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgbGV0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLy8gU291cmNlZCBmcm9tIGxvZGFzaFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL2xvZGFzaC9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dFxuLyogZXNsaW50LWRpc2FibGUgZnVuYy1zdHlsZSAqL1xubGV0IGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcbi8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgfTtcbn1cbmV4cG9ydCB7aXNGdW5jdGlvbn07XG4vKiBlc2xpbnQtZW5hYmxlIGZ1bmMtc3R5bGUgKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpID8gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XScgOiBmYWxzZTtcbn07XG5cbi8vIE9sZGVyIElFIHZlcnNpb25zIGRvIG5vdCBkaXJlY3RseSBzdXBwb3J0IGluZGV4T2Ygc28gd2UgbXVzdCBpbXBsZW1lbnQgb3VyIG93biwgc2FkbHkuXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGFycmF5W2ldID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgZXNjYXBlIFNhZmVTdHJpbmdzLCBzaW5jZSB0aGV5J3JlIGFscmVhZHkgc2FmZVxuICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xuICAgICAgcmV0dXJuIHN0cmluZy50b0hUTUwoKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nICsgJyc7XG4gICAgfVxuXG4gICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXG4gICAgLy8gdGhlIHJlZ2V4IHRlc3Qgd2lsbCBkbyB0aGlzIHRyYW5zcGFyZW50bHkgYmVoaW5kIHRoZSBzY2VuZXMsIGNhdXNpbmcgaXNzdWVzIGlmXG4gICAgLy8gYW4gb2JqZWN0J3MgdG8gc3RyaW5nIGhhcyBlc2NhcGVkIGNoYXJhY3RlcnMgaW4gaXQuXG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XG4gIH1cblxuICBpZiAoIXBvc3NpYmxlLnRlc3Qoc3RyaW5nKSkgeyByZXR1cm4gc3RyaW5nOyB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShiYWRDaGFycywgZXNjYXBlQ2hhcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZyYW1lKG9iamVjdCkge1xuICBsZXQgZnJhbWUgPSBleHRlbmQoe30sIG9iamVjdCk7XG4gIGZyYW1lLl9wYXJlbnQgPSBvYmplY3Q7XG4gIHJldHVybiBmcmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrUGFyYW1zKHBhcmFtcywgaWRzKSB7XG4gIHBhcmFtcy5wYXRoID0gaWRzO1xuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kQ29udGV4dFBhdGgoY29udGV4dFBhdGgsIGlkKSB7XG4gIHJldHVybiAoY29udGV4dFBhdGggPyBjb250ZXh0UGF0aCArICcuJyA6ICcnKSArIGlkO1xufVxuIl19


/***/ },
/* 234 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	
	var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];
	
	function Exception(message, node) {
	  var loc = node && node.loc,
	      line = undefined,
	      column = undefined;
	  if (loc) {
	    line = loc.start.line;
	    column = loc.start.column;
	
	    message += ' - ' + line + ':' + column;
	  }
	
	  var tmp = Error.prototype.constructor.call(this, message);
	
	  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
	  for (var idx = 0; idx < errorProps.length; idx++) {
	    this[errorProps[idx]] = tmp[errorProps[idx]];
	  }
	
	  /* istanbul ignore else */
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, Exception);
	  }
	
	  if (loc) {
	    this.lineNumber = line;
	    this.column = column;
	  }
	}
	
	Exception.prototype = new Error();
	
	exports['default'] = Exception;
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2V4Y2VwdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsSUFBTSxVQUFVLEdBQUcsQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQzs7QUFFbkcsU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRTtBQUNoQyxNQUFJLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUc7TUFDdEIsSUFBSSxZQUFBO01BQ0osTUFBTSxZQUFBLENBQUM7QUFDWCxNQUFJLEdBQUcsRUFBRTtBQUNQLFFBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztBQUN0QixVQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7O0FBRTFCLFdBQU8sSUFBSSxLQUFLLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUM7R0FDeEM7O0FBRUQsTUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQzs7O0FBRzFELE9BQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFO0FBQ2hELFFBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7R0FDOUM7OztBQUdELE1BQUksS0FBSyxDQUFDLGlCQUFpQixFQUFFO0FBQzNCLFNBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7R0FDMUM7O0FBRUQsTUFBSSxHQUFHLEVBQUU7QUFDUCxRQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztBQUN2QixRQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztHQUN0QjtDQUNGOztBQUVELFNBQVMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQzs7cUJBRW5CLFNBQVMiLCJmaWxlIjoiZXhjZXB0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBlcnJvclByb3BzID0gWydkZXNjcmlwdGlvbicsICdmaWxlTmFtZScsICdsaW5lTnVtYmVyJywgJ21lc3NhZ2UnLCAnbmFtZScsICdudW1iZXInLCAnc3RhY2snXTtcblxuZnVuY3Rpb24gRXhjZXB0aW9uKG1lc3NhZ2UsIG5vZGUpIHtcbiAgbGV0IGxvYyA9IG5vZGUgJiYgbm9kZS5sb2MsXG4gICAgICBsaW5lLFxuICAgICAgY29sdW1uO1xuICBpZiAobG9jKSB7XG4gICAgbGluZSA9IGxvYy5zdGFydC5saW5lO1xuICAgIGNvbHVtbiA9IGxvYy5zdGFydC5jb2x1bW47XG5cbiAgICBtZXNzYWdlICs9ICcgLSAnICsgbGluZSArICc6JyArIGNvbHVtbjtcbiAgfVxuXG4gIGxldCB0bXAgPSBFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcblxuICAvLyBVbmZvcnR1bmF0ZWx5IGVycm9ycyBhcmUgbm90IGVudW1lcmFibGUgaW4gQ2hyb21lIChhdCBsZWFzdCksIHNvIGBmb3IgcHJvcCBpbiB0bXBgIGRvZXNuJ3Qgd29yay5cbiAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZXJyb3JQcm9wcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdGhpc1tlcnJvclByb3BzW2lkeF1dID0gdG1wW2Vycm9yUHJvcHNbaWR4XV07XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFeGNlcHRpb24pO1xuICB9XG5cbiAgaWYgKGxvYykge1xuICAgIHRoaXMubGluZU51bWJlciA9IGxpbmU7XG4gICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gIH1cbn1cblxuRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuXG5leHBvcnQgZGVmYXVsdCBFeGNlcHRpb247XG4iXX0=


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.registerDefaultHelpers = registerDefaultHelpers;
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _helpersBlockHelperMissing = __webpack_require__(236);
	
	var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);
	
	var _helpersEach = __webpack_require__(237);
	
	var _helpersEach2 = _interopRequireDefault(_helpersEach);
	
	var _helpersHelperMissing = __webpack_require__(238);
	
	var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);
	
	var _helpersIf = __webpack_require__(239);
	
	var _helpersIf2 = _interopRequireDefault(_helpersIf);
	
	var _helpersLog = __webpack_require__(240);
	
	var _helpersLog2 = _interopRequireDefault(_helpersLog);
	
	var _helpersLookup = __webpack_require__(241);
	
	var _helpersLookup2 = _interopRequireDefault(_helpersLookup);
	
	var _helpersWith = __webpack_require__(242);
	
	var _helpersWith2 = _interopRequireDefault(_helpersWith);
	
	function registerDefaultHelpers(instance) {
	  _helpersBlockHelperMissing2['default'](instance);
	  _helpersEach2['default'](instance);
	  _helpersHelperMissing2['default'](instance);
	  _helpersIf2['default'](instance);
	  _helpersLog2['default'](instance);
	  _helpersLookup2['default'](instance);
	  _helpersWith2['default'](instance);
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7eUNBQXVDLGdDQUFnQzs7OzsyQkFDOUMsZ0JBQWdCOzs7O29DQUNQLDBCQUEwQjs7Ozt5QkFDckMsY0FBYzs7OzswQkFDYixlQUFlOzs7OzZCQUNaLGtCQUFrQjs7OzsyQkFDcEIsZ0JBQWdCOzs7O0FBRWxDLFNBQVMsc0JBQXNCLENBQUMsUUFBUSxFQUFFO0FBQy9DLHlDQUEyQixRQUFRLENBQUMsQ0FBQztBQUNyQywyQkFBYSxRQUFRLENBQUMsQ0FBQztBQUN2QixvQ0FBc0IsUUFBUSxDQUFDLENBQUM7QUFDaEMseUJBQVcsUUFBUSxDQUFDLENBQUM7QUFDckIsMEJBQVksUUFBUSxDQUFDLENBQUM7QUFDdEIsNkJBQWUsUUFBUSxDQUFDLENBQUM7QUFDekIsMkJBQWEsUUFBUSxDQUFDLENBQUM7Q0FDeEIiLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZWdpc3RlckJsb2NrSGVscGVyTWlzc2luZyBmcm9tICcuL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcnO1xuaW1wb3J0IHJlZ2lzdGVyRWFjaCBmcm9tICcuL2hlbHBlcnMvZWFjaCc7XG5pbXBvcnQgcmVnaXN0ZXJIZWxwZXJNaXNzaW5nIGZyb20gJy4vaGVscGVycy9oZWxwZXItbWlzc2luZyc7XG5pbXBvcnQgcmVnaXN0ZXJJZiBmcm9tICcuL2hlbHBlcnMvaWYnO1xuaW1wb3J0IHJlZ2lzdGVyTG9nIGZyb20gJy4vaGVscGVycy9sb2cnO1xuaW1wb3J0IHJlZ2lzdGVyTG9va3VwIGZyb20gJy4vaGVscGVycy9sb29rdXAnO1xuaW1wb3J0IHJlZ2lzdGVyV2l0aCBmcm9tICcuL2hlbHBlcnMvd2l0aCc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHRIZWxwZXJzKGluc3RhbmNlKSB7XG4gIHJlZ2lzdGVyQmxvY2tIZWxwZXJNaXNzaW5nKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJFYWNoKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJIZWxwZXJNaXNzaW5nKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJJZihpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyTG9nKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJMb29rdXAoaW5zdGFuY2UpO1xuICByZWdpc3RlcldpdGgoaW5zdGFuY2UpO1xufVxuIl19


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _utils = __webpack_require__(233);
	
	exports['default'] = function (instance) {
	  instance.registerHelper('blockHelperMissing', function (context, options) {
	    var inverse = options.inverse,
	        fn = options.fn;
	
	    if (context === true) {
	      return fn(this);
	    } else if (context === false || context == null) {
	      return inverse(this);
	    } else if (_utils.isArray(context)) {
	      if (context.length > 0) {
	        if (options.ids) {
	          options.ids = [options.name];
	        }
	
	        return instance.helpers.each(context, options);
	      } else {
	        return inverse(this);
	      }
	    } else {
	      if (options.data && options.ids) {
	        var data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
	        options = { data: data };
	      }
	
	      return fn(context, options);
	    }
	  });
	};
	
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztxQkFBc0QsVUFBVTs7cUJBRWpELFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3ZFLFFBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPO1FBQ3pCLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUVwQixRQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7QUFDcEIsYUFBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakIsTUFBTSxJQUFJLE9BQU8sS0FBSyxLQUFLLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtBQUMvQyxhQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0QixNQUFNLElBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUMzQixVQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3RCLFlBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUNmLGlCQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCOztBQUVELGVBQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO09BQ2hELE1BQU07QUFDTCxlQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUN0QjtLQUNGLE1BQU07QUFDTCxVQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixZQUFJLElBQUksR0FBRyxtQkFBWSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDckMsWUFBSSxDQUFDLFdBQVcsR0FBRyx5QkFBa0IsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdFLGVBQU8sR0FBRyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQztPQUN4Qjs7QUFFRCxhQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDN0I7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJibG9jay1oZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGNyZWF0ZUZyYW1lLCBpc0FycmF5fSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgbGV0IGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmIChjb250ZXh0ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZm4odGhpcyk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0ID09PSBmYWxzZSB8fCBjb250ZXh0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGxldCBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5uYW1lKTtcbiAgICAgICAgb3B0aW9ucyA9IHtkYXRhOiBkYXRhfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _utils = __webpack_require__(233);
	
	var _exception = __webpack_require__(234);
	
	var _exception2 = _interopRequireDefault(_exception);
	
	exports['default'] = function (instance) {
	  instance.registerHelper('each', function (context, options) {
	    if (!options) {
	      throw new _exception2['default']('Must pass iterator to #each');
	    }
	
	    var fn = options.fn,
	        inverse = options.inverse,
	        i = 0,
	        ret = '',
	        data = undefined,
	        contextPath = undefined;
	
	    if (options.data && options.ids) {
	      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
	    }
	
	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }
	
	    if (options.data) {
	      data = _utils.createFrame(options.data);
	    }
	
	    function execIteration(field, index, last) {
	      if (data) {
	        data.key = field;
	        data.index = index;
	        data.first = index === 0;
	        data.last = !!last;
	
	        if (contextPath) {
	          data.contextPath = contextPath + field;
	        }
	      }
	
	      ret = ret + fn(context[field], {
	        data: data,
	        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
	      });
	    }
	
	    if (context && typeof context === 'object') {
	      if (_utils.isArray(context)) {
	        for (var j = context.length; i < j; i++) {
	          if (i in context) {
	            execIteration(i, i, i === context.length - 1);
	          }
	        }
	      } else {
	        var priorKey = undefined;
	
	        for (var key in context) {
	          if (context.hasOwnProperty(key)) {
	            // We're running the iterations one step out of sync so we can detect
	            // the last iteration without have to scan the object twice and create
	            // an itermediate keys array.
	            if (priorKey !== undefined) {
	              execIteration(priorKey, i - 1);
	            }
	            priorKey = key;
	            i++;
	          }
	        }
	        if (priorKey !== undefined) {
	          execIteration(priorKey, i - 1, true);
	        }
	      }
	    }
	
	    if (i === 0) {
	      ret = inverse(this);
	    }
	
	    return ret;
	  });
	};
	
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvZWFjaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O3FCQUErRSxVQUFVOzt5QkFDbkUsY0FBYzs7OztxQkFFckIsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3pELFFBQUksQ0FBQyxPQUFPLEVBQUU7QUFDWixZQUFNLDJCQUFjLDZCQUE2QixDQUFDLENBQUM7S0FDcEQ7O0FBRUQsUUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFDZixPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU87UUFDekIsQ0FBQyxHQUFHLENBQUM7UUFDTCxHQUFHLEdBQUcsRUFBRTtRQUNSLElBQUksWUFBQTtRQUNKLFdBQVcsWUFBQSxDQUFDOztBQUVoQixRQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixpQkFBVyxHQUFHLHlCQUFrQixPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ2pGOztBQUVELFFBQUksa0JBQVcsT0FBTyxDQUFDLEVBQUU7QUFBRSxhQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUFFOztBQUUxRCxRQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUU7QUFDaEIsVUFBSSxHQUFHLG1CQUFZLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNsQzs7QUFFRCxhQUFTLGFBQWEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtBQUN6QyxVQUFJLElBQUksRUFBRTtBQUNSLFlBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ2pCLFlBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ25CLFlBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxLQUFLLENBQUMsQ0FBQztBQUN6QixZQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7O0FBRW5CLFlBQUksV0FBVyxFQUFFO0FBQ2YsY0FBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLEdBQUcsS0FBSyxDQUFDO1NBQ3hDO09BQ0Y7O0FBRUQsU0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzdCLFlBQUksRUFBRSxJQUFJO0FBQ1YsbUJBQVcsRUFBRSxtQkFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLFdBQVcsR0FBRyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7T0FDL0UsQ0FBQyxDQUFDO0tBQ0o7O0FBRUQsUUFBSSxPQUFPLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO0FBQzFDLFVBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUNwQixhQUFLLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN2QyxjQUFJLENBQUMsSUFBSSxPQUFPLEVBQUU7QUFDaEIseUJBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1dBQy9DO1NBQ0Y7T0FDRixNQUFNO0FBQ0wsWUFBSSxRQUFRLFlBQUEsQ0FBQzs7QUFFYixhQUFLLElBQUksR0FBRyxJQUFJLE9BQU8sRUFBRTtBQUN2QixjQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7Ozs7QUFJL0IsZ0JBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUMxQiwyQkFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDaEM7QUFDRCxvQkFBUSxHQUFHLEdBQUcsQ0FBQztBQUNmLGFBQUMsRUFBRSxDQUFDO1dBQ0w7U0FDRjtBQUNELFlBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUMxQix1QkFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3RDO09BQ0Y7S0FDRjs7QUFFRCxRQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDWCxTQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3JCOztBQUVELFdBQU8sR0FBRyxDQUFDO0dBQ1osQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoiZWFjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGJsb2NrUGFyYW1zLCBjcmVhdGVGcmFtZSwgaXNBcnJheSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ011c3QgcGFzcyBpdGVyYXRvciB0byAjZWFjaCcpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm4sXG4gICAgICAgIGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICByZXQgPSAnJyxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dFBhdGg7XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICBjb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pICsgJy4nO1xuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRleHQpKSB7IGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7IH1cblxuICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4ZWNJdGVyYXRpb24oZmllbGQsIGluZGV4LCBsYXN0KSB7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBkYXRhLmtleSA9IGZpZWxkO1xuICAgICAgICBkYXRhLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIGRhdGEuZmlyc3QgPSBpbmRleCA9PT0gMDtcbiAgICAgICAgZGF0YS5sYXN0ID0gISFsYXN0O1xuXG4gICAgICAgIGlmIChjb250ZXh0UGF0aCkge1xuICAgICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBjb250ZXh0UGF0aCArIGZpZWxkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldCA9IHJldCArIGZuKGNvbnRleHRbZmllbGRdLCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dFtmaWVsZF0sIGZpZWxkXSwgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgICBmb3IgKGxldCBqID0gY29udGV4dC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBpZiAoaSBpbiBjb250ZXh0KSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKGksIGksIGkgPT09IGNvbnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJpb3JLZXk7XG5cbiAgICAgICAgZm9yIChsZXQga2V5IGluIGNvbnRleHQpIHtcbiAgICAgICAgICBpZiAoY29udGV4dC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAvLyBXZSdyZSBydW5uaW5nIHRoZSBpdGVyYXRpb25zIG9uZSBzdGVwIG91dCBvZiBzeW5jIHNvIHdlIGNhbiBkZXRlY3RcbiAgICAgICAgICAgIC8vIHRoZSBsYXN0IGl0ZXJhdGlvbiB3aXRob3V0IGhhdmUgdG8gc2NhbiB0aGUgb2JqZWN0IHR3aWNlIGFuZCBjcmVhdGVcbiAgICAgICAgICAgIC8vIGFuIGl0ZXJtZWRpYXRlIGtleXMgYXJyYXkuXG4gICAgICAgICAgICBpZiAocHJpb3JLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmlvcktleSA9IGtleTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgcmV0ID0gaW52ZXJzZSh0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn1cbiJdfQ==


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _exception = __webpack_require__(234);
	
	var _exception2 = _interopRequireDefault(_exception);
	
	exports['default'] = function (instance) {
	  instance.registerHelper('helperMissing', function () /* [args, ]options */{
	    if (arguments.length === 1) {
	      // A missing field in a {{foo}} construct.
	      return undefined;
	    } else {
	      // Someone is actually trying to call something, blow up.
	      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
	    }
	  });
	};
	
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozt5QkFBc0IsY0FBYzs7OztxQkFFckIsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsaUNBQWdDO0FBQ3ZFLFFBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7O0FBRTFCLGFBQU8sU0FBUyxDQUFDO0tBQ2xCLE1BQU07O0FBRUwsWUFBTSwyQkFBYyxtQkFBbUIsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7S0FDdkY7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJoZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbigvKiBbYXJncywgXW9wdGlvbnMgKi8pIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gQSBtaXNzaW5nIGZpZWxkIGluIGEge3tmb299fSBjb25zdHJ1Y3QuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTb21lb25lIGlzIGFjdHVhbGx5IHRyeWluZyB0byBjYWxsIHNvbWV0aGluZywgYmxvdyB1cC5cbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ01pc3NpbmcgaGVscGVyOiBcIicgKyBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdLm5hbWUgKyAnXCInKTtcbiAgICB9XG4gIH0pO1xufVxuIl19


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _utils = __webpack_require__(233);
	
	exports['default'] = function (instance) {
	  instance.registerHelper('if', function (conditional, options) {
	    if (_utils.isFunction(conditional)) {
	      conditional = conditional.call(this);
	    }
	
	    // Default behavior is to render the positive path if the value is truthy and not empty.
	    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
	    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
	    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
	      return options.inverse(this);
	    } else {
	      return options.fn(this);
	    }
	  });
	
	  instance.registerHelper('unless', function (conditional, options) {
	    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
	  });
	};
	
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaWYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztxQkFBa0MsVUFBVTs7cUJBRTdCLFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVMsV0FBVyxFQUFFLE9BQU8sRUFBRTtBQUMzRCxRQUFJLGtCQUFXLFdBQVcsQ0FBQyxFQUFFO0FBQUUsaUJBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQUU7Ozs7O0FBS3RFLFFBQUksQUFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsV0FBVyxJQUFLLGVBQVEsV0FBVyxDQUFDLEVBQUU7QUFDdkUsYUFBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzlCLE1BQU07QUFDTCxhQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDekI7R0FDRixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBUyxXQUFXLEVBQUUsT0FBTyxFQUFFO0FBQy9ELFdBQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxFQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztHQUN2SCxDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJpZi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNFbXB0eSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignaWYnLCBmdW5jdGlvbihjb25kaXRpb25hbCwgb3B0aW9ucykge1xuICAgIGlmIChpc0Z1bmN0aW9uKGNvbmRpdGlvbmFsKSkgeyBjb25kaXRpb25hbCA9IGNvbmRpdGlvbmFsLmNhbGwodGhpcyk7IH1cblxuICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgaXMgdG8gcmVuZGVyIHRoZSBwb3NpdGl2ZSBwYXRoIGlmIHRoZSB2YWx1ZSBpcyB0cnV0aHkgYW5kIG5vdCBlbXB0eS5cbiAgICAvLyBUaGUgYGluY2x1ZGVaZXJvYCBvcHRpb24gbWF5IGJlIHNldCB0byB0cmVhdCB0aGUgY29uZHRpb25hbCBhcyBwdXJlbHkgbm90IGVtcHR5IGJhc2VkIG9uIHRoZVxuICAgIC8vIGJlaGF2aW9yIG9mIGlzRW1wdHkuIEVmZmVjdGl2ZWx5IHRoaXMgZGV0ZXJtaW5lcyBpZiAwIGlzIGhhbmRsZWQgYnkgdGhlIHBvc2l0aXZlIHBhdGggb3IgbmVnYXRpdmUuXG4gICAgaWYgKCghb3B0aW9ucy5oYXNoLmluY2x1ZGVaZXJvICYmICFjb25kaXRpb25hbCkgfHwgaXNFbXB0eShjb25kaXRpb25hbCkpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3VubGVzcycsIGZ1bmN0aW9uKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnNbJ2lmJ10uY2FsbCh0aGlzLCBjb25kaXRpb25hbCwge2ZuOiBvcHRpb25zLmludmVyc2UsIGludmVyc2U6IG9wdGlvbnMuZm4sIGhhc2g6IG9wdGlvbnMuaGFzaH0pO1xuICB9KTtcbn1cbiJdfQ==


/***/ },
/* 240 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	
	exports['default'] = function (instance) {
	  instance.registerHelper('log', function () /* message, options */{
	    var args = [undefined],
	        options = arguments[arguments.length - 1];
	    for (var i = 0; i < arguments.length - 1; i++) {
	      args.push(arguments[i]);
	    }
	
	    var level = 1;
	    if (options.hash.level != null) {
	      level = options.hash.level;
	    } else if (options.data && options.data.level != null) {
	      level = options.data.level;
	    }
	    args[0] = level;
	
	    instance.log.apply(instance, args);
	  });
	};
	
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsa0NBQWlDO0FBQzlELFFBQUksSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQ2xCLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM5QyxTQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDN0MsVUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN6Qjs7QUFFRCxRQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtBQUM5QixXQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDNUIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO0FBQ3JELFdBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUM1QjtBQUNELFFBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7O0FBRWhCLFlBQVEsQ0FBQyxHQUFHLE1BQUEsQ0FBWixRQUFRLEVBQVMsSUFBSSxDQUFDLENBQUM7R0FDeEIsQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoibG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvZycsIGZ1bmN0aW9uKC8qIG1lc3NhZ2UsIG9wdGlvbnMgKi8pIHtcbiAgICBsZXQgYXJncyA9IFt1bmRlZmluZWRdLFxuICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIGxldCBsZXZlbCA9IDE7XG4gICAgaWYgKG9wdGlvbnMuaGFzaC5sZXZlbCAhPSBudWxsKSB7XG4gICAgICBsZXZlbCA9IG9wdGlvbnMuaGFzaC5sZXZlbDtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGEubGV2ZWwgIT0gbnVsbCkge1xuICAgICAgbGV2ZWwgPSBvcHRpb25zLmRhdGEubGV2ZWw7XG4gICAgfVxuICAgIGFyZ3NbMF0gPSBsZXZlbDtcblxuICAgIGluc3RhbmNlLmxvZyguLi4gYXJncyk7XG4gIH0pO1xufVxuIl19


/***/ },
/* 241 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	
	exports['default'] = function (instance) {
	  instance.registerHelper('lookup', function (obj, field) {
	    return obj && obj[field];
	  });
	};
	
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9va3VwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBUyxHQUFHLEVBQUUsS0FBSyxFQUFFO0FBQ3JELFdBQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMxQixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJsb29rdXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9va3VwJywgZnVuY3Rpb24ob2JqLCBmaWVsZCkge1xuICAgIHJldHVybiBvYmogJiYgb2JqW2ZpZWxkXTtcbiAgfSk7XG59XG4iXX0=


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _utils = __webpack_require__(233);
	
	exports['default'] = function (instance) {
	  instance.registerHelper('with', function (context, options) {
	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }
	
	    var fn = options.fn;
	
	    if (!_utils.isEmpty(context)) {
	      var data = options.data;
	      if (options.data && options.ids) {
	        data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
	      }
	
	      return fn(context, {
	        data: data,
	        blockParams: _utils.blockParams([context], [data && data.contextPath])
	      });
	    } else {
	      return options.inverse(this);
	    }
	  });
	};
	
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvd2l0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUErRSxVQUFVOztxQkFFMUUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3pELFFBQUksa0JBQVcsT0FBTyxDQUFDLEVBQUU7QUFBRSxhQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUFFOztBQUUxRCxRQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUVwQixRQUFJLENBQUMsZUFBUSxPQUFPLENBQUMsRUFBRTtBQUNyQixVQUFJLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFVBQUksT0FBTyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFO0FBQy9CLFlBQUksR0FBRyxtQkFBWSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakMsWUFBSSxDQUFDLFdBQVcsR0FBRyx5QkFBa0IsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQ2hGOztBQUVELGFBQU8sRUFBRSxDQUFDLE9BQU8sRUFBRTtBQUNqQixZQUFJLEVBQUUsSUFBSTtBQUNWLG1CQUFXLEVBQUUsbUJBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7T0FDaEUsQ0FBQyxDQUFDO0tBQ0osTUFBTTtBQUNMLGFBQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM5QjtHQUNGLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6IndpdGguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FwcGVuZENvbnRleHRQYXRoLCBibG9ja1BhcmFtcywgY3JlYXRlRnJhbWUsIGlzRW1wdHksIGlzRnVuY3Rpb259IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3dpdGgnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dCkpIHsgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTsgfVxuXG4gICAgbGV0IGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmICghaXNFbXB0eShjb250ZXh0KSkge1xuICAgICAgbGV0IGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dF0sIFtkYXRhICYmIGRhdGEuY29udGV4dFBhdGhdKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.registerDefaultDecorators = registerDefaultDecorators;
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _decoratorsInline = __webpack_require__(244);
	
	var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);
	
	function registerDefaultDecorators(instance) {
	  _decoratorsInline2['default'](instance);
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Z0NBQTJCLHFCQUFxQjs7OztBQUV6QyxTQUFTLHlCQUF5QixDQUFDLFFBQVEsRUFBRTtBQUNsRCxnQ0FBZSxRQUFRLENBQUMsQ0FBQztDQUMxQiIsImZpbGUiOiJkZWNvcmF0b3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlZ2lzdGVySW5saW5lIGZyb20gJy4vZGVjb3JhdG9ycy9pbmxpbmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyhpbnN0YW5jZSkge1xuICByZWdpc3RlcklubGluZShpbnN0YW5jZSk7XG59XG5cbiJdfQ==


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _utils = __webpack_require__(233);
	
	exports['default'] = function (instance) {
	  instance.registerDecorator('inline', function (fn, props, container, options) {
	    var ret = fn;
	    if (!props.partials) {
	      props.partials = {};
	      ret = function (context, options) {
	        // Create a new partials stack frame prior to exec.
	        var original = container.partials;
	        container.partials = _utils.extend({}, original, props.partials);
	        var ret = fn(context, options);
	        container.partials = original;
	        return ret;
	      };
	    }
	
	    props.partials[options.args[0]] = options.fn;
	
	    return ret;
	  });
	};
	
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMvaW5saW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQXFCLFVBQVU7O3FCQUVoQixVQUFTLFFBQVEsRUFBRTtBQUNoQyxVQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFVBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFO0FBQzNFLFFBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQ25CLFdBQUssQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFNBQUcsR0FBRyxVQUFTLE9BQU8sRUFBRSxPQUFPLEVBQUU7O0FBRS9CLFlBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDbEMsaUJBQVMsQ0FBQyxRQUFRLEdBQUcsY0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxRCxZQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLGlCQUFTLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM5QixlQUFPLEdBQUcsQ0FBQztPQUNaLENBQUM7S0FDSDs7QUFFRCxTQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUU3QyxXQUFPLEdBQUcsQ0FBQztHQUNaLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6ImlubGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZXh0ZW5kfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVyRGVjb3JhdG9yKCdpbmxpbmUnLCBmdW5jdGlvbihmbiwgcHJvcHMsIGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIGxldCByZXQgPSBmbjtcbiAgICBpZiAoIXByb3BzLnBhcnRpYWxzKSB7XG4gICAgICBwcm9wcy5wYXJ0aWFscyA9IHt9O1xuICAgICAgcmV0ID0gZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgcGFydGlhbHMgc3RhY2sgZnJhbWUgcHJpb3IgdG8gZXhlYy5cbiAgICAgICAgbGV0IG9yaWdpbmFsID0gY29udGFpbmVyLnBhcnRpYWxzO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBleHRlbmQoe30sIG9yaWdpbmFsLCBwcm9wcy5wYXJ0aWFscyk7XG4gICAgICAgIGxldCByZXQgPSBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3JpZ2luYWw7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHByb3BzLnBhcnRpYWxzW29wdGlvbnMuYXJnc1swXV0gPSBvcHRpb25zLmZuO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59XG4iXX0=


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _utils = __webpack_require__(233);
	
	var logger = {
	  methodMap: ['debug', 'info', 'warn', 'error'],
	  level: 'info',
	
	  // Maps a given level value to the `methodMap` indexes above.
	  lookupLevel: function lookupLevel(level) {
	    if (typeof level === 'string') {
	      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
	      if (levelMap >= 0) {
	        level = levelMap;
	      } else {
	        level = parseInt(level, 10);
	      }
	    }
	
	    return level;
	  },
	
	  // Can be overridden in the host environment
	  log: function log(level) {
	    level = logger.lookupLevel(level);
	
	    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
	      var method = logger.methodMap[level];
	      if (!console[method]) {
	        // eslint-disable-line no-console
	        method = 'log';
	      }
	
	      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        message[_key - 1] = arguments[_key];
	      }
	
	      console[method].apply(console, message); // eslint-disable-line no-console
	    }
	  }
	};
	
	exports['default'] = logger;
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2xvZ2dlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUFzQixTQUFTOztBQUUvQixJQUFJLE1BQU0sR0FBRztBQUNYLFdBQVMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQztBQUM3QyxPQUFLLEVBQUUsTUFBTTs7O0FBR2IsYUFBVyxFQUFFLHFCQUFTLEtBQUssRUFBRTtBQUMzQixRQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtBQUM3QixVQUFJLFFBQVEsR0FBRyxlQUFRLE1BQU0sQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDOUQsVUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO0FBQ2pCLGFBQUssR0FBRyxRQUFRLENBQUM7T0FDbEIsTUFBTTtBQUNMLGFBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO09BQzdCO0tBQ0Y7O0FBRUQsV0FBTyxLQUFLLENBQUM7R0FDZDs7O0FBR0QsS0FBRyxFQUFFLGFBQVMsS0FBSyxFQUFjO0FBQy9CLFNBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUVsQyxRQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLEVBQUU7QUFDL0UsVUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxVQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFOztBQUNwQixjQUFNLEdBQUcsS0FBSyxDQUFDO09BQ2hCOzt3Q0FQbUIsT0FBTztBQUFQLGVBQU87OztBQVEzQixhQUFPLENBQUMsTUFBTSxPQUFDLENBQWYsT0FBTyxFQUFZLE9BQU8sQ0FBQyxDQUFDO0tBQzdCO0dBQ0Y7Q0FDRixDQUFDOztxQkFFYSxNQUFNIiwiZmlsZSI6ImxvZ2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aW5kZXhPZn0gZnJvbSAnLi91dGlscyc7XG5cbmxldCBsb2dnZXIgPSB7XG4gIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcbiAgbGV2ZWw6ICdpbmZvJyxcblxuICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG4gIGxvb2t1cExldmVsOiBmdW5jdGlvbihsZXZlbCkge1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgbGV2ZWxNYXAgPSBpbmRleE9mKGxvZ2dlci5tZXRob2RNYXAsIGxldmVsLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKGxldmVsTWFwID49IDApIHtcbiAgICAgICAgbGV2ZWwgPSBsZXZlbE1hcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsID0gcGFyc2VJbnQobGV2ZWwsIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV2ZWw7XG4gIH0sXG5cbiAgLy8gQ2FuIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGhvc3QgZW52aXJvbm1lbnRcbiAgbG9nOiBmdW5jdGlvbihsZXZlbCwgLi4ubWVzc2FnZSkge1xuICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcblxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWwpIHtcbiAgICAgIGxldCBtZXRob2QgPSBsb2dnZXIubWV0aG9kTWFwW2xldmVsXTtcbiAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7ICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIG1ldGhvZCA9ICdsb2cnO1xuICAgICAgfVxuICAgICAgY29uc29sZVttZXRob2RdKC4uLm1lc3NhZ2UpOyAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvZ2dlcjtcbiJdfQ==


/***/ },
/* 246 */
/***/ function(module, exports) {

	// Build out our basic SafeString type
	'use strict';
	
	exports.__esModule = true;
	function SafeString(string) {
	  this.string = string;
	}
	
	SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
	  return '' + this.string;
	};
	
	exports['default'] = SafeString;
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUU7QUFDMUIsTUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Q0FDdEI7O0FBRUQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsWUFBVztBQUN2RSxTQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0NBQ3pCLENBQUM7O3FCQUVhLFVBQVUiLCJmaWxlIjoic2FmZS1zdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJyArIHRoaXMuc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2FmZVN0cmluZztcbiJdfQ==


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.checkRevision = checkRevision;
	exports.template = template;
	exports.wrapProgram = wrapProgram;
	exports.resolvePartial = resolvePartial;
	exports.invokePartial = invokePartial;
	exports.noop = noop;
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	// istanbul ignore next
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	var _utils = __webpack_require__(233);
	
	var Utils = _interopRequireWildcard(_utils);
	
	var _exception = __webpack_require__(234);
	
	var _exception2 = _interopRequireDefault(_exception);
	
	var _base = __webpack_require__(232);
	
	function checkRevision(compilerInfo) {
	  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
	      currentRevision = _base.COMPILER_REVISION;
	
	  if (compilerRevision !== currentRevision) {
	    if (compilerRevision < currentRevision) {
	      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
	          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
	      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
	    } else {
	      // Use the embedded version info since the runtime doesn't know about this revision yet
	      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
	    }
	  }
	}
	
	function template(templateSpec, env) {
	  /* istanbul ignore next */
	  if (!env) {
	    throw new _exception2['default']('No environment passed to template');
	  }
	  if (!templateSpec || !templateSpec.main) {
	    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
	  }
	
	  templateSpec.main.decorator = templateSpec.main_d;
	
	  // Note: Using env.VM references rather than local var references throughout this section to allow
	  // for external users to override these as psuedo-supported APIs.
	  env.VM.checkRevision(templateSpec.compiler);
	
	  function invokePartialWrapper(partial, context, options) {
	    if (options.hash) {
	      context = Utils.extend({}, context, options.hash);
	      if (options.ids) {
	        options.ids[0] = true;
	      }
	    }
	
	    partial = env.VM.resolvePartial.call(this, partial, context, options);
	    var result = env.VM.invokePartial.call(this, partial, context, options);
	
	    if (result == null && env.compile) {
	      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
	      result = options.partials[options.name](context, options);
	    }
	    if (result != null) {
	      if (options.indent) {
	        var lines = result.split('\n');
	        for (var i = 0, l = lines.length; i < l; i++) {
	          if (!lines[i] && i + 1 === l) {
	            break;
	          }
	
	          lines[i] = options.indent + lines[i];
	        }
	        result = lines.join('\n');
	      }
	      return result;
	    } else {
	      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
	    }
	  }
	
	  // Just add water
	  var container = {
	    strict: function strict(obj, name) {
	      if (!(name in obj)) {
	        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
	      }
	      return obj[name];
	    },
	    lookup: function lookup(depths, name) {
	      var len = depths.length;
	      for (var i = 0; i < len; i++) {
	        if (depths[i] && depths[i][name] != null) {
	          return depths[i][name];
	        }
	      }
	    },
	    lambda: function lambda(current, context) {
	      return typeof current === 'function' ? current.call(context) : current;
	    },
	
	    escapeExpression: Utils.escapeExpression,
	    invokePartial: invokePartialWrapper,
	
	    fn: function fn(i) {
	      var ret = templateSpec[i];
	      ret.decorator = templateSpec[i + '_d'];
	      return ret;
	    },
	
	    programs: [],
	    program: function program(i, data, declaredBlockParams, blockParams, depths) {
	      var programWrapper = this.programs[i],
	          fn = this.fn(i);
	      if (data || depths || blockParams || declaredBlockParams) {
	        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
	      } else if (!programWrapper) {
	        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
	      }
	      return programWrapper;
	    },
	
	    data: function data(value, depth) {
	      while (value && depth--) {
	        value = value._parent;
	      }
	      return value;
	    },
	    merge: function merge(param, common) {
	      var obj = param || common;
	
	      if (param && common && param !== common) {
	        obj = Utils.extend({}, common, param);
	      }
	
	      return obj;
	    },
	
	    noop: env.VM.noop,
	    compilerInfo: templateSpec.compiler
	  };
	
	  function ret(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    var data = options.data;
	
	    ret._setup(options);
	    if (!options.partial && templateSpec.useData) {
	      data = initData(context, data);
	    }
	    var depths = undefined,
	        blockParams = templateSpec.useBlockParams ? [] : undefined;
	    if (templateSpec.useDepths) {
	      if (options.depths) {
	        depths = context !== options.depths[0] ? [context].concat(options.depths) : options.depths;
	      } else {
	        depths = [context];
	      }
	    }
	
	    function main(context /*, options*/) {
	      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
	    }
	    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
	    return main(context, options);
	  }
	  ret.isTop = true;
	
	  ret._setup = function (options) {
	    if (!options.partial) {
	      container.helpers = container.merge(options.helpers, env.helpers);
	
	      if (templateSpec.usePartial) {
	        container.partials = container.merge(options.partials, env.partials);
	      }
	      if (templateSpec.usePartial || templateSpec.useDecorators) {
	        container.decorators = container.merge(options.decorators, env.decorators);
	      }
	    } else {
	      container.helpers = options.helpers;
	      container.partials = options.partials;
	      container.decorators = options.decorators;
	    }
	  };
	
	  ret._child = function (i, data, blockParams, depths) {
	    if (templateSpec.useBlockParams && !blockParams) {
	      throw new _exception2['default']('must pass block params');
	    }
	    if (templateSpec.useDepths && !depths) {
	      throw new _exception2['default']('must pass parent depths');
	    }
	
	    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
	  };
	  return ret;
	}
	
	function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
	  function prog(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    var currentDepths = depths;
	    if (depths && context !== depths[0]) {
	      currentDepths = [context].concat(depths);
	    }
	
	    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
	  }
	
	  prog = executeDecorators(fn, prog, container, depths, data, blockParams);
	
	  prog.program = i;
	  prog.depth = depths ? depths.length : 0;
	  prog.blockParams = declaredBlockParams || 0;
	  return prog;
	}
	
	function resolvePartial(partial, context, options) {
	  if (!partial) {
	    if (options.name === '@partial-block') {
	      partial = options.data['partial-block'];
	    } else {
	      partial = options.partials[options.name];
	    }
	  } else if (!partial.call && !options.name) {
	    // This is a dynamic partial that returned a string
	    options.name = partial;
	    partial = options.partials[partial];
	  }
	  return partial;
	}
	
	function invokePartial(partial, context, options) {
	  options.partial = true;
	  if (options.ids) {
	    options.data.contextPath = options.ids[0] || options.data.contextPath;
	  }
	
	  var partialBlock = undefined;
	  if (options.fn && options.fn !== noop) {
	    options.data = _base.createFrame(options.data);
	    partialBlock = options.data['partial-block'] = options.fn;
	
	    if (partialBlock.partials) {
	      options.partials = Utils.extend({}, options.partials, partialBlock.partials);
	    }
	  }
	
	  if (partial === undefined && partialBlock) {
	    partial = partialBlock;
	  }
	
	  if (partial === undefined) {
	    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
	  } else if (partial instanceof Function) {
	    return partial(context, options);
	  }
	}
	
	function noop() {
	  return '';
	}
	
	function initData(context, data) {
	  if (!data || !('root' in data)) {
	    data = data ? _base.createFrame(data) : {};
	    data.root = context;
	  }
	  return data;
	}
	
	function executeDecorators(fn, prog, container, depths, data, blockParams) {
	  if (fn.decorator) {
	    var props = {};
	    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
	    Utils.extend(prog, props);
	  }
	  return prog;
	}
	//# sourceMappingURL=data:application/json;base64,


/***/ },
/* 248 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/* global window */
	'use strict';
	
	exports.__esModule = true;
	
	exports['default'] = function (Handlebars) {
	  /* istanbul ignore next */
	  var root = typeof global !== 'undefined' ? global : window,
	      $Handlebars = root.Handlebars;
	  /* istanbul ignore next */
	  Handlebars.noConflict = function () {
	    if (root.Handlebars === Handlebars) {
	      root.Handlebars = $Handlebars;
	    }
	    return Handlebars;
	  };
	};
	
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL25vLWNvbmZsaWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O3FCQUNlLFVBQVMsVUFBVSxFQUFFOztBQUVsQyxNQUFJLElBQUksR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLEdBQUcsTUFBTSxHQUFHLE1BQU07TUFDdEQsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7O0FBRWxDLFlBQVUsQ0FBQyxVQUFVLEdBQUcsWUFBVztBQUNqQyxRQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssVUFBVSxFQUFFO0FBQ2xDLFVBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDO0tBQy9CO0FBQ0QsV0FBTyxVQUFVLENBQUM7R0FDbkIsQ0FBQztDQUNIIiwiZmlsZSI6Im5vLWNvbmZsaWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIHdpbmRvdyAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oSGFuZGxlYmFycykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBsZXQgcm9vdCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93LFxuICAgICAgJEhhbmRsZWJhcnMgPSByb290LkhhbmRsZWJhcnM7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIEhhbmRsZWJhcnMubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChyb290LkhhbmRsZWJhcnMgPT09IEhhbmRsZWJhcnMpIHtcbiAgICAgIHJvb3QuSGFuZGxlYmFycyA9ICRIYW5kbGViYXJzO1xuICAgIH1cbiAgICByZXR1cm4gSGFuZGxlYmFycztcbiAgfTtcbn1cbiJdfQ==
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	var Handlebars = __webpack_require__(230);
	function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
	module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
	    var stack1, helper, alias1=container.escapeExpression;
	
	  return "<span style='font-size:200%;display:block;margin-bottom:20px;'>\r\n  "
	    + alias1(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : {},{"name":"title","hash":{},"data":data}) : helper)))
	    + "\r\n</span>\r\n<ul>\r\n  <li>\r\n    "
	    + alias1(container.lambda(((stack1 = (depth0 != null ? depth0.object : depth0)) != null ? stack1.name : stack1), depth0))
	    + "\r\n  </li>\r\n</ul>";
	},"useData":true});

/***/ },
/* 250 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/* =============== Functions for drawing arrows ================ */
	
	// From the website: http://www.dbp-consulting.com/tutorials/canvas/CanvasArrow.html
	/*
	  @param {int} x1,y1 - the line of the shaft starts here
	  @param {int} x2,y2 - the line of the shaft ends here
	  @param {int or function} style - type of head to draw
	      0 - filled head with back a curve drawn with arcTo
	          n.b. some browsers have an arcTo bug that make this look bizarre
	      1 - filled head with back a straight line
	      2 - unfilled but stroked head
	      3 - filled head with back a curve drawn with quadraticCurveTo
	      4 - filled head with back a curve drawn with bezierCurveTo
	          function(ctx,x0,y0,x1,y1,x2,y2,style) - a function provided by the user to draw the head. Point (x1,y1) is the same as the end of the line, and (x0,y0) and (x2,y2) are the two back corners. The style argument is the this for the function. An example that just draws little circles at each corner of the arrow head is shown later in this document.
	      default 3 (filled head with quadratic back)
	  @param {int} which - which end(s) get the arrow
	      0 - neither
	      1 - x2,y2 end
	      2 - x1,y1 end
	      3 - (that's 1+2) both ends
	      default 1 (destination end gets the arrow)
	  @param {float} angle - the angle Œ∏ from shaft to one side of arrow head - default œÄ/8 radians (22 1/2¬∞, half of a 45¬∞)
	  @param {int} length - the distance d in pixels from arrow point back along the shaft to the back of the arrow head - default 10px
	
	  Passing in a custom head drawing routine, ie:
	  var headDrawer=function(ctx,x0,y0,x1,y1,x2,y2,style)
	  {
	      var radius=3;
	      var twoPI=2*Math.PI;
	      ctx.save();
	      ctx.beginPath();
	      ctx.arc(x0,y0,radius,0,twoPI,false);
	      ctx.stroke();
	      ctx.beginPath();
	      ctx.arc(x1,y1,radius,0,twoPI,false);
	      ctx.stroke();
	      ctx.beginPath();
	      ctx.arc(x2,y2,radius,0,twoPI,false);
	      ctx.stroke();
	      ctx.restore();
	  }
	
	  Modified to support easelJS (no context editing, instead graphics-object)
	
	  */
	
	/* eslint-disable */
	function drawArrow(shape, x1, y1, x2, y2, style, which, angle, d) {
	  var graphics = shape.graphics,
	      color = '#000',
	      angle1,
	      topx,
	      topy,
	      angle2,
	      botx,
	      boty;
	
	  /* Ceason pointed to a problem when x1 or y1 were a string, and
	      concatenation would happen instead of addition */
	  if (typeof x1 === 'string') x1 = parseInt(x1, 10);
	  if (typeof y1 == 'string') y1 = parseInt(y1, 10);
	  if (typeof x2 == 'string') x2 = parseInt(x2, 10);
	  if (typeof y2 == 'string') y2 = parseInt(y2, 10);
	  style = typeof style != 'undefined' ? style : 3;
	  which = typeof which != 'undefined' ? which : 1; // end point gets arrow
	  angle = typeof angle != 'undefined' ? angle : Math.PI / 8;
	  d = typeof d != 'undefined' ? d : 10;
	  // default to using drawHead to draw the head, but if the style
	  // argument is a function, use it instead
	  var toDrawHead = typeof style != 'function' ? drawHead : style;
	
	  /* For ends with arrow we actually want to stop before we get to the arrow
	      so that wide lines won't put a flat end on the arrow. */
	  var dist = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	  var ratio = (dist - d / 3) / dist;
	  var tox, toy, fromx, fromy;
	  if (which & 1) {
	    tox = Math.round(x1 + (x2 - x1) * ratio);
	    toy = Math.round(y1 + (y2 - y1) * ratio);
	  } else {
	    tox = x2;
	    toy = y2;
	  }
	  if (which & 2) {
	    fromx = x1 + (x2 - x1) * (1 - ratio);
	    fromy = y1 + (y2 - y1) * (1 - ratio);
	  } else {
	    fromx = x1;
	    fromy = y1;
	  }
	
	  /* Original: Draw the shaft of the arrow
	     ctx.beginPath();
	     ctx.moveTo(fromx,fromy);
	     ctx.lineTo(tox,toy);
	     ctx.stroke(); */
	
	  // Modified easelJS-version:
	  graphics.beginStroke(color).moveTo(fromx, fromy).lineTo(tox, toy);
	
	  // calculate the angle of the line
	  var lineangle = Math.atan2(y2 - y1, x2 - x1);
	  // h is the line length of a side of the arrow head
	  var h = Math.abs(d / Math.cos(angle));
	
	  if (which & 1) {
	    // handle far end arrow head
	    angle1 = lineangle + Math.PI + angle;
	    topx = x2 + Math.cos(angle1) * h;
	    topy = y2 + Math.sin(angle1) * h;
	    angle2 = lineangle + Math.PI - angle;
	    botx = x2 + Math.cos(angle2) * h;
	    boty = y2 + Math.sin(angle2) * h;
	    toDrawHead(graphics, topx, topy, x2, y2, botx, boty, style);
	  }
	  if (which & 2) {
	    // handle near end arrow head
	    angle1 = lineangle + angle;
	    topx = x1 + Math.cos(angle1) * h;
	    topy = y1 + Math.sin(angle1) * h;
	    angle2 = lineangle - angle;
	    botx = x1 + Math.cos(angle2) * h;
	    boty = y1 + Math.sin(angle2) * h;
	    toDrawHead(graphics, topx, topy, x1, y1, botx, boty, style);
	  }
	
	  return true;
	
	  function drawHead(graphics, x0, y0, x1, y1, x2, y2, style) {
	    var backdist;
	    x0 = +x0, y0 = +y0, x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2;
	    // all cases do this.
	    graphics.beginStroke('#F00').moveTo(x0, y0).lineTo(x1, y1).lineTo(x2, y2);
	    switch (style) {
	      case 0:
	        // curved filled, add the bottom as an arcTo curve and fill
	        backdist = Math.sqrt((x2 - x0) * (x2 - x0) + (y2 - y0) * (y2 - y0));
	        graphics.arcTo(x1, y1, x0, y0, 0.55 * backdist);
	        graphics.fill();
	        break;
	      case 1:
	        // straight filled, add the bottom as a line and fill.
	        graphics.beginStroke('#F00').moveTo(x0, y0).lineTo(x1, y1).lineTo(x2, y2).lineTo(x0, y0).fill();
	        break;
	      case 2:
	        // unfilled head, just stroke.
	        break;
	      case 3:
	        // filled head, add the bottom as a quadraticCurveTo curve and fill
	        var cpx = (x0 + x1 + x2) / 3;
	        var cpy = (y0 + y1 + y2) / 3;
	        graphics.beginFill().quadraticCurveTo(cpx, cpy, x0, y0);
	        break;
	      case 4:
	        // filled head, add the bottom as a bezierCurveTo curve and fill
	        var cp1x, cp1y, cp2x, cp2y;
	        var shiftamt = 5;
	        if (x2 === x0) {
	          // Avoid a divide by zero if x2==x0
	          backdist = y2 - y0;
	          cp1x = (x1 + x0) / 2;
	          cp2x = (x1 + x0) / 2;
	          cp1y = y1 + backdist / shiftamt;
	          cp2y = y1 - backdist / shiftamt;
	        } else {
	          backdist = Math.sqrt((x2 - x0) * (x2 - x0) + (y2 - y0) * (y2 - y0));
	          var xback = (x0 + x2) / 2;
	          var yback = (y0 + y2) / 2;
	          var xmid = (xback + x1) / 2;
	          var ymid = (yback + y1) / 2;
	
	          var m = (y2 - y0) / (x2 - x0);
	          var dx = backdist / (2 * Math.sqrt(m * m + 1)) / shiftamt;
	          var dy = m * dx;
	          cp1x = xmid - dx;
	          cp1y = ymid - dy;
	          cp2x = xmid + dx;
	          cp2y = ymid + dy;
	        }
	
	        graphics.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x0, y0);
	        graphics.fill();
	        break;
	    }
	  }
	}
	/* eslint-enable */
	/* eslint-disable */
	function drawArcedArrow(graphics, x, y, r, startangle, endangle, anticlockwise, style, which, angle, d) {
	  var sx, sy, lineangle, destx, desty;
	
	  style = typeof style != 'undefined' ? style : 3;
	  which = typeof which != 'undefined' ? which : 1; // end point gets arrow
	  angle = typeof angle != 'undefined' ? angle : Math.PI / 8;
	  d = typeof d != 'undefined' ? d : 10;
	  // Old: ctx.save();
	  graphics.beginPath();
	  graphics.arc(x, y, r, startangle, endangle, anticlockwise);
	  graphics.stroke();
	
	  graphics.strokeStyle = 'rgba(0,0,0,0)'; // don't show the shaft
	  if (which & 1) {
	    // draw the destination end
	    sx = Math.cos(startangle) * r + x;
	    sy = Math.sin(startangle) * r + y;
	    lineangle = Math.atan2(x - sx, sy - y);
	
	    if (anticlockwise) {
	      destx = sx + 10 * Math.cos(lineangle);
	      desty = sy + 10 * Math.sin(lineangle);
	    } else {
	      destx = sx - 10 * Math.cos(lineangle);
	      desty = sy - 10 * Math.sin(lineangle);
	    }
	    drawArrow(graphics, sx, sy, destx, desty, style, 2, angle, d);
	  }
	  if (which & 2) {
	    // draw the origination end
	    sx = Math.cos(endangle) * r + x;
	    sy = Math.sin(endangle) * r + y;
	    lineangle = Math.atan2(x - sx, sy - y);
	    if (anticlockwise) {
	      destx = sx - 10 * Math.cos(lineangle);
	      desty = sy - 10 * Math.sin(lineangle);
	    } else {
	      destx = sx + 10 * Math.cos(lineangle);
	      desty = sy + 10 * Math.sin(lineangle);
	    }
	    drawArrow(graphics, sx, sy, destx, desty, style, 2, angle, d);
	  }
	}
	/* eslint-enable */
	/* =============================== */
	
	function drawLine(graphics, from, to) {
	  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : { color: '#000000', style: 5 };
	  var color = options.color,
	      style = options.style;
	
	
	  graphics.lineStyle(style, color);
	  graphics.moveTo(from.x, from.y);
	  graphics.lineTo(to.x, to.y);
	
	  return graphics;
	}
	
	exports.drawArrow = drawArrow;
	exports.drawArcedArrow = drawArcedArrow;
	exports.drawLine = drawLine;

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Preload = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _pixi = __webpack_require__(9);
	
	var PIXI = _interopRequireWildcard(_pixi);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Preload = function () {
	  /**
	   * Preloads assets before initializing map.
	   *
	   * @namespace flatworld
	   * @class Preload
	   * @constructor
	   * @requires Q for promises
	   * @todo should you use PIXI here or just https://github.com/englercj/resource-loader straight?
	   */
	  function Preload(baseUrl) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { concurrency: 15, crossOrigin: false };
	
	    _classCallCheck(this, Preload);
	
	    var concurrency = options.concurrency;
	
	
	    this.preloaderClass = new PIXI.loaders.Loader(baseUrl, concurrency);
	  }
	  /**
	   * @method resolveOnComplete
	   * @return {Promise} Return promise object, that will be resolved when the preloading is finished
	   **/
	
	
	  _createClass(Preload, [{
	    key: 'resolveOnComplete',
	    value: function resolveOnComplete() {
	      var _this = this;
	
	      var promise = new Promise(function (resolve, reject) {
	        try {
	          _this.preloaderClass.load();
	
	          _this.preloaderClass.once('complete', function (loader, resources) {
	            resolve(loader, resources);
	          });
	        } catch (e) {
	          reject(e);
	        }
	      });
	
	      return promise;
	    }
	    /**
	     * @method addResource
	     **/
	
	  }, {
	    key: 'addResource',
	    value: function addResource(resource) {
	      this.preloaderClass.add(resource);
	    }
	    /**
	     * Preload assets
	     *
	     * @method loadManifest
	     **/
	
	  }, {
	    key: 'loadManifest',
	    value: function loadManifest() {
	      return this;
	    }
	    /**
	     * Error handler if something goes wrong when preloading
	     *
	     * @method setErrorHandler
	     **/
	
	  }, {
	    key: 'setErrorHandler',
	    value: function setErrorHandler(errorCB) {
	      this.preloaderClass.on('error', errorCB);
	
	      return this;
	    }
	    /**
	     * Progress handler for loading. You should look easeljs docs for more information
	     *
	     * @method setProgressHandler
	     **/
	
	  }, {
	    key: 'setProgressHandler',
	    value: function setProgressHandler(progressCB) {
	      this.preloaderClass.on('error', progressCB);
	
	      return this;
	    }
	    /**
	     * Activate sound preloading also
	     *
	     * @method activateSound
	     **/
	
	  }, {
	    key: 'activateSound',
	    value: function activateSound() {
	      this.preloaderClass.installPlugin();
	    }
	  }]);
	
	  return Preload;
	}();
	
	/*---------------------
	--------- API ---------
	----------------------*/
	
	
	exports.Preload = Preload;

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.hexaFactory = undefined;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _pixi = __webpack_require__(9);
	
	var PIXI = _interopRequireWildcard(_pixi);
	
	var _core = __webpack_require__(2);
	
	var _Objects = __webpack_require__(219);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	/*---------------------
	------- PUBLIC --------
	----------------------*/
	/**
	 * This constructs a whole horizontally aligned hexagonal map. Some polyfills are needed and added for IE11 (
	 * http://babeljs.io/docs/usage/polyfill/ ). These are found in utils
	 *
	 * @class factories.hexaFactory
	 * @requires PIXI in global space
	 * @param {HTMLElement} mapCanvas              Canvas element used for the map
	 * @param {Object} datas                       Object with mapDatas to construct the map structure
	 * @param {Object} datas.map                   Holds all the stage, layer and object data needed to construct a full map
	 * @param {Object} datas.game                  More general game data (like turn number, map size etc.)
	 * @param {Object} datas.type                  Type data such as different unit types and their graphics (tank, soldier etc.)
	 * @param {UITheme} UITheme                    An instance of the UITheme class that the map uses.
	 * @param {Object} {}                          Optional options
	 * @param {Object} {}.isHiddenByDefault        When we use mapMovement plugin, it is best to keep all the obejcts hidden at the beginnig.
	 * @param {Function} {}.trackFPSCB             Callback to track FPS
	 **/
	function hexaFactory(mapCanvas, datas) {
	  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	      _ref$trackFPSCB = _ref.trackFPSCB,
	      trackFPSCB = _ref$trackFPSCB === undefined ? false : _ref$trackFPSCB,
	      _ref$isHiddenByDefaul = _ref.isHiddenByDefault,
	      isHiddenByDefault = _ref$isHiddenByDefaul === undefined ? true : _ref$isHiddenByDefaul,
	      minimapCanvas = _ref.minimapCanvas,
	      _ref$scaleMode = _ref.scaleMode,
	      scaleMode = _ref$scaleMode === undefined ? _core.constants.DEFAULT_SCALE_MODE : _ref$scaleMode;
	
	  _core.log.debug('============== Hexagonal Map factory started =============');
	  var pixelRatio = _core.utils.environment.getPixelRatio();
	  var DATA_MAP = typeof datas.map === 'string' ? JSON.parse(datas.map) : datas.map;
	  var DATA_TYPE = typeof datas.type === 'string' ? JSON.parse(datas.type) : datas.type;
	  var DATA_GAME = typeof datas.game === 'string' ? JSON.parse(datas.game) : datas.game;
	  var DATA_GRAPHIC = typeof datas.graphic === 'string' ? JSON.parse(datas.graphic) : datas.graphic;
	  var WINDOW_SIZE = _core.utils.resize.getWindowSize();
	  /*---------------------
	  ------ VARIABLES ------
	  ----------------------*/
	  var functionsInObj = {
	    ObjectTerrain: _Objects.ObjectHexaTerrain,
	    ObjectUnit: _Objects.ObjectHexaUnit
	  };
	  var mapProperties = {
	    mapSize: DATA_GAME.mapSize,
	    bounds: {
	      x: 0,
	      y: 0,
	      width: WINDOW_SIZE.x,
	      height: WINDOW_SIZE.y
	    },
	    rendererOptions: {
	      resolution: pixelRatio, // We might need this later on, when doing mobile optimizations, for different pizel density devices
	      autoResize: true,
	      transparent: true,
	      antialias: false // TEST. Only should work in chrome atm.?
	    },
	    subcontainers: {
	      width: 500,
	      height: 500,
	      maxDetectionOffset: 100,
	      isHiddenByDefault: isHiddenByDefault
	    },
	    trackFPSCB: trackFPSCB,
	    defaultScaleMode: scaleMode,
	    minimapCanvas: minimapCanvas
	  };
	  var map = new _core.Flatworld(mapCanvas, mapProperties);
	
	  PIXI.settings.SCALE_MODE = 1;
	
	  DATA_MAP.layers.forEach(function (layerData) {
	    if ((typeof layerData === 'undefined' ? 'undefined' : _typeof(layerData)) !== 'object') {
	      _core.log.error('Problem in hexaFactory, with layerData:' + JSON.stringify(layerData));
	      throw new Error('Problem in hexaFactory, with layerData:', layerData);
	    }
	
	    var renderer = map.getRenderer();
	    var layerOptions = {
	      name: layerData.name,
	      coord: layerData.coord,
	      drawOutsideViewport: {
	        x: renderer.width,
	        y: renderer.height
	      },
	      selectable: layerData.name === 'unitLayer' ? true : false
	    };
	    var thisLayer = void 0;
	
	    try {
	      thisLayer = map.addLayer(layerOptions);
	
	      layerData.objectGroups.forEach(function (objectGroup) {
	        var spritesheetType = objectGroup.typeImageData;
	
	        if (!spritesheetType) {
	          _core.log.error('Error with spritesheetType-data');
	          return;
	        }
	
	        objectGroup.objects.forEach(function (object) {
	          var objTypeData = void 0,
	              objectOptions = void 0,
	              texture = void 0,
	              newObject = void 0;
	
	          try {
	            objTypeData = DATA_TYPE[spritesheetType][object.objType];
	            if (!objTypeData) {
	              var error = new Error('Bad mapData for type:' + spritesheetType.toString() + object.objType.toString() + object.name.toString());
	              _core.log.error(error);
	              throw error;
	            }
	
	            texture = PIXI.Texture.fromFrame(objTypeData.image);
	            objectOptions = {
	              data: {
	                typeData: objTypeData,
	                activeData: object.data
	              },
	              radius: DATA_GAME.hexagonRadius,
	              minimapColor: objTypeData.minimapColor,
	              minimapSize: objTypeData.minimapSize
	            };
	
	            newObject = new functionsInObj[objectGroup.type](texture, object.coord, objectOptions);
	            /** @todo This is here to test using higher resolution sprites, that would handle zooming more gracefully. This should not really be here, but rather as some kind of option or in the object classes that are extended */
	            if (DATA_GRAPHIC[objectGroup.typeImageData].initialScale) {
	              newObject.scale.x = DATA_GRAPHIC[objectGroup.typeImageData].initialScale;
	              newObject.scale.y = DATA_GRAPHIC[objectGroup.typeImageData].initialScale;
	            }
	
	            thisLayer.addChild(newObject);
	          } catch (e) {
	            _core.log.error(e);
	          }
	        });
	      });
	    } catch (e) {
	      _core.log.error('Problem:' + JSON.stringify(layerData.type) + ' ---- ' + JSON.stringify(e.stack));
	    }
	  });
	
	  map.moveMap(DATA_GAME.startPoint);
	
	  return map;
	}
	
	/*---------------------
	--------- API ---------
	----------------------*/
	exports.hexaFactory = hexaFactory;

/***/ }
/******/ ])
});
;
//# sourceMappingURL=flatworld.js.map